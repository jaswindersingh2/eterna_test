%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAGGUCCGGAAGGAAACUUCCCCAGCAAGUGGAAGCACUAGAUGAAAGCAUCUGAAGGGGACCUUGGACUUUCGAGUCCAAAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[105.20087433 203.27404785]
[115.09556580 192.00041199]
[127.00932312 182.88655090]
[140.47929382 176.28657532]
[154.98217773 172.45686340]
[169.95298767 171.54617310]
[157.92114258 162.58879089]
[145.88929749 153.63140869]
[133.85743713 144.67404175]
[121.82559967 135.71665955]
[109.79374695 126.75927734]
[97.76190186 117.80189514]
[82.83957672 116.27737427]
[69.24495697 122.61664581]
[55.65034103 128.95591736]
[42.05572510 135.29519653]
[28.46110725 141.63446045]
[19.50329590 155.37089539]
[3.14519310 154.21136475]
[-3.78538609 139.34869385]
[5.84114361 126.07232666]
[22.12183380 128.03985596]
[35.71644974 121.70057678]
[49.31106567 115.36130524]
[62.90568542 109.02202606]
[76.50029755 102.68275452]
[77.37099457 95.23346710]
[63.59771347 101.17456055]
[51.56599426 92.21701050]
[53.30771255 77.31847382]
[67.08113098 71.37767792]
[79.11238861 80.33489227]
[79.98308563 72.88560486]
[68.21685028 63.58207321]
[56.45061874 54.27854156]
[44.68438339 44.97500610]
[28.38879776 43.13491440]
[22.08349419 27.99638176]
[32.25482559 15.13263321]
[48.43940353 17.77679062]
[53.98791504 33.20877075]
[65.75415039 42.51230621]
[77.52038574 51.81583786]
[89.28662109 61.11936951]
[102.27700043 53.61936951]
[100.10302734 38.77774429]
[97.92904663 23.93612099]
[95.75506592 9.09449577]
[93.58109283 -5.74712896]
[82.99085999 -18.26827240]
[88.79323578 -33.60660553]
[105.01924133 -35.98336411]
[114.97694397 -22.95354462]
[108.42271423 -7.92110682]
[110.59669495 6.92051792]
[112.77066803 21.76214218]
[114.94464874 36.60376740]
[117.11862946 51.44539261]
[127.29806519 65.00930786]
[131.08244324 79.42577362]
[129.14739990 92.21028900]
[123.02091217 101.43869781]
[114.78703308 106.00886536]
[106.71927643 105.77005005]
[118.75112915 114.72743225]
[130.78297424 123.68480682]
[142.81481934 132.64218140]
[154.84666443 141.59956360]
[166.87852478 150.55694580]
[178.91036987 159.51432800]
[193.55480957 162.76092529]
[208.24491882 159.72766113]
[222.93502808 156.69439697]
[237.62513733 153.66113281]
[252.31524658 150.62786865]
[264.19943237 139.32751465]
[279.84921265 144.22822571]
[283.16540527 160.28857422]
[270.73660278 170.98704529]
[255.34851074 165.31797791]
[240.65840149 168.35124207]
[225.96829224 171.38450623]
[211.27818298 174.41777039]
[196.58807373 177.45103455]
[209.77261353 184.60418701]
[221.29798889 194.20448303]
[230.71643066 205.87895203]
[237.66201782 219.17401123]
[241.86491394 233.57316589]
[243.16184998 248.51699829]
[241.50241089 263.42492676]
[236.95109558 277.71777344]
[229.68470764 290.84027100]
[219.98556519 302.28256226]
[208.23045349 311.60015869]
[194.87609863 318.43106079]
[180.44129944 322.50985718]
[165.48686218 323.67810059]
[150.59378052 321.89041138]
[136.34063721 317.21624756]
[123.28118134 309.83715820]
[111.92278290 300.03988647]
[102.70671082 288.20501709]
[95.99102783 274.79235840]
[92.03662872 260.32296753]
[90.99714661 245.35903931]
[92.91297150 230.48188782]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 70]
[7 69]
[8 68]
[9 67]
[10 66]
[11 65]
[12 64]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[33 44]
[34 43]
[35 42]
[36 41]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
