%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGAUCGUACACAAAUGAAAAUAGCGAAAGCAAAGUAGUAAAAGAUCAAGAGAAAUCAAGCCUUUUUCUUCGGAGGGAGAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[192.56515503 229.09304810]
[183.06854248 220.33775330]
[174.71624756 210.48324585]
[167.63453674 199.67800903]
[161.93049622 188.08493042]
[157.69049072 175.87882996]
[154.97877502 163.24377441]
[153.83654785 150.37034607]
[154.28134155 137.45278931]
[156.30674744 124.68602753]
[141.93690491 120.38397980]
[127.56707001 116.08193207]
[113.19722748 111.77988434]
[95.42151642 117.08712769]
[82.68092346 103.60306549]
[68.08525085 100.14382935]
[53.48957825 96.68459320]
[38.84513855 93.43799591]
[24.15502930 90.40473175]
[17.39287376 103.89308929]
[7.36936712 115.17102051]
[-5.23207521 123.46957397]
[-19.55226517 128.22294617]
[-34.61482620 129.10705566]
[-49.39277267 126.06160736]
[-62.87851334 119.29424286]
[-74.15257263 109.26638031]
[-82.44626617 96.66173553]
[-87.19411469 82.33971405]
[-88.07239532 67.27680969]
[-85.02124023 52.50004196]
[-78.24867249 39.01691437]
[-68.21646118 27.74672890]
[-55.60861206 19.45790482]
[-41.28475571 14.71558666]
[-26.22151756 13.84311581]
[-11.44592857 16.89997864]
[2.03458333 23.67775154]
[13.30089474 33.71431732]
[21.58485031 46.32536316]
[26.32163811 60.65104675]
[27.18829155 75.71462250]
[41.87840271 78.74788666]
[49.17816925 76.99108124]
[56.94881439 82.08892059]
[71.54448700 85.54815674]
[86.14015961 89.00739288]
[94.44827271 83.20384216]
[104.57848358 82.91287231]
[113.20601654 88.22996521]
[117.49927521 97.41004181]
[131.86911011 101.71208954]
[146.23895264 106.01413727]
[160.60879517 110.31618500]
[168.21336365 94.44717407]
[178.35441589 80.06958008]
[190.74763489 67.58494568]
[205.04576111 57.34173965]
[220.84838867 49.62566376]
[237.71321106 44.65166092]
[255.16831970 42.55794144]
[272.72546387 43.40212250]
[289.89370728 47.15967560]
[306.19314575 53.72459793]
[321.16827393 62.91244507]
[334.40084839 74.46547699]
[345.52136230 88.05990601]
[354.21960449 103.31497955]
[360.25311279 119.80361176]
[363.45404053 137.06437683]
[378.44769287 136.62811279]
[393.44134521 136.19183350]
[408.43499756 135.75556946]
[423.42864990 135.31929016]
[438.42230225 134.88302612]
[453.41595459 134.44674683]
[468.40960693 134.01048279]
[483.40325928 133.57421875]
[497.06921387 124.50920105]
[511.63021851 132.05302429]
[512.10717773 148.44523621]
[498.00942993 156.82293701]
[483.83953857 148.56787109]
[468.84588623 149.00413513]
[453.85223389 149.44041443]
[438.85858154 149.87667847]
[423.86492920 150.31294250]
[408.87127686 150.74922180]
[393.87762451 151.18548584]
[378.88397217 151.62176514]
[363.89031982 152.05802917]
[362.56304932 164.88432312]
[359.67294312 177.45228577]
[355.26330566 189.57223511]
[349.40039062 201.06117249]
[342.17239380 211.74560547]
[333.68817139 221.46415710]
[324.07546997 230.06996155]
[313.47918701 237.43295288]
[302.05902100 243.44178772]
[289.98712158 248.00552368]
[277.44561768 251.05502319]
[264.62359619 252.54397583]
[251.71455383 252.44963074]
[238.91326904 250.77310181]
[226.41294861 247.53939819]
[214.40226746 242.79701233]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 54]
[11 53]
[12 52]
[13 51]
[15 47]
[16 46]
[17 45]
[18 43]
[19 42]
[70 91]
[71 90]
[72 89]
[73 88]
[74 87]
[75 86]
[76 85]
[77 84]
[78 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
