%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:14:52 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (1063)
} def

/sequence { (\
GGAAACGUGGAUCGGGCAGGCGGGCCAGGCCACGCCACUUUCCGCGUCAAUGACCGGAGGCCCUAUCCACCCGGUUUCGACCGGGUAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 6 0.300102124 ubox
1 8 0.024313620 ubox
1 68 0.007861882 ubox
1 72 0.024251935 ubox
1 78 0.005417969 ubox
1 82 0.003739283 ubox
1 86 0.004469691 ubox
1 95 0.063490433 ubox
1 98 0.065448684 ubox
1 101 0.076862236 ubox
1 104 0.077923458 ubox
1 107 0.019848350 ubox
2 6 0.044621427 ubox
2 8 0.011188086 ubox
2 67 0.007771719 ubox
2 71 0.024314647 ubox
2 77 0.005267343 ubox
2 78 0.026645128 ubox
2 86 0.006179144 ubox
2 95 0.033554133 ubox
2 98 0.034346416 ubox
2 101 0.036345340 ubox
2 104 0.036475721 ubox
2 107 0.011981008 ubox
3 8 0.016967237 ubox
3 66 0.007289160 ubox
3 76 0.005193643 ubox
3 77 0.026849992 ubox
3 86 0.006213649 ubox
4 8 0.009618480 ubox
4 75 0.004218646 ubox
4 76 0.026853479 ubox
4 86 0.006570260 ubox
5 75 0.026872953 ubox
5 86 0.072319748 ubox
6 73 0.005740099 ubox
6 74 0.026762543 ubox
6 85 0.074887541 ubox
6 91 0.036661375 ubox
7 68 0.005575437 ubox
7 70 0.524920540 ubox
7 72 0.003953375 ubox
7 95 0.120582208 ubox
7 98 0.121002359 ubox
7 101 0.117545610 ubox
7 104 0.116777761 ubox
7 107 0.044204072 ubox
8 69 0.653601228 ubox
8 87 0.006130651 ubox
8 88 0.009584317 ubox
8 89 0.009990849 ubox
8 90 0.009410071 ubox
8 91 0.005717002 ubox
8 92 0.009328775 ubox
8 93 0.009785759 ubox
8 94 0.115991305 ubox
8 96 0.011525288 ubox
8 97 0.116360476 ubox
8 99 0.009057357 ubox
8 100 0.113060803 ubox
8 102 0.008608149 ubox
8 103 0.112313996 ubox
8 105 0.007214506 ubox
8 106 0.042882026 ubox
9 68 0.999187616 ubox
9 95 0.010264129 ubox
9 98 0.006447284 ubox
9 101 0.006279455 ubox
9 104 0.004886787 ubox
10 67 0.999874495 ubox
11 66 0.999223706 ubox
12 65 0.969262879 ubox
12 92 0.007882845 ubox
13 91 0.007906163 ubox
14 62 0.004346337 ubox
14 63 0.998738208 ubox
14 64 0.009849684 ubox
15 61 0.004363733 ubox
15 62 0.999937056 ubox
15 63 0.008782009 ubox
16 61 0.999923614 ubox
16 62 0.007366004 ubox
17 59 0.026983503 ubox
17 60 0.996720569 ubox
18 39 0.025475334 ubox
18 40 0.008767570 ubox
19 31 0.004195588 ubox
19 36 0.998811552 ubox
19 38 0.013883036 ubox
20 30 0.004200272 ubox
20 35 0.999947725 ubox
20 36 0.004890380 ubox
21 29 0.004189935 ubox
21 34 0.999950765 ubox
22 31 0.008433538 ubox
22 33 0.996115411 ubox
23 30 0.009312996 ubox
23 31 0.998803287 ubox
23 36 0.003366408 ubox
24 30 0.999645707 ubox
24 31 0.008289565 ubox
24 35 0.003389455 ubox
25 29 0.992380769 ubox
25 34 0.003401604 ubox
38 59 0.114303299 ubox
38 60 0.029989708 ubox
39 58 0.069137302 ubox
39 59 0.059742815 ubox
39 60 0.049102380 ubox
40 57 0.014207289 ubox
40 58 0.050552493 ubox
40 59 0.833001730 ubox
41 56 0.003676900 ubox
41 57 0.008098492 ubox
41 58 0.981731529 ubox
41 59 0.011318331 ubox
42 56 0.006618908 ubox
42 57 0.999751835 ubox
43 56 0.999919918 ubox
43 57 0.003630465 ubox
44 54 0.005758031 ubox
44 55 0.999372196 ubox
45 52 0.017550786 ubox
46 51 0.011729106 ubox
46 54 0.999211328 ubox
47 52 0.008292900 ubox
47 53 0.998676885 ubox
48 52 0.990278495 ubox
68 91 0.003415874 ubox
69 86 0.720064247 ubox
70 84 0.003215165 ubox
70 85 0.849889529 ubox
71 84 0.998191808 ubox
71 85 0.021576042 ubox
72 83 0.998969202 ubox
72 84 0.015485258 ubox
73 82 0.999118595 ubox
73 98 0.003406945 ubox
74 81 0.998581536 ubox
74 95 0.030509916 ubox
75 79 0.035974512 ubox
75 80 0.923085566 ubox
75 94 0.030587136 ubox
76 80 0.028208674 ubox
76 93 0.030595658 ubox
77 92 0.030633747 ubox
78 91 0.030633468 ubox
80 86 0.003681953 ubox
81 85 0.003943223 ubox
82 91 0.006129071 ubox
83 95 0.003608700 ubox
83 98 0.003517858 ubox
84 95 0.005404055 ubox
84 98 0.004244120 ubox
84 101 0.003557347 ubox
85 95 0.110252044 ubox
85 98 0.073123015 ubox
85 101 0.058285718 ubox
85 104 0.054026237 ubox
85 107 0.013803574 ubox
86 90 0.007593570 ubox
86 91 0.014390396 ubox
86 92 0.013441312 ubox
86 93 0.018730428 ubox
86 94 0.108217441 ubox
86 96 0.006973752 ubox
86 97 0.071384520 ubox
86 99 0.005520251 ubox
86 100 0.056643433 ubox
86 102 0.004871235 ubox
86 103 0.052509138 ubox
86 105 0.003565252 ubox
86 106 0.013756243 ubox
91 95 0.046184375 ubox
91 98 0.108551098 ubox
91 101 0.045301520 ubox
91 104 0.033885234 ubox
91 107 0.009976795 ubox
9 68 0.9500000 lbox
10 67 0.9500000 lbox
11 66 0.9500000 lbox
12 65 0.9500000 lbox
14 63 0.9500000 lbox
15 62 0.9500000 lbox
16 61 0.9500000 lbox
17 60 0.9500000 lbox
19 36 0.9500000 lbox
20 35 0.9500000 lbox
21 34 0.9500000 lbox
22 33 0.9500000 lbox
23 31 0.9500000 lbox
24 30 0.9500000 lbox
25 29 0.9500000 lbox
40 59 0.9500000 lbox
41 58 0.9500000 lbox
42 57 0.9500000 lbox
43 56 0.9500000 lbox
44 55 0.9500000 lbox
46 54 0.9500000 lbox
47 53 0.9500000 lbox
48 52 0.9500000 lbox
69 86 0.9500000 lbox
70 85 0.9500000 lbox
71 84 0.9500000 lbox
72 83 0.9500000 lbox
73 82 0.9500000 lbox
74 81 0.9500000 lbox
75 80 0.9500000 lbox
showpage
end
%%EOF
