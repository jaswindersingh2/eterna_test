%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:14:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGCUAGGCUGCAAAAGCAAAAAAGAUAGGCUGGAAACAGGCUAUCAGCGCAGGCUAGCAAAAAGUACCGCUUCGGCGGUACAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[219.68748474 216.81269836]
[216.99243164 208.88414001]
[215.29612732 200.68185425]
[214.62496948 192.33116150]
[214.98965454 183.95970154]
[216.38502502 175.69549561]
[218.79017639 167.66497803]
[205.38569641 160.93299866]
[191.98120117 154.20100403]
[178.57672119 147.46902466]
[165.17222595 140.73703003]
[150.32621765 141.93934631]
[141.46643066 128.83154297]
[128.06195068 122.09954834]
[114.65745544 115.36756134]
[101.25296783 108.63557434]
[98.13466644 109.44857025]
[94.63822937 109.06951141]
[91.23399353 107.35181427]
[88.44079590 104.33615112]
[86.75193787 100.26340485]
[74.21961975 92.02076721]
[67.02742004 95.33661652]
[59.19363785 95.85227203]
[51.76072311 93.54864502]
[45.70008469 88.77853394]
[41.78516769 82.21356201]
[40.49289703 74.74999237]
[41.94602966 67.38641357]
[30.74065399 57.41447449]
[19.53527832 47.44253540]
[8.32990265 37.47059631]
[-2.87547350 27.49865913]
[-18.32827377 24.10431862]
[-22.69213867 9.86332417]
[-33.89751434 -0.10861356]
[-45.10289001 -10.08055115]
[-61.26391602 -12.86503506]
[-66.67832184 -28.34457779]
[-55.77623749 -40.59514999]
[-39.77278900 -37.01441574]
[-35.13095474 -21.28592682]
[-23.92557716 -11.31398964]
[-12.72020149 -1.34205163]
[1.93111503 1.33902884]
[7.09646463 16.29328346]
[18.30183983 26.26522255]
[29.50721741 36.23715973]
[40.71259308 46.20909882]
[51.91796875 56.18103409]
[74.29190826 57.82974243]
[82.46225739 79.48844910]
[94.99457550 87.73108673]
[107.98495483 95.23108673]
[121.38944244 101.96307373]
[134.79393005 108.69506073]
[148.19842529 115.42704773]
[164.00320435 114.70625305]
[171.90420532 127.33254242]
[185.30870056 134.06452942]
[198.71319580 140.79652405]
[212.11767578 147.52850342]
[225.52217102 154.26049805]
[243.04643250 136.06021118]
[265.99597168 125.55485535]
[291.17276001 124.18752289]
[315.07598877 132.12936401]
[334.38885498 148.25843811]
[346.43893433 170.31813049]
[361.12902832 167.28486633]
[375.81915283 164.25160217]
[390.50924683 161.21833801]
[405.19937134 158.18507385]
[419.88946533 155.15182495]
[434.57958984 152.11856079]
[446.46377563 140.81820679]
[462.11355591 145.71891785]
[465.42974854 161.77926636]
[453.00094604 172.47773743]
[437.61285400 166.80867004]
[422.92272949 169.84193420]
[408.23263550 172.87518311]
[393.54251099 175.90844727]
[378.85241699 178.94171143]
[364.16229248 181.97497559]
[349.47219849 185.00823975]
[349.73831177 193.33726501]
[348.97430420 201.63722229]
[347.19137573 209.78115845]
[344.41638184 217.64447021]
[340.69134521 225.10676575]
[336.07284546 232.05375671]
[330.63107300 238.37896729]
[324.44897461 243.98539734]
[317.62075806 248.78701782]
[310.25054932 252.71002197]
[302.45086670 255.69406128]
[294.34082031 257.69308472]
[286.04428101 258.67611694]
[277.68807983 258.62768555]
[269.39999390 257.54806519]
[261.30679321 255.45338440]
[253.53233337 252.37521362]
[246.19566345 248.36021423]
[239.40916443 243.46939087]
[233.27685547 237.77717590]
[227.89282227 231.37028503]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 63]
[8 62]
[9 61]
[10 60]
[11 59]
[13 57]
[14 56]
[15 55]
[16 54]
[21 53]
[22 52]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[35 44]
[36 43]
[37 42]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
