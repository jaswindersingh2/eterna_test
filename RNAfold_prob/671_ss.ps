%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGAUCAAGGAAGAAAAAAAAAAUUCCAAGAAGGAAAAAAAAAACUUCAAGAUCAAAAAAAAAAAGAUCUUCUUCGGAAGAUCAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[167.87034607 180.53793335]
[163.65594482 169.76644897]
[160.79585266 158.55767822]
[159.33369446 147.08122253]
[159.29190063 135.51077271]
[160.67144775 124.02143860]
[146.18255615 120.13915253]
[131.69367981 116.25686646]
[117.20478821 112.37458038]
[106.97676849 120.01148987]
[94.21775818 120.38874054]
[83.55639648 113.36946869]
[78.86035156 101.50009918]
[64.49050903 97.19805145]
[50.12067032 92.89600372]
[35.75082397 88.59395599]
[28.24531174 100.31809998]
[17.94237900 109.66046143]
[5.56486130 115.97470856]
[-8.02123356 118.82659149]
[-21.86731148 118.02389526]
[-35.00843048 113.62928772]
[-46.53054047 105.95555115]
[-55.63405991 95.54328918]
[-61.68937302 83.12287903]
[-64.28035736 69.56319427]
[-63.23299789 55.81087875]
[-77.32838440 50.68057632]
[-91.42377472 45.55027390]
[-105.51916504 40.41997147]
[-120.60826874 45.86962128]
[-134.20088196 37.34786606]
[-135.86991882 21.39186668]
[-124.33504486 10.24170399]
[-108.44481659 12.45082569]
[-100.38886261 26.32458305]
[-86.29347229 31.45488548]
[-72.19808960 36.58518982]
[-58.10269547 41.71548843]
[-48.38353348 28.79542542]
[-35.16434097 19.45521927]
[-19.70479202 14.59870529]
[-3.48226500 14.70180798]
[11.94932842 19.76592064]
[25.10839272 29.31669426]
[34.72789383 42.44845200]
[39.87736511 57.91005707]
[40.05287552 74.22411346]
[54.42271805 78.52616119]
[68.79255676 82.82820892]
[83.16239929 87.13025665]
[97.42446899 78.96427917]
[113.23534393 83.44824219]
[121.08707428 97.88569641]
[135.57595825 101.76797485]
[150.06484985 105.65026093]
[164.55374146 109.53254700]
[173.07554626 91.78815460]
[185.10112000 76.21044922]
[200.10188293 63.48054886]
[217.41928101 54.15446854]
[236.29362488 48.63886642]
[255.89743042 47.17329025]
[275.37173462 49.81977081]
[293.86364746 56.46021652]
[310.56381226 66.80166626]
[324.74176025 80.38922882]
[335.77786255 96.62607574]
[343.19046021 114.79966736]
[357.88058472 111.76640320]
[372.57067871 108.73313904]
[387.26080322 105.69987488]
[401.95089722 102.66661072]
[416.64102173 99.63334656]
[431.33111572 96.60008240]
[443.21530151 85.29972839]
[458.86508179 90.20044708]
[462.18127441 106.26080322]
[449.75247192 116.95927429]
[434.36437988 111.29019165]
[419.67428589 114.32345581]
[404.98416138 117.35671997]
[390.29406738 120.38998413]
[375.60394287 123.42324829]
[360.91384888 126.45651245]
[346.22372437 129.48977661]
[346.94906616 141.00328064]
[346.25494385 152.52001953]
[344.15158081 163.86564636]
[340.67050171 174.86837769]
[335.86407471 185.36154175]
[329.80477905 195.18617249]
[322.58401489 204.19337463]
[314.31091309 212.24662781]
[305.11041260 219.22377014]
[295.12161255 225.01895142]
[284.49554443 229.54414368]
[273.39294434 232.73056030]
[261.98178101 234.52966309]
[250.43473816 234.91389465]
[238.92660522 233.87712097]
[227.63159180 231.43470764]
[216.72076416 227.62330627]
[206.35937500 222.50032043]
[196.70440674 216.14299011]
[187.90220642 208.64729309]
[180.08621216 200.12643433]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 57]
[7 56]
[8 55]
[9 54]
[13 51]
[14 50]
[15 49]
[16 48]
[27 39]
[28 38]
[29 37]
[30 36]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
