%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGAAGACGCCCACGGUCUACCAGCACAUGCAUAGGAGCGACCCUUCAAGGGAAACCACGCUGACUGUUUCGACAGUCAAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[151.14477539 124.84857178]
[136.90614319 120.13039398]
[122.75956726 135.34541321]
[103.05448151 141.92810059]
[82.60341644 138.27081299]
[66.40106964 125.26673126]
[52.99657822 131.99871826]
[47.93712234 146.73098755]
[34.24716187 153.36721802]
[20.23337936 148.45301819]
[11.37358952 161.56082153]
[-3.47241044 160.35850525]
[-16.87689972 167.09049988]
[-30.28138924 173.82247925]
[-43.68587875 180.55447388]
[-47.11585999 195.81124878]
[-59.58152390 205.25271606]
[-75.19696808 204.42088318]
[-86.58905792 193.70854187]
[-88.37879181 178.17372131]
[-79.72111511 165.15147400]
[-64.70392609 160.79052734]
[-50.41786575 167.14997864]
[-37.01337814 160.41799927]
[-23.60888863 153.68600464]
[-10.20439816 146.95402527]
[-2.30338669 134.32772827]
[13.50139141 135.04852295]
[17.92804146 120.87317657]
[31.42620087 113.85503387]
[46.26459122 118.59422302]
[59.66908264 111.86223602]
[58.15436172 104.02968597]
[58.14657593 96.05200958]
[59.64600372 88.21651459]
[62.59864426 80.80535889]
[66.89817047 74.08543396]
[56.92623520 62.88005829]
[41.13609314 62.21144485]
[30.50523376 50.51698685]
[31.34075165 34.73479843]
[43.14695358 24.22817421]
[58.91942596 25.23050499]
[69.30064392 37.14712906]
[68.13160706 52.90811920]
[78.10354614 64.11349487]
[82.66539001 61.70108414]
[87.48842621 59.86577225]
[92.50000000 58.63521194]
[92.50000000 43.63521194]
[92.50000000 28.63521194]
[92.50000000 13.63521099]
[86.45365906 -2.20392108]
[100.00000000 -12.39867592]
[113.54634094 -2.20392108]
[107.50000000 13.63521099]
[107.50000000 28.63521194]
[107.50000000 43.63521194]
[107.50000000 58.63521194]
[122.41521454 64.43521118]
[134.08216858 75.38900757]
[140.81019592 89.90924072]
[141.62431335 105.89175415]
[155.86294556 110.60993195]
[171.90527344 91.45665741]
[194.81388855 81.60894775]
[219.65374756 83.14061737]
[241.09518433 95.67920685]
[254.55749512 116.49532318]
[269.24758911 113.46205902]
[283.93771362 110.42879486]
[298.62780762 107.39553070]
[313.31793213 104.36226654]
[328.00802612 101.32900238]
[342.69815063 98.29573822]
[354.58233643 86.99538422]
[370.23208618 91.89610291]
[373.54830933 107.95645905]
[361.11950684 118.65493011]
[345.73141479 112.98584747]
[331.04129028 116.01911163]
[316.35119629 119.05237579]
[301.66107178 122.08563995]
[286.97097778 125.11890411]
[272.28085327 128.15216064]
[257.59075928 131.18542480]
[257.52902222 139.04669189]
[256.31460571 146.81721497]
[253.97283936 154.32884216]
[250.55339050 161.41886902]
[246.12930298 167.93356323]
[240.79542542 173.73152161]
[234.66638184 178.68672180]
[227.87403870 182.69126892]
[220.56478882 185.65769958]
[212.89628601 187.52099609]
[205.03411865 188.23989868]
[197.14817810 187.79791260]
[189.40902710 186.20356750]
[181.98420715 183.49041748]
[175.03457642 179.71618652]
[168.71086121 174.96162415]
[163.15040588 169.32873535]
[158.47413635 162.93861389]
[154.78392029 155.92887878]
[152.16044617 148.45060730]
[150.66134644 140.66517639]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[6 32]
[7 31]
[10 28]
[12 26]
[13 25]
[14 24]
[15 23]
[37 46]
[38 45]
[49 59]
[50 58]
[51 57]
[52 56]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
