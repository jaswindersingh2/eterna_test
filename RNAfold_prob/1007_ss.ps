%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:14:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGCGAAACGCAACAACAAAGUUGAAGAAAGAAACUUUCAAGAUCAAAGAUCAAGAGAAACUCAUCCCUGGUUCGCCAGGGAAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[66.85697174 305.22442627]
[55.97704697 310.89230347]
[44.24959564 314.47747803]
[32.06922913 315.86105347]
[19.84548187 314.99816895]
[7.98903227 311.91949463]
[-3.10207200 306.73007202]
[-12.05945110 318.76190186]
[-21.01683044 330.79376221]
[-25.62539482 347.10931396]
[-42.57911301 347.19744873]
[-47.35705948 330.93069458]
[-33.04867935 321.83636475]
[-24.09129906 309.80453491]
[-15.13391972 297.77267456]
[-26.56684303 283.77609253]
[-33.83428192 267.21679688]
[-36.39878845 249.30421448]
[-34.06664658 231.34843445]
[-27.00249863 214.66438293]
[-15.71773815 200.47544861]
[-1.03348553 189.82386780]
[15.97915268 183.49409485]
[34.07720947 181.95510864]
[51.93667984 185.32560730]
[58.27595520 171.73098755]
[64.61522675 158.13638306]
[70.95449829 144.54176331]
[53.72750854 126.20049286]
[46.86206436 101.99229431]
[51.89551163 77.33797455]
[39.36319351 69.09533691]
[26.83087730 60.85270309]
[14.29856014 52.61006927]
[1.76624274 44.36743164]
[-14.78967762 40.71533203]
[-15.86343479 23.79541969]
[0.09799328 18.07972717]
[10.00887775 31.83511543]
[22.54119492 40.07775116]
[35.07351303 48.32038498]
[47.60582733 56.56301880]
[60.13814545 64.80565643]
[66.96421051 58.33171844]
[74.82431793 53.16204071]
[83.47245789 49.45843506]
[80.86773682 34.68631744]
[78.26301575 19.91420364]
[75.65829468 5.14208651]
[66.95336914 -9.40647793]
[78.52361298 -21.79864883]
[93.63445282 -14.11107254]
[90.43040466 2.53736401]
[93.03513336 17.30948067]
[95.63985443 32.08159637]
[98.24457550 46.85371399]
[105.59162140 47.11953735]
[112.83177948 48.39617538]
[119.82666016 50.65921783]
[127.32666016 37.66883469]
[134.82666016 24.67845535]
[137.50994873 7.93819380]
[154.33879089 5.88244724]
[160.97288513 21.48453331]
[147.81704712 32.17845535]
[140.31704712 45.16883469]
[132.81704712 58.15921783]
[143.11042786 68.86962891]
[150.03948975 82.00946045]
[164.72959900 78.97620392]
[179.41970825 75.94293976]
[194.10981750 72.90967560]
[208.79992676 69.87641144]
[223.49003601 66.84314728]
[238.18014526 63.80988312]
[250.06433105 52.50952911]
[265.71408081 57.41024780]
[269.03030396 73.47059631]
[256.60150146 84.16906738]
[241.21340942 78.49999237]
[226.52330017 81.53325653]
[211.83319092 84.56652069]
[197.14308167 87.59978485]
[182.45297241 90.63304901]
[167.76286316 93.66631317]
[153.07275391 96.69956970]
[152.56149292 108.05598450]
[149.64802551 119.04421997]
[144.46553040 129.16207886]
[137.25082397 137.94714355]
[128.33364868 144.99792480]
[118.12155151 149.99218750]
[107.08125305 152.70166016]
[95.71732330 153.00253296]
[84.54911804 150.88102722]
[78.20984650 164.47564697]
[71.87056732 178.07026672]
[65.53129578 191.66488647]
[75.39676666 199.04014587]
[83.74703979 208.08909607]
[90.30269623 218.50650024]
[94.84482574 229.94139099]
[97.22232056 242.00885010]
[97.35690308 254.30302429]
[95.24568939 266.41073608]
[90.96127319 277.92532349]
[84.64918518 288.46044922]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 15]
[8 14]
[9 13]
[25 98]
[26 97]
[27 96]
[28 95]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[46 56]
[47 55]
[48 54]
[49 53]
[59 67]
[60 66]
[61 65]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
