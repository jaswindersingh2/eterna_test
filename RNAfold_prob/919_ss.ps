%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGAAUGGUAGCAAGUGAGAGCAGUGAGAGCAAAGCAUACAAAAUUCAAGCGAAAGCAAGCGGAGACCUUCGGGUUUCCAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[134.70434570 171.26620483]
[130.86346436 160.77221680]
[128.34870911 149.88262939]
[127.19898987 138.76434326]
[127.43225098 127.58783722]
[129.04527283 116.52448273]
[114.67543793 112.22243500]
[101.87226105 119.00659943]
[87.99144745 114.85095978]
[81.02251434 102.14740753]
[66.65267181 97.84535980]
[52.28282928 93.54331207]
[37.91298676 89.24126434]
[18.67052078 94.89100647]
[5.79819965 80.58589172]
[-8.79747295 77.12665558]
[-23.39314651 73.66741180]
[-38.03758621 70.42082214]
[-52.72769547 67.38755798]
[-59.48984909 80.87590790]
[-69.51335907 92.15383911]
[-82.11479950 100.45240021]
[-96.43498993 105.20577240]
[-111.49755096 106.08988190]
[-126.27549744 103.04442596]
[-139.76123047 96.27706909]
[-151.03529358 86.24920654]
[-159.32899475 73.64456177]
[-164.07684326 59.32253647]
[-164.95512390 44.25963211]
[-161.90396118 29.48286629]
[-155.13139343 15.99973869]
[-145.09918213 4.72955179]
[-132.49133301 -3.55927277]
[-118.16748047 -8.30158997]
[-103.10424042 -9.17406082]
[-88.32865143 -6.11719847]
[-74.84814453 0.66057497]
[-63.58182907 10.69713974]
[-55.29787445 23.30818558]
[-50.56108856 37.63387299]
[-49.69443130 52.69744873]
[-35.00432205 55.73071289]
[-27.70455360 53.97390747]
[-19.93390846 59.07174301]
[-5.33823538 62.53097916]
[9.25743771 65.99021912]
[17.60416222 59.77338028]
[28.22036362 59.25050354]
[37.51738739 64.84523010]
[42.21503830 74.87142181]
[56.58488083 79.17346954]
[70.95471954 83.47551727]
[85.32456207 87.77756500]
[98.12773895 80.99340057]
[112.00855255 85.14904022]
[118.97748566 97.85259247]
[133.34732056 102.15464020]
[142.87525940 84.21321869]
[156.16934204 68.86122131]
[172.55429077 56.87411118]
[191.19877625 48.85654449]
[211.15760803 45.21186066]
[231.41970825 46.12180328]
[250.95919800 51.53744125]
[268.78750610 61.18180847]
[284.00326538 74.56405640]
[295.83792114 91.00444794]
[303.69451904 109.66886139]
[318.38461304 106.63559723]
[333.07473755 103.60233307]
[347.76483154 100.56906891]
[362.45495605 97.53580475]
[377.14505005 94.50254822]
[391.83517456 91.46928406]
[403.71936035 80.16893005]
[419.36914062 85.06964874]
[422.68533325 101.12999725]
[410.25653076 111.82846832]
[394.86843872 106.15939331]
[380.17831421 109.19265747]
[365.48822021 112.22591400]
[350.79809570 115.25917816]
[336.10800171 118.29244232]
[321.41787720 121.32570648]
[306.72778320 124.35897064]
[307.38723755 135.48251343]
[306.66677856 146.60363770]
[304.57705688 157.55181885]
[301.14981079 168.15908813]
[296.43725586 178.26269531]
[290.51135254 187.70756531]
[283.46270752 196.34867859]
[275.39910889 204.05332947]
[266.44396973 210.70312500]
[256.73443604 216.19581604]
[246.41917419 220.44686890]
[235.65629578 223.39080811]
[224.61070251 224.98213196]
[213.45175171 225.19612122]
[202.35054016 224.02914429]
[191.47732544 221.49876404]
[180.99891663 217.64344788]
[171.07611084 212.52198792]
[161.86123657 206.21261597]
[153.49577332 198.81179810]
[146.10823059 190.43278503]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 58]
[7 57]
[10 54]
[11 53]
[12 52]
[13 51]
[15 47]
[16 46]
[17 45]
[18 43]
[19 42]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
