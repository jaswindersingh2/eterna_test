%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAUAUUGAUUAAGAAUAUAGAAAUAUAAUUCAAAACAAUAUUAGAAAUAAAUUGAUAAUUGAUACAAGAAUUUCGAUUUUUGAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[212.09304810 131.55317688]
[206.92211914 124.15220642]
[202.67633057 116.18267822]
[199.41743469 107.75968170]
[197.19287109 99.00492096]
[182.24995422 100.31226349]
[167.30703735 101.61959839]
[152.36412048 102.92693329]
[137.42118835 104.23426819]
[122.47827148 105.54160309]
[107.53535461 106.84893799]
[100.29204559 110.68453979]
[92.13983917 107.97051239]
[77.16521454 108.84268188]
[66.68438721 120.36614227]
[51.48556519 121.03733063]
[40.56430435 110.97444916]
[25.58968163 111.84661865]
[10.61505795 112.71878815]
[-4.35956383 113.59096527]
[-19.31991768 114.68083191]
[-34.26283646 115.98816681]
[-49.20575714 117.29550171]
[-62.32148743 127.13977814]
[-77.29648590 120.45536804]
[-78.72576904 104.11862946]
[-65.13900757 94.93538666]
[-50.51309586 102.35258484]
[-35.57017517 101.04524994]
[-20.62725449 99.73791504]
[-14.13801003 95.96131134]
[-5.23173666 98.61634064]
[9.74288559 97.74417114]
[24.71750832 96.87199402]
[39.69213104 95.99982452]
[49.37131882 84.73709869]
[64.54528809 83.63927460]
[76.29304504 93.86806488]
[91.26766205 92.99588776]
[106.22801971 91.90602112]
[121.17093658 90.59868622]
[136.11386108 89.29135132]
[151.05677795 87.98400879]
[165.99969482 86.67667389]
[180.94262695 85.36933899]
[195.88554382 84.06200409]
[200.16319275 60.17695999]
[211.82624817 38.91840744]
[229.64709473 22.50102234]
[251.75723267 12.63110352]
[275.84326172 10.32925415]
[299.38885498 15.82485008]
[319.93771362 28.53323364]
[330.84829712 18.23960876]
[341.75891113 7.94598436]
[352.66952515 -2.34764028]
[363.58010864 -12.64126492]
[374.49072266 -22.93488884]
[385.40133667 -33.22851562]
[389.58200073 -41.52869415]
[396.78216553 -43.65713882]
[407.98754883 -53.62907791]
[419.19293213 -63.60101318]
[430.39831543 -73.57295227]
[428.73217773 -89.00032043]
[436.48144531 -102.44386292]
[450.66629028 -108.73426056]
[465.83242798 -105.45272827]
[476.14810181 -93.86108398]
[477.64678955 -78.41654968]
[469.75213623 -65.05786896]
[455.49987793 -58.92171478]
[440.37023926 -62.36757660]
[429.16485596 -52.39563751]
[417.95950317 -42.42370224]
[406.75411987 -32.45176315]
[395.69494629 -22.31790924]
[384.78436279 -12.02428532]
[373.87374878 -1.73066032]
[362.96313477 8.56296444]
[352.05255127 18.85658836]
[341.14193726 29.15021324]
[330.23132324 39.44383621]
[335.28491211 46.87817764]
[339.41015625 54.86675262]
[342.54708862 63.29419327]
[344.65002441 72.03872681]
[345.68814087 80.97396851]
[345.64611816 89.97072601]
[344.52416992 98.89886475]
[342.33816528 107.62920380]
[339.11938477 116.03540039]
[334.91403198 123.99571991]
[329.78265381 131.39488220]
[323.79910278 138.12564087]
[317.04971313 144.09042358]
[309.63183594 149.20268250]
[301.65255737 153.38818359]
[293.22714233 156.58604431]
[284.47726440 158.74971008]
[275.52944946 159.84750366]
[266.51306152 159.86322021]
[257.55847168 158.79623413]
[248.79528809 156.66165161]
[240.35031128 153.48999023]
[232.34582520 149.32676697]
[224.89776611 144.23188782]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 46]
[6 45]
[7 44]
[8 43]
[9 42]
[10 41]
[11 40]
[13 39]
[14 38]
[17 35]
[18 34]
[19 33]
[20 32]
[21 30]
[22 29]
[23 28]
[53 83]
[54 82]
[55 81]
[56 80]
[57 79]
[58 78]
[59 77]
[61 76]
[62 75]
[63 74]
[64 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
