%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACCCGGGCGCAGGGUAAACCCGCGUAAACGCGCGAAAAUGGCCCUAAUGGGCCACCCGGGAAACCUUUUUUUCGAAAAAGGAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[244.79704285 160.05824280]
[231.59402466 152.93923950]
[220.06666565 159.84223938]
[206.52436829 160.11061096]
[194.54165649 153.56547546]
[187.33506775 141.84068298]
[186.89991760 127.97628021]
[173.90954590 120.47628021]
[160.91915894 112.97628021]
[147.92878723 105.47628021]
[134.93840027 97.97628021]
[121.94802094 90.47628021]
[125.83676910 102.22431946]
[123.35250092 115.33863068]
[114.20848846 126.36125183]
[99.97026825 131.95365906]
[83.83132172 129.86483765]
[69.73593140 134.99513245]
[61.67997360 148.86889648]
[45.78974533 151.07801819]
[34.25486755 139.92785645]
[35.92391205 123.97185516]
[49.51652908 115.45009613]
[64.60562897 120.89974976]
[78.70101929 115.76944733]
[78.48285675 100.77103424]
[64.24421692 96.05285645]
[50.00557709 91.33468628]
[35.76693726 86.61651611]
[21.52829933 81.89834595]
[5.58610868 85.74264526]
[-5.51662207 73.67361450]
[-0.35835630 58.10684586]
[15.75452423 55.05609131]
[26.24646950 67.65970612]
[40.48511124 72.37787628]
[54.72375107 77.09604645]
[68.96238708 81.81421661]
[83.20102692 86.53239441]
[88.94636536 81.71148682]
[79.30474091 70.22065735]
[90.79572296 60.57922363]
[100.43702698 72.06967163]
[106.18236542 67.24876404]
[104.00838470 52.40713882]
[101.83440399 37.56551361]
[99.66043091 22.72389030]
[97.48645020 7.88226461]
[95.31246948 -6.95935965]
[84.72224426 -19.48050308]
[90.52462006 -34.81883621]
[106.75061798 -37.19559479]
[116.70832062 -24.16577530]
[110.15409851 -9.13333797]
[112.32807159 5.70828676]
[114.50205231 20.54991150]
[116.67603302 35.39153671]
[118.85000610 50.23316193]
[121.02398682 65.07478333]
[129.44801331 77.48589325]
[142.43840027 84.98589325]
[155.42878723 92.48589325]
[168.41915894 99.98589325]
[181.40954590 107.48589325]
[194.39991760 114.98589325]
[209.67610168 107.89908600]
[226.01589966 111.22449493]
[237.08555603 123.47309113]
[238.71302795 139.73620605]
[251.91604614 146.85522461]
[266.40493774 150.73750305]
[281.39859009 151.17376709]
[296.39224243 151.61004639]
[311.38589478 152.04631042]
[326.37954712 152.48258972]
[341.37319946 152.91885376]
[356.36685181 153.35513306]
[371.36053467 153.79139709]
[382.68270874 142.76489258]
[398.48428345 143.05751038]
[409.39047241 154.49563599]
[408.93078613 170.29324341]
[397.37799072 181.07788086]
[381.58615112 180.45123291]
[370.92425537 168.78504944]
[355.93060303 168.34878540]
[340.93695068 167.91250610]
[325.94329834 167.47624207]
[310.94964600 167.03996277]
[295.95599365 166.60369873]
[280.96231079 166.16743469]
[265.96865845 165.73115540]
[277.61483765 175.18455505]
[285.43927002 187.98214722]
[288.54510498 202.65707397]
[286.57638550 217.52731323]
[279.75875854 230.88844299]
[268.87362671 241.20901489]
[255.16867065 247.30607605]
[240.21473694 248.48078918]
[225.72584534 244.59851074]
[213.36271667 236.10423279]
[204.54238892 223.97155762]
[200.27584839 209.59112549]
[201.05213928 194.61122131]
[206.78227234 180.74884033]
[216.80947876 169.59289551]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[17 25]
[18 24]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
[71 92]
[72 91]
[73 90]
[74 89]
[75 88]
[76 87]
[77 86]
[78 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
