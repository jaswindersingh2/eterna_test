%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:14:53 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (1073)
} def

/sequence { (\
GGAAAAAAGUACGUUGAAGAUCCUAAAAUAGAGAUCAAAAGAAGAUAGAAACUACUUCAUCAAGGUACGAUGAUGUUCGCAUCAUCAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 12 0.003245788 ubox
1 86 0.003671898 ubox
1 95 0.067366837 ubox
1 98 0.067784498 ubox
1 101 0.069327508 ubox
1 104 0.069642039 ubox
1 107 0.017584290 ubox
2 68 0.003177845 ubox
2 86 0.004096565 ubox
2 95 0.035563928 ubox
2 98 0.035687194 ubox
2 101 0.036448867 ubox
2 104 0.036310487 ubox
2 107 0.011849571 ubox
6 71 0.004017746 ubox
9 68 0.997660433 ubox
9 95 0.004435128 ubox
9 98 0.004470233 ubox
9 101 0.007576359 ubox
9 104 0.008153826 ubox
10 67 0.999133688 ubox
10 94 0.003673311 ubox
10 97 0.003724792 ubox
10 100 0.007021107 ubox
10 103 0.007606476 ubox
11 66 0.999442064 ubox
12 64 0.004309993 ubox
12 65 0.999327314 ubox
13 98 0.013377738 ubox
13 101 0.013170271 ubox
13 104 0.012064403 ubox
13 107 0.004500543 ubox
14 63 0.992309593 ubox
14 64 0.004733084 ubox
14 97 0.013394524 ubox
14 100 0.013185546 ubox
14 103 0.012074982 ubox
14 106 0.004543241 ubox
15 62 0.998970515 ubox
15 63 0.004036604 ubox
15 96 0.013391523 ubox
15 99 0.013180163 ubox
15 102 0.012069619 ubox
15 105 0.004558206 ubox
16 61 0.999258780 ubox
16 95 0.013339647 ubox
16 98 0.013126456 ubox
16 101 0.012022155 ubox
16 104 0.004543250 ubox
17 60 0.932399481 ubox
18 35 0.004561494 ubox
18 60 0.042761046 ubox
19 36 0.998345586 ubox
19 58 0.010635524 ubox
20 35 0.999332801 ubox
20 57 0.009599383 ubox
21 32 0.009408919 ubox
21 33 0.004911313 ubox
21 34 0.999468752 ubox
22 31 0.009859239 ubox
22 33 0.999111645 ubox
23 31 0.989586823 ubox
23 33 0.030205782 ubox
24 28 0.004386522 ubox
24 30 0.982987470 ubox
24 31 0.070601950 ubox
24 32 0.041311302 ubox
25 29 0.871483412 ubox
31 36 0.003180197 ubox
34 46 0.005976572 ubox
35 42 0.006043671 ubox
35 45 0.006230664 ubox
36 41 0.006438483 ubox
36 44 0.006296685 ubox
37 60 0.009955957 ubox
38 60 0.010813924 ubox
39 57 0.037438143 ubox
39 60 0.046440397 ubox
40 46 0.004935562 ubox
40 53 0.006826135 ubox
40 56 0.041597056 ubox
40 60 0.031005888 ubox
41 52 0.007054124 ubox
41 55 0.042065628 ubox
41 57 0.005358733 ubox
41 58 0.995085382 ubox
41 61 0.003677471 ubox
42 56 0.004720298 ubox
42 57 0.995944203 ubox
42 60 0.004023011 ubox
43 53 0.041463726 ubox
43 56 0.995861221 ubox
43 57 0.008257772 ubox
44 52 0.042121223 ubox
44 53 0.003720602 ubox
44 55 0.995673267 ubox
44 56 0.009676349 ubox
44 57 0.005475355 ubox
44 58 0.036748458 ubox
44 61 0.008225964 ubox
45 53 0.056270115 ubox
45 56 0.006165282 ubox
45 57 0.035866091 ubox
45 60 0.009142104 ubox
46 50 0.008151334 ubox
46 51 0.028110987 ubox
46 54 0.963776558 ubox
46 59 0.009961947 ubox
47 53 0.968417234 ubox
47 56 0.028583808 ubox
48 52 0.947617927 ubox
48 53 0.025770147 ubox
48 55 0.030099542 ubox
48 57 0.004841918 ubox
48 58 0.051338488 ubox
49 53 0.005693601 ubox
49 56 0.005142331 ubox
49 57 0.051144839 ubox
50 56 0.047846959 ubox
50 57 0.003390482 ubox
51 56 0.003488779 ubox
53 67 0.003288139 ubox
54 66 0.003554137 ubox
55 65 0.003578654 ubox
56 64 0.003545338 ubox
57 63 0.003194544 ubox
69 83 0.009881710 ubox
69 86 0.997996409 ubox
69 101 0.004305307 ubox
69 104 0.003475330 ubox
70 82 0.009890941 ubox
70 85 0.999010729 ubox
71 81 0.009882718 ubox
71 84 0.999062009 ubox
71 87 0.024211324 ubox
71 99 0.005723969 ubox
71 102 0.004522338 ubox
72 80 0.009863966 ubox
72 83 0.999517503 ubox
72 86 0.027098371 ubox
72 98 0.006087729 ubox
72 101 0.004809210 ubox
73 82 0.999260599 ubox
73 85 0.027098294 ubox
74 81 0.998475104 ubox
74 84 0.027090860 ubox
74 96 0.006367616 ubox
74 99 0.005034305 ubox
75 80 0.992684488 ubox
75 83 0.027062783 ubox
75 95 0.006489586 ubox
75 98 0.005130604 ubox
76 81 0.003569795 ubox
76 93 0.003590950 ubox
76 94 0.005509552 ubox
76 97 0.005093730 ubox
77 81 0.004205555 ubox
77 92 0.005057368 ubox
77 93 0.004261867 ubox
77 96 0.004841110 ubox
78 91 0.006111736 ubox
79 95 0.004078115 ubox
82 92 0.005142017 ubox
83 91 0.005208611 ubox
85 92 0.008373392 ubox
86 91 0.010870344 ubox
91 95 0.043052093 ubox
91 98 0.103773861 ubox
91 101 0.045518359 ubox
91 104 0.035229088 ubox
91 107 0.010423134 ubox
9 68 0.9500000 lbox
10 67 0.9500000 lbox
11 66 0.9500000 lbox
12 65 0.9500000 lbox
14 63 0.9500000 lbox
15 62 0.9500000 lbox
16 61 0.9500000 lbox
17 60 0.9500000 lbox
19 36 0.9500000 lbox
20 35 0.9500000 lbox
21 34 0.9500000 lbox
22 33 0.9500000 lbox
23 31 0.9500000 lbox
24 30 0.9500000 lbox
25 29 0.9500000 lbox
41 58 0.9500000 lbox
42 57 0.9500000 lbox
43 56 0.9500000 lbox
44 55 0.9500000 lbox
46 54 0.9500000 lbox
47 53 0.9500000 lbox
48 52 0.9500000 lbox
69 86 0.9500000 lbox
70 85 0.9500000 lbox
71 84 0.9500000 lbox
72 83 0.9500000 lbox
73 82 0.9500000 lbox
74 81 0.9500000 lbox
75 80 0.9500000 lbox
showpage
end
%%EOF
