%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGGAAACGAAAAAACGUUGUCAAAGACAUCCCAGUGAGGGAAAAACCCUCCGAAAACGGACACGGGUGACUUCGGUCACCCAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[117.37034607 142.95034790]
[128.34725952 132.72746277]
[141.16809082 124.94118500]
[155.30081177 119.91461945]
[170.15649414 117.85644531]
[155.31486511 115.68246460]
[140.47323608 113.50849152]
[125.63161469 111.33451080]
[108.12768555 130.66699219]
[78.94945526 128.49298096]
[66.66217804 137.09663391]
[54.37489700 145.70027161]
[42.08761597 154.30392456]
[39.59040070 169.90966797]
[26.74084854 179.11100769]
[11.16237259 176.44894409]
[2.09740496 163.50282288]
[4.92403078 147.95336914]
[17.96526337 139.02577209]
[33.48397064 142.01664734]
[45.77125168 133.41299438]
[58.05853271 124.80934906]
[70.34580994 116.20570374]
[66.25321198 101.77481079]
[51.27859116 100.90264130]
[36.30396652 100.03046417]
[20.14006805 105.14561462]
[10.75021172 91.02941895]
[21.71536827 78.09877014]
[37.17613983 85.05584717]
[52.15076065 85.92801666]
[67.12538147 86.80018616]
[71.21025848 86.67052460]
[75.21139526 86.92422485]
[64.30078888 76.63059998]
[53.39018250 66.33697510]
[42.47957993 56.04335022]
[26.46603012 55.07081985]
[17.36036682 41.86224365]
[22.14767265 26.55011749]
[37.15553665 20.88058853]
[50.87121201 29.20283890]
[52.77320480 45.13274765]
[63.68380737 55.42637253]
[74.59441376 65.71999359]
[85.50502014 76.01361847]
[95.92843628 72.27143860]
[106.98764038 72.85918427]
[116.95569611 77.68508911]
[124.27604675 85.99555969]
[127.80559540 96.49288940]
[142.64721680 98.66686249]
[157.48884583 100.84084320]
[172.33047485 103.01482391]
[185.09721375 95.14017487]
[189.81538391 80.90153503]
[194.53355408 66.66289520]
[190.68927002 50.72070312]
[202.75828552 39.61797333]
[218.32505798 44.77623749]
[221.37580872 60.88911819]
[208.77220154 71.38106537]
[204.05403137 85.61970520]
[199.33586121 99.85834503]
[204.32182312 105.46102905]
[215.52737427 95.48928070]
[225.49893188 106.69498444]
[214.29376221 116.66640472]
[219.27973938 122.26909637]
[233.96984863 119.23583221]
[248.65995789 116.20256805]
[263.35006714 113.16930389]
[278.04016113 110.13603973]
[292.73028564 107.10277557]
[307.42037964 104.06951141]
[319.30459595 92.76915741]
[334.95434570 97.66987610]
[338.27053833 113.73023224]
[325.84176636 124.42870331]
[310.45364380 118.75962067]
[295.76354980 121.79288483]
[281.07342529 124.82614899]
[266.38333130 127.85941315]
[251.69322205 130.89268494]
[237.00311279 133.92593384]
[222.31300354 136.95919800]
[232.32656860 148.12739563]
[239.86912537 161.09310913]
[244.62765503 175.31831360]
[246.40469360 190.21267700]
[245.12649536 205.15812683]
[240.84611511 219.53443909]
[233.74116516 232.74502563]
[224.10649109 244.24168396]
[212.34191895 253.54731750]
[198.93565369 260.27575684]
[184.44403076 264.14779663]
[169.46841431 265.00274658]
[154.63026428 262.80514526]
[140.54534912 257.64614868]
[127.79815674 249.73989868]
[116.91766357 239.41444397]
[108.35540771 227.09828186]
[102.46668243 213.30252075]
[99.49588013 198.59965515]
[99.56626892 183.59982300]
[102.67493439 168.92549133]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 54]
[6 53]
[7 52]
[8 51]
[10 23]
[11 22]
[12 21]
[13 20]
[24 32]
[25 31]
[26 30]
[34 46]
[35 45]
[36 44]
[37 43]
[55 64]
[56 63]
[57 62]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
