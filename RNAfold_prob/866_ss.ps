%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGAAGCACGAAAAAGGCAAAACUCCUACGAAAGAUAGAAGAGACCGGAAACAGGAACCAAAAAGAUAGCUUUCGGGCUAUCAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[23.52703857 214.03616333]
[12.47620487 205.79199219]
[2.30786920 196.48112488]
[-6.87544250 186.19744873]
[-14.98113537 175.04464722]
[-27.97151756 182.54464722]
[-40.96189880 190.04464722]
[-53.95227814 197.54464722]
[-63.33617020 217.80068970]
[-84.91912079 217.80868530]
[-96.95096588 226.76606750]
[-102.06694794 234.52478027]
[-109.46555328 235.80293274]
[-111.96276855 251.40869141]
[-124.81231689 260.61001587]
[-140.39079285 257.94796753]
[-149.45576477 245.00184631]
[-146.62913513 229.45237732]
[-133.58790588 220.52479553]
[-118.06919861 223.51565552]
[-105.90834808 214.73422241]
[-93.87649536 205.77684021]
[-94.43772888 197.57756042]
[-91.59229279 189.76603699]
[-85.75688171 183.71163940]
[-77.87915802 180.50875854]
[-69.28431702 180.77943420]
[-61.45227814 184.55426025]
[-48.46189880 177.05426025]
[-35.47151566 169.55426025]
[-22.48113632 162.05426025]
[-28.56672859 148.19705200]
[-33.09023285 133.75425720]
[-35.99668884 118.90134430]
[-37.25078201 103.81878662]
[-36.83727646 88.68981934]
[-34.76119232 73.69827271]
[-31.04776192 59.02629852]
[-25.74209595 44.85214996]
[-18.90866280 31.34805107]
[-10.63048649 18.67807388]
[-1.00814795 6.99616051]
[9.84144115 -3.55575490]
[21.78645897 -12.84946632]
[34.68177414 -20.77205467]
[48.37070465 -27.22726059]
[62.68693161 -32.13665390]
[77.45651245 -35.44058228]
[92.50000000 -37.09890747]
[92.50000000 -52.09890747]
[80.40541840 -62.01127625]
[77.56279755 -77.38832092]
[85.31433868 -90.96947479]
[100.00000000 -96.34212494]
[114.68566132 -90.96947479]
[122.43720245 -77.38832092]
[119.59458160 -62.01127625]
[107.50000000 -52.09890747]
[107.50000000 -37.09890747]
[124.64060974 -35.07479477]
[141.39186096 -30.91628647]
[157.48904419 -24.68908882]
[172.67782593 -16.49160576]
[186.71817017 -6.45336676]
[199.38822937 5.26700592]
[210.48779297 18.48431206]
[219.84147644 32.98969650]
[227.30146790 48.55395126]
[232.74989319 64.93113708]
[247.44000244 61.89787292]
[262.13012695 58.86460876]
[276.82022095 55.83134842]
[291.51034546 52.79808426]
[306.20043945 49.76482010]
[320.89056396 46.73155594]
[332.77474976 35.43120193]
[348.42449951 40.33192062]
[351.74069214 56.39227295]
[339.31192017 67.09074402]
[323.92382812 61.42166519]
[309.23370361 64.45492554]
[294.54360962 67.48818970]
[279.85348511 70.52145386]
[265.16339111 73.55471802]
[250.47326660 76.58798218]
[235.78315735 79.62124634]
[237.14233398 93.34130096]
[237.11872864 107.12849426]
[235.71255493 120.84381104]
[232.93798828 134.34896851]
[228.82302856 147.50778198]
[223.40914917 160.18757629]
[216.75093079 172.26049805]
[208.91552734 183.60482788]
[199.98194885 194.10617065]
[190.04023743 203.65864563]
[179.19067383 212.16593933]
[167.54261780 219.54226685]
[155.21354675 225.71325684]
[142.32775879 230.61669922]
[129.01518250 234.20312500]
[115.41003418 236.43640137]
[101.64952087 237.29399109]
[87.87237549 236.76725769]
[74.21750641 234.86149597]
[60.82260132 231.59594727]
[47.82272339 227.00350952]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 31]
[6 30]
[7 29]
[8 28]
[10 22]
[11 21]
[13 20]
[49 59]
[50 58]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
