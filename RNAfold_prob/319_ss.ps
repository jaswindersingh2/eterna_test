%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACACUUCAGAAAAAACUGAUCCAAAGGAAAGUGACUCACUCAAAAAGAGACCCAAAAGGGUGAGCCGCGUAUUCGUACGCGGAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[94.37437439 117.01670837]
[83.76777649 127.62330627]
[73.16117096 138.22990417]
[88.01256561 140.33610535]
[97.23754883 152.16403198]
[95.66321564 167.08117676]
[84.17237854 176.72279358]
[69.20850372 175.68232727]
[59.16257858 164.54322815]
[59.66754913 149.55239868]
[47.38027191 158.15605164]
[35.09299088 166.75970459]
[22.80570793 175.36334229]
[20.30849266 190.96910095]
[7.45894146 200.17042542]
[-8.11953545 197.50836182]
[-17.18450356 184.56224060]
[-14.35787678 169.01278687]
[-1.31664479 160.08518982]
[14.20206261 163.07606506]
[26.48934364 154.47241211]
[38.77662277 145.86877441]
[51.06390381 137.26512146]
[62.55456924 127.62330627]
[73.16117096 117.01670837]
[83.76777649 106.41010284]
[71.81049347 115.46678925]
[57.15700912 118.67230225]
[42.51044083 115.43532562]
[30.57264137 106.35298157]
[23.54577827 93.10069275]
[22.72609329 78.12310028]
[28.26479530 64.18312836]
[39.14015961 53.85228348]
[53.34601212 49.03628922]
[68.26179504 50.62355042]
[81.13600159 58.32126999]
[89.59371948 70.70944977]
[92.07491302 85.49978638]
[91.63864136 70.50613403]
[91.20236969 55.51247787]
[90.76609802 40.51882553]
[90.32982635 25.52516937]
[89.89356232 10.53151608]
[89.45729065 -4.46213865]
[75.06053925 -9.20654297]
[63.15662003 -18.59124184]
[55.18299484 -31.48298645]
[52.10250854 -46.32503510]
[54.28715515 -61.32514191]
[61.47311783 -74.67196655]
[72.79266357 -84.75381470]
[86.87889862 -90.35325623]
[102.03084564 -90.79413605]
[116.41883087 -86.02320862]
[128.30543518 -76.61658478]
[136.25527954 -63.71017075]
[139.30841064 -48.86246872]
[137.09613037 -33.86641693]
[129.88557434 -20.53285599]
[118.54747009 -10.47188377]
[104.45094299 -4.89840937]
[104.88721466 10.09524536]
[105.32348633 25.08889961]
[105.75975800 40.08255386]
[106.19602203 55.07620621]
[106.63229370 70.06986237]
[107.06856537 85.06351471]
[118.83480072 94.36705017]
[133.52491760 91.33378601]
[148.21502686 88.30052185]
[162.90513611 85.26725769]
[177.59524536 82.23399353]
[192.28535461 79.20072937]
[206.97546387 76.16746521]
[218.85964966 64.86711121]
[234.50941467 69.76782990]
[237.82560730 85.82818604]
[225.39682007 96.52665710]
[210.00872803 90.85757446]
[195.31861877 93.89083862]
[180.62850952 96.92410278]
[165.93840027 99.95736694]
[151.24829102 102.99063110]
[136.55818176 106.02389526]
[121.86806488 109.05715942]
[136.21408081 113.43803406]
[150.93293762 116.32855988]
[164.42994690 122.87306213]
[175.81466675 132.63975525]
[184.33596802 144.98428345]
[189.43165588 159.09222412]
[190.76553345 174.03280640]
[188.24963379 188.82029724]
[182.04991150 202.47912598]
[172.57539368 214.10812378]
[160.45118713 222.94007874]
[146.47715759 228.39230347]
[131.57527161 230.10507202]
[116.72866058 227.96540833]
[102.91683960 222.11445618]
[91.05104828 212.93824768]
[81.91412354 201.04216003]
[76.10888672 187.21107483]
[74.01832581 172.35746765]
[75.78038025 157.46131897]
[81.27878571 143.50540161]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 26]
[2 25]
[3 24]
[10 23]
[11 22]
[12 21]
[13 20]
[39 68]
[40 67]
[41 66]
[42 65]
[43 64]
[44 63]
[45 62]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
