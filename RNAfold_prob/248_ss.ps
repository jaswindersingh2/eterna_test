%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAUCCGGCCGUGACCUACUGGUCUGGCUUGCCUUUCCGUCUUUAGUCGGUGGCUCGCCUGGGCCCGAUGCUAUUCGUAGCAUCAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[103.15130615 117.21694946]
[99.26902008 131.70584106]
[104.03376770 147.39752197]
[92.63072968 159.18322754]
[76.79036713 154.93881226]
[72.80789185 139.03057861]
[84.78012848 127.82354736]
[88.66241455 113.33466339]
[83.73765564 99.16614532]
[71.70581055 90.20877075]
[59.67396164 81.25138855]
[47.64211655 72.29401398]
[34.98778152 77.11831665]
[21.77810669 75.11286163]
[11.41171169 66.97451782]
[-2.52850151 72.51261139]
[-16.46871376 78.05070496]
[-30.40892792 83.58879852]
[-40.15028763 96.78114319]
[-56.41329193 94.67243195]
[-62.46796036 79.43192291]
[-52.08576202 66.73774719]
[-35.94701767 69.64858246]
[-22.00680733 64.11048889]
[-8.06659412 58.57239914]
[5.87361908 53.03430557]
[7.09193373 42.83753967]
[12.20378208 33.93095016]
[4.32913303 21.16420174]
[-3.54551554 8.39745140]
[-18.66268158 4.64124823]
[-26.46682739 -8.41822910]
[-22.79269981 -22.80698776]
[-30.66734886 -35.57373810]
[-38.54199600 -48.34048843]
[-49.44239426 -50.28310013]
[-57.25273514 -57.81531143]
[-59.49534988 -68.20510864]
[-55.65063477 -77.87645721]
[-62.76964188 -91.07948303]
[-69.88864899 -104.28250122]
[-85.28440094 -106.21908569]
[-96.57846832 -116.85974884]
[-99.42805481 -132.11293030]
[-92.73742676 -146.11346436]
[-79.07927704 -153.47787476]
[-63.70544052 -151.37438965]
[-52.52746582 -140.61183167]
[-49.84351730 -125.32864380]
[-56.68562698 -111.40150452]
[-49.56661987 -98.19848633]
[-42.44761658 -84.99546814]
[-25.29833221 -76.26419067]
[-25.77524757 -56.21513748]
[-17.90059853 -43.44838715]
[-10.02595043 -30.68163681]
[4.48125982 -27.50729370]
[12.64914036 -14.67217064]
[9.22123432 0.52280247]
[17.09588242 13.28955269]
[24.97053146 26.05630302]
[43.33105850 27.69744301]
[56.11779404 41.32607269]
[56.59949493 60.26216507]
[68.63134003 69.21954346]
[80.66319275 78.17691803]
[92.69503784 87.13430023]
[103.46089172 82.47097015]
[116.48394775 87.08640289]
[131.17405701 84.05313873]
[145.86416626 81.01987457]
[160.55427551 77.98661041]
[175.24438477 74.95334625]
[189.93449402 71.92008209]
[204.62460327 68.88681793]
[216.50878906 57.58646393]
[232.15855408 62.48718262]
[235.47474670 78.54753876]
[223.04595947 89.24600983]
[207.65786743 83.57692719]
[192.96775818 86.61019135]
[178.27764893 89.64345551]
[163.58753967 92.67671967]
[148.89743042 95.70998383]
[134.20732117 98.74324799]
[119.51721191 101.77651215]
[133.86322021 106.15738678]
[148.20922852 110.53826141]
[163.11082458 108.82290649]
[177.91160583 111.25947571]
[191.47694397 117.66117096]
[202.76690674 127.53723907]
[210.91600037 140.13058472]
[215.29951477 154.47578430]
[215.58140564 169.47312927]
[211.74006653 183.97293091]
[204.06997681 196.86361694]
[193.15913391 207.15698242]
[179.84394836 214.06393433]
[165.14518738 217.05497742]
[150.18965149 215.90083313]
[136.12385559 210.68997192]
[124.02606964 201.82185364]
[114.82372284 189.97630310]
[109.22226715 176.06143188]
[107.65112305 161.14395142]
[110.22993469 146.36987305]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 8]
[2 7]
[9 67]
[10 66]
[11 65]
[12 64]
[15 26]
[16 25]
[17 24]
[18 23]
[28 61]
[29 60]
[30 59]
[33 56]
[34 55]
[35 54]
[39 52]
[40 51]
[41 50]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
