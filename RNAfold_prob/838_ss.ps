%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGGAUGACAAAAAAGCAUCGAGGCCCGCGAAAGACGGUAGCCAGGCGUGAGACCAACCAAAAAACGUUCUUUCGAGAACGUAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[124.48978424 182.25997925]
[122.40840149 174.10499573]
[121.37599945 165.75022888]
[121.40966034 157.33004761]
[122.50933838 148.97998047]
[124.65782928 140.83445740]
[111.06320953 134.49517822]
[96.14088440 136.01971436]
[84.10903168 144.97708130]
[72.07718658 153.93446350]
[60.04533768 162.89184570]
[54.92935562 170.65055847]
[47.53075409 171.92872620]
[45.03353882 187.53446960]
[32.18399048 196.73580933]
[16.60551262 194.07373047]
[7.54054451 181.12762451]
[10.36717033 165.57815552]
[23.40840149 156.65057373]
[38.92710876 159.64143372]
[51.08795929 150.86000061]
[63.11980820 141.90261841]
[75.15165710 132.94523621]
[87.18350220 123.98786163]
[79.41104126 115.30050659]
[76.36508942 104.74431610]
[78.10122681 94.57374573]
[65.56890869 86.33110809]
[53.03659439 78.08847046]
[40.26984406 70.21382141]
[27.27946091 62.71382523]
[14.28908062 55.21382523]
[1.19099414 47.90354919]
[-15.17655277 48.92110825]
[-24.01484489 35.10746765]
[-16.23180199 20.67291641]
[0.16604529 20.46648216]
[8.30999947 34.70052719]
[15.80695820 35.11112213]
[21.78907967 42.22344208]
[34.77946091 49.72344208]
[47.76984406 57.22344208]
[52.67182541 56.82395554]
[57.85024261 59.60961151]
[61.27922821 65.55615234]
[73.81154633 73.79878998]
[86.34386444 82.04142761]
[89.29251862 80.14173889]
[92.50000000 78.72206116]
[92.50000000 63.72206497]
[92.28184509 48.72365189]
[83.21683502 35.05772018]
[90.76065063 20.49671555]
[107.15286255 20.01975060]
[115.53056335 34.11748505]
[107.27549744 48.28738022]
[110.66838837 54.98523712]
[107.50000000 63.72206497]
[107.50000000 78.72206116]
[120.80987549 87.83173370]
[125.26582336 104.43272400]
[117.40248108 120.90056610]
[130.99710083 127.23983765]
[147.89665222 108.79969788]
[170.39665222 97.93463135]
[195.29347229 96.16970062]
[219.05035400 103.73583984]
[238.29975891 119.53981781]
[250.32080078 141.32220459]
[265.01092529 138.28894043]
[279.70101929 135.25567627]
[294.39114380 132.22241211]
[309.08123779 129.18914795]
[323.77136230 126.15587616]
[338.46145630 123.12261200]
[350.34564209 111.82226562]
[365.99542236 116.72297668]
[369.31161499 132.78332520]
[356.88281250 143.48179626]
[341.49472046 137.81272888]
[326.80462646 140.84599304]
[312.11450195 143.87925720]
[297.42440796 146.91252136]
[282.73428345 149.94578552]
[268.04418945 152.97904968]
[253.35406494 156.01231384]
[253.58891296 164.38113403]
[252.76213074 172.71427917]
[250.88655090 180.87756348]
[247.99188232 188.73950195]
[244.12426758 196.17341614]
[239.34550476 203.05941772]
[233.73210144 209.28643799]
[227.37402344 214.75390625]
[220.37330627 219.37348938]
[212.84233093 223.07041931]
[204.90208435 225.78474426]
[196.68019104 227.47236633]
[188.30888367 228.10560608]
[179.92285156 227.67379761]
[171.65705872 226.18341064]
[163.64463806 223.65795898]
[156.01469421 220.13760376]
[148.89019775 215.67855835]
[142.38607788 210.35217285]
[136.60731506 204.24380493]
[131.64727783 197.45141602]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 63]
[7 62]
[8 24]
[9 23]
[10 22]
[11 21]
[13 20]
[27 47]
[28 46]
[29 45]
[30 42]
[31 41]
[32 40]
[33 38]
[49 59]
[50 58]
[51 56]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
