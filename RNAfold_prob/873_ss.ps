%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGGGACGGCCCACGCUACUGCCGGUUCACCAAAGGCGCCAAAUCCCAAGGGAAACCACGCACUGCUCUUCGGAGCAGUAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[93.14984131 115.68000031]
[81.38360596 124.98353577]
[80.01399994 143.75582886]
[65.70420837 155.49218750]
[47.65224075 153.23947144]
[36.44686508 163.21141052]
[25.24148941 173.18334961]
[24.16741943 188.72311401]
[12.66152096 198.67645264]
[-2.14664531 197.55671692]
[-13.35202122 207.52865601]
[-24.55739784 217.50059509]
[-29.19923401 233.22908020]
[-45.20268250 236.80981445]
[-56.10476685 224.55924988]
[-50.69035721 209.07969666]
[-34.52933502 206.29521179]
[-23.32395935 196.32327271]
[-12.11858368 186.35134888]
[-11.51161575 171.51330566]
[-0.28982547 161.24072266]
[15.26955128 161.97796631]
[26.47492790 152.00602722]
[37.68030548 142.03408813]
[35.85521698 130.58918762]
[39.89019012 119.59591675]
[48.86936188 111.89183807]
[60.58508301 109.52650452]
[72.08007812 113.21730042]
[83.84630585 103.91376495]
[87.72859192 89.42488098]
[82.19050598 75.48466492]
[76.65241241 61.54445267]
[71.11431885 47.60424042]
[56.87907410 41.28003311]
[51.46124649 27.06378365]
[57.57813644 13.53162861]
[52.04004288 -0.40858436]
[37.14790726 -4.34945393]
[27.54405594 -16.16551971]
[26.74886703 -31.19321632]
[34.85800552 -43.65836334]
[29.31991386 -57.59857559]
[14.25308418 -61.30940628]
[4.27068710 -73.18927765]
[3.21115685 -88.67013550]
[11.48190498 -101.79927826]
[25.90266037 -107.52828217]
[40.92834854 -103.65422058]
[50.78128433 -91.66675568]
[51.67281342 -76.17531586]
[43.26012802 -63.13666916]
[48.79821777 -49.19645309]
[63.25069427 -45.69446564]
[72.98492432 -34.21802521]
[74.10801697 -19.03276443]
[65.98025513 -5.94667673]
[71.51834869 7.99353647]
[85.25394440 13.63880444]
[91.06893921 27.69726944]
[85.05453491 42.06614685]
[90.59262085 56.00636292]
[96.13071442 69.94657135]
[101.66880798 83.88678741]
[104.04524231 69.07623291]
[117.49536896 62.43590164]
[130.69841003 69.55487061]
[132.54153442 84.44120789]
[121.47334290 94.56529236]
[136.16345215 91.53202820]
[150.85356140 88.49877167]
[165.54367065 85.46550751]
[180.23377991 82.43224335]
[194.92388916 79.39897919]
[209.61399841 76.36571503]
[221.49818420 65.06536102]
[237.14794922 69.96607971]
[240.46414185 86.02642822]
[228.03535461 96.72489929]
[212.64726257 91.05582428]
[197.95715332 94.08908844]
[183.26704407 97.12235260]
[168.57693481 100.15561676]
[153.88682556 103.18888092]
[139.19671631 106.22213745]
[124.50659943 109.25540161]
[138.85261536 113.63627625]
[153.17326355 118.09933472]
[165.91197205 126.01926422]
[176.25048828 136.88734436]
[183.52473450 150.00547791]
[187.26745605 164.53103638]
[187.23825073 179.53100586]
[183.43899536 194.04188538]
[176.11372375 207.13159180]
[165.73295593 217.95933533]
[152.96350098 225.82958984]
[138.62557983 230.23684692]
[123.64015961 230.89801025]
[108.96980286 227.77059937]
[95.55683899 221.05551147]
[84.26283264 211.18406677]
[75.81323242 198.79035950]
[70.75077820 184.67045593]
[69.40065765 169.73133850]
[71.84958649 154.93260193]
[77.94026184 141.22480774]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[5 24]
[6 23]
[7 22]
[10 19]
[11 18]
[12 17]
[31 64]
[32 63]
[33 62]
[34 61]
[37 58]
[38 57]
[42 53]
[43 52]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
