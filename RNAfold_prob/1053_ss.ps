%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:14:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACGCGAAACGCACGCCGAAACGGCACGCGGCAAAGCCGCACGGCCAAAGGCCAAGGCAAAGCCCGGGUCGCUUCGGCGGCCCAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[121.69303131 458.89239502]
[110.75891876 448.57534790]
[101.62146759 436.63787842]
[94.51737976 423.38919067]
[89.63065338 409.17242432]
[87.08786774 394.35586548]
[86.95489502 379.32330322]
[89.23518372 364.46408081]
[93.86965179 350.16308594]
[100.73826599 336.79080200]
[109.66310883 324.69354248]
[120.41300964 314.18472290]
[132.70951843 305.53646851]
[146.23413086 298.97283936]
[141.93208313 284.60299683]
[136.92126465 279.01150513]
[137.72042847 269.75234985]
[133.83815002 255.26345825]
[129.95585632 240.77456665]
[126.07357788 226.28569031]
[122.19129181 211.79679871]
[118.30900574 197.30790710]
[114.42671967 182.81903076]
[103.65900421 172.52798462]
[107.56091309 157.19548035]
[103.67862701 142.70658875]
[99.79634094 128.21771240]
[95.91405487 113.72882080]
[86.16413116 103.70731354]
[89.59706116 90.15346527]
[85.71477509 75.66458130]
[80.39308929 68.04549408]
[81.93683624 60.69771576]
[78.47760010 46.10203934]
[75.01836395 31.50636864]
[60.85461807 25.44876289]
[53.06469345 12.36555004]
[54.45589066 -2.61872697]
[64.28601074 -13.77698803]
[60.82677078 -28.37266159]
[57.36753082 -42.96833420]
[46.06151962 -47.20281601]
[38.33858490 -56.32472610]
[36.07352829 -67.93713379]
[39.72684860 -79.06305695]
[48.25701141 -86.90863800]
[45.65229034 -101.68075562]
[43.04756927 -116.45287323]
[40.44284439 -131.22499084]
[31.73792648 -145.77355957]
[43.30816650 -158.16572571]
[58.41900635 -150.47814941]
[55.21496201 -133.82971191]
[57.81968307 -119.05759430]
[60.42440796 -104.28547668]
[63.02912903 -89.51335907]
[78.58658600 -80.08395386]
[82.53211212 -62.00233078]
[71.96320343 -46.42757034]
[75.42243958 -31.83189964]
[78.88168335 -17.23622513]
[92.67401123 -11.67658806]
[100.64216614 1.08948207]
[99.55256653 16.27717972]
[89.61403656 28.04713058]
[93.07327271 42.64280319]
[96.53250885 57.23847580]
[100.20365906 71.78229523]
[104.08594513 86.27117920]
[113.83586884 96.29268646]
[110.40293884 109.84653473]
[114.28522491 124.33541870]
[118.16751099 138.82431030]
[122.04979706 153.31320190]
[133.09519958 164.64057922]
[128.91560364 178.93673706]
[132.79789734 193.42562866]
[136.68017578 207.91452026]
[140.56246948 222.40339661]
[144.44474792 236.89228821]
[148.32704163 251.38117981]
[152.20932007 265.87005615]
[156.30192566 280.30096436]
[160.60397339 294.67080688]
[175.51039124 292.72271729]
[190.53625488 293.19119263]
[205.29237366 296.06402588]
[219.39651489 301.26684570]
[232.48335266 308.66488647]
[244.21391296 318.06646729]
[254.28433228 329.22814941]
[262.43377686 341.86074829]
[268.45114136 355.63708496]
[272.18057251 370.20031738]
[273.52548218 385.17318726]
[272.45098877 400.16793823]
[268.98498535 414.79608154]
[263.21719360 428.67877197]
[255.29704285 441.45635986]
[245.42968750 452.79794312]
[233.87069702 462.40972900]
[220.91949463 470.04269409]
[206.91154480 475.49920654]
[192.20967102 478.63784790]
[177.19470215 479.37741089]
[162.25556946 477.69863892]
[147.77920532 473.64511108]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 84]
[15 83]
[17 82]
[18 81]
[19 80]
[20 79]
[21 78]
[22 77]
[23 76]
[25 74]
[26 73]
[27 72]
[28 71]
[30 69]
[31 68]
[33 67]
[34 66]
[35 65]
[39 61]
[40 60]
[41 59]
[46 56]
[47 55]
[48 54]
[49 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
