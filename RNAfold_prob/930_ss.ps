%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGUCUCGGUCGAGGUCGACGCCACGUUACUAAUUAUGUAACGUGGGCAUCUACGGAUGUGAGACGAGCCAUUUCGAUGGCUCAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[111.01950073 153.88648987]
[119.77315521 141.70561218]
[130.88420105 131.62867737]
[143.85960388 124.10280609]
[158.12362671 119.46193695]
[173.04676819 117.91201019]
[160.51445007 109.66938019]
[147.98213196 101.42674255]
[135.44981384 93.18411255]
[122.91750336 84.94147491]
[116.44038391 117.55850220]
[87.52944946 116.50389862]
[74.76270294 124.37854767]
[61.99595261 132.25320435]
[49.22920227 140.12785339]
[41.92666245 154.81134033]
[25.54455376 155.55870056]
[16.93538475 141.60112000]
[24.95553207 127.29694366]
[41.35455322 127.36109924]
[54.12130356 119.48645020]
[66.88805389 111.61180115]
[79.65480042 103.73715210]
[78.58879089 89.03883362]
[88.24961853 75.22300720]
[75.71730042 66.98036957]
[63.18498230 58.73773575]
[50.65266418 50.49510193]
[38.12034607 42.25246429]
[25.58802986 34.00983047]
[13.05571175 25.76719666]
[0.52339494 17.52456093]
[-12.00892258 9.28192711]
[-26.93666840 13.93986607]
[-41.34604645 7.86501598]
[-48.43339157 -6.07426548]
[-44.85227203 -21.29627609]
[-32.29358673 -30.61364746]
[-16.68716049 -29.62700081]
[-5.40187073 -18.80220222]
[-3.76628757 -3.25039029]
[8.76602936 4.99224424]
[21.29834747 13.23487949]
[33.83066559 21.47751427]
[46.36297989 29.72014809]
[58.89529800 37.96278381]
[71.42761230 46.20541763]
[83.95993042 54.44805145]
[96.49224854 62.69068527]
[110.17762756 56.54980087]
[112.35160065 41.70817947]
[114.52558136 26.86655235]
[116.69956207 12.02492905]
[118.87353516 -2.81669593]
[112.31931305 -17.84913254]
[122.27701569 -30.87895203]
[138.50302124 -28.50219345]
[144.30538940 -13.16386223]
[133.71516418 -0.64271796]
[131.54118347 14.19890690]
[129.36720276 29.04053116]
[127.19322968 43.88215637]
[125.01924896 58.72378159]
[131.16014099 72.40915680]
[143.69245911 80.65179443]
[156.22477722 88.89442444]
[168.75708008 97.13706207]
[181.28939819 105.37969208]
[196.02207947 108.19898987]
[210.71218872 105.16572571]
[225.40229797 102.13246155]
[240.09240723 99.09919739]
[254.78251648 96.06593323]
[269.47262573 93.03266907]
[284.16271973 89.99940491]
[296.04693604 78.69905090]
[311.69668579 83.59976959]
[315.01287842 99.66011810]
[302.58410645 110.35859680]
[287.19598389 104.68951416]
[272.50588989 107.72277832]
[257.81576538 110.75604248]
[243.12567139 113.78930664]
[228.43556213 116.82257080]
[213.74545288 119.85583496]
[199.05534363 122.88909912]
[212.34902954 129.83732605]
[223.89228821 139.41612244]
[233.17291260 151.20042419]
[239.77911377 164.66734314]
[243.41775513 179.21932983]
[243.92738342 194.21067810]
[241.28536987 208.97616577]
[235.60896301 222.86064148]
[227.15003967 235.24798584]
[216.28392029 245.58857727]
[203.49278259 253.42353821]
[189.34420776 258.40524292]
[174.46597290 260.31265259]
[159.51826477 259.06109619]
[145.16438293 254.70614624]
[132.04119873 247.44099426]
[120.73104858 237.58805847]
[111.73578644 225.58450317]
[105.45453644 211.96298218]
[102.16603851 197.32789612]
[102.01618958 182.32864380]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 68]
[7 67]
[8 66]
[9 65]
[10 64]
[12 23]
[13 22]
[14 21]
[15 20]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
