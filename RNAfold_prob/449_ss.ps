%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGAGUACGGGACGCGAAAGCGGAAGAAAUUCCCCAAAACAAUUGAAAACAAUUGGUACUCAAAAUGGUAAUUCGUUACCAUAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[104.99037933 202.49411011]
[110.83267975 188.67863464]
[119.31825256 176.30950928]
[130.10469055 165.88584900]
[142.75677490 157.82824707]
[156.76396179 152.46183777]
[171.56658936 150.00277710]
[158.57620239 142.50277710]
[145.58583069 135.00277710]
[132.59544373 127.50278473]
[119.60506439 120.00278473]
[106.61468506 112.50278473]
[73.54929352 127.75065613]
[58.60637665 129.05799866]
[43.66345596 130.36532593]
[28.72053528 131.67266846]
[14.03042603 134.70593262]
[-0.20821361 139.42410278]
[-14.44685364 144.14227295]
[-24.93879890 156.74589539]
[-41.05167770 153.69512939]
[-46.20994568 138.12835693]
[-35.10721588 126.05933380]
[-19.16502380 129.90364075]
[-4.92638493 125.18546295]
[9.31225491 120.46729279]
[-3.96286988 113.48366547]
[-10.79741955 100.13117218]
[-8.69926262 85.27864075]
[1.56653500 74.34185028]
[16.25668144 71.30876160]
[30.01460075 77.28535461]
[37.82364273 90.09233856]
[36.83634186 105.05981445]
[27.41319847 116.72974396]
[42.35612106 115.42240906]
[57.29904175 114.11507416]
[72.24195862 112.80773926]
[76.89373016 106.92462158]
[62.82843018 101.71237946]
[63.43917465 86.72481537]
[77.88193512 82.67428589]
[86.19725800 95.15838623]
[90.84902191 89.27526855]
[88.67504883 74.43364716]
[86.50106812 59.59201813]
[84.32709503 44.75039291]
[82.15311432 29.90876961]
[79.97913361 15.06714535]
[69.38890839 2.54600120]
[75.19128418 -12.79233074]
[91.41728210 -15.16908932]
[101.37498474 -2.13926959]
[94.82076263 12.89316750]
[96.99473572 27.73479271]
[99.16871643 42.57641602]
[101.34269714 57.41804123]
[103.51667023 72.25966644]
[105.69065094 87.10128784]
[114.11468506 99.51240540]
[127.10506439 107.01240540]
[140.09544373 114.51240540]
[153.08583069 122.01240540]
[166.07620239 129.51240540]
[179.06658936 137.01240540]
[179.97773743 122.04010010]
[193.81282043 116.24435425]
[205.12344360 126.09674072]
[201.27923584 140.59680176]
[215.96934509 137.56353760]
[230.65945435 134.53027344]
[245.34956360 131.49700928]
[260.03967285 128.46374512]
[274.72979736 125.43048859]
[289.41989136 122.39722443]
[301.30407715 111.09687042]
[316.95385742 115.99758911]
[320.27005005 132.05793762]
[307.84124756 142.75640869]
[292.45315552 137.08734131]
[277.76306152 140.12060547]
[263.07293701 143.15385437]
[248.38282776 146.18711853]
[233.69271851 149.22038269]
[219.00260925 152.25364685]
[204.31250000 155.28691101]
[217.58570862 162.27418518]
[229.19465637 171.77325439]
[238.67092896 183.40081787]
[245.63215637 196.68771362]
[249.79743958 211.09779358]
[250.99871826 226.04960632]
[249.18751526 240.93986511]
[244.43692017 255.16770935]
[236.93861389 268.15905762]
[226.99514771 279.38970947]
[215.00776672 288.40652466]
[201.46014404 294.84561157]
[186.89894104 298.44720459]
[171.91171265 299.06594849]
[157.10317993 296.67687988]
[143.07089233 291.37643433]
[130.38105774 283.37844849]
[119.54570007 273.00564575]
[111.00202942 260.67657471]
[105.09480286 246.88873291]
[102.06237030 232.19845581]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[13 38]
[14 37]
[15 36]
[16 35]
[17 26]
[18 25]
[19 24]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
