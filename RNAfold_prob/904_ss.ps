%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGUACGGUCCCAAGCGAAAGCAGCGAAAGCAAAGGAGACAAAGUACAAGCGAAAGCAAGCGUACGUCUUCGGAUGUACAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[118.06587982 314.03503418]
[110.96163940 300.77133179]
[106.49621582 286.40274048]
[104.83103180 271.44866943]
[106.02628326 256.44973755]
[110.03875732 241.94815063]
[116.72341156 228.46809387]
[125.83859253 216.49687195]
[137.05479431 206.46725464]
[149.96656799 198.74180603]
[144.83625793 184.64640808]
[139.70596313 170.55102539]
[134.57565308 156.45562744]
[129.44535828 142.36024475]
[124.11790466 137.06956482]
[124.37734985 127.77960205]
[119.65917969 113.54096222]
[114.94100952 99.30232239]
[120.96575165 110.82282257]
[117.42205811 127.11722565]
[101.95556641 140.82185364]
[77.34464264 144.01770020]
[62.40172577 145.32504272]
[49.28599930 155.16931152]
[34.31099319 148.48490906]
[32.88171387 132.14816284]
[46.46847916 122.96492767]
[61.09439087 130.38212585]
[76.03730774 129.07478333]
[77.33966827 121.68872833]
[81.24675751 99.53055573]
[67.65213776 93.19127655]
[51.37144852 95.15880585]
[41.74491882 81.88243866]
[48.67549896 67.01976013]
[65.03359985 65.86022949]
[73.99140930 79.59666443]
[87.58602905 85.93593597]
[94.51512909 83.06581116]
[96.47270966 68.19409943]
[108.37332153 77.32556152]
[115.30241394 74.45542908]
[120.43271637 60.36004257]
[125.56301880 46.26465607]
[130.69332886 32.16926575]
[135.82362366 18.07387543]
[140.95391846 3.97848630]
[139.97373962 -1.46922660]
[141.16491699 -6.22296715]
[143.86125183 -9.54459572]
[147.19494629 -11.08867836]
[153.53422546 -24.68329430]
[159.87350464 -38.27791214]
[166.21276855 -51.87252808]
[166.00944519 -58.73386765]
[168.95446777 -63.82333374]
[173.33634949 -66.05674744]
[180.45536804 -79.25977325]
[173.61325073 -93.18690491]
[176.29719543 -108.47010040]
[187.47517395 -119.23265839]
[202.84901428 -121.33614349]
[216.50717163 -113.97173309]
[223.19778442 -99.97119141]
[220.34820557 -84.71800995]
[209.05413818 -74.07735443]
[193.65838623 -72.14076233]
[186.53938293 -58.93774414]
[179.80738831 -45.53325653]
[173.46810913 -31.93863869]
[167.12884521 -18.34402084]
[160.78956604 -4.74940443]
[155.04931641 9.10878849]
[149.91900635 23.20417786]
[144.78871155 37.29956818]
[139.65840149 51.39495468]
[134.52810669 65.49034882]
[129.39781189 79.58573151]
[129.17964172 94.58415222]
[133.89781189 108.82278442]
[138.61598206 123.06142426]
[143.54074097 137.22993469]
[148.67105103 151.32533264]
[153.80134583 165.42071533]
[158.93165588 179.51611328]
[164.06195068 193.61149597]
[178.91877747 191.23001099]
[193.95779419 191.70350647]
[208.63537598 195.01486206]
[222.42092896 201.04437256]
[234.81611633 209.57408142]
[245.37286377 220.29563904]
[253.70953369 232.82147217]
[259.52478027 246.69876099]
[262.60836792 261.42587280]
[262.84884644 276.47042847]
[260.23751831 291.28857422]
[254.86875916 305.34466553]
[246.93667603 318.13052368]
[236.72798157 329.18399048]
[224.61174011 338.10549927]
[211.02593994 344.57250977]
[196.46168518 348.35128784]
[181.44548035 349.30517578]
[166.52014160 347.39974976]
[152.22520447 342.70385742]
[139.07743835 335.38723755]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 86]
[11 85]
[12 84]
[13 83]
[14 82]
[16 81]
[17 80]
[18 79]
[22 29]
[23 28]
[31 38]
[32 37]
[42 78]
[43 77]
[44 76]
[45 75]
[46 74]
[47 73]
[51 72]
[52 71]
[53 70]
[54 69]
[57 68]
[58 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
