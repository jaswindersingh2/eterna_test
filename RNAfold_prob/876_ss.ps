%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCACGGUCCGGCCCUCGCUUUUGCUGGUUUUCCUUUGGUGCCAAUGACCACGCUUCGGCACGCGUGGACCUUCGGGUCCACAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[48.55243301 132.26573181]
[34.95781708 138.60499573]
[21.36319923 144.94427490]
[7.76858234 151.28355408]
[-5.82603455 157.62281799]
[-19.42065048 163.96209717]
[-33.01526642 170.30137634]
[-39.59450531 176.86524963]
[-47.09872055 176.62088013]
[-60.87196350 182.56207275]
[-74.64520264 188.50328064]
[-88.41844940 194.44447327]
[-94.51149750 210.76286316]
[-110.18251801 217.56375122]
[-125.64320374 211.12605286]
[-139.23782349 217.46533203]
[-152.83244324 223.80459595]
[-161.79025269 237.54103088]
[-178.14834595 236.38150024]
[-185.07893372 221.51882935]
[-175.45240784 208.24246216]
[-159.17170715 210.20999146]
[-145.57708740 203.87071228]
[-131.98248291 197.53143311]
[-129.27320862 184.84239197]
[-119.57283020 175.93356323]
[-106.31156158 174.26257324]
[-94.35964203 180.67123413]
[-80.58640289 174.73002625]
[-66.81316376 168.78883362]
[-53.03991699 162.84764099]
[-39.35454178 156.70675659]
[-25.75992584 150.36747742]
[-12.16530895 144.02821350]
[1.42930830 137.68893433]
[15.02392483 131.34965515]
[28.61854172 125.01038361]
[42.21315765 118.67111206]
[39.33370209 97.25592804]
[44.13475418 76.18815613]
[56.00848770 58.13502121]
[73.45166016 45.38209915]
[94.25592041 39.54394150]
[94.69218445 24.55028725]
[95.12845612 9.55663300]
[95.56472778 -5.43702078]
[96.00099945 -20.43067551]
[82.11801147 -26.62187767]
[71.66469574 -37.65803146]
[66.23512268 -51.85620499]
[66.65724945 -67.05127716]
[72.86670685 -80.92611694]
[83.91660309 -91.36489868]
[98.12191010 -96.77579498]
[113.31641388 -96.33367920]
[127.18306732 -90.10597229]
[137.60729980 -79.04235840]
[142.99951172 -64.82994843]
[142.53741455 -49.63603592]
[136.29147339 -35.77758789]
[125.21414185 -25.36790848]
[110.99465179 -19.99440384]
[110.55838776 -5.00075006]
[110.12211609 9.99290371]
[109.68584442 24.98655891]
[109.24957275 39.98021317]
[129.98423767 47.19020081]
[146.80079651 61.30096436]
[157.50178528 80.46862030]
[172.19189453 77.43535614]
[186.88200378 74.40209961]
[201.57211304 71.36883545]
[216.26222229 68.33557129]
[230.95233154 65.30230713]
[245.64244080 62.26904297]
[257.52664185 50.96868896]
[273.17639160 55.86940765]
[276.49258423 71.92975616]
[264.06381226 82.62822723]
[248.67570496 76.95915222]
[233.98559570 79.99241638]
[219.29548645 83.02568054]
[204.60537720 86.05894470]
[189.91526794 89.09220886]
[175.22515869 92.12546539]
[160.53504944 95.15872955]
[160.68919373 102.17977905]
[160.03173828 109.17167664]
[158.57148743 116.04092407]
[156.32794189 122.69564819]
[153.33113098 129.04685974]
[149.62110901 135.00964355]
[145.24751282 140.50422668]
[140.26881409 145.45715332]
[134.75160217 149.80216980]
[128.76965332 153.48118591]
[122.40296173 156.44499207]
[115.73667908 158.65396118]
[108.85994720 160.07853699]
[101.86473083 160.69969177]
[94.84457397 160.50909424]
[87.89337158 159.50932312]
[81.10406494 157.71371460]
[74.56745148 155.14630127]
[68.37095642 151.84141541]
[62.59743118 147.84326172]
[57.32409668 143.20529175]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 35]
[5 34]
[6 33]
[7 32]
[9 31]
[10 30]
[11 29]
[12 28]
[15 24]
[16 23]
[17 22]
[43 66]
[44 65]
[45 64]
[46 63]
[47 62]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
