%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAUGGCAGGUGGCAAAAGGAAAAAAGCCGCCUCCUAGCGGAUGCGGCACCGCCAGCUGCCCUGAGCGCUACAUUCGUGUAGCGAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[104.22823334 198.58462524]
[106.49095154 183.75627136]
[112.28036499 169.91854858]
[121.25118256 157.89672852]
[132.86840820 148.40777588]
[146.43917847 142.01760864]
[161.15740967 139.10711670]
[147.75291443 132.37512207]
[134.34843445 125.64314270]
[120.94393921 118.91115570]
[107.53945160 112.17916870]
[93.57142639 112.80034637]
[85.72856140 101.22532654]
[72.32407379 94.49333954]
[58.91958237 87.76135254]
[45.51509094 81.02935791]
[40.83485794 81.50107574]
[36.71075439 80.46707153]
[33.57000732 78.31575775]
[31.65678406 75.53876495]
[31.01406479 72.65718842]
[18.48174667 64.41455078]
[11.28954411 67.73040009]
[3.45576525 68.24605560]
[-3.97714877 65.94242859]
[-10.03778934 61.17231750]
[-13.95270729 54.60734940]
[-15.24497509 47.14377975]
[-13.79184246 39.78019714]
[-24.99721909 29.80825806]
[-36.20259476 19.83632088]
[-47.40797043 9.86438274]
[-58.61334610 -0.10755529]
[-74.06614685 -3.50189543]
[-78.43001556 -17.74289131]
[-89.63539124 -27.71482849]
[-100.84076691 -37.68676758]
[-117.00178528 -40.47124863]
[-122.41619873 -55.95079041]
[-111.51411438 -68.20136261]
[-95.51066589 -64.62063599]
[-90.86882782 -48.89214325]
[-79.66345215 -38.92020416]
[-68.45807648 -28.94826698]
[-53.80675888 -26.26718712]
[-48.64140701 -11.31293106]
[-37.43603134 -1.34099340]
[-26.23065758 8.63094425]
[-15.02528095 18.60288239]
[-3.81990457 28.57482147]
[18.55403328 30.22352600]
[26.72438049 51.88223648]
[39.25669861 60.12487030]
[52.24707794 67.62487030]
[65.65156555 74.35685730]
[79.05606079 81.08884430]
[92.46054840 87.82083130]
[106.42857361 87.19965363]
[114.27143860 98.77467346]
[127.67592621 105.50666046]
[141.08041382 112.23864746]
[154.48490906 118.97064209]
[167.88940430 125.70262909]
[182.76107788 127.66052246]
[197.45118713 124.62725830]
[203.91816711 110.64569092]
[217.22241211 103.23957825]
[232.15989685 105.06600189]
[243.02752686 115.21649933]
[257.71762085 112.18323517]
[272.40774536 109.14997101]
[287.09783936 106.11670685]
[301.78796387 103.08344269]
[316.47805786 100.05017853]
[331.16818237 97.01691437]
[343.05236816 85.71656036]
[358.70214844 90.61727905]
[362.01834106 106.67763519]
[349.58953857 117.37610626]
[334.20144653 111.70702362]
[319.51132202 114.74028778]
[304.82122803 117.77355194]
[290.13110352 120.80681610]
[275.44100952 123.84008026]
[260.75088501 126.87334442]
[246.06079102 129.90660095]
[240.10235596 143.53140259]
[227.10993958 151.12489319]
[211.96035767 149.59402466]
[200.48443604 139.31736755]
[185.79432678 142.35063171]
[199.25502014 148.96952820]
[210.71000671 158.65370178]
[219.47610474 170.82562256]
[225.03051758 184.75933838]
[227.04199219 199.62385559]
[225.39053345 214.53266907]
[220.17466736 228.59661865]
[211.70544434 240.97694397]
[200.48797607 250.93528748]
[187.19126892 257.87771606]
[172.60832214 261.39022827]
[157.60885620 261.26330566]
[143.08744812 257.50451660]
[129.91012573 250.33805847]
[118.86277771 240.19132996]
[110.60427856 227.66946411]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 63]
[8 62]
[9 61]
[10 60]
[11 59]
[13 57]
[14 56]
[15 55]
[16 54]
[21 53]
[22 52]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[35 44]
[36 43]
[37 42]
[64 91]
[65 90]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
