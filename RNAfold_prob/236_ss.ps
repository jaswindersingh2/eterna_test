%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACAUUGGUUAAGGAUAUUGAGAGAUAAUCCAAAACCAUAUUUGAGAGAAAUGGAUAAUUGGUGCAAGAGCUUCGGUUUUUGAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[244.59957886 209.92863464]
[232.77420044 201.57624817]
[221.83651733 192.09013367]
[211.89480591 181.56402588]
[203.04748535 170.10194397]
[195.38217163 157.81723022]
[188.97477722 144.83129883]
[183.88880920 131.27256775]
[180.17466736 117.27510834]
[177.86920166 102.97734833]
[162.89457703 103.84951782]
[147.91996765 104.72168732]
[132.94534302 105.59386444]
[117.97071838 106.46603394]
[108.25998688 117.22000885]
[93.79498291 118.06250000]
[82.90145874 108.50859070]
[67.92683411 109.38076019]
[52.95220947 110.25292969]
[37.97758865 111.12510681]
[23.01723480 112.21497345]
[8.07431507 113.52230835]
[-6.86860561 114.82964325]
[-19.98433304 124.67391968]
[-34.95933533 117.98950958]
[-36.38861847 101.65277100]
[-22.80185127 92.46952820]
[-8.17594242 99.88672638]
[6.76697874 98.57939148]
[21.70989990 97.27205658]
[28.19914246 93.49545288]
[37.10541534 96.15048218]
[52.08003998 95.27831268]
[67.05466461 94.40613556]
[82.02928162 93.53396606]
[91.74001312 82.77999115]
[106.20501709 81.93750000]
[117.09854126 91.49140930]
[132.07316589 90.61923981]
[147.04779053 89.74707031]
[162.02241516 88.87489319]
[176.99703979 88.00272369]
[177.73568726 72.42510986]
[180.13592529 57.01657867]
[184.17005920 41.95385361]
[189.79164124 27.40965080]
[196.93605042 13.55073833]
[205.52120972 0.53599954]
[215.44848633 -11.48537636]
[226.60389709 -22.37561035]
[238.85937500 -32.00990677]
[252.07424927 -40.27789307]
[266.09686279 -47.08487320]
[280.76629639 -52.35291672]
[295.91424561 -56.02175903]
[311.36694336 -58.04946899]
[326.94708252 -58.41296387]
[342.47598267 -57.10822678]
[357.77554321 -54.15039062]
[372.67031860 -49.57354736]
[386.98947144 -43.43034363]
[400.56887817 -35.79139328]
[413.25283813 -26.74446106]
[424.89596558 -16.39344597]
[435.36480713 -4.85719538]
[444.53945923 7.73185873]
[452.31475830 21.22922325]
[458.60168457 35.48000336]
[463.32830811 50.32067871]
[478.01840210 47.28741455]
[492.70852661 44.25415039]
[507.39862061 41.22088623]
[522.08874512 38.18762589]
[536.77886963 35.15436172]
[551.46893311 32.12109756]
[563.35314941 20.82074356]
[579.00292969 25.72146225]
[582.31909180 41.78181458]
[569.89031982 52.48028564]
[554.50219727 46.81120682]
[539.81213379 49.84447098]
[525.12200928 52.87773514]
[510.43188477 55.91099548]
[495.74179077 58.94425964]
[481.05166626 61.97752380]
[466.36157227 65.01078796]
[467.84432983 79.39840698]
[467.89056396 93.86275482]
[466.49972534 108.26075745]
[463.68545532 122.44998169]
[459.47546387 136.29005432]
[453.91128540 149.64404297]
[447.04785156 162.37980652]
[438.95294189 174.37130737]
[429.70654297 185.49986267]
[419.39999390 195.65533447]
[408.13516235 204.73718262]
[396.02343750 212.65545654]
[383.18450928 219.33174133]
[369.74536133 224.69992065]
[355.83886719 228.70674133]
[341.60253906 231.31248474]
[327.17718506 232.49125671]
[312.70547485 232.23126221]
[298.33059692 230.53495789]
[284.19470215 227.41900635]
[270.43768311 222.91412354]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 42]
[11 41]
[12 40]
[13 39]
[14 38]
[17 35]
[18 34]
[19 33]
[20 32]
[21 30]
[22 29]
[23 28]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
