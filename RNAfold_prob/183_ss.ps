%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:14:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGCAGGGCAGGGCCCGGGAAACGCGGAAACGACGGCCGGGAGCGCGGGCCCGGGCAACAAGCGGCCGCUUCGGCGGCCGAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[196.09017944 323.81835938]
[188.54249573 318.86618042]
[181.50831604 313.20715332]
[175.05361938 306.89416504]
[169.23895264 299.98623657]
[164.11891174 292.54794312]
[159.74153137 284.64895630]
[156.14794922 276.36312866]
[153.37194824 267.76806641]
[151.43966675 258.94421387]
[150.36933899 249.97418213]
[150.17112732 240.94197083]
[150.84701538 231.93220520]
[152.39082336 223.02925110]
[154.78820801 214.31655884]
[158.01686096 205.87576294]
[162.04667664 197.78594971]
[166.84001160 190.12298584]
[172.35209656 182.95870972]
[161.74549866 172.35209656]
[151.13890076 161.74549866]
[140.53230286 151.13890076]
[129.92568970 140.53230286]
[119.31909180 129.92568970]
[108.71249390 119.31909180]
[96.03631592 120.81884003]
[84.79805756 114.76604462]
[79.07468414 103.35649872]
[80.94248199 90.72930145]
[70.64885712 79.81869507]
[60.35522842 68.90809631]
[50.06160355 57.99748993]
[35.15521622 61.42484665]
[20.63060188 56.96026993]
[10.35910892 45.89849854]
[7.02590179 31.27845383]
[11.42852879 17.04882050]
[1.13490450 6.13821602]
[-14.79500389 4.23622370]
[-23.11725235 -9.47945118]
[-17.44772530 -24.48731613]
[-2.13559747 -29.27462196]
[11.07297611 -20.16895676]
[12.04550934 -4.15540886]
[22.33913422 6.75519562]
[36.80068207 3.18739653]
[51.20218277 7.36504459]
[61.64800644 18.26234436]
[65.26049805 33.02197647]
[60.97220993 47.70386505]
[71.26583099 58.61446762]
[81.55945587 69.52507019]
[91.85308075 80.43567657]
[108.28738403 80.49476624]
[119.73802185 92.28342438]
[119.31909180 108.71249390]
[129.92568970 119.31909180]
[140.53230286 129.92568970]
[151.13890076 140.53230286]
[161.74549866 151.13890076]
[172.35209656 161.74549866]
[182.95870972 172.35209656]
[205.37635803 158.26139832]
[230.83613586 151.03276062]
[257.28915405 151.24078369]
[282.60870361 158.86186218]
[304.76101685 173.27673340]
[321.96884155 193.32066345]
[332.85388184 217.37767029]
[347.54397583 214.34440613]
[362.23410034 211.31114197]
[376.92419434 208.27787781]
[391.61431885 205.24461365]
[406.30441284 202.21134949]
[420.99453735 199.17808533]
[432.87872314 187.87773132]
[448.52847290 192.77845764]
[451.84466553 208.83880615]
[439.41589355 219.53727722]
[424.02780151 213.86819458]
[409.33767700 216.90145874]
[394.64758301 219.93472290]
[379.95745850 222.96798706]
[365.26736450 226.00125122]
[350.57723999 229.03451538]
[335.88714600 232.06777954]
[336.56576538 241.05307007]
[336.37258911 250.06259155]
[335.30932617 259.01196289]
[333.38577271 267.81732178]
[330.61981201 276.39617920]
[327.03720093 284.66812134]
[322.67141724 292.55563354]
[317.56320190 299.98477173]
[311.76028442 306.88586426]
[305.31692505 313.19415283]
[298.29336548 318.85049438]
[290.75534058 323.80175781]
[282.77334595 328.00149536]
[274.42208862 331.41024780]
[265.77972412 333.99591064]
[256.92721558 335.73416138]
[247.94741821 336.60861206]
[238.92443848 336.61090088]
[229.94277954 335.74087524]
[221.08659363 334.00653076]
[212.43885803 331.42401123]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 62]
[20 61]
[21 60]
[22 59]
[23 58]
[24 57]
[25 56]
[29 53]
[30 52]
[31 51]
[32 50]
[37 45]
[38 44]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
