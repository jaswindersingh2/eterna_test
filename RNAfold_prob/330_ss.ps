%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGUAGGUACGAAAAAGUACGCGAAACGCACUACACGCACACGAAAAGUGCAGCAAAAGCUGGCGUCGGUCCUUCGGGACCGAAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[39.02435303 166.25941467]
[44.17694855 152.17216492]
[52.03749466 139.39671326]
[62.28968430 128.44717407]
[74.52098083 119.76412201]
[88.23807526 113.69732666]
[73.99943542 118.41549683]
[59.76079559 123.13366699]
[45.52215576 127.85183716]
[32.11766815 134.58383179]
[19.83038712 143.18746948]
[7.54310656 151.79112244]
[-4.74417400 160.39476013]
[-7.24138975 176.00051880]
[-20.09094048 185.20185852]
[-35.66941833 182.53977966]
[-44.73438644 169.59367371]
[-41.90776062 154.04420471]
[-28.86652756 145.11662292]
[-13.34782028 148.10748291]
[-1.06053984 139.50384521]
[11.22674084 130.90019226]
[23.51402092 122.29654694]
[19.42142105 107.86565399]
[4.44679928 106.99348450]
[-10.52782345 106.12130737]
[-26.69172096 111.23645782]
[-36.08157730 97.12026215]
[-25.11642265 84.18961334]
[-9.65565109 91.14669037]
[5.31897163 92.01885986]
[20.29359436 92.89103699]
[35.69870758 101.03720093]
[40.80398560 113.61319733]
[55.04262543 108.89502716]
[69.28126526 104.17685699]
[83.51990509 99.45868683]
[92.12355042 87.17140961]
[91.68727875 72.17774963]
[91.25100708 57.18409729]
[90.81474304 42.19044495]
[76.92707825 40.81575775]
[64.64993286 27.54283714]
[59.51962662 13.44744778]
[54.38932419 -0.64794153]
[40.51556778 -8.70389557]
[38.30644608 -24.59412384]
[49.45660782 -36.12900162]
[65.41260529 -34.45996094]
[73.93436432 -20.86734200]
[68.48471069 -5.77824354]
[73.61501312 8.31714535]
[78.74531555 22.41253471]
[93.74372864 22.19437599]
[98.46190643 7.95573664]
[103.18007660 -6.28290272]
[107.89824677 -20.52154160]
[104.05394745 -36.46373367]
[116.12297821 -47.56646347]
[131.68974304 -42.40819931]
[134.74049377 -26.29531670]
[122.13688660 -15.80337143]
[117.41871643 -1.56473148]
[112.70054626 12.67390823]
[107.98236847 26.91254807]
[105.80839539 41.75417328]
[106.24466705 56.74782562]
[106.68093872 71.74147797]
[107.11720276 86.73513794]
[118.88343811 96.03866577]
[133.57354736 93.00540161]
[148.26365662 89.97213745]
[162.95376587 86.93887329]
[177.64387512 83.90561676]
[192.33398438 80.87235260]
[204.21818542 69.57199860]
[219.86793518 74.47271729]
[223.18414307 90.53306580]
[210.75535583 101.23153687]
[195.36724854 95.56246185]
[180.67713928 98.59572601]
[165.98703003 101.62898254]
[151.29692078 104.66224670]
[136.60681152 107.69551086]
[121.91670227 110.72877502]
[136.48466492 114.30292511]
[150.04617310 120.71271515]
[162.05552673 129.70022583]
[172.02947998 140.90382385]
[179.56668091 153.87265015]
[184.36383057 168.08486938]
[186.22790527 182.96859741]
[185.08390808 197.92491150]
[180.97784424 212.35197449]
[174.07496643 225.66926575]
[164.65301514 237.34089661]
[153.09115601 246.89721680]
[139.85459900 253.95367432]
[125.47599030 258.22634888]
[110.53391266 259.54327393]
[95.62962341 257.85147095]
[81.36286163 253.21902466]
[68.30771637 245.83233643]
[56.98950577 235.98864746]
[47.86368179 224.08406067]
[41.29745483 210.59759521]
[37.55504227 196.07194519]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 37]
[7 36]
[8 35]
[9 34]
[10 23]
[11 22]
[12 21]
[13 20]
[24 32]
[25 31]
[26 30]
[38 69]
[39 68]
[40 67]
[41 66]
[43 53]
[44 52]
[45 51]
[54 65]
[55 64]
[56 63]
[57 62]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
