%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAGGUACAUACUGAAAUGAAAAUAUAGAAAUAAAACAUGUAGAGGUACGACGUAAACGAAGCACUGUAUUUCGAUACAGUAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[18.73760033 351.71231079]
[4.78502846 350.51779175]
[-8.94784641 347.78186035]
[-22.29128647 343.53854370]
[-35.08038712 337.84045410]
[-47.15711975 330.75823975]
[-58.37227631 322.37960815]
[-68.66590118 333.29022217]
[-78.95952606 344.20080566]
[-76.96452332 359.71063232]
[-85.44924927 372.84619141]
[-100.40746307 377.40533447]
[-114.77636719 371.23535156]
[-121.77139282 357.24951172]
[-118.08970642 342.05151367]
[-105.46968842 332.81738281]
[-89.87013245 333.90719604]
[-79.57650757 322.99658203]
[-69.28288269 312.08596802]
[-79.56285858 299.66708374]
[-88.17237091 286.03530884]
[-94.96997833 271.41397095]
[-99.84394836 256.04266357]
[-102.71404266 240.17327881]
[-103.53289032 224.06594849]
[-102.28672791 207.98472595]
[-98.99565887 192.19329834]
[-93.71331787 176.95063782]
[-86.52597809 162.50672913]
[-77.55120087 149.09854126]
[-66.93583679 136.94609070]
[-54.85367966 126.24882507]
[-41.50259399 117.18238068]
[-27.10128212 109.89567566]
[-11.88570595 104.50847626]
[3.89478779 101.10940552]
[19.98155022 99.75451660]
[36.11086655 100.46636963]
[52.01828003 103.23361206]
[67.44293976 108.01119995]
[82.13185120 114.72113037]
[90.00650024 101.95437622]
[91.25528717 93.85389709]
[98.30043030 88.93552399]
[106.54306793 76.40320587]
[114.78569794 63.87088776]
[123.02833557 51.33856964]
[130.90298462 38.57181931]
[138.40298462 25.58143806]
[145.90298462 12.59105682]
[153.40298462 -0.39932388]
[160.90298462 -13.38970470]
[168.40298462 -26.38008690]
[175.90298462 -39.37046814]
[183.40298462 -52.36084747]
[179.53459167 -67.44969177]
[187.32569885 -80.51694489]
[201.73445129 -84.11188507]
[209.23445129 -97.10226440]
[203.71641541 -111.73392487]
[208.94316101 -126.47214508]
[222.44677734 -134.35798645]
[237.85125732 -131.66801453]
[247.88308716 -119.67233276]
[247.80554199 -104.03494263]
[237.65522766 -92.13934326]
[222.22483826 -89.60226440]
[214.72483826 -76.61188507]
[218.81590271 -62.33607483]
[211.39488220 -49.05514145]
[196.39337158 -44.86084747]
[188.89337158 -31.87046623]
[181.39337158 -18.88008690]
[173.89337158 -5.88970518]
[166.39337158 7.10067606]
[158.89337158 20.09105682]
[151.39337158 33.08143997]
[143.89337158 46.07181931]
[144.29284668 50.97380066]
[141.50718689 56.15222168]
[135.56065369 59.58120346]
[127.31801605 72.11351776]
[119.07538605 84.64583588]
[110.83274841 97.17815399]
[102.77325439 109.82902527]
[94.89860535 122.59577942]
[105.90465546 131.28598022]
[115.87731171 141.14370728]
[124.69342041 152.04696655]
[132.24414062 163.86082458]
[138.43627930 176.43914795]
[143.19346619 189.62632751]
[146.45706177 203.25930786]
[148.18688965 217.16946411]
[148.36177063 231.18481445]
[146.97972107 245.13209534]
[144.05802917 258.83889771]
[139.63299561 272.13580322]
[133.75950623 284.85852051]
[126.51034546 296.84976196]
[117.97528839 307.96145630]
[108.26000977 318.05633545]
[97.48475647 327.00970459]
[85.78285217 334.71102905]
[73.29907227 341.06527710]
[60.18784714 345.99401855]
[46.61132050 349.43655396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 19]
[8 18]
[9 17]
[41 86]
[42 85]
[44 84]
[45 83]
[46 82]
[47 81]
[48 78]
[49 77]
[50 76]
[51 75]
[52 74]
[53 73]
[54 72]
[55 71]
[58 68]
[59 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
