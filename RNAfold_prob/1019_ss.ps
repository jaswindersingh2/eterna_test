%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:14:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGAGAAACUCAAGCAUAAAAUGCAAGGUAUAAAAUACCAAGCUAAAAUAGCAACCGAAACGGAUCCUCCUUUCGAGGAGGAAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[120.10439301 177.16490173]
[109.65941620 179.15367126]
[99.04270172 179.73513794]
[88.44300842 178.89895630]
[78.04878235 176.65998840]
[68.04484558 173.05804443]
[58.60905457 168.15716553]
[49.65167618 180.18901062]
[40.69429779 192.22085571]
[36.08573532 208.53642273]
[19.13201523 208.62455750]
[14.35406780 192.35778809]
[28.66245079 183.26347351]
[37.61983109 171.23162842]
[46.57720947 159.19978333]
[37.33596039 149.31356812]
[29.89953613 138.00703430]
[24.48211670 125.60582733]
[9.88644409 129.06506348]
[-4.70922852 132.52430725]
[-19.30490112 135.98355103]
[-33.32270813 145.51965332]
[-46.36666107 134.68952942]
[-39.57070923 119.15726471]
[-22.76413918 121.38787079]
[-8.16846657 117.92863464]
[6.42720652 114.46939850]
[21.02287865 111.01015472]
[20.45541954 94.40813446]
[23.34001541 78.04878235]
[29.55147743 62.64207077]
[17.01916122 54.39943695]
[4.48684406 46.15679932]
[-8.04547310 37.91416550]
[-20.57779121 29.67153168]
[-37.13370895 26.01942825]
[-38.20746994 9.09951782]
[-22.24604034 3.38382554]
[-12.33515549 17.13921356]
[0.19716141 25.38184929]
[12.72947884 33.62448502]
[25.26179504 41.86711884]
[37.79411316 50.10975266]
[49.48057175 38.30399704]
[63.35945892 29.17571068]
[78.82846832 23.12103462]
[76.22373962 8.34891891]
[73.61901855 -6.42319727]
[71.01429749 -21.19531441]
[62.30937958 -35.74387741]
[73.87961578 -48.13604736]
[88.99045563 -40.44847107]
[85.78641510 -23.80003738]
[88.39113617 -9.02791977]
[90.99585724 5.74419594]
[93.60057831 20.51631165]
[107.13328552 20.57880974]
[120.46054840 22.92876625]
[133.19850159 27.49849510]
[140.69850159 14.50811481]
[148.19850159 1.51773345]
[150.88179016 -15.22252750]
[167.71064758 -17.27827454]
[174.34474182 -1.67618775]
[161.18888855 9.01773357]
[153.68888855 22.00811386]
[146.18888855 34.99849701]
[164.64779663 53.31733704]
[176.23066711 76.60141754]
[190.92077637 73.56815338]
[205.61088562 70.53488922]
[220.30099487 67.50162506]
[234.99110413 64.46836090]
[249.68121338 61.43510056]
[264.37133789 58.40183640]
[276.25552368 47.10148239]
[291.90527344 52.00220108]
[295.22146606 68.06255341]
[282.79269409 78.76102448]
[267.40460205 73.09194946]
[252.71447754 76.12520599]
[238.02436829 79.15847015]
[223.33425903 82.19173431]
[208.64414978 85.22499847]
[193.95404053 88.25826263]
[179.26393127 91.29152679]
[179.70960999 102.23345947]
[178.65193176 113.13326263]
[176.11087036 123.78537750]
[172.13435364 133.98889160]
[166.79736328 143.55137634]
[160.20056152 152.29246521]
[152.46836853 160.04731750]
[143.74661255 166.66966248]
[134.19978333 172.03460693]
[149.39448547 173.05480957]
[162.85754395 180.17280579]
[172.25640869 192.15534973]
[175.96266174 206.92639160]
[173.33418274 221.92675781]
[164.82635498 234.55754089]
[151.91322327 242.63038635]
[136.83206177 244.74662781]
[122.19577026 240.53961182]
[110.54018402 230.73822021]
[103.88469696 217.04061890]
[103.38241577 201.81999207]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 95]
[7 15]
[8 14]
[9 13]
[18 28]
[19 27]
[20 26]
[21 25]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[46 56]
[47 55]
[48 54]
[49 53]
[59 67]
[60 66]
[61 65]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
