%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGCACAAAAAAGGCAAAAGGAGUACAAAAGAUACAAUCCAGUGAAAACAACAAGCAAAAACGAGAGUUUCGACUCUCGAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[147.77513123 172.05712891]
[145.69375610 163.90214539]
[144.66134644 155.54737854]
[144.69500732 147.12719727]
[145.79469299 138.77711487]
[147.94317627 130.63160706]
[134.34855652 124.29232788]
[115.85012817 138.97067261]
[92.35787964 141.37074280]
[71.27339935 130.73634338]
[59.24155426 139.69372559]
[54.12556839 147.45243835]
[46.72697067 148.73059082]
[44.22975540 164.33634949]
[31.38020325 173.53768921]
[15.80172634 170.87561035]
[6.73675871 157.92950439]
[9.56338406 142.38003540]
[22.60461617 133.45245361]
[38.12332535 136.44331360]
[50.28417587 127.66187286]
[62.31602097 118.70449829]
[59.66290665 111.95237732]
[58.20923615 104.84485626]
[57.99823761 97.59326172]
[59.03618240 90.41323853]
[61.29220581 83.51827240]
[48.75989151 75.27564240]
[36.22757339 67.03300476]
[23.46082306 59.15835953]
[10.47044182 51.65835953]
[-2.51993895 44.15835953]
[-15.61802483 36.84808350]
[-31.98557281 37.86564255]
[-40.82386398 24.05200386]
[-33.04082108 9.61745071]
[-16.64297485 9.41101646]
[-8.49901962 23.64506149]
[-1.00206065 24.05565834]
[4.98006105 31.16797638]
[17.97044182 38.66797638]
[30.96082306 46.16797638]
[35.86280441 45.76848984]
[41.04122543 48.55414581]
[44.47020721 54.50069046]
[57.00252533 62.74332428]
[69.53484344 70.98596191]
[78.43699646 63.87553024]
[88.92057800 59.41445160]
[87.61324310 44.47153091]
[77.76896667 31.35580254]
[84.45337677 16.38080025]
[100.79011536 14.95151997]
[109.97335815 28.53828430]
[102.55615997 43.16419601]
[103.86349487 58.10711670]
[115.65509033 60.95056152]
[126.14534760 67.04000854]
[134.46226501 75.86926270]
[139.91450500 86.70439148]
[142.04882812 98.64472198]
[140.68783569 110.69770813]
[154.28244019 117.03698730]
[171.18199158 98.59684753]
[193.68199158 87.73177338]
[218.57881165 85.96685028]
[242.33569336 93.53298187]
[261.58511353 109.33696747]
[273.60614014 131.11933899]
[288.29626465 128.08607483]
[302.98635864 125.05281830]
[317.67648315 122.01955414]
[332.36657715 118.98628998]
[347.05670166 115.95302582]
[361.74679565 112.91976166]
[373.63101196 101.61940765]
[389.28076172 106.52012634]
[392.59695435 122.58047485]
[380.16818237 133.27894592]
[364.78005981 127.60987091]
[350.08996582 130.64312744]
[335.39984131 133.67639160]
[320.70974731 136.70965576]
[306.01962280 139.74291992]
[291.32952881 142.77618408]
[276.63940430 145.80944824]
[276.87423706 154.17828369]
[276.04748535 162.51141357]
[274.17190552 170.67469788]
[271.27722168 178.53665161]
[267.40960693 185.97055054]
[262.63085938 192.85656738]
[257.01742554 199.08357239]
[250.65937805 204.55105591]
[243.65866089 209.17063904]
[236.12767029 212.86755371]
[228.18742371 215.58189392]
[219.96554565 217.26950073]
[211.59423828 217.90275574]
[203.20819092 217.47094727]
[194.94241333 215.98056030]
[186.92999268 213.45510864]
[179.30003357 209.93473816]
[172.17553711 205.47570801]
[165.67141724 200.14932251]
[159.89266968 194.04095459]
[154.93263245 187.24856567]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 63]
[7 62]
[10 22]
[11 21]
[13 20]
[27 47]
[28 46]
[29 45]
[30 42]
[31 41]
[32 40]
[33 38]
[49 56]
[50 55]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
