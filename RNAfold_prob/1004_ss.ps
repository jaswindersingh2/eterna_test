%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:14:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACUCAAAGAGAAGUAGAAACUACAAGUAUCAAAGAUACAACUAGAAACUAGAAGACAAAGUCAUUGAACUUUCGAGUUCAAAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[167.86729431 304.28686523]
[170.54071045 289.47341919]
[176.14164734 275.50152588]
[184.44073486 262.94326782]
[195.09815979 252.31291199]
[186.85552979 239.78059387]
[178.61288452 227.24827576]
[170.37025452 214.71595764]
[162.12762451 202.18363953]
[153.70358276 189.77252197]
[145.09994507 177.48524475]
[136.49629211 165.19796753]
[127.89264679 152.91069031]
[108.68041992 159.17930603]
[88.47724915 158.69213867]
[69.58949280 151.50477600]
[54.17334747 138.43771362]
[43.98868561 120.98268890]
[29.39301491 124.44192505]
[14.79734135 127.90116119]
[0.20166795 131.36039734]
[-13.81613636 140.89651489]
[-26.86009216 130.06639099]
[-20.06413841 114.53412628]
[-3.25757003 116.76473236]
[11.33810329 113.30548859]
[25.93377686 109.84625244]
[40.52944946 106.38701630]
[40.38208008 95.17880249]
[42.32853317 84.13991547]
[46.30044937 73.65804291]
[33.76813126 65.41540527]
[21.23581505 57.17277145]
[8.70349884 48.93013763]
[-3.82881856 40.68750381]
[-20.38473892 37.03540039]
[-21.45849609 20.11548996]
[-5.49706793 14.39979744]
[4.41381598 28.15518570]
[16.94613266 36.39781952]
[29.47845078 44.64045715]
[42.01076889 52.88309097]
[54.54308319 61.12572479]
[62.59451294 53.32698822]
[71.95964813 47.16744232]
[82.30957794 42.86341476]
[79.70485687 28.09129906]
[77.10013580 13.31918240]
[74.49540710 -1.45293438]
[65.79048920 -16.00149918]
[77.36073303 -28.39366913]
[92.47157288 -20.70609283]
[89.26752472 -4.05765676]
[91.87225342 10.71445942]
[94.47697449 25.48657608]
[97.08169556 40.25869370]
[105.97636414 40.48677826]
[114.73877716 42.03182983]
[123.17504120 44.85965347]
[130.67503357 31.86927223]
[138.17503357 18.87889099]
[140.85832214 2.13862967]
[157.68717957 0.08288310]
[164.32127380 15.68496895]
[151.16542053 26.37889099]
[143.66542053 39.36927032]
[136.16542053 52.35965347]
[146.85772705 62.82617569]
[154.61779785 75.61894226]
[158.96002197 89.93741608]
[159.61268616 104.88558197]
[156.53491211 119.52802277]
[149.91934204 132.94844055]
[140.17993164 144.30703735]
[148.78358459 156.59431458]
[157.38722229 168.88159180]
[165.99087524 181.16888428]
[173.59750366 186.50836182]
[174.65994263 193.94100952]
[182.90257263 206.47331238]
[191.14520264 219.00563049]
[199.38784790 231.53794861]
[207.63047791 244.07026672]
[221.61262512 238.49491882]
[236.43092346 235.84863281]
[251.47857666 236.23974609]
[266.13940430 239.65228271]
[279.81301880 245.94645691]
[291.93954468 254.86456299]
[302.02236938 266.04138184]
[309.64862061 279.01925659]
[314.50601196 293.26675415]
[316.39562988 308.20040894]
[315.24008179 323.20870972]
[311.08673096 337.67712402]
[304.10562134 351.01312256]
[294.58261108 362.67062378]
[282.90768433 372.17227173]
[269.55892944 379.12896729]
[255.08296204 383.25582886]
[240.07255554 384.38388062]
[225.14237976 382.46691895]
[210.90380859 377.58346558]
[197.93992615 369.93347168]
[186.78157043 359.83020020]
[177.88568115 347.68737793]
[171.61654663 334.00222778]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 83]
[6 82]
[7 81]
[8 80]
[9 79]
[10 77]
[11 76]
[12 75]
[13 74]
[18 28]
[19 27]
[20 26]
[21 25]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[46 56]
[47 55]
[48 54]
[49 53]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
