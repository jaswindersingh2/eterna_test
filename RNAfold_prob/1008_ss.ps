%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:14:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGAGAAACUCAAGUUGAAACAACAAGAAAGAAACUUUCAACAACAAAGUUGAAGACAAAGUCACCAAAAUUUCGAUUUUGGAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[128.38296509 280.72512817]
[113.48397064 282.46295166]
[98.85652924 279.14062500]
[86.17007446 271.13726807]
[76.87248993 259.36633301]
[72.02492523 245.17120361]
[72.18108368 230.16954041]
[63.22370148 242.20138550]
[54.26632309 254.23323059]
[49.65776062 270.54879761]
[32.70404053 270.63693237]
[27.92609215 254.37016296]
[42.23447800 245.27584839]
[51.19185638 233.24400330]
[60.14923477 221.21215820]
[59.85632324 215.89486694]
[62.18732071 210.49359131]
[67.09432220 206.31837463]
[70.55355835 191.72270203]
[74.01279449 177.12702942]
[77.47203064 162.53135681]
[69.43254089 159.20799255]
[61.87639236 154.85324097]
[54.93560028 149.53662109]
[48.73228073 143.34445190]
[43.37649918 136.37857056]
[38.96433258 128.75456238]
[35.57613373 120.59989929]
[33.27508926 112.05177307]
[32.10604095 103.25482941]
[32.09462738 94.35868073]
[33.24674606 85.51539612]
[35.54836273 76.87686157]
[38.96564484 68.59220886]
[43.44545364 60.80522919]
[48.91616058 53.65187454]
[55.28878403 47.25787735]
[62.45843887 41.73656082]
[70.30605316 37.18682098]
[78.70034790 33.69136047]
[87.50003052 31.31519508]
[83.61775208 16.82630920]
[79.73546600 2.33742094]
[75.85317993 -12.15146637]
[71.97089386 -26.64035416]
[68.08860779 -41.12924194]
[54.27809525 -48.81333923]
[50.02647400 -64.03501129]
[57.85615158 -77.76350403]
[73.12192535 -81.85395813]
[86.76687622 -73.87957001]
[90.69570160 -58.57140350]
[82.57749176 -45.01152802]
[86.45977783 -30.52264023]
[90.34206390 -16.03375244]
[94.22434998 -1.54486477]
[98.10663605 12.94402313]
[101.98892212 27.43291092]
[116.86059570 29.39080238]
[124.36059570 16.40042114]
[131.86059570 3.41004086]
[134.54388428 -13.33022022]
[151.37272644 -15.38596630]
[158.00682068 0.21611963]
[144.85098267 10.91004086]
[137.35098267 23.90042114]
[129.85098267 36.89080429]
[151.09971619 54.92469406]
[163.16011047 79.30027008]
[177.85021973 76.26700592]
[192.54032898 73.23374176]
[207.23043823 70.20047760]
[221.92054749 67.16721344]
[236.61065674 64.13395691]
[251.30076599 61.10068893]
[263.18496704 49.80033493]
[278.83471680 54.70105362]
[282.15090942 70.76140594]
[269.72213745 81.45987701]
[254.33403015 75.79080200]
[239.64392090 78.82406616]
[224.95381165 81.85732269]
[210.26370239 84.89058685]
[195.57359314 87.92385101]
[180.88348389 90.95711517]
[166.19337463 93.99037933]
[166.08305359 107.12102509]
[163.39344788 119.97373199]
[158.22953796 132.04684448]
[150.79286194 142.86914062]
[141.37371826 152.01821899]
[130.33970642 159.13697815]
[118.12150574 163.94755554]
[105.19600677 166.26220703]
[92.06770325 165.99058533]
[88.60846710 180.58625793]
[85.14923096 195.18193054]
[81.68999481 209.77760315]
[93.07939911 200.01638794]
[107.06912994 194.60459900]
[122.06253815 194.15989685]
[136.34841919 198.73301697]
[148.29634094 207.80204773]
[156.54267883 220.33192444]
[160.14628601 234.89262390]
[158.69587708 249.82234192]
[152.35699463 263.41714478]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 15]
[8 14]
[9 13]
[18 98]
[19 97]
[20 96]
[21 95]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
[59 67]
[60 66]
[61 65]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
