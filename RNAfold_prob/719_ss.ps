%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCGGCGGCAAAGGCGGCGCAACGCGGCGGAAAAUCGGCGGCGACGCGGCGGAAAUCGGCGGCGUCUCGUAUUCGUACGAGAAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[73.93853760 183.82327271]
[74.51129150 168.83421326]
[78.13766479 154.27915955]
[84.66433716 140.77351379]
[93.81535339 128.88827515]
[105.20157623 119.12753296]
[93.71090698 128.76934814]
[82.22024536 138.41116333]
[76.62213898 153.20886230]
[61.89904022 155.46267700]
[50.40837479 165.10449219]
[44.81026840 179.90217590]
[30.08717346 182.15600586]
[21.84020615 196.96896362]
[5.32315111 193.14492798]
[4.42536688 176.21476746]
[20.44535828 170.66532898]
[25.22157288 156.55728149]
[40.76655960 153.61381531]
[52.25722504 143.97200012]
[57.03344345 129.86395264]
[72.57843018 126.92049408]
[84.06909180 117.27867889]
[95.55976105 107.63686371]
[88.87984467 108.72256470]
[81.35810089 105.48497009]
[75.37535095 97.70713043]
[62.84303665 89.46449280]
[50.31071854 81.22185516]
[34.52912521 80.10295868]
[28.14736176 66.64479065]
[15.61504459 58.40215302]
[-0.16654685 57.28325653]
[-6.54831123 43.82508469]
[-19.08062935 35.58245087]
[-35.63654709 31.93034935]
[-36.71030807 15.01043797]
[-20.74887848 9.29474545]
[-10.83799362 23.05013466]
[1.69432330 31.29276848]
[16.57951927 31.82209778]
[23.85767937 45.86983871]
[36.38999557 54.11247253]
[51.27519226 54.64180374]
[58.55335236 68.68953705]
[71.08567047 76.93217468]
[83.61798859 85.17481232]
[97.63726807 79.84004974]
[101.51955414 65.35115814]
[105.40184021 50.86227417]
[109.28412628 36.37338638]
[105.38221741 21.04088211]
[116.14993286 10.74984264]
[120.03221893 -3.73904443]
[116.13031006 -19.07154846]
[126.89803314 -29.36258698]
[122.13327789 -45.05427933]
[133.53631592 -56.83997726]
[149.37667847 -52.59556580]
[153.35916138 -36.68733215]
[141.38691711 -25.48030281]
[145.56651306 -11.18414116]
[134.52110291 0.14324132]
[130.63882446 14.63212872]
[134.81842041 28.92828941]
[123.77301788 40.25567245]
[119.89073181 54.74456024]
[116.00844574 69.23344421]
[112.12615967 83.72233582]
[122.41978455 94.63294220]
[137.10989380 91.59967804]
[151.80000305 88.56641388]
[166.49011230 85.53314972]
[181.18022156 82.49988556]
[195.87033081 79.46662140]
[207.75451660 68.16626740]
[223.40428162 73.06698608]
[226.72047424 89.12733459]
[214.29168701 99.82580566]
[198.90359497 94.15673065]
[184.21348572 97.18999481]
[169.52337646 100.22325897]
[154.83326721 103.25652313]
[140.14315796 106.28978729]
[125.45304871 109.32305145]
[140.17439270 106.44523621]
[155.17314148 106.63923645]
[169.81513977 109.89685059]
[183.48132324 116.08033752]
[195.59388733 124.92826843]
[205.64070129 136.06654358]
[213.19702148 149.02424622]
[217.94332886 163.25354004]
[219.67898560 178.15278625]
[218.33058167 193.09205627]
[213.95513916 207.43971252]
[206.73765564 220.58915710]
[196.98326111 231.98442078]
[185.10440063 241.14370728]
[171.60330200 247.67977905]
[157.05078125 251.31628418]
[142.06211853 251.89945984]
[127.27104187 249.40466309]
[113.30290985 243.93737793]
[100.74829865 235.72874451]
[90.13800049 225.12583923]
[81.92063904 212.57693481]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 24]
[7 23]
[8 22]
[10 20]
[11 19]
[13 17]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[34 40]
[35 39]
[48 69]
[49 68]
[50 67]
[51 66]
[53 64]
[54 63]
[56 61]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
