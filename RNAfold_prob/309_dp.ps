%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:04 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (309)
} def

/sequence { (\
GGAAAGAGGGCUCAAAAACGAGCGGCAAUGCCACCUCAGCCACCGGAAAACGGCUCCUACGGGAGGGCGGUAACUUUCGAGUUACCAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 32 0.020192151 ubox
1 35 0.013023918 ubox
1 37 0.006019819 ubox
1 40 0.008496518 ubox
1 41 0.185901644 ubox
1 44 0.006562099 ubox
1 68 0.011347325 ubox
1 86 0.008112081 ubox
1 95 0.134080104 ubox
1 98 0.134920750 ubox
1 101 0.138023324 ubox
1 104 0.138674729 ubox
1 107 0.035012132 ubox
2 31 0.020195463 ubox
2 34 0.012990942 ubox
2 36 0.003760778 ubox
2 37 0.009061250 ubox
2 40 0.185731274 ubox
2 41 0.018932907 ubox
2 43 0.006568217 ubox
2 68 0.009567329 ubox
2 85 0.005733381 ubox
2 86 0.004502837 ubox
2 95 0.070726306 ubox
2 98 0.070977740 ubox
2 101 0.072509746 ubox
2 104 0.072235974 ubox
2 107 0.023571230 ubox
3 36 0.007597452 ubox
5 29 0.003735295 ubox
5 36 0.004793607 ubox
6 35 0.005184582 ubox
6 37 0.996773432 ubox
6 95 0.006845091 ubox
6 98 0.010722039 ubox
6 101 0.010472627 ubox
6 104 0.010363877 ubox
6 107 0.003616639 ubox
7 36 0.998209423 ubox
8 26 0.004702336 ubox
8 34 0.004430607 ubox
8 35 0.998523815 ubox
8 36 0.003898707 ubox
8 37 0.003304834 ubox
8 95 0.007991913 ubox
8 98 0.008022731 ubox
8 101 0.008003148 ubox
8 104 0.007946103 ubox
9 23 0.003666036 ubox
9 32 0.003393703 ubox
9 34 0.996529159 ubox
9 35 0.005329351 ubox
9 41 0.004951794 ubox
9 95 0.011347956 ubox
9 98 0.010770868 ubox
9 101 0.010665665 ubox
9 104 0.007715146 ubox
10 23 0.999046676 ubox
10 31 0.003866949 ubox
10 40 0.004960864 ubox
11 22 0.999939887 ubox
11 30 0.003883581 ubox
11 39 0.004965039 ubox
12 21 0.999786831 ubox
12 38 0.004907901 ubox
13 20 0.998889843 ubox
20 37 0.006262399 ubox
21 36 0.006263123 ubox
22 35 0.005786643 ubox
24 29 0.003998390 ubox
24 31 0.018743042 ubox
24 32 0.997965561 ubox
24 35 0.005875100 ubox
24 41 0.010031707 ubox
25 31 0.998969202 ubox
25 32 0.007616952 ubox
25 34 0.005888246 ubox
25 40 0.010042586 ubox
26 30 0.991713103 ubox
26 39 0.010030280 ubox
29 38 0.004095833 ubox
30 35 0.003414685 ubox
30 37 0.004382677 ubox
30 68 0.005417954 ubox
31 67 0.005422252 ubox
32 66 0.005411182 ubox
35 63 0.003239005 ubox
35 91 0.004198446 ubox
36 62 0.003234365 ubox
36 90 0.003980108 ubox
36 92 0.007391360 ubox
37 61 0.003215735 ubox
37 91 0.008174312 ubox
38 55 0.006329857 ubox
39 54 0.008446025 ubox
39 68 0.974723580 ubox
39 95 0.007568614 ubox
39 98 0.007407317 ubox
39 101 0.007550258 ubox
39 104 0.007560094 ubox
40 46 0.004101807 ubox
40 53 0.009204112 ubox
40 66 0.008999730 ubox
40 67 0.975913969 ubox
40 91 0.005649561 ubox
41 45 0.004087118 ubox
41 52 0.009108687 ubox
41 65 0.009458197 ubox
41 66 0.974710494 ubox
41 67 0.003933941 ubox
41 91 0.010111969 ubox
42 55 0.003617129 ubox
43 52 0.007318294 ubox
43 53 0.994786381 ubox
43 62 0.010545712 ubox
43 63 0.009388657 ubox
43 65 0.004552971 ubox
43 67 0.003295687 ubox
44 52 0.999316578 ubox
44 53 0.011053737 ubox
44 61 0.010635844 ubox
44 62 0.009307485 ubox
44 66 0.003268336 ubox
45 51 0.998093158 ubox
45 57 0.009146536 ubox
45 60 0.009788732 ubox
46 51 0.018513462 ubox
46 56 0.009381726 ubox
46 60 0.004081808 ubox
47 55 0.009117820 ubox
51 67 0.004085034 ubox
52 68 0.007965583 ubox
53 68 0.012270820 ubox
54 63 0.008071600 ubox
54 65 0.995333452 ubox
54 66 0.012384445 ubox
54 67 0.012613395 ubox
55 62 0.007850836 ubox
55 63 0.005843721 ubox
55 64 0.999137894 ubox
55 65 0.005745209 ubox
55 66 0.008505019 ubox
55 67 0.005964520 ubox
56 61 0.007771719 ubox
56 62 0.009105951 ubox
56 63 0.999705450 ubox
56 65 0.007036088 ubox
56 66 0.010919011 ubox
56 67 0.003485744 ubox
57 61 0.010617600 ubox
57 62 0.999523675 ubox
57 63 0.005673234 ubox
57 65 0.011048621 ubox
57 66 0.003527798 ubox
58 62 0.005301707 ubox
58 64 0.010806057 ubox
58 65 0.003415752 ubox
66 95 0.005318756 ubox
66 98 0.003983796 ubox
66 101 0.003548312 ubox
68 91 0.010242899 ubox
69 86 0.998847446 ubox
70 85 0.999940662 ubox
71 84 0.999693168 ubox
72 83 0.999275481 ubox
73 82 0.999453515 ubox
74 79 0.006058828 ubox
74 81 0.999490399 ubox
75 79 0.028249241 ubox
75 80 0.924169401 ubox
75 81 0.005821900 ubox
76 80 0.028595335 ubox
86 91 0.006436036 ubox
91 95 0.046202603 ubox
91 98 0.107941972 ubox
91 101 0.045710738 ubox
91 104 0.033994104 ubox
91 107 0.010026295 ubox
6 37 0.9500000 lbox
7 36 0.9500000 lbox
8 35 0.9500000 lbox
9 34 0.9500000 lbox
10 23 0.9500000 lbox
11 22 0.9500000 lbox
12 21 0.9500000 lbox
13 20 0.9500000 lbox
24 32 0.9500000 lbox
25 31 0.9500000 lbox
26 30 0.9500000 lbox
39 68 0.9500000 lbox
40 67 0.9500000 lbox
41 66 0.9500000 lbox
43 53 0.9500000 lbox
44 52 0.9500000 lbox
45 51 0.9500000 lbox
54 65 0.9500000 lbox
55 64 0.9500000 lbox
56 63 0.9500000 lbox
57 62 0.9500000 lbox
69 86 0.9500000 lbox
70 85 0.9500000 lbox
71 84 0.9500000 lbox
72 83 0.9500000 lbox
73 82 0.9500000 lbox
74 81 0.9500000 lbox
75 80 0.9500000 lbox
showpage
end
%%EOF
