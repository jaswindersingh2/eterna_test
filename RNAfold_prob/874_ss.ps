%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGGGCAGGCCCAAGGGAAACCACGUACGCGGGAGGAGCCACAGCCCAACCGAAAGGACGCAGGUGAUUUCGAUCACCUAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[79.35417175 279.01333618]
[70.79285431 266.69653320]
[64.71861267 252.98143005]
[61.35123444 238.36430359]
[60.81254196 223.37397766]
[63.12203217 208.55282593]
[68.19614410 194.43711853]
[75.85129547 181.53755188]
[85.80676270 170.32434082]
[90.85960388 156.20100403]
[79.65422821 166.17294312]
[68.44885254 176.14488220]
[63.80701447 191.87336731]
[47.80356216 195.45410156]
[36.90147781 183.20352173]
[42.31588745 167.72398376]
[58.47690964 164.93949890]
[69.68228912 154.96755981]
[80.88766479 144.99562073]
[77.91706848 138.10900879]
[71.97586823 124.33576202]
[69.00527191 117.44914246]
[54.06235123 118.75647736]
[40.94662094 128.60075378]
[25.97161865 121.91634369]
[24.54233932 105.57960510]
[38.12910461 96.39636230]
[52.75501251 103.81356049]
[67.69793701 102.50622559]
[75.64802551 89.19625092]
[87.22544098 83.48033142]
[82.92339325 69.11048889]
[78.62134552 54.74064636]
[61.44287872 49.35960770]
[50.92748260 34.94027710]
[51.05222321 17.24963379]
[61.58349991 3.22826886]
[56.45319748 -10.86712074]
[51.32289505 -24.96250916]
[37.27761078 -31.69806862]
[32.27554703 -46.06587982]
[38.78343201 -59.41440201]
[33.65312958 -73.50979614]
[27.68764687 -80.63607788]
[28.58512115 -88.09043884]
[23.86694908 -102.32907867]
[11.26333427 -112.82102203]
[14.31408882 -128.93389893]
[29.88085938 -134.09216309]
[41.94988632 -122.98944092]
[38.10559082 -107.04724884]
[42.82376099 -92.80860901]
[47.74851990 -78.64009857]
[52.87881851 -64.54470825]
[66.44441223 -58.50233078]
[71.84806061 -44.28068542]
[65.41828156 -30.09281158]
[70.54858398 -15.99742317]
[75.67888641 -1.90203333]
[87.88465118 -0.27739868]
[98.26905060 6.47402382]
[104.78289795 17.09453583]
[106.10887909 29.55591202]
[101.92750549 41.44664001]
[92.99118805 50.43859482]
[97.29323578 64.80844116]
[101.59528351 79.17828369]
[126.54373932 97.72626495]
[107.93307495 131.41291809]
[122.62318420 128.37965393]
[137.31329346 125.34638214]
[152.00340271 122.31311798]
[166.69351196 119.27985382]
[181.38362122 116.24658966]
[196.07373047 113.21333313]
[207.95791626 101.91297913]
[223.60768127 106.81369781]
[226.92387390 122.87404633]
[214.49508667 133.57250977]
[199.10699463 127.90344238]
[184.41688538 130.93670654]
[169.72677612 133.96997070]
[155.03666687 137.00323486]
[140.34655762 140.03649902]
[125.65644836 143.06976318]
[110.96633911 146.10302734]
[125.31233978 150.48390198]
[140.25682068 149.19448853]
[155.17509460 150.75817871]
[169.52740479 155.11836243]
[182.79446411 162.11729431]
[194.49626160 171.50175476]
[204.20941162 182.93218994]
[211.58245850 195.99504089]
[216.34867859 210.21766663]
[218.33558655 225.08549500]
[217.47132874 240.06056213]
[213.78713989 254.60108948]
[207.41633606 268.18096924]
[198.58941650 280.30883789]
[187.62576294 290.54592896]
[174.92202759 298.52185059]
[160.93786621 303.94802856]
[146.17922974 306.62811279]
[131.18011475 306.46511841]
[116.48320770 303.46502686]
[102.62024689 297.73629761]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 19]
[11 18]
[12 17]
[22 29]
[23 28]
[31 67]
[32 66]
[33 65]
[37 59]
[38 58]
[39 57]
[42 54]
[43 53]
[45 52]
[46 51]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
