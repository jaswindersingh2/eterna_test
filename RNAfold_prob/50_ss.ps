%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAGGACCCAAGCAAAAGCUUGGCAGCUGUUGAAAACAACAGUCGAAAACGACAGAAGCGGUCCGCAUGGAUUCGUCCAUGCAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[68.49973297 212.73011780]
[73.29642487 198.51774597]
[80.78763580 185.52229309]
[90.68232727 174.24864197]
[102.59608459 165.13478088]
[116.06606293 158.53480530]
[130.56893921 154.70510864]
[145.53974915 153.79440308]
[133.50790405 144.83703613]
[121.47605896 135.87965393]
[109.44420624 126.92227173]
[97.41236115 117.96488953]
[82.49003601 116.44036865]
[68.89541626 122.77964020]
[55.30080032 129.11891174]
[41.70618439 135.45819092]
[28.11156654 141.79745483]
[19.15375519 155.53388977]
[2.79565191 154.37435913]
[-4.13492727 139.51168823]
[5.49160242 126.23531342]
[21.77229309 128.20285034]
[35.36690903 121.86357117]
[48.96152496 115.52429962]
[62.55614471 109.18502045]
[76.15075684 102.84574890]
[77.02145386 95.39646149]
[62.31394577 98.34418488]
[54.96564102 85.26739502]
[65.13167572 74.23780823]
[78.76284790 80.49788666]
[79.63354492 73.04859924]
[67.86730957 63.74506760]
[56.10107803 54.44153214]
[44.33484268 45.13800049]
[32.56860733 35.83446884]
[16.27302170 33.99437714]
[9.96771812 18.85584259]
[20.13905144 5.99209499]
[36.32362747 8.63625240]
[41.87213898 24.06823349]
[53.63837433 33.37176514]
[65.40460968 42.67529678]
[77.17084503 51.97883224]
[88.93708038 61.28236389]
[101.92745972 53.78236389]
[99.75347900 38.94073868]
[97.57950592 24.09911346]
[95.40552521 9.25748920]
[84.81529236 -3.26365447]
[90.61767578 -18.60198593]
[106.84367371 -20.97874451]
[116.80137634 -7.94892550]
[110.24715424 7.08351183]
[112.42112732 21.92513657]
[114.59510803 36.76676178]
[116.76908875 51.60838699]
[126.13545990 63.19335175]
[130.63616943 75.75505829]
[130.57356262 87.58998108]
[126.78424072 97.26629639]
[120.50554657 103.77725983]
[113.20172119 106.64040375]
[106.36973572 105.93304443]
[118.40158844 114.89042664]
[130.43344116 123.84780121]
[142.46528625 132.80517578]
[154.49713135 141.76255798]
[169.14157104 145.00915527]
[183.83168030 141.97589111]
[198.52178955 138.94262695]
[213.21189880 135.90936279]
[227.90200806 132.87609863]
[242.59211731 129.84283447]
[257.28222656 126.80957031]
[269.16641235 115.50921631]
[284.81619263 120.40993500]
[288.13238525 136.47029114]
[275.70358276 147.16876221]
[260.31549072 141.49967957]
[245.62538147 144.53294373]
[230.93527222 147.56620789]
[216.24516296 150.59947205]
[201.55505371 153.63273621]
[186.86494446 156.66600037]
[172.17483521 159.69926453]
[185.35937500 166.85241699]
[196.88475037 176.45272827]
[206.30319214 188.12718201]
[213.24877930 201.42225647]
[217.45167542 215.82141113]
[218.74861145 230.76522827]
[217.08917236 245.67315674]
[212.53785706 259.96600342]
[205.27146912 273.08850098]
[195.57232666 284.53079224]
[183.81723022 293.84838867]
[170.46286011 300.67929077]
[156.02806091 304.75808716]
[141.07362366 305.92633057]
[126.18053436 304.13864136]
[111.92739105 299.46447754]
[98.86794281 292.08538818]
[87.50954437 282.28811646]
[78.29347992 270.45324707]
[71.57778931 257.04058838]
[67.62339020 242.57121277]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 68]
[9 67]
[10 66]
[11 65]
[12 64]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[32 45]
[33 44]
[34 43]
[35 42]
[36 41]
[46 57]
[47 56]
[48 55]
[49 54]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
