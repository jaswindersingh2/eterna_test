%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACCCACGGCGAGGGCGAGGGAAGGGAGGAGAAAAACACCACUCACGCACGAGGAAGCACGAGCGCGGGCGCUUCGGCGUUCGAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[169.38095093 174.02583313]
[165.35005188 166.68572998]
[162.25521851 158.90260315]
[160.14416504 150.79531860]
[159.04962158 142.48771667]
[158.98872375 134.10675049]
[159.96286011 125.78060150]
[145.59301758 121.47855377]
[131.18135071 125.24057770]
[120.18000793 113.87039185]
[105.81016541 109.56834412]
[91.37927246 105.47574615]
[76.89038849 101.59346008]
[62.40149689 97.71117401]
[47.06899643 101.61308289]
[36.77795410 90.84536743]
[22.28906822 86.96308136]
[7.80017996 83.08079529]
[-7.53232336 86.98270416]
[-17.82336426 76.21498871]
[-31.39685440 83.85684967]
[-46.03534317 79.71326447]
[-53.23704529 66.72592163]
[-61.91116714 79.15714264]
[-74.31569672 87.86940765]
[-88.95271301 91.81066895]
[-104.05473328 90.50498962]
[-117.79811096 84.11004639]
[-128.52326965 73.39805603]
[-134.93508911 59.66254425]
[-136.25932312 44.56213760]
[-132.33605957 29.92028999]
[-123.63903809 17.50506973]
[-111.21847534 8.81567860]
[-96.57421875 4.90140247]
[-81.47463226 6.23490810]
[-67.74305725 12.65516853]
[-57.03765869 23.38690758]
[-50.65115738 37.13421249]
[-49.35475922 52.23703384]
[-36.62422943 44.59051514]
[-21.87513351 48.32130432]
[-13.94107819 61.72610092]
[0.35508355 57.54650116]
[11.68246555 68.59190369]
[26.17135239 72.47418976]
[40.66024017 76.35647583]
[54.95640182 72.17687988]
[66.28378296 83.22228241]
[80.77267456 87.10456848]
[95.26155853 90.98685455]
[103.37989044 89.85993195]
[110.11221313 95.19850159]
[124.48205566 99.50054932]
[139.92155457 96.04623413]
[149.89506531 107.10870361]
[164.26490784 111.41075897]
[178.36250305 90.44392395]
[199.13916016 76.11301422]
[223.69599915 70.39455414]
[248.61515808 74.06499481]
[270.43542480 86.59538269]
[286.13305664 106.22747040]
[300.07327271 100.68937683]
[314.01348877 95.15128326]
[327.95370483 89.61318970]
[341.89392090 84.07510376]
[355.83410645 78.53701019]
[369.77432251 72.99891663]
[379.74282837 60.71316528]
[394.42755127 63.20481873]
[400.45639038 48.59562302]
[415.08154297 42.60562134]
[429.62619019 48.78857803]
[435.46124268 63.47625351]
[429.12484741 77.95471191]
[414.37628174 83.63414001]
[399.96563721 77.14503479]
[390.99423218 89.03466034]
[375.31243896 86.93912506]
[361.37222290 92.47721863]
[347.43200684 98.01531219]
[333.49179077 103.55340576]
[319.55157471 109.09149933]
[305.61135864 114.62959290]
[291.67114258 120.16767883]
[293.37954712 128.32395935]
[294.06842041 136.63049316]
[293.72674561 144.96031189]
[292.35937500 153.18601990]
[289.98675537 161.18179321]
[286.64471436 168.82524109]
[282.38400269 175.99931335]
[277.26934814 182.59408569]
[271.37866211 188.50845337]
[264.80166626 193.65168762]
[257.63864136 197.94479370]
[249.99893188 201.32174683]
[241.99914551 203.73051453]
[233.76148987 205.13385010]
[225.41183472 205.50985718]
[217.07785034 204.85237122]
[208.88697815 203.17097473]
[200.96456909 200.49096680]
[193.43188477 196.85292053]
[186.40431213 192.31204224]
[179.98951721 186.93742371]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 57]
[8 56]
[10 54]
[11 53]
[12 51]
[13 50]
[14 49]
[16 47]
[17 46]
[18 45]
[20 43]
[23 40]
[63 86]
[64 85]
[65 84]
[66 83]
[67 82]
[68 81]
[69 80]
[71 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
