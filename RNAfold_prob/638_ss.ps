%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGCCGCACCCACCUUUACUUUCCCAUUCAAACCUCCACUUACCCUCCAUCUCUUUUAUAGGCCGUUGACUUUCGAGUCAACAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[23.00259590 178.56169128]
[11.79721928 188.53363037]
[0.59184355 198.50556946]
[-10.61353207 208.47750854]
[-21.81890869 218.44944763]
[-33.02428436 228.42138672]
[-27.40465736 242.49958801]
[-26.94206238 257.65087891]
[-31.69236374 272.04568481]
[-41.08193588 283.94577026]
[-53.97694397 291.91409302]
[-68.82025146 294.98849487]
[-83.81946564 292.79772949]
[-97.16334534 285.60629272]
[-107.24055481 274.28262329]
[-112.83422852 260.19409180]
[-113.26890564 245.04196167]
[-108.49208069 230.65594482]
[-99.08059692 218.77319336]
[-86.17092133 210.82862854]
[-71.32197571 207.78157043]
[-56.32682800 210.00000000]
[-42.99622345 217.21600342]
[-31.79084587 207.24406433]
[-20.58547020 197.27214050]
[-9.38009453 187.30020142]
[1.82528162 177.32826233]
[13.03065777 167.35632324]
[5.66315317 156.57826233]
[-0.37553445 145.00325012]
[-5.00034523 132.79432678]
[-8.14613438 120.12346649]
[-9.76859093 107.16915131]
[-9.84486103 94.11385345]
[-8.37386990 81.14146423]
[-5.37633944 68.43471527]
[-0.89449042 56.17258835]
[5.00854540 44.52780914]
[12.24961853 33.66440582]
[20.72673225 23.73539925]
[30.32048035 14.88064480]
[40.89572525 7.22486973]
[52.30350113 0.87591410]
[64.38312531 -4.07679272]
[76.96444702 -7.56348658]
[89.87024689 -9.53505516]
[102.91873169 -9.96372700]
[115.92610168 -8.84346390]
[128.70913696 -6.19004536]
[141.08778381 -2.04084730]
[152.88766479 3.54568505]
[163.94258118 10.49086094]
[174.09681702 18.69684982]
[183.20732117 28.04806519]
[191.14579773 38.41278839]
[197.80038452 49.64501953]
[211.57362366 43.70382309]
[225.34687805 37.76262665]
[239.12011719 31.82142830]
[252.89335632 25.88023186]
[266.66659546 19.93903542]
[253.15710449 13.42033195]
[246.77680969 -0.15508457]
[250.37907410 -14.71611691]
[262.35293579 -23.75088882]
[277.34347534 -23.21893311]
[288.64682007 -13.35815144]
[291.20788574 1.42159307]
[283.88027954 14.51158142]
[298.57040405 11.47831726]
[313.26049805 8.44505405]
[327.95062256 5.41179037]
[342.64071655 2.37852693]
[357.33084106 -0.65473670]
[372.02093506 -3.68800020]
[383.90512085 -14.98835373]
[399.55490112 -10.08763599]
[402.87109375 5.97271538]
[390.44229126 16.67118645]
[375.05419922 11.00210953]
[360.36410522 14.03537273]
[345.67398071 17.06863594]
[330.98388672 20.10190010]
[316.29376221 23.13516426]
[301.60366821 26.16842651]
[286.91354370 29.20169067]
[272.60778809 33.71227646]
[258.83456421 39.65347290]
[245.06130981 45.59466934]
[231.28807068 51.53586578]
[217.51483154 57.47706223]
[203.74159241 63.41825867]
[208.20428467 80.19156647]
[209.97308350 97.45803070]
[209.00395203 114.78778076]
[205.32102966 131.74937439]
[199.01597595 147.92051697]
[190.24580383 162.89860535]
[179.22883606 176.31076050]
[166.23934937 187.82304382]
[151.60075378 197.14886475]
[135.67749023 204.05603027]
[118.86597443 208.37257385]
[101.58477020 209.99104309]
[84.26411438 208.87112427]
[67.33522034 205.04071045]
[51.21955872 198.59518433]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[3 26]
[4 25]
[5 24]
[6 23]
[56 92]
[57 91]
[58 90]
[59 89]
[60 88]
[61 87]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
