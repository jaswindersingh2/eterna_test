%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCCGACCACCACUCCCACCCUUACUUUCCAUUUCCCUCCCAUAUCAACCAAAAUCAUCCCGGCGGUACCUUUCGAGGUACCAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[-16.73331070 180.81413269]
[-29.50006104 188.68878174]
[-42.26681137 196.56343079]
[-55.03356171 204.43807983]
[-67.80030823 212.31272888]
[-80.56706238 220.18737793]
[-76.22940063 234.63891602]
[-75.78085327 249.72073364]
[-79.25199127 264.40451050]
[-86.40615845 277.68911743]
[-96.75556183 288.66873169]
[-109.59456635 296.59481812]
[-124.04778290 300.92687988]
[-139.12977600 301.36959839]
[-153.81221008 297.89279175]
[-167.09403992 290.73352051]
[-178.06967163 280.37985229]
[-185.99078369 267.53781128]
[-190.31727600 253.08291626]
[-190.75418091 238.00074768]
[-187.27169800 223.31965637]
[-180.10728455 210.04058838]
[-169.74940491 199.06895447]
[-156.90428162 191.15281677]
[-142.44772339 186.83189392]
[-127.36539459 186.40081787]
[-112.68563843 189.88896179]
[-99.40934753 197.05851746]
[-88.44171143 207.42062378]
[-75.67495728 199.54597473]
[-62.90821075 191.67132568]
[-50.14146042 183.79667664]
[-37.37471008 175.92202759]
[-24.60795975 168.04737854]
[-30.59647751 155.69694519]
[-35.36442184 142.82595825]
[-38.86723328 129.55471802]
[-41.07217407 116.00724792]
[-41.95862961 102.31018066]
[-41.51832581 88.59151459]
[-39.75537109 74.97947693]
[-36.68624115 61.60128403]
[-32.33962631 48.58197021]
[-26.75614357 36.04322052]
[-19.98798180 24.10221481]
[-12.09839725 12.87056160]
[-3.16112566 2.45323157]
[6.74030447 -7.05241251]
[17.51335144 -15.55753040]
[29.05733109 -22.98263168]
[41.26435089 -29.25831985]
[54.02032089 -34.32594299]
[67.20602417 -38.13813782]
[80.69822693 -40.65927505]
[94.37081909 -41.86578751]
[108.09603119 -41.74640656]
[121.74556732 -40.30224609]
[135.19187927 -37.54679871]
[148.30926514 -33.50582123]
[160.97515869 -28.21707916]
[173.07116699 -21.73000336]
[184.48425293 -14.10522175]
[195.10772705 -5.41399813]
[204.84230042 4.26243973]
[213.59701538 14.83365345]
[221.29003906 26.20084381]
[227.84947205 38.25777054]
[233.21400452 50.89175034]
[237.33349609 63.98469925]
[252.02360535 60.95143890]
[266.71371460 57.91817474]
[281.40380859 54.88491058]
[296.09393311 51.85164642]
[310.78402710 48.81838226]
[325.47415161 45.78511810]
[337.35833740 34.48476410]
[353.00808716 39.38548279]
[356.32431030 55.44583511]
[343.89550781 66.14431000]
[328.50741577 60.47522736]
[313.81729126 63.50849152]
[299.12719727 66.54175568]
[284.43707275 69.57501984]
[269.74697876 72.60828400]
[255.05686951 75.64154816]
[240.36676025 78.67481232]
[241.89559937 95.18032837]
[241.49024963 111.75154114]
[239.15623474 128.16256714]
[234.92538452 144.18971252]
[228.85534668 159.61450195]
[221.02888489 174.22668457]
[211.55265808 187.82707214]
[200.55586243 200.23028564]
[188.18836975 211.26725769]
[174.61877441 220.78753662]
[160.03205872 228.66134644]
[144.62702942 234.78137207]
[128.61369324 239.06417847]
[112.21032715 241.45140076]
[95.64051819 241.91047668]
[79.13012695 240.43518066]
[62.90421677 237.04559326]
[47.18396378 231.78791809]
[32.18365097 224.73384094]
[18.10774422 215.97952271]
[5.14811707 205.64425659]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[4 31]
[5 30]
[6 29]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
