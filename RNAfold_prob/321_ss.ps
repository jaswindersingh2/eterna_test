%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGUUGGUGGAAAAAACCACGUCAAAGACACAACAGGGAGAGAAAAACUCGUUGAAAACAACCCCAACUGACUUCGGUCAGUUAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[83.84152985 245.56481934]
[78.03390503 231.54212952]
[77.68794250 216.36831665]
[82.85044098 202.09550476]
[92.82320404 190.65397644]
[106.25750732 183.59112549]
[104.51611328 168.69255066]
[102.77471924 153.79397583]
[101.03332520 138.89540100]
[87.34794617 132.75451660]
[75.06066895 141.35815430]
[62.77338791 149.96180725]
[50.48610687 158.56544495]
[47.98889160 174.17120361]
[35.13933945 183.37254333]
[19.56086349 180.71046448]
[10.49589634 167.76435852]
[13.32252216 152.21488953]
[26.36375427 143.28730774]
[41.88246155 146.27816772]
[54.16974258 137.67453003]
[66.45702362 129.07087708]
[78.74430084 120.46723175]
[74.65170288 106.03633881]
[59.67708206 105.16416931]
[44.70245743 104.29199219]
[28.53856087 109.40714264]
[19.14870262 95.29094696]
[30.11385918 82.36029816]
[45.57463074 89.31737518]
[60.54925156 90.18954468]
[75.52387238 91.06171417]
[80.90374756 85.83610535]
[66.47288513 81.74340057]
[62.80194473 67.19953156]
[73.56191254 56.74854660]
[87.99268341 60.84156799]
[91.66349030 75.38488770]
[97.04335785 70.15927887]
[96.60708618 55.16562653]
[96.17081451 40.17197037]
[82.28315735 38.79728699]
[70.00600433 25.52436638]
[64.87570190 11.42897701]
[59.74540329 -2.66641259]
[45.87164307 -10.72236729]
[43.66252136 -26.61259460]
[54.81268692 -38.14747238]
[70.76868439 -36.47843170]
[79.29043579 -22.88581276]
[73.84078979 -7.79671478]
[78.97109222 6.29867458]
[84.10139465 20.39406395]
[99.09980774 20.17590523]
[103.81797791 5.93726587]
[108.53614807 -8.30137348]
[113.25432587 -22.54001427]
[109.41002655 -38.48220444]
[121.47904968 -49.58493423]
[137.04582214 -44.42667007]
[140.09657288 -28.31378746]
[127.49296570 -17.82184219]
[122.77478790 -3.58320236]
[118.05661774 10.65543747]
[113.33844757 24.89407730]
[111.16447449 39.73570251]
[111.60073853 54.72935486]
[112.03701019 69.72300720]
[123.80324554 79.02654266]
[138.49336243 75.99327850]
[153.18347168 72.96001434]
[167.87358093 69.92675018]
[182.56369019 66.89348602]
[197.25379944 63.86022568]
[211.94390869 60.82696152]
[223.82809448 49.52660751]
[239.47785950 54.42732620]
[242.79405212 70.48767853]
[230.36526489 81.18614960]
[214.97717285 75.51706696]
[200.28706360 78.55033112]
[185.59695435 81.58359528]
[170.90684509 84.61685944]
[156.21673584 87.65012360]
[141.52662659 90.68338776]
[126.83650970 93.71665192]
[141.18252563 98.09752655]
[155.62638855 102.14405823]
[165.96990967 113.00738525]
[169.30392456 127.63216400]
[164.69075012 141.90516663]
[153.42785645 151.81208801]
[138.68293762 154.56658936]
[124.60287476 149.39385986]
[115.93190002 137.15400696]
[117.67329407 152.05258179]
[119.41468811 166.95115662]
[121.15608215 181.84973145]
[135.85707092 185.62403870]
[148.19961548 194.45727539]
[156.51449585 207.15481567]
[159.67718506 221.99940491]
[157.25994873 236.98344421]
[149.58972168 250.08045959]
[137.70382690 259.51919556]
[123.20971680 264.02313232]
[108.06762695 262.98318481]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 98]
[7 97]
[8 96]
[9 95]
[10 23]
[11 22]
[12 21]
[13 20]
[24 32]
[25 31]
[26 30]
[39 68]
[40 67]
[41 66]
[43 53]
[44 52]
[45 51]
[54 65]
[55 64]
[56 63]
[57 62]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
