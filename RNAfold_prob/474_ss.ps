%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAUAUUAGGACACACAAAAGUGGACAAAAGUCGUCAAAACAUUAUAAAAGUAAUGCUAAUGAAACAUUUAUUUCGGUAAAUGAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[120.33580780 181.16525269]
[126.17810822 167.34976196]
[134.66368103 154.98065186]
[145.45011902 144.55699158]
[158.10220337 136.49938965]
[172.10939026 131.13296509]
[186.91201782 128.67391968]
[173.92163086 121.17392731]
[160.93125916 113.67392731]
[147.94087219 106.17392731]
[134.95048523 98.67392731]
[121.96011353 91.17392731]
[124.95272064 110.73485565]
[111.26123047 128.51734924]
[86.31168365 131.29400635]
[72.37146759 136.83209229]
[58.43125534 142.37019348]
[52.40242004 156.97938538]
[37.77725601 162.96939087]
[23.23261261 156.78643799]
[17.39757156 142.09875488]
[23.73395920 127.62030029]
[38.48250580 121.94087219]
[52.89316177 128.42997742]
[66.83337402 122.89188385]
[80.77359009 117.35379791]
[79.90141296 102.37917328]
[65.41252899 98.49688721]
[50.92364120 94.61460114]
[35.23194885 99.37934875]
[23.44625092 87.97631073]
[27.69066238 72.13594818]
[43.59889603 68.15347290]
[54.80592728 80.12571716]
[69.29481506 84.00799561]
[83.78369904 87.89028168]
[89.38639069 82.90431213]
[78.53246307 72.55094910]
[66.15431976 64.07855225]
[69.70362091 49.50451660]
[84.59130859 47.67234421]
[91.56846619 60.94988632]
[100.59176636 72.93238068]
[106.19445801 67.94641113]
[104.02047729 53.10478592]
[101.84649658 38.26316071]
[99.67252350 23.42153549]
[97.49854279 8.57991028]
[95.32456207 -6.26171398]
[84.73433685 -18.78285789]
[90.53671265 -34.12118912]
[106.76271057 -36.49794769]
[116.72041321 -23.46812820]
[110.16619110 -8.43569183]
[112.34016418 6.40593243]
[114.51414490 21.24755669]
[116.68812561 36.08917999]
[118.86209869 50.93080521]
[121.03607941 65.77243042]
[129.46011353 78.18354034]
[142.45048523 85.68354034]
[155.44087219 93.18354034]
[168.43125916 100.68354034]
[181.42163086 108.18354034]
[194.41201782 115.68354034]
[195.32316589 100.71124268]
[209.15824890 94.91548920]
[220.46888733 104.76787567]
[216.62466431 119.26794434]
[231.31477356 116.23468018]
[246.00488281 113.20142365]
[260.69500732 110.16815948]
[275.38510132 107.13489532]
[290.07522583 104.10163116]
[304.76531982 101.06836700]
[316.64950562 89.76801300]
[332.29928589 94.66873169]
[335.61547852 110.72908020]
[323.18667603 121.42755127]
[307.79858398 115.75847626]
[293.10848999 118.79174042]
[278.41836548 121.82500458]
[263.72827148 124.85826874]
[249.03814697 127.89153290]
[234.34803772 130.92478943]
[219.65792847 133.95805359]
[232.93113708 140.94532776]
[244.54008484 150.44439697]
[254.01635742 162.07196045]
[260.97760010 175.35884094]
[265.14288330 189.76892090]
[266.34414673 204.72074890]
[264.53295898 219.61099243]
[259.78234863 233.83885193]
[252.28404236 246.83021545]
[242.34057617 258.06085205]
[230.35319519 267.07766724]
[216.80557251 273.51675415]
[202.24436951 277.11834717]
[187.25714111 277.73709106]
[172.44860840 275.34802246]
[158.41632080 270.04757690]
[145.72648621 262.04959106]
[134.89112854 251.67677307]
[126.34746552 239.34771729]
[120.44023132 225.55987549]
[117.40779877 210.86959839]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[15 26]
[16 25]
[17 24]
[27 36]
[28 35]
[29 34]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
