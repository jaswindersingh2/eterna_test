%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:14:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGCCCACUUCACUUUGAGAAACUCAAAAGAAAACAUGACACAAAGUGCAUGAGAAGAGGGCGGAUAAUUUCGAUUAUCCAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[120.79689789 262.15219116]
[123.65820312 247.42761230]
[129.26634216 233.51542664]
[137.41680908 220.92297363]
[147.81237793 210.10946655]
[160.07395935 201.46923828]
[173.75440979 195.31735229]
[188.35482788 191.87818909]
[203.34687805 191.27737427]
[191.58064270 181.97384644]
[179.81440735 172.67030334]
[168.04817200 163.36677551]
[153.26574707 161.54212952]
[147.23962402 146.91351318]
[135.47338867 137.60998535]
[123.70716095 128.30644226]
[111.94092560 119.00291443]
[97.97935486 126.56310272]
[79.83274078 123.32748413]
[65.81876373 107.67890167]
[50.81875992 107.67890167]
[35.81875992 107.67890167]
[20.81875992 107.67890167]
[5.81876040 107.67890167]
[-9.18123913 107.67890167]
[-25.02037239 113.72523499]
[-35.21512604 100.17890167]
[-25.02037239 86.63256073]
[-9.18123913 92.67890167]
[5.81876040 92.67890167]
[20.81875992 92.67890167]
[35.81875992 92.67890167]
[50.81875992 92.67890167]
[65.81876373 92.67890167]
[70.38446808 86.72875214]
[55.51278687 84.77095032]
[49.77236557 70.91282654]
[58.90356445 59.01235580]
[73.77528381 60.96988297]
[79.51589203 74.82844543]
[84.08160400 68.87829590]
[80.19931793 54.38941193]
[76.31703186 39.90052414]
[72.43474579 25.41163635]
[67.11306000 17.79254723]
[68.65680695 10.44476986]
[65.19757080 -4.15090275]
[61.73833466 -18.74657631]
[52.20222092 -32.76438141]
[63.03234482 -45.80833435]
[78.56461334 -39.01238251]
[76.33400726 -22.20581436]
[79.79324341 -7.61014080]
[83.25248718 6.98553228]
[86.92363739 21.52935028]
[90.80591583 36.01823807]
[94.68820190 50.50712585]
[98.57048798 64.99600983]
[123.02240753 82.79966736]
[121.24445343 107.23667908]
[133.01069641 116.54021454]
[144.77693176 125.84374237]
[156.54316711 135.14727783]
[172.16717529 137.63737488]
[177.35169983 151.60054016]
[189.11793518 160.90406799]
[200.88417053 170.20761108]
[212.65040588 179.51113892]
[227.24607849 182.97038269]
[241.93618774 179.93711853]
[256.62631226 176.90385437]
[271.31640625 173.87059021]
[286.00653076 170.83732605]
[300.69662476 167.80406189]
[315.38674927 164.77079773]
[327.27093506 153.47044373]
[342.92068481 158.37115479]
[346.23687744 174.43150330]
[333.80810547 185.12997437]
[318.42001343 179.46090698]
[303.72988892 182.49417114]
[289.03979492 185.52743530]
[274.34967041 188.56069946]
[259.65957642 191.59396362]
[244.96945190 194.62722778]
[230.27934265 197.66049194]
[243.40370178 204.92349243]
[254.90811157 214.54890442]
[264.37304688 226.18568420]
[271.45336914 239.40950012]
[275.89083862 253.73809814]
[277.52368164 268.64895630]
[276.29229736 283.59832764]
[272.24163818 298.04104614]
[265.51937866 311.45043945]
[256.37069702 323.33746338]
[245.12921143 333.26867676]
[232.20484924 340.88189697]
[218.06895447 345.89947510]
[203.23699951 348.13848877]
[188.24986267 347.51721191]
[173.65409851 344.05834961]
[159.98196411 337.88803101]
[147.73205566 329.23129272]
[137.35107422 318.40374756]
[129.21759033 305.80032349]
[123.62821960 291.88058472]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 68]
[10 67]
[11 66]
[12 65]
[14 63]
[15 62]
[16 61]
[17 60]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[25 29]
[41 58]
[42 57]
[43 56]
[44 55]
[46 54]
[47 53]
[48 52]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
