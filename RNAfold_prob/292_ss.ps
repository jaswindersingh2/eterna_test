%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGUGCAAGUACAAAAGUACAGACAGCUGAAAGUGGCAAAAGGCACGCAGAGGUCAAGCACAGUGUUACUUCGGUAACACAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[68.33246613 217.54457092]
[71.22158051 202.82543945]
[76.88454437 188.93547058]
[85.11039734 176.39213562]
[95.59271240 165.66268921]
[107.94098663 157.14682007]
[121.69522858 151.16177368]
[136.34306335 147.93049622]
[151.34306335 147.57368469]
[139.31121826 138.61630249]
[127.27937317 129.65892029]
[115.24752045 120.70154572]
[103.18873596 125.51221466]
[90.31687164 123.81759644]
[79.91407013 116.04980469]
[65.97385406 121.58789825]
[52.03364182 127.12599182]
[38.09342957 132.66407776]
[28.35206985 145.85643005]
[12.08906460 143.74771118]
[6.03439856 128.50720215]
[16.41659355 115.81303406]
[32.55533981 118.72386932]
[46.49555206 113.18577576]
[60.43576431 107.64768982]
[74.37597656 102.10959625]
[75.59429169 91.91282654]
[80.70613861 83.00624084]
[72.83148956 70.23948669]
[64.95684052 57.47274017]
[49.83967590 53.71653748]
[42.03553009 40.65705872]
[45.70965576 26.26829910]
[37.83501053 13.50154972]
[29.96035957 0.73479968]
[19.05996323 -1.20781112]
[11.24962425 -8.74002457]
[9.00700760 -19.12981796]
[12.85172081 -28.80117226]
[5.73271561 -42.00419235]
[-1.38628995 -55.20721436]
[-14.74623966 -63.68201828]
[-13.97622490 -78.55670929]
[-28.21026993 -86.70066071]
[-28.00383568 -103.09851074]
[-13.56928253 -110.88155365]
[0.24435703 -102.04325867]
[-0.77320397 -85.67571259]
[12.07754612 -78.14527893]
[11.81673050 -62.32621765]
[18.93573570 -49.12319946]
[26.05474281 -35.92017746]
[43.20402527 -27.18890572]
[42.72711182 -7.13984919]
[50.60175705 5.62690115]
[58.47640610 18.39365196]
[72.98361969 21.56799507]
[81.15149689 34.40311813]
[77.72359467 49.59809113]
[85.59824371 62.36484146]
[93.47289276 75.13159180]
[111.57816315 77.04380035]
[123.87794495 90.46665955]
[124.20490265 108.66970062]
[136.23675537 117.62707520]
[148.26860046 126.58445740]
[160.30044556 135.54183960]
[165.70123291 135.63218689]
[170.27645874 137.75346375]
[184.96656799 134.72019958]
[199.65667725 131.68693542]
[214.34678650 128.65367126]
[229.03689575 125.62040710]
[243.72700500 122.58714294]
[258.41711426 119.55388641]
[270.30130005 108.25353241]
[285.95108032 113.15424347]
[289.26727295 129.21459961]
[276.83847046 139.91307068]
[261.45037842 134.24398804]
[246.76026917 137.27725220]
[232.07015991 140.31051636]
[217.38005066 143.34378052]
[202.68994141 146.37704468]
[187.99983215 149.41030884]
[173.30972290 152.44357300]
[186.74992371 159.10397339]
[198.66027832 168.22229004]
[208.59707642 179.45883179]
[216.19017029 192.39501953]
[221.15669250 206.54895020]
[223.31161499 221.39335632]
[222.57467651 236.37524414]
[218.97332764 250.93650818]
[212.64172363 264.53469849]
[203.81573486 276.66323853]
[192.82415771 286.87036133]
[180.07643127 294.77578735]
[166.04745483 300.08502197]
[151.25985718 302.60028076]
[136.26448059 302.22787476]
[121.61994934 298.98168945]
[107.87180328 292.98263550]
[95.53221130 284.45419312]
[85.06082916 273.71408081]
[76.84776306 261.16235352]
[71.19894409 247.26664734]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 67]
[10 66]
[11 65]
[12 64]
[15 26]
[16 25]
[17 24]
[18 23]
[28 61]
[29 60]
[30 59]
[33 56]
[34 55]
[35 54]
[39 52]
[40 51]
[41 50]
[43 48]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
