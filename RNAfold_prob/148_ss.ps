%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:14:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAACGUCGCGUCGGCGCGGCUUUGCGCUUUUGCAGCUGCGGCAGCGGUUCGCGUUCGAAAAAACGCGCGCUUCGGCGCGCGAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[239.57054138 217.28175354]
[235.74079895 207.82588196]
[233.09173584 197.97236633]
[231.66316223 187.86802673]
[231.47676086 177.66348267]
[232.53562927 167.51089478]
[234.82434082 157.56166077]
[220.88412476 152.02357483]
[206.94390869 146.48548889]
[193.00370789 140.94738770]
[179.06349182 135.40930176]
[162.87066650 143.70028687]
[145.40979004 137.56596375]
[137.70227051 120.39421082]
[123.46363831 115.67604065]
[109.22499847 110.95786285]
[95.49447632 113.59690094]
[86.05683136 103.28076935]
[70.52339172 106.28457642]
[60.87585068 94.93670654]
[46.63721085 90.21853638]
[32.39857101 85.50035858]
[18.15993118 80.78218842]
[3.92129230 76.06401825]
[-10.31734753 71.34584808]
[-24.55598640 66.62767792]
[-31.34732437 67.62618256]
[-36.74427795 65.29191589]
[-39.47129822 61.19894791]
[-53.41151047 55.66085434]
[-67.82216644 62.14996338]
[-82.57071686 56.47053528]
[-88.90709686 41.99207687]
[-83.07205963 27.30439949]
[-68.52742004 21.12144279]
[-53.90225601 27.11144447]
[-47.87341690 41.72064209]
[-33.93320465 47.25873566]
[-19.83781624 52.38903809]
[-5.59917593 57.10720825]
[8.63946342 61.82537842]
[22.87810326 66.54354858]
[37.11674118 71.26171875]
[51.35538101 75.97989655]
[65.59402466 80.69806671]
[80.10901642 77.35678864]
[90.77500153 89.04213715]
[104.50552368 86.40309906]
[113.94316864 96.71923065]
[128.18180847 101.43740082]
[142.42044067 106.15557098]
[151.95988464 98.75583649]
[163.77804565 96.97151184]
[174.85066223 101.13992310]
[182.40220642 110.09017181]
[184.60157776 121.46908569]
[198.54179382 127.00717926]
[212.48200989 132.54527283]
[226.42222595 138.08335876]
[240.36242676 143.62145996]
[252.84101868 125.45460510]
[269.62634277 111.18688965]
[289.54821777 101.80618286]
[311.21966553 97.95990753]
[333.13327026 99.91033936]
[353.76620483 107.51676178]
[371.68600464 120.24557495]
[385.64996338 137.20776367]
[394.69137573 157.22091675]
[409.38150024 154.18765259]
[424.07159424 151.15438843]
[438.76171875 148.12112427]
[453.45181274 145.08786011]
[468.14193726 142.05459595]
[482.83203125 139.02133179]
[494.71621704 127.72098541]
[510.36599731 132.62170410]
[513.68218994 148.68205261]
[501.25338745 159.38052368]
[485.86529541 153.71144104]
[471.17517090 156.74470520]
[456.48507690 159.77796936]
[441.79495239 162.81123352]
[427.10485840 165.84449768]
[412.41473389 168.87776184]
[397.72463989 171.91102600]
[398.26828003 182.06582642]
[397.57009888 192.21260071]
[395.64013672 202.20001221]
[392.50686646 211.87910461]
[388.21664429 221.10542297]
[382.83316040 229.74127197]
[376.43634033 237.65768433]
[369.12136841 244.73641968]
[360.99700928 250.87167358]
[352.18420410 255.97169495]
[342.81420898 259.96014404]
[333.02661133 262.77719116]
[322.96722412 264.38055420]
[312.78598022 264.74597168]
[302.63470459 263.86764526]
[292.66476440 261.75830078]
[283.02490234 258.44906616]
[273.85894775 253.98898315]
[265.30377197 248.44421387]
[257.48706055 241.89715576]
[250.52565002 234.44515991]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 60]
[8 59]
[9 58]
[10 57]
[11 56]
[14 51]
[15 50]
[16 49]
[18 47]
[20 45]
[21 44]
[22 43]
[23 42]
[24 41]
[25 40]
[26 39]
[29 38]
[30 37]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
