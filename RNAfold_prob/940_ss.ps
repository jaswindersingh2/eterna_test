%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAUUACACAAGAAAACUUGAGGAUAAGAGAAAAAAACUCUUAUCCACUGGAAAACCAGAGUAAUUUCGUACUUCGGUACGAAAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[126.58525085 185.29440308]
[137.69628906 175.21745300]
[150.67170715 167.69158936]
[164.93572998 163.05072021]
[179.85885620 161.50079346]
[167.32655334 153.25816345]
[154.79423523 145.01551819]
[142.26191711 136.77288818]
[129.72959900 128.53025818]
[117.19728088 120.28762054]
[99.61319733 126.59293365]
[82.21994019 119.77886200]
[69.45318604 127.65350342]
[56.68643951 135.52815247]
[43.91968918 143.40280151]
[36.61714935 158.08630371]
[20.23503876 158.83366394]
[11.62587070 144.87606812]
[19.64601707 130.57189941]
[36.04504013 130.63604736]
[48.81179047 122.76140594]
[61.57854080 114.88675690]
[74.34529114 107.01210785]
[73.40706635 99.61319733]
[74.56008911 92.24469757]
[62.02777100 84.00205994]
[49.49545288 75.75942993]
[36.96313477 67.51679230]
[24.43081856 59.27415848]
[11.89850140 51.03152466]
[-0.63381535 42.78889084]
[-13.16613293 34.54625702]
[-25.69845009 26.30362129]
[-40.62619781 30.96156120]
[-55.03557587 24.88670921]
[-62.12291718 10.94742775]
[-58.54180145 -4.27458239]
[-45.98311234 -13.59195328]
[-30.37668800 -12.60530758]
[-19.09139824 -1.78050923]
[-17.45581436 13.77130318]
[-4.92349768 22.01393890]
[7.60881948 30.25657272]
[20.14113617 38.49920654]
[32.67345428 46.74184036]
[45.20577240 54.98447800]
[57.73808670 63.22711182]
[70.27040863 71.46974945]
[82.80271912 79.71237946]
[89.11190796 75.73514557]
[96.27732086 73.66607666]
[98.45129395 58.82445145]
[100.62527466 43.98282623]
[102.79925537 29.14120293]
[96.24502563 14.10876656]
[106.20272827 1.07894635]
[122.42872620 3.45570540]
[128.23110962 18.79403687]
[117.64087677 31.31518173]
[115.46689606 46.15680695]
[113.29292297 60.99843216]
[111.11894226 75.84005737]
[124.26485443 89.11190796]
[125.43991089 107.75530243]
[137.97222900 115.99794006]
[150.50454712 124.24057007]
[163.03686523 132.48320007]
[175.56918335 140.72584534]
[188.10150146 148.96847534]
[202.83416748 151.78776550]
[217.52427673 148.75450134]
[232.21438599 145.72123718]
[246.90449524 142.68797302]
[261.59460449 139.65470886]
[276.28472900 136.62144470]
[288.16891479 125.32109833]
[303.81866455 130.22181702]
[307.13485718 146.28216553]
[294.70608521 156.98063660]
[279.31799316 151.31155396]
[264.62786865 154.34481812]
[249.93775940 157.37808228]
[235.24765015 160.41134644]
[220.55754089 163.44461060]
[205.86743164 166.47787476]
[219.16111755 173.42611694]
[230.70437622 183.00489807]
[239.98501587 194.78919983]
[246.59121704 208.25613403]
[250.22985840 222.80812073]
[250.73947144 237.79945374]
[248.09747314 252.56495667]
[242.42106628 266.44940186]
[233.96212769 278.83676147]
[223.09602356 289.17733765]
[210.30488586 297.01232910]
[196.15629578 301.99404907]
[181.27806091 303.90142822]
[166.33036804 302.64987183]
[151.97647095 298.29492188]
[138.85330200 291.02978516]
[127.54314423 281.17684937]
[118.54787445 269.17327881]
[112.26663208 255.55175781]
[108.97812653 240.91667175]
[108.82828522 225.91741943]
[111.82373810 211.21955872]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 69]
[6 68]
[7 67]
[8 66]
[9 65]
[10 64]
[12 23]
[13 22]
[14 21]
[15 20]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[51 62]
[52 61]
[53 60]
[54 59]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
