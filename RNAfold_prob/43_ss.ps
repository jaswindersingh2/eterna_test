%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAGGACCAGGGCGAAAGCCCUGCAAGGGCUCGAAAGAGCACCACGAAAGUGGCCGGGCGGUCCUUGCGUUUUCGAACGCAAAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[115.33695984 198.54751587]
[125.23165131 187.27386475]
[137.14541626 178.16001892]
[150.61538696 171.56002808]
[165.11825562 167.73033142]
[180.08908081 166.81964111]
[168.05722046 157.86225891]
[156.02537537 148.90487671]
[143.99353027 139.94749451]
[131.96168518 130.99012756]
[119.92983246 122.03274536]
[107.89798737 113.07536316]
[92.97566223 111.55083466]
[79.38104248 117.89011383]
[65.78642273 124.22938538]
[52.19181061 130.56866455]
[38.59719086 136.90792847]
[29.63938141 150.64436340]
[13.28127766 149.48483276]
[6.35069895 134.62216187]
[15.97722816 121.34578705]
[32.25791931 123.31331635]
[45.85253525 116.97404480]
[59.44715118 110.63476562]
[73.04177094 104.29549408]
[86.63638306 97.95622253]
[91.14697266 83.65046692]
[83.64697266 70.66008759]
[68.64545441 66.46578979]
[61.22443771 53.18486023]
[65.31550598 38.90904999]
[57.81550217 25.91866875]
[48.00759125 14.56944561]
[36.24135590 5.26591349]
[24.47512054 -4.03761864]
[12.70888519 -13.34115124]
[-3.58670020 -15.18124390]
[-9.89200401 -30.31977654]
[0.27932894 -43.18352509]
[16.46390343 -40.53936768]
[22.01241684 -25.10738564]
[33.77865219 -15.80385399]
[45.54488754 -6.50032139]
[57.31112289 2.80321121]
[63.80631256 -0.94678891]
[83.29188538 -12.19678879]
[81.11790466 -27.03841400]
[78.94393158 -41.88003922]
[76.76995087 -56.72166443]
[66.17971802 -69.24280548]
[71.98210144 -84.58113861]
[88.20809937 -86.95790100]
[98.16580200 -73.92807770]
[91.61157227 -58.89564133]
[93.78555298 -44.05401611]
[95.95953369 -29.21239090]
[98.13350677 -14.37076664]
[70.80588531 18.41866875]
[78.30588531 31.40904808]
[92.71463013 35.00398636]
[100.50575256 48.07123947]
[96.63735199 63.16008759]
[104.13735199 76.15046692]
[116.85536194 101.04351807]
[128.88720703 110.00089264]
[140.91906738 118.95827484]
[152.95091248 127.91564941]
[164.98275757 136.87303162]
[177.01460266 145.83041382]
[189.04644775 154.78779602]
[203.69088745 158.03437805]
[218.38099670 155.00111389]
[233.07110596 151.96784973]
[247.76121521 148.93458557]
[262.45132446 145.90133667]
[274.33551025 134.60098267]
[289.98529053 139.50169373]
[293.30148315 155.56204224]
[280.87268066 166.26051331]
[265.48458862 160.59144592]
[250.79447937 163.62469482]
[236.10437012 166.65795898]
[221.41426086 169.69122314]
[206.72415161 172.72448730]
[219.90870667 179.87765503]
[231.43408203 189.47795105]
[240.85250854 201.15242004]
[247.79809570 214.44747925]
[252.00100708 228.84663391]
[253.29792786 243.79046631]
[251.63850403 258.69839478]
[247.08718872 272.99124146]
[239.82080078 286.11373901]
[230.12164307 297.55603027]
[218.36654663 306.87362671]
[205.01219177 313.70452881]
[190.57739258 317.78332520]
[175.62295532 318.95156860]
[160.72985840 317.16387939]
[146.47671509 312.48971558]
[133.41726685 305.11062622]
[122.05886841 295.31335449]
[112.84279633 283.47848511]
[106.12711334 270.06582642]
[102.17271423 255.59643555]
[101.13323212 240.63249207]
[103.04905701 225.75535583]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 70]
[7 69]
[8 68]
[9 67]
[10 66]
[11 65]
[12 64]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[27 63]
[28 62]
[31 59]
[32 58]
[33 44]
[34 43]
[35 42]
[36 41]
[46 57]
[47 56]
[48 55]
[49 54]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
