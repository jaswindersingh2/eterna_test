%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGCACAAAAAAGGCAAAAGUCCAGCAAAAGACUGAAGACAGGCAAAAGACCAAGCAAAAAGAUGGUCUUCGGACCAUCAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[4.33678532 185.20191956]
[-7.42944956 194.50544739]
[-19.19568443 203.80899048]
[-15.57468033 217.55484009]
[-17.48952866 231.59616089]
[-24.61507988 243.79534912]
[-35.83550262 252.30816650]
[-49.41891098 255.86250305]
[-63.28462982 253.94836426]
[-75.32192230 246.89077759]
[-87.35376740 255.84815979]
[-92.46974945 263.60687256]
[-99.86835480 264.88504028]
[-102.36557007 280.49078369]
[-115.21511841 289.69210815]
[-130.79359436 287.03005981]
[-139.85856628 274.08392334]
[-137.03193665 258.53448486]
[-123.99070740 249.60688782]
[-108.47200012 252.59774780]
[-96.31114960 243.81631470]
[-84.27929688 234.85893250]
[-87.62084198 219.30583191]
[-83.86754608 203.78739929]
[-73.71442413 191.39086914]
[-59.13476181 184.60476685]
[-42.99673462 184.81951904]
[-28.49921799 192.04275513]
[-16.73298264 182.73921204]
[-4.96674728 173.43568420]
[-15.15779591 156.12040710]
[-22.51617241 137.42466736]
[-26.86087227 117.80834961]
[-28.08502388 97.75397491]
[-26.15851593 77.75485229]
[-21.12873840 58.30291748]
[-13.11941147 39.87665558]
[-2.32755303 22.92931938]
[10.98137760 7.87778330]
[26.48000526 -4.90771341]
[18.60535812 -17.67446327]
[10.73070812 -30.44121361]
[-3.95278382 -37.74375534]
[-4.70014858 -54.12586212]
[9.25743961 -62.73503113]
[23.56160927 -54.71488571]
[23.49745941 -38.31586075]
[31.37210655 -25.54911232]
[39.24675751 -12.78236198]
[49.64527893 -17.79312325]
[60.45262146 -21.84753990]
[71.58104706 -24.91269302]
[82.94020081 -26.96369934]
[94.43785858 -27.98390770]
[105.98067474 -27.96503258]
[117.47493744 -26.90722847]
[128.82731628 -24.81908417]
[139.94566345 -21.71755028]
[150.73968506 -17.62781143]
[161.12176514 -12.58307076]
[171.00759888 -6.62428427]
[180.31694031 0.20016910]
[188.97419739 7.83488226]
[196.90908813 16.21787071]
[204.05718994 25.28107262]
[210.36047363 34.95090866]
[215.76774597 45.14886475]
[220.23512268 55.79215240]
[223.72631836 66.79435730]
[238.41642761 63.76109314]
[253.10653687 60.72782898]
[267.79666138 57.69456482]
[282.48675537 54.66130066]
[297.17687988 51.62803650]
[311.86697388 48.59477234]
[323.75115967 37.29441833]
[339.40093994 42.19513702]
[342.71713257 58.25548935]
[330.28833008 68.95396423]
[314.90023804 63.28488159]
[300.21014404 66.31814575]
[285.52001953 69.35140991]
[270.82992554 72.38467407]
[256.13980103 75.41793823]
[241.44969177 78.45120239]
[226.75958252 81.48446655]
[228.03163147 95.67332458]
[227.72038269 109.91568756]
[225.82971191 124.03542328]
[222.38298035 137.85794067]
[217.42282104 151.21228027]
[211.01057434 163.93331909]
[203.22554016 175.86373901]
[194.16397095 186.85600281]
[183.93794250 196.77416992]
[172.67390442 205.49560547]
[160.51115417 212.91242981]
[147.60011292 218.93295288]
[134.10043335 223.48271179]
[120.17904663 226.50543213]
[106.00812531 227.96374512]
[91.76290131 227.83961487]
[77.61954498 226.13458252]
[63.75294876 222.86972046]
[50.33459854 218.08541870]
[37.53042603 211.84082031]
[25.49877357 204.21316528]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[10 22]
[11 21]
[13 20]
[40 49]
[41 48]
[42 47]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
