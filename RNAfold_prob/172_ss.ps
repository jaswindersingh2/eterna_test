%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:14:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGUAAUUAAGGGUAUGAUAAAAGAUGAAAAUACUGAUGAUAACGCGGUAAUGGACAAAAAAGUUUUUAUUCGUAAGAACAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[49.25650024 210.05557251]
[46.61393356 195.29017639]
[46.37370682 180.29211426]
[48.54203415 165.44966125]
[53.06278229 151.14710999]
[59.81889725 137.75476074]
[68.63546753 125.61936188]
[79.28423309 115.05508423]
[91.49219513 106.33382416]
[76.65057373 104.15984344]
[61.87472916 109.81536865]
[50.40321732 100.31517029]
[35.56159210 98.14119720]
[20.71996689 95.96721649]
[5.87834215 93.79324341]
[-6.71620274 102.95922089]
[-21.73675156 100.54307556]
[-30.39749718 88.47961426]
[-45.23912048 86.30563354]
[-60.08074570 84.13165283]
[-74.92237091 81.95767975]
[-89.76399231 79.78369904]
[-97.52505493 92.85406494]
[-109.70014191 101.95547485]
[-124.43264771 105.70003510]
[-139.47596741 103.51672363]
[-152.53611755 95.73847961]
[-161.62150574 83.55142975]
[-165.34667969 68.81401062]
[-163.14356995 53.77357101]
[-155.34815979 40.72366714]
[-143.14916992 31.65432167]
[-128.40686035 27.94853592]
[-113.36933136 30.17141914]
[-100.32969666 37.98399734]
[-91.27640533 50.19490814]
[-87.59001923 64.94207764]
[-72.74839020 67.11605072]
[-57.90676880 69.29003143]
[-43.06514359 71.46401215]
[-28.22351837 73.63798523]
[-16.46677589 64.56524658]
[-1.38428938 66.55854797]
[8.05232048 78.95161438]
[22.89394379 81.12559509]
[37.73556900 83.29956818]
[52.57719421 85.47354889]
[66.29146576 79.66252899]
[78.82455444 89.31822205]
[93.66617584 91.49219513]
[107.60639191 85.95410919]
[116.90991974 74.18787384]
[126.21345520 62.42163467]
[135.51698303 50.65540314]
[129.96540833 36.40312958]
[132.27777100 21.38481522]
[141.73406982 9.61856937]
[155.71667480 4.20164490]
[170.43414307 6.49546099]
[179.73767090 -5.27077389]
[189.04119873 -17.03700829]
[198.34474182 -28.80324364]
[196.26126099 -44.46960068]
[205.93202209 -56.96967316]
[221.61953735 -58.88739777]
[234.01666260 -49.08501816]
[235.76841736 -33.37811279]
[225.83552551 -21.08530807]
[210.11097717 -19.49971199]
[200.80743408 -7.73347664]
[191.50390625 4.03275824]
[182.20037842 15.79899311]
[187.82644653 29.59076309]
[185.78013611 44.44568253]
[176.51182556 56.36058044]
[162.43159485 62.07406998]
[147.28321838 59.95893478]
[137.97969055 71.72516632]
[128.67616272 83.49140167]
[119.37262726 95.25763702]
[134.23410034 93.22381592]
[149.22938538 93.59985352]
[163.97024536 96.37602997]
[178.07502747 101.48046112]
[191.17854309 108.78098297]
[202.94155884 118.08859253]
[213.05950928 129.16230774]
[221.27043152 141.71542358]
[227.36174011 155.42294312]
[231.17575073 169.92994690]
[232.61367798 184.86087036]
[231.63833618 199.82913208]
[228.27494812 214.44718933]
[222.61059570 228.33657837]
[214.79194641 241.13769531]
[205.02142334 252.51911926]
[193.55198669 262.18618774]
[180.68057251 269.88858032]
[166.74046326 275.42691040]
[152.09254456 278.65777588]
[137.11607361 279.49752808]
[122.19878387 277.92443848]
[107.72690582 273.97921753]
[94.07511902 267.76400757]
[81.59687805 259.43972778]
[70.61524963 249.22192383]
[61.41454315 237.37510681]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 50]
[10 49]
[12 47]
[13 46]
[14 45]
[15 44]
[18 41]
[19 40]
[20 39]
[21 38]
[22 37]
[51 80]
[52 79]
[53 78]
[54 77]
[59 72]
[60 71]
[61 70]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
