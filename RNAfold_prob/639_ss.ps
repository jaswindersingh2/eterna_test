%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCGCACCUCUCACUAUUCUACCCACCAAAAUUCAACCCUCCCUCACUUCUCUUCUUACCGCGCUCGAACUUUCGAGUUCGAAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[-155.26109314 311.81256104]
[-160.79917908 325.75277710]
[-152.38650513 338.79144287]
[-153.27803040 354.28286743]
[-163.13096619 366.27032471]
[-178.15664673 370.14440918]
[-192.57740784 364.41540527]
[-200.84815979 351.28625488]
[-199.78862000 335.80538940]
[-189.80622864 323.92550659]
[-174.73939514 320.21469116]
[-169.20130920 306.27447510]
[-180.18041992 300.65106201]
[-190.63475037 294.10278320]
[-200.48657227 286.67825317]
[-209.66265869 278.43258667]
[-218.09474182 269.42700195]
[-225.72013855 259.72836304]
[-232.48213196 249.40873718]
[-238.33042908 238.54473877]
[-243.22148132 227.21710205]
[-247.11891174 215.50994873]
[-249.99368286 203.51028442]
[-251.82437134 191.30723572]
[-252.59732056 178.99148560]
[-252.30671692 166.65455627]
[-250.95463562 154.38810730]
[-248.55108643 142.28332520]
[-245.11384583 130.43016052]
[-240.66841125 118.91670227]
[-235.24775696 107.82854462]
[-228.89208984 97.24811554]
[-221.64859009 87.25405884]
[-213.57102966 77.92069244]
[-204.71939087 69.31740570]
[-195.15940857 61.50818253]
[-184.96208191 54.55110168]
[-174.20314026 48.49791718]
[-162.96250916 43.39366531]
[-151.32369995 39.27633667]
[-139.37316895 36.17658997]
[-127.19969940 34.11751556]
[-114.89376068 33.11448669]
[-102.54678345 33.17501831]
[-90.25051880 34.29872131]
[-78.09634399 36.47731400]
[-66.17459869 39.69467545]
[-54.57388306 43.92694855]
[-43.38042831 49.14275360]
[-32.67744446 55.30338669]
[-22.54449081 62.36312485]
[-13.05690765 70.26955414]
[-4.28523970 78.96398163]
[3.70528555 88.38183594]
[10.85524082 98.45317841]
[17.11144066 109.10320282]
[22.42733765 120.25280762]
[36.52272797 115.12250519]
[50.61811829 109.99220276]
[64.71350861 104.86190033]
[78.80889893 99.73159790]
[85.37244415 84.66476440]
[100.73234558 78.81985474]
[115.65185547 85.71173859]
[129.59207153 80.17364502]
[139.56056213 67.88789368]
[154.24528503 70.37954712]
[168.18550110 64.84146118]
[182.12570190 59.30336761]
[196.06591797 53.76527405]
[210.00613403 48.22718048]
[223.94635010 42.68909073]
[233.68769836 29.49674606]
[249.95071411 31.60545731]
[256.00537109 46.84596634]
[245.62318420 59.54013824]
[229.48443604 56.62930298]
[215.54421997 62.16739655]
[201.60401917 67.70549011]
[187.66380310 73.24357605]
[173.72358704 78.78166962]
[159.78337097 84.31976318]
[150.81196594 96.20938873]
[135.13015747 94.11386108]
[121.18994904 99.65195465]
[117.54625702 111.88544464]
[107.53723907 119.80719757]
[94.79389954 120.54340363]
[83.93920135 113.82698822]
[69.84381104 118.95729065]
[55.74842072 124.08759308]
[41.65303040 129.21789551]
[27.55764008 134.34819031]
[31.98477936 153.46788025]
[33.75758743 173.01148987]
[32.84326935 192.61235046]
[29.25943375 211.90275574]
[23.07376671 230.52088928]
[14.40274906 248.11763000]
[3.40946746 264.36303711]
[-9.69946003 278.95260620]
[-24.67776299 291.61294556]
[-41.24414444 302.10690308]
[-59.08757019 310.23797607]
[-77.87309265 315.85403442]
[-97.24816132 318.85015869]
[-116.84921265 319.17062378]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[57 93]
[58 92]
[59 91]
[60 90]
[61 89]
[64 85]
[65 84]
[67 82]
[68 81]
[69 80]
[70 79]
[71 78]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
