%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:14:55 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (128)
} def

/sequence { (\
GGAAAAAACCAGUACAGGGGACGCCAAAGCAGGAAACUAGCAGGAGUACCACAAGUACGAGGAAAAAAUGUGUCGUUCGCGACACAAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 9 0.024951462 ubox
1 10 0.341641963 ubox
1 25 0.004121073 ubox
1 69 0.017719008 ubox
1 95 0.063304370 ubox
1 98 0.063781417 ubox
1 101 0.065233406 ubox
1 104 0.065510202 ubox
1 107 0.016539581 ubox
2 9 0.340709625 ubox
2 10 0.016233488 ubox
2 24 0.004123591 ubox
2 69 0.013161423 ubox
2 95 0.033378119 ubox
2 98 0.033541213 ubox
2 101 0.034245107 ubox
2 104 0.034113315 ubox
2 107 0.011131354 ubox
3 69 0.012183655 ubox
4 69 0.007470957 ubox
5 69 0.004980006 ubox
6 69 0.003320243 ubox
8 69 0.004902075 ubox
9 18 0.008396541 ubox
9 59 0.015848335 ubox
9 61 0.196542339 ubox
9 62 0.890006436 ubox
9 91 0.005908953 ubox
10 17 0.008442932 ubox
10 59 0.083545478 ubox
10 61 0.892986146 ubox
10 62 0.032339752 ubox
10 91 0.010343443 ubox
12 58 0.999103174 ubox
12 95 0.003306137 ubox
12 98 0.003364053 ubox
12 101 0.003509558 ubox
12 104 0.003565052 ubox
13 57 0.999450026 ubox
13 100 0.003273842 ubox
13 103 0.003328451 ubox
14 56 0.999412304 ubox
15 55 0.998227217 ubox
17 25 0.010767897 ubox
17 50 0.048598328 ubox
17 52 0.285366830 ubox
18 24 0.010761496 ubox
18 25 0.010966150 ubox
18 49 0.048434742 ubox
18 50 0.407563306 ubox
18 52 0.840073310 ubox
19 24 0.010992509 ubox
19 49 0.407002797 ubox
19 50 0.908613576 ubox
19 52 0.004271572 ubox
20 47 0.008865845 ubox
20 49 0.908892102 ubox
20 50 0.016295390 ubox
21 47 0.954685560 ubox
22 46 0.986721965 ubox
23 30 0.004380487 ubox
23 47 0.027610541 ubox
24 29 0.004370511 ubox
24 33 0.004015764 ubox
24 43 0.007313407 ubox
24 44 0.996146795 ubox
24 46 0.027911543 ubox
25 32 0.004036379 ubox
25 43 0.997257884 ubox
25 44 0.035668331 ubox
28 38 0.015674242 ubox
29 37 0.016102984 ubox
29 38 0.003310587 ubox
29 41 0.995255031 ubox
30 40 0.995394083 ubox
31 38 0.972648712 ubox
32 37 0.978029660 ubox
32 38 0.103028962 ubox
32 41 0.004170799 ubox
33 37 0.110327579 ubox
33 38 0.029645888 ubox
34 38 0.006366610 ubox
36 47 0.003948517 ubox
37 46 0.004110064 ubox
38 45 0.003990144 ubox
43 50 0.013253243 ubox
44 49 0.013185504 ubox
46 58 0.007492181 ubox
47 57 0.007505599 ubox
48 56 0.007511234 ubox
49 55 0.007478246 ubox
55 101 0.003332173 ubox
56 100 0.003218000 ubox
59 95 0.026766596 ubox
59 98 0.025687260 ubox
59 101 0.006119526 ubox
59 104 0.005163400 ubox
60 69 0.009320145 ubox
61 95 0.072311593 ubox
61 98 0.014566422 ubox
61 101 0.007978264 ubox
61 104 0.006969688 ubox
62 95 0.028514531 ubox
62 98 0.005771397 ubox
62 101 0.005358525 ubox
62 104 0.003954185 ubox
63 69 0.009913549 ubox
64 69 0.009913069 ubox
65 69 0.006092779 ubox
69 86 0.899591484 ubox
69 87 0.041624491 ubox
69 88 0.011422990 ubox
69 89 0.008182634 ubox
69 90 0.006210887 ubox
69 96 0.003604073 ubox
69 99 0.003252958 ubox
69 102 0.004416420 ubox
70 85 0.999577582 ubox
70 95 0.003292166 ubox
70 101 0.004654891 ubox
71 84 0.999676563 ubox
71 99 0.003313098 ubox
71 100 0.003407237 ubox
72 83 0.999958723 ubox
72 98 0.004451124 ubox
73 82 0.999851961 ubox
73 97 0.004392268 ubox
74 81 0.999896372 ubox
75 80 0.974019424 ubox
75 95 0.004413114 ubox
76 93 0.003274863 ubox
76 94 0.003700646 ubox
77 92 0.004183388 ubox
78 91 0.004836211 ubox
91 95 0.042829675 ubox
91 98 0.103348512 ubox
91 101 0.045379585 ubox
91 104 0.035154988 ubox
91 107 0.010401564 ubox
9 62 0.9500000 lbox
10 61 0.9500000 lbox
12 58 0.9500000 lbox
13 57 0.9500000 lbox
14 56 0.9500000 lbox
15 55 0.9500000 lbox
18 52 0.9500000 lbox
19 50 0.9500000 lbox
20 49 0.9500000 lbox
21 47 0.9500000 lbox
22 46 0.9500000 lbox
24 44 0.9500000 lbox
25 43 0.9500000 lbox
29 41 0.9500000 lbox
30 40 0.9500000 lbox
31 38 0.9500000 lbox
32 37 0.9500000 lbox
69 86 0.9500000 lbox
70 85 0.9500000 lbox
71 84 0.9500000 lbox
72 83 0.9500000 lbox
73 82 0.9500000 lbox
74 81 0.9500000 lbox
75 80 0.9500000 lbox
showpage
end
%%EOF
