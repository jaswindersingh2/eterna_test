%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:14:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGUACGUUGAAGAUCCUAAAAUAGAGAUCAAAAGAAGAUAGAAACUACUUCAUCAAGGUACGAUGAUGUUCGCAUCAUCAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[118.72687531 260.51541138]
[121.58817291 245.79084778]
[127.19631195 231.87866211]
[135.34678650 219.28620911]
[145.74235535 208.47270203]
[158.00393677 199.83245850]
[171.68437195 193.68058777]
[186.28479004 190.24142456]
[201.27685547 189.64060974]
[189.51062012 180.33708191]
[177.74438477 171.03353882]
[165.97814941 161.73001099]
[151.19572449 159.90536499]
[145.16960144 145.27674866]
[133.40336609 135.97322083]
[121.63713074 126.66968536]
[109.87089539 117.36614990]
[89.70718384 124.73762512]
[67.56484985 108.81473541]
[52.57119370 108.37846375]
[37.57754135 107.94219208]
[22.58388519 107.50592041]
[7.58547258 107.28776550]
[-7.41452742 107.28776550]
[-22.41452789 107.28776550]
[-38.25365829 113.33410645]
[-48.44841385 99.78776550]
[-38.25365829 86.24142456]
[-22.41452789 92.28776550]
[-7.41452742 92.28776550]
[7.58547258 92.28776550]
[14.37917519 89.09111023]
[23.02015686 92.51226807]
[38.01380920 92.94853973]
[53.00746536 93.38481140]
[68.00112152 93.82108307]
[72.65288544 87.93796539]
[60.88680649 78.63423157]
[70.19072723 66.86830902]
[81.95642090 76.17173004]
[86.60818481 70.28861237]
[82.72589874 55.79972458]
[78.84361267 41.31083679]
[74.96132660 26.82194901]
[69.63964081 19.20285797]
[71.18338776 11.85508251]
[67.72415161 -2.74059105]
[64.26491547 -17.33626366]
[54.72880173 -31.35406876]
[65.55892181 -44.39802170]
[81.09119415 -37.60206985]
[78.86058807 -20.79550171]
[82.31982422 -6.19982910]
[85.77906799 8.39584446]
[89.45021820 22.93966293]
[93.33249664 37.42855072]
[97.21478271 51.91743851]
[101.09706879 66.40632629]
[121.69712830 84.27973938]
[119.17443085 105.59991455]
[130.94065857 114.90345001]
[142.70689392 124.20697784]
[154.47312927 133.51051331]
[170.09715271 136.00061035]
[175.28167725 149.96377563]
[187.04791260 159.26730347]
[198.81414795 168.57084656]
[210.58038330 177.87437439]
[225.17605591 181.33360291]
[239.86616516 178.30035400]
[254.55627441 175.26708984]
[269.24636841 172.23382568]
[283.93649292 169.20056152]
[298.62658691 166.16729736]
[313.31671143 163.13403320]
[325.20089722 151.83367920]
[340.85067749 156.73439026]
[344.16687012 172.79473877]
[331.73806763 183.49320984]
[316.34997559 177.82414246]
[301.65985107 180.85740662]
[286.96975708 183.89067078]
[272.27963257 186.92393494]
[257.58953857 189.95719910]
[242.89942932 192.99046326]
[228.20932007 196.02371216]
[241.33367920 203.28672791]
[252.83808899 212.91213989]
[262.30303955 224.54891968]
[269.38333130 237.77273560]
[273.82083130 252.10133362]
[275.45364380 267.01220703]
[274.22225952 281.96157837]
[270.17160034 296.40429688]
[263.44934082 309.81365967]
[254.30067444 321.70071411]
[243.05918884 331.63192749]
[230.13482666 339.24511719]
[215.99891663 344.26272583]
[201.16696167 346.50170898]
[186.17984009 345.88046265]
[171.58407593 342.42160034]
[157.91194153 336.25128174]
[145.66203308 327.59451294]
[135.28105164 316.76699829]
[127.14756775 304.16354370]
[121.55819702 290.24383545]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 68]
[10 67]
[11 66]
[12 65]
[14 63]
[15 62]
[16 61]
[17 60]
[19 36]
[20 35]
[21 34]
[22 33]
[23 31]
[24 30]
[25 29]
[41 58]
[42 57]
[43 56]
[44 55]
[46 54]
[47 53]
[48 52]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
