%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGGUGUGGAAAAAACCACGAGAAACUCAACCCACUCAGUGAAAAACACUGGCAAAAGCCAGAGCGGGAUAUUCGUAUCCCGAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[21.80206680 145.01356506]
[17.00698280 135.40193176]
[2.76834321 140.12010193]
[-4.37286901 153.96353149]
[-18.88008690 158.54559326]
[-32.03368378 151.65223694]
[-46.27232361 156.37040710]
[-60.51096344 161.08857727]
[-74.74960327 165.80674744]
[-88.15409088 172.53874207]
[-100.44136810 181.14237976]
[-112.72865295 189.74603271]
[-125.01593018 198.34967041]
[-127.51314545 213.95542908]
[-140.36270142 223.15675354]
[-155.94117737 220.49468994]
[-165.00614929 207.54856873]
[-162.17951965 191.99911499]
[-149.13829041 183.07153320]
[-133.61958313 186.06239319]
[-121.33229828 177.45874023]
[-109.04502106 168.85510254]
[-96.75773621 160.25144958]
[-100.85033417 145.82055664]
[-115.82495880 144.94839478]
[-130.79957581 144.07621765]
[-146.96348572 149.19136047]
[-156.35333252 135.07516479]
[-145.38818359 122.14452362]
[-129.92741394 129.10159302]
[-114.95278931 129.97377014]
[-99.97816467 130.84594727]
[-84.57305145 138.99211121]
[-79.46777344 151.56809998]
[-65.22913361 146.84992981]
[-50.99049377 142.13175964]
[-36.75185394 137.41358948]
[-30.31748199 124.02947998]
[-15.94468975 119.04174805]
[-1.94982803 125.88145447]
[12.28881168 121.16328430]
[9.97057629 105.98667145]
[10.25889301 90.63671875]
[13.14541340 75.55786133]
[18.54656601 61.18666077]
[26.30597687 47.93918991]
[36.19899368 36.19899368]
[47.93918991 26.30597687]
[61.18666077 18.54656601]
[75.55786133 13.14541340]
[90.63671875 10.25889301]
[105.98667145 9.97057629]
[121.16328430 12.28881168]
[125.88145447 -1.94982803]
[130.59962463 -16.18846703]
[135.31779480 -30.42710686]
[140.03596497 -44.66574860]
[136.19168091 -60.60793686]
[148.26069641 -71.71067047]
[163.82746887 -66.55239868]
[166.87821960 -50.43952179]
[154.27461243 -39.94757462]
[149.55644226 -25.70893669]
[144.83827209 -11.47029591]
[140.12010193 2.76834321]
[135.40193176 17.00698280]
[157.90428162 30.80295563]
[175.45143127 50.52052689]
[186.54176331 74.47235107]
[201.23187256 71.43908691]
[215.92198181 68.40582275]
[230.61209106 65.37255859]
[245.30220032 62.33929443]
[259.99230957 59.30603027]
[274.68240356 56.27276993]
[286.56661987 44.97241592]
[302.21636963 49.87313461]
[305.53256226 65.93348694]
[293.10379028 76.63195801]
[277.71566772 70.96287537]
[263.02557373 73.99613953]
[248.33546448 77.02940369]
[233.64535522 80.06266785]
[218.95524597 83.09593201]
[204.26513672 86.12919617]
[189.57502747 89.16246033]
[190.22817993 99.88391876]
[189.60261536 110.60702515]
[187.70719910 121.17980957]
[184.56880188 131.45242310]
[180.23188782 141.27931213]
[174.75793457 150.52117920]
[168.22450256 159.04705811]
[160.72419739 166.73611450]
[152.36331177 173.47940063]
[143.26031494 179.18132019]
[133.54425049 183.76109314]
[123.35279083 187.15379333]
[112.83037567 189.31135559]
[102.12612152 190.20320129]
[91.39174652 189.81668091]
[80.77935791 188.15727234]
[70.43936920 185.24850464]
[60.51831818 181.13159180]
[51.15679932 175.86486816]
[42.48748398 169.52299500]
[34.63323975 162.19584656]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 41]
[3 40]
[6 37]
[7 36]
[8 35]
[9 34]
[10 23]
[11 22]
[12 21]
[13 20]
[24 32]
[25 31]
[26 30]
[53 66]
[54 65]
[55 64]
[56 63]
[57 62]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
