%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:14:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGAAUAUAAAGGUAUGAUAAAUGACGAAAGUACAGAUGAUAACGUGGUAUAGGUCAAAAAACGUGUGGUUCGCUAUAUGAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[152.17999268 356.60855103]
[143.60073853 354.12835693]
[135.26094055 350.93295288]
[127.22012329 347.04498291]
[119.53568268 342.49218750]
[112.26247406 337.30691528]
[105.45240784 331.52612305]
[99.15412140 325.19100952]
[93.41259003 318.34667969]
[88.26882172 311.04190063]
[83.75956726 303.32873535]
[79.91706848 295.26220703]
[76.76878357 286.89981079]
[74.33725739 278.30111694]
[72.63989258 269.52752686]
[71.68887329 260.64151001]
[71.49105835 251.70652771]
[72.04793549 242.78628540]
[73.35559845 233.94439697]
[75.40480042 225.24397278]
[78.18099213 216.74707031]
[81.66445160 208.51432800]
[85.83038330 200.60449219]
[90.64914703 193.07403564]
[96.08643341 185.97671509]
[102.10350800 179.36317444]
[108.65751648 173.28067017]
[115.70175171 167.77262878]
[123.18601227 162.87840271]
[116.45402527 149.47390747]
[109.72203827 136.06942749]
[102.99005127 122.66493225]
[91.62470245 121.27191162]
[82.36042786 114.54252625]
[77.52127838 104.16494751]
[78.32123566 92.74253082]
[84.55961609 83.14075470]
[78.61842346 69.36750793]
[72.67722321 55.59426880]
[66.73603058 41.82102585]
[54.97659683 36.28028488]
[50.35411835 24.56262779]
[54.86636734 13.23467922]
[49.32827377 -0.70553386]
[43.79018402 -14.64574718]
[30.59783936 -24.38710594]
[32.70655060 -40.65011215]
[47.94705963 -46.70477676]
[60.64123154 -36.32258224]
[57.73039627 -20.18383980]
[63.26848984 -6.24362612]
[68.80657959 7.69658661]
[83.12633514 17.72555161]
[80.50926971 35.87982941]
[86.45046997 49.65307236]
[92.39166260 63.42631149]
[98.33286285 77.19955444]
[115.27921295 82.99455261]
[122.84822083 99.22634125]
[116.39453888 115.93294525]
[123.12652588 129.33743286]
[129.85850525 142.74192810]
[136.59049988 156.14642334]
[165.38047791 148.72863770]
[195.08523560 149.60832214]
[223.36209106 158.70918274]
[247.98292542 175.30682373]
[267.00970459 198.08639526]
[278.94708252 225.24681091]
[293.63720703 222.21354675]
[308.32730103 219.18029785]
[323.01742554 216.14703369]
[337.70751953 213.11376953]
[352.39764404 210.08050537]
[367.08773804 207.04724121]
[378.97195435 195.74688721]
[394.62170410 200.64759827]
[397.93789673 216.70794678]
[385.50909424 227.40641785]
[370.12100220 221.73735046]
[355.43090820 224.77061462]
[340.74078369 227.80387878]
[326.05068970 230.83714294]
[311.36056519 233.87040710]
[296.67047119 236.90365601]
[281.98034668 239.93692017]
[282.79003906 248.82054138]
[282.84722900 257.74124146]
[282.15142822 266.63537598]
[280.70755005 275.43954468]
[278.52575684 284.09088135]
[275.62161255 292.52764893]
[272.01571655 300.68969727]
[267.73373413 308.51873779]
[262.80615234 315.95892334]
[257.26806641 322.95709229]
[251.15888977 329.46331787]
[244.52217102 335.43112183]
[237.40518188 340.81787109]
[229.85867310 345.58511353]
[221.93640137 349.69873047]
[213.69487000 353.12936401]
[205.19282532 355.85247803]
[196.49089050 357.84854126]
[187.65112305 359.10324097]
[178.73657227 359.60757446]
[169.81080627 359.35787964]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[29 63]
[30 62]
[31 61]
[32 60]
[37 57]
[38 56]
[39 55]
[40 54]
[43 52]
[44 51]
[45 50]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
