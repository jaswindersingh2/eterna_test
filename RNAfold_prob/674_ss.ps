%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAUAACAACUUAGAAAAAAAAAAUAAGAAGUUAGAAAAAAAAAAUAACAAGUUAAAAAAAAAAAAUAAAAAUUUCGAUUUUUAAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[8.53844929 219.17108154]
[-3.27750874 209.09040833]
[-13.98944855 197.84358215]
[-23.48286247 185.55082703]
[-31.65626526 172.34355164]
[-38.42228699 158.36293030]
[-52.51767731 163.49322510]
[-66.61306763 168.62353516]
[-80.70845795 173.75382996]
[-87.44401550 187.79911804]
[-101.81182861 192.80117798]
[-115.16034698 186.29328918]
[-129.25573730 191.42359924]
[-143.35113525 196.55389404]
[-157.44651794 201.68420410]
[-159.43197632 216.86038208]
[-168.25222778 229.36885071]
[-181.88043213 236.33526611]
[-197.18492126 236.15876770]
[-210.64883423 228.87994385]
[-219.17828369 216.17140198]
[-220.81324768 200.95346069]
[-215.17802429 186.72311401]
[-203.56755066 176.75038147]
[-188.64982605 173.32691956]
[-173.85282898 177.23941040]
[-162.57681274 187.58880615]
[-148.48143005 182.45851135]
[-134.38604736 177.32821655]
[-120.29064941 172.19790649]
[-114.24827576 158.63230896]
[-100.02662659 153.22866821]
[-85.83876038 159.65844727]
[-71.74337006 154.52813721]
[-57.64797974 149.39784241]
[-43.55258942 144.26753235]
[-47.15232086 130.21846008]
[-49.38052368 115.88772583]
[-50.21643066 101.40892029]
[-49.65224838 86.91697693]
[-47.69323730 72.54697418]
[-44.35765457 58.43284988]
[-39.67659378 44.70614624]
[-33.69367981 31.49481010]
[-26.46467781 18.92197418]
[-18.05696487 7.10482359]
[-8.54890728 -3.84650064]
[1.97087836 -13.82992649]
[13.40434074 -22.75240517]
[25.64491653 -30.53077126]
[38.57851410 -37.09252930]
[52.08459091 -42.37652206]
[66.03726196 -46.33349991]
[80.30648041 -48.92657852]
[94.75925446 -50.13159561]
[109.26087189 -49.93730927]
[123.67617798 -48.34554291]
[137.87080383 -45.37112045]
[151.71246338 -41.04177475]
[165.07212830 -35.39785385]
[177.82530212 -28.49195862]
[189.85310364 -20.38846016]
[201.04342651 -11.16288376]
[211.29197693 -0.90121758]
[220.50325012 10.30089569]
[228.59135437 22.33904648]
[235.48094177 35.10103607]
[241.10777283 48.46791077]
[245.41941833 62.31509018]
[260.10952759 59.28182602]
[274.79965210 56.24856186]
[289.48974609 53.21530151]
[304.17987061 50.18203735]
[318.86996460 47.14877319]
[333.56008911 44.11550903]
[345.44427490 32.81515503]
[361.09402466 37.71587372]
[364.41021729 53.77622604]
[351.98144531 64.47469330]
[336.59335327 58.80561829]
[321.90322876 61.83888245]
[307.21313477 64.87214661]
[292.52301025 67.90541077]
[277.83291626 70.93867493]
[263.14279175 73.97193909]
[248.45268250 77.00520325]
[250.03350830 92.45634460]
[250.01049805 107.98812103]
[248.38391113 123.43450928]
[245.17111206 138.63038635]
[240.40647888 153.41331482]
[234.14091492 167.62527466]
[226.44140625 181.11431885]
[217.39025879 193.73626709]
[207.08424377 205.35618591]
[195.63349915 215.84986877]
[183.16046143 225.10514832]
[169.79846191 233.02307129]
[155.69030762 239.51899719]
[140.98684692 244.52348328]
[125.84524536 247.98304749]
[110.42736053 249.86070251]
[94.89801025 250.13636780]
[79.42320251 248.80711365]
[64.16835022 245.88713074]
[49.29653168 241.40763855]
[34.96672821 235.41651917]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 36]
[7 35]
[8 34]
[9 33]
[12 30]
[13 29]
[14 28]
[15 27]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
