%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGAUAAAUAUGGAAACAUAAGAUUGAUAAAAUAUGGGAAACGGUGGUGUUGGUCAAUGUCAGAUUUACUUCGGUGGGUCAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[86.24597168 279.92263794]
[73.26639557 272.40393066]
[61.68080139 262.87640381]
[51.79703522 251.59317017]
[43.87772751 238.85408020]
[38.13330841 224.99760437]
[34.71641541 210.39196777]
[33.71784592 195.42523193]
[35.16413116 180.49513245]
[39.01683807 165.99835205]
[45.17359924 152.32009888]
[53.47081375 139.82385254]
[63.68801117 128.84164429]
[75.55370331 119.66529846]
[88.75627136 112.53702545]
[74.81605530 118.07511902]
[60.87584305 123.61321259]
[46.93563080 129.15130615]
[37.19427109 142.34364319]
[20.93126297 140.23493958]
[14.87659740 124.99443054]
[25.25879288 112.30025482]
[41.39753723 115.21109009]
[55.33774948 109.67299652]
[69.27796173 104.13490295]
[83.21817780 98.59681702]
[88.75627136 84.65660095]
[75.91168976 75.41931915]
[77.54528809 60.61457062]
[71.20600891 47.01995468]
[64.86673737 33.42533875]
[58.52746582 19.83072090]
[52.18819046 6.23610449]
[45.84891510 -7.35851192]
[33.93331146 -12.55489063]
[28.97198105 -24.13314629]
[33.15285110 -35.58753967]
[27.21165466 -49.36078262]
[21.27045822 -63.13402557]
[15.32926083 -76.90726471]
[9.38806438 -90.68050385]
[-3.18241811 -100.28746033]
[-1.11891925 -115.03843689]
[-16.15044975 -119.34971619]
[-24.85112572 -132.34326172]
[-23.11275291 -147.88391113]
[-11.75614071 -158.63386536]
[3.85646772 -159.51730347]
[16.35327530 -150.11709595]
[19.83367348 -134.87174988]
[12.65432262 -120.97962952]
[24.79985046 -112.35783386]
[23.16130638 -96.62170410]
[29.10250282 -82.84846497]
[35.04370117 -69.07521820]
[40.98489761 -55.30197906]
[46.92609406 -41.52873611]
[61.53147507 -31.92050171]
[59.44353485 -13.69778633]
[65.78280640 -0.10316927]
[72.12207794 13.49144745]
[78.46135712 27.08606529]
[84.80062866 40.68067932]
[91.13990021 54.27529907]
[103.53105927 62.54019928]
[102.35088348 78.31732941]
[105.51162720 82.55310822]
[107.13924408 87.05426025]
[107.27777100 91.39384460]
[121.96788025 88.36058044]
[136.65798950 85.32731628]
[151.34809875 82.29405212]
[166.03820801 79.26078796]
[180.72831726 76.22752380]
[195.41842651 73.19425964]
[207.30261230 61.89390945]
[222.95237732 66.79462433]
[226.26856995 82.85498047]
[213.83978271 93.55345154]
[198.45169067 87.88436890]
[183.76158142 90.91763306]
[169.07147217 93.95089722]
[154.38136292 96.98416138]
[139.69125366 100.01742554]
[125.00114441 103.05068970]
[110.31103516 106.08395386]
[125.25465393 104.78462982]
[140.21083069 105.93040466]
[154.78215027 109.49082184]
[168.58142090 115.37129211]
[181.24198914 123.41555023]
[192.42742920 133.40985107]
[201.84053040 145.08862305]
[209.23115540 158.14154053]
[214.40292358 172.22175598]
[217.21842957 186.95515442]
[217.60284424 201.95022583]
[215.54595947 216.80853271]
[211.10243225 231.13525391]
[204.39031982 244.54971313]
[195.58799744 256.69546509]
[184.92935181 267.24975586]
[172.69760132 275.93215942]
[159.21774292 282.51196289]
[144.84800720 286.81433105]
[129.97018433 288.72491455]
[114.97961426 288.19299316]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 26]
[16 25]
[17 24]
[18 23]
[27 66]
[29 64]
[30 63]
[31 62]
[32 61]
[33 60]
[34 59]
[37 57]
[38 56]
[39 55]
[40 54]
[41 53]
[43 51]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
