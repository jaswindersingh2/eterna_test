%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:27 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (756)
} def

/sequence { (\
GGAAAUCCUGUGAAAACCGUCUUCAGCGGACCAGAUCCGCUGAUCUGGUCCGCUACGGUUUUCACAGGCUAACUAUUCGUAGUUAGAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 6 0.017070668 ubox
1 7 0.012611848 ubox
1 8 0.018340327 ubox
1 69 0.007072749 ubox
1 70 0.010287962 ubox
1 73 0.009541241 ubox
1 74 0.017486730 ubox
1 78 0.007055234 ubox
1 95 0.068277804 ubox
1 98 0.068211409 ubox
1 101 0.069494978 ubox
1 104 0.069810386 ubox
1 107 0.017625921 ubox
2 6 0.012969035 ubox
2 7 0.022293621 ubox
2 69 0.013271724 ubox
2 73 0.018486001 ubox
2 77 0.006979801 ubox
2 78 0.008409673 ubox
2 95 0.035793758 ubox
2 98 0.035769184 ubox
2 101 0.036505968 ubox
2 104 0.036370454 ubox
2 107 0.011868181 ubox
3 70 0.004383464 ubox
3 76 0.006710512 ubox
3 77 0.008251762 ubox
4 70 0.005362961 ubox
4 76 0.007723268 ubox
5 70 0.019478831 ubox
6 68 0.010777605 ubox
6 75 0.003367318 ubox
6 87 0.007200588 ubox
6 88 0.007141574 ubox
6 89 0.007438104 ubox
6 90 0.012271676 ubox
6 91 0.006051348 ubox
6 92 0.017754285 ubox
6 93 0.008448297 ubox
6 94 0.007164695 ubox
6 96 0.007782938 ubox
6 97 0.007186891 ubox
6 99 0.007923464 ubox
6 100 0.007210788 ubox
6 102 0.006850735 ubox
6 103 0.006278840 ubox
6 105 0.006630311 ubox
6 106 0.006107515 ubox
7 67 0.010393256 ubox
7 68 0.987576924 ubox
7 91 0.016944732 ubox
8 67 0.999663684 ubox
8 68 0.004289974 ubox
9 66 0.999713410 ubox
10 65 0.999977082 ubox
11 64 0.999791362 ubox
12 63 0.999981522 ubox
13 62 0.999600688 ubox
14 61 0.998530739 ubox
15 60 0.998539544 ubox
16 59 0.999480709 ubox
17 58 0.999989361 ubox
18 57 0.999977946 ubox
19 56 0.999859055 ubox
20 55 0.992114357 ubox
22 55 0.023411619 ubox
23 55 0.045594398 ubox
25 54 0.992373201 ubox
26 53 0.999967157 ubox
27 52 0.999981344 ubox
28 51 0.999978512 ubox
29 50 0.999992758 ubox
30 49 0.999871961 ubox
31 48 0.999990135 ubox
32 47 0.999988347 ubox
33 46 0.999755293 ubox
34 45 0.999982715 ubox
35 44 0.999722293 ubox
36 42 0.004007456 ubox
36 43 0.999076297 ubox
37 42 0.993663231 ubox
38 42 0.028163742 ubox
68 83 0.003857797 ubox
68 95 0.003706787 ubox
69 82 0.007562004 ubox
69 86 0.993790181 ubox
69 91 0.009154373 ubox
70 81 0.007609233 ubox
70 85 0.998066314 ubox
70 86 0.003519704 ubox
70 90 0.007726799 ubox
71 80 0.006774299 ubox
71 84 0.998197272 ubox
72 80 0.005515040 ubox
72 83 0.998503549 ubox
73 79 0.006654973 ubox
73 82 0.998965891 ubox
73 86 0.012669918 ubox
73 91 0.021132562 ubox
74 79 0.004625405 ubox
74 81 0.990569319 ubox
74 85 0.012748870 ubox
74 90 0.020943726 ubox
75 80 0.892635686 ubox
75 84 0.012682332 ubox
76 81 0.007545652 ubox
76 88 0.023462893 ubox
76 93 0.006621674 ubox
76 100 0.003613393 ubox
77 87 0.024963431 ubox
77 92 0.007608332 ubox
77 99 0.004245607 ubox
78 86 0.025076001 ubox
78 91 0.007709230 ubox
79 98 0.022375604 ubox
79 101 0.012448693 ubox
79 104 0.008315674 ubox
80 97 0.022035452 ubox
80 100 0.012251106 ubox
80 103 0.008183226 ubox
82 95 0.024424821 ubox
82 98 0.013436838 ubox
82 101 0.008935885 ubox
82 104 0.003779643 ubox
83 94 0.024409238 ubox
83 97 0.013401287 ubox
83 100 0.008896782 ubox
83 103 0.003761519 ubox
84 93 0.024074951 ubox
84 96 0.012918940 ubox
84 99 0.008414358 ubox
84 102 0.003539837 ubox
86 95 0.014499095 ubox
86 98 0.005774819 ubox
86 101 0.003662827 ubox
91 95 0.043024436 ubox
91 98 0.103707967 ubox
91 101 0.045490414 ubox
91 104 0.035202847 ubox
91 107 0.010413603 ubox
7 68 0.9500000 lbox
8 67 0.9500000 lbox
9 66 0.9500000 lbox
10 65 0.9500000 lbox
11 64 0.9500000 lbox
12 63 0.9500000 lbox
13 62 0.9500000 lbox
14 61 0.9500000 lbox
15 60 0.9500000 lbox
16 59 0.9500000 lbox
17 58 0.9500000 lbox
18 57 0.9500000 lbox
19 56 0.9500000 lbox
20 55 0.9500000 lbox
25 54 0.9500000 lbox
26 53 0.9500000 lbox
27 52 0.9500000 lbox
28 51 0.9500000 lbox
29 50 0.9500000 lbox
30 49 0.9500000 lbox
31 48 0.9500000 lbox
32 47 0.9500000 lbox
33 46 0.9500000 lbox
34 45 0.9500000 lbox
35 44 0.9500000 lbox
36 43 0.9500000 lbox
37 42 0.9500000 lbox
69 86 0.9500000 lbox
70 85 0.9500000 lbox
71 84 0.9500000 lbox
72 83 0.9500000 lbox
73 82 0.9500000 lbox
74 81 0.9500000 lbox
75 80 0.9500000 lbox
showpage
end
%%EOF
