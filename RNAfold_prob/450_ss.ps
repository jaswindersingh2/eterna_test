%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACUAUGGGGGGCGGAAAACCGAUGAAAACAUCCCUAAAGAGAUCAAAAGAUCUCCCAUAGAAAUUUCGGAUUCGUCCGAAAAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[105.02458191 202.72761536]
[110.86688232 188.91213989]
[119.35245514 176.54301453]
[130.13890076 166.11935425]
[142.79096985 158.06175232]
[156.79817200 152.69532776]
[171.60078430 150.23628235]
[158.61041260 142.73628235]
[145.62002563 135.23628235]
[132.62965393 127.73628998]
[119.63926697 120.23628998]
[106.64888763 112.73628998]
[72.03587341 127.48375702]
[57.04221725 127.92002869]
[42.04856110 128.35630798]
[27.05490875 128.79257202]
[12.28279209 131.39729309]
[-1.95584738 136.11546326]
[-16.19448662 140.83363342]
[-26.68643188 153.43725586]
[-42.79931259 150.38650513]
[-47.95758057 134.81973267]
[-36.85484695 122.75070190]
[-20.91265869 126.59500122]
[-6.67401886 121.87683105]
[7.56462097 117.15865326]
[-6.17516327 111.14048767]
[-15.21847725 99.17309570]
[-17.25625801 84.31215668]
[-11.76818943 70.35218048]
[-0.15556294 60.85760498]
[14.61652660 58.25272751]
[28.77626419 63.20265961]
[38.70819092 74.44351196]
[41.87635040 89.10512543]
[37.47180176 103.44387817]
[26.61863708 113.79891968]
[41.61229324 113.36264801]
[56.60594559 112.92637634]
[71.59960175 112.49010468]
[76.42050934 106.74477386]
[71.28991699 92.64949036]
[86.06232452 95.25410461]
[90.88323212 89.50877380]
[88.70925140 74.66715240]
[86.53527069 59.82552338]
[84.36129761 44.98389816]
[82.18731689 30.14227486]
[80.01333618 15.30065060]
[69.42311096 2.77950644]
[75.22548676 -12.55882549]
[91.45148468 -14.93558502]
[101.40918732 -1.90576458]
[94.85496521 13.12667274]
[97.02893829 27.96829796]
[99.20291901 42.80992126]
[101.37689972 57.65154648]
[103.55087280 72.49317169]
[105.72485352 87.33479309]
[114.14888763 99.74591064]
[127.13926697 107.24591064]
[140.12965393 114.74591064]
[153.12002563 122.24591064]
[166.11041260 129.74591064]
[179.10078430 137.24591064]
[180.01194763 122.27360535]
[193.84701538 116.47785950]
[205.15765381 126.33024597]
[201.31344604 140.83030701]
[216.00355530 137.79704285]
[230.69366455 134.76377869]
[245.38377380 131.73051453]
[260.07388306 128.69725037]
[274.76397705 125.66399384]
[289.45410156 122.63072968]
[301.33828735 111.33037567]
[316.98806763 116.23109436]
[320.30426025 132.29144287]
[307.87545776 142.98991394]
[292.48736572 137.32084656]
[277.79724121 140.35409546]
[263.10714722 143.38735962]
[248.41703796 146.42062378]
[233.72692871 149.45388794]
[219.03681946 152.48715210]
[204.34671021 155.52041626]
[217.61991882 162.50769043]
[229.22886658 172.00675964]
[238.70513916 183.63432312]
[245.66636658 196.92121887]
[249.83164978 211.33129883]
[251.03292847 226.28311157]
[249.22172546 241.17335510]
[244.47113037 255.40121460]
[236.97280884 268.39257812]
[227.02935791 279.62322998]
[215.04196167 288.64001465]
[201.49435425 295.07913208]
[186.93315125 298.68069458]
[171.94590759 299.29946899]
[157.13739014 296.91040039]
[143.10510254 291.60992432]
[130.41525269 283.61193848]
[119.57990265 273.23913574]
[111.03623962 260.91009521]
[105.12900543 247.12223816]
[102.09657288 232.43196106]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[13 40]
[14 39]
[15 38]
[16 37]
[17 26]
[18 25]
[19 24]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
