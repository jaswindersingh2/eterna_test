%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGGACGAAAAAGCCAAAAGUCGAUCGAAAGCAUCAAGACAGACGAAAGCUCAAGCAAAAACAGUGUCUUCGGACACUGAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[185.04251099 310.81127930]
[175.58184814 305.43963623]
[166.67117310 299.19692993]
[158.39044189 292.13909912]
[150.81398010 284.32928467]
[144.00978088 275.83746338]
[138.03892517 266.73968506]
[132.95504761 257.11746216]
[128.80381775 247.05702209]
[125.62254333 236.64851379]
[123.43985748 225.98522949]
[122.27543640 215.16273499]
[122.13981628 204.27806091]
[123.03432465 193.42880249]
[124.95105743 182.71221924]
[127.87291718 172.22441101]
[131.77381897 162.05944824]
[136.61889648 152.30848694]
[142.36480713 143.05900574]
[130.59857178 133.75547791]
[118.83233643 124.45194244]
[106.42366791 130.18759155]
[92.75479889 130.00102234]
[80.50729370 123.92882538]
[72.08388519 113.16225433]
[69.13708496 99.81350708]
[72.24499512 86.50133514]
[60.75432587 76.85952759]
[49.26366043 67.21771240]
[33.73230743 68.40718842]
[22.21648979 58.46532822]
[21.17821884 43.65122604]
[9.68755245 34.00941467]
[-4.44814014 39.87804031]
[-19.69091606 38.49372101]
[-32.53810120 30.17455673]
[-40.03749847 16.83223343]
[-40.46580887 1.53271937]
[-33.72460938 -12.20827007]
[-21.36297417 -21.23315620]
[-6.22151804 -23.46808434]
[8.22036266 -18.39948654]
[18.64402962 -7.19208908]
[22.65419960 7.57873058]
[19.32936668 22.51874542]
[30.82003212 32.16056061]
[45.58936691 30.61061478]
[57.37989044 40.22509766]
[58.90547562 55.72704315]
[70.39614105 65.36885834]
[81.88681030 75.01067352]
[96.83018494 69.29972839]
[112.62517548 71.83692169]
[125.02821350 81.94058228]
[130.70701599 96.89620209]
[128.13586426 112.68570709]
[139.90209961 121.98923492]
[151.66833496 131.29277039]
[168.17480469 116.27212524]
[187.26815796 104.72509766]
[208.22834778 97.08521271]
[230.26527405 93.63867950]
[252.54859924 94.51367188]
[274.23901367 99.67556000]
[294.51986694 108.92829132]
[312.62796021 121.92181396]
[327.88214111 138.16532898]
[339.70901489 157.04585266]
[347.66455078 177.85128784]
[362.35467529 174.81802368]
[377.04476929 171.78475952]
[391.73489380 168.75149536]
[406.42498779 165.71823120]
[421.11511230 162.68496704]
[435.80520630 159.65170288]
[447.68939209 148.35134888]
[463.33917236 153.25205994]
[466.65536499 169.31242371]
[454.22656250 180.01089478]
[438.83847046 174.34181213]
[424.14837646 177.37507629]
[409.45825195 180.40834045]
[394.76815796 183.44160461]
[380.07803345 186.47486877]
[365.38793945 189.50813293]
[350.69781494 192.54139709]
[351.68969727 203.36231995]
[351.65368652 214.22911072]
[350.58999634 225.04435730]
[348.50805664 235.71105957]
[345.42645264 246.13359070]
[341.37265015 256.21844482]
[336.38296509 265.87521362]
[330.50198364 275.01721191]
[323.78237915 283.56246948]
[316.28427124 291.43429565]
[308.07482910 298.56201172]
[299.22760010 304.88165283]
[289.82183838 310.33648682]
[279.94180298 314.87750244]
[269.67602539 318.46389771]
[259.11651611 321.06341553]
[248.35791016 322.65261841]
[237.49667358 323.21719360]
[226.63015747 322.75195312]
[215.85580444 321.26095581]
[205.27021790 318.75747681]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 58]
[20 57]
[21 56]
[27 51]
[28 50]
[29 49]
[32 46]
[33 45]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
