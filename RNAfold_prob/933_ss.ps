%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGUGCGCUGGUAAUCCAGUGAGGCAUGGACGUUCACCAUGCCUCUGGCCUAAUGGCCUGCACCUGAGAAGUUCGCUUCUCAAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[96.39551544 204.54669189]
[107.50656128 194.46975708]
[120.48197174 186.94387817]
[134.74598694 182.30300903]
[149.66912842 180.75308228]
[137.13681030 172.51045227]
[124.60449219 164.26782227]
[112.07217407 156.02517700]
[99.53986359 147.78254700]
[87.00754547 139.53991699]
[72.00913239 139.32176208]
[59.24237823 147.19639587]
[46.47562790 155.07104492]
[33.70887756 162.94569397]
[20.94212914 170.82034302]
[13.63958931 185.50384521]
[-2.74251962 186.25120544]
[-11.35168743 172.29362488]
[-3.33154154 157.98944092]
[13.06748009 158.05360413]
[25.83423042 150.17895508]
[38.60097885 142.30430603]
[51.36772919 134.42965698]
[64.13448334 126.55500793]
[64.35263824 111.55659485]
[51.82032013 103.31395721]
[39.28800583 95.07131958]
[26.75568771 86.82868958]
[14.22337055 78.58605194]
[1.69105327 70.34341431]
[-10.84126377 62.10078430]
[-23.37358093 53.85814667]
[-35.90589905 45.61551285]
[-50.83364487 50.27345276]
[-65.24302673 44.19860458]
[-72.33036804 30.25932121]
[-68.74925232 15.03731060]
[-56.19056320 5.71993971]
[-40.58413696 6.70658493]
[-29.29884720 17.53138351]
[-27.66326332 33.08319855]
[-15.13094616 41.32583237]
[-2.59862924 49.56846619]
[9.93368816 57.81110001]
[22.46600533 66.05373383]
[34.99832153 74.29637146]
[47.53063965 82.53900146]
[60.06295776 90.78163910]
[72.59527588 99.02427673]
[81.45473480 84.68138123]
[95.37319183 79.83850098]
[97.54717255 64.99687958]
[99.72114563 50.15525436]
[101.89512634 35.31362915]
[95.34089661 20.28119278]
[105.29859924 7.25137234]
[121.52460480 9.62813091]
[127.32698059 24.96646309]
[116.73674774 37.48760605]
[114.56277466 52.32923126]
[112.38879395 67.17085266]
[110.21481323 82.01248169]
[122.63420105 108.14125824]
[95.25017548 127.00759888]
[107.78249359 135.25022888]
[120.31481171 143.49285889]
[132.84712219 151.73550415]
[145.37944031 159.97813416]
[157.91175842 168.22076416]
[172.64443970 171.04005432]
[187.33454895 168.00679016]
[202.02465820 164.97352600]
[216.71476746 161.94027710]
[231.40487671 158.90701294]
[246.09498596 155.87374878]
[257.97918701 144.57339478]
[273.62893677 149.47410583]
[276.94512939 165.53445435]
[264.51635742 176.23292542]
[249.12825012 170.56385803]
[234.43814087 173.59712219]
[219.74803162 176.63038635]
[205.05792236 179.66365051]
[190.36781311 182.69689941]
[175.67770386 185.73016357]
[188.97137451 192.67840576]
[200.51463318 202.25718689]
[209.79527283 214.04150391]
[216.40147400 227.50842285]
[220.04011536 242.06040955]
[220.54974365 257.05175781]
[217.90773010 271.81723022]
[212.23132324 285.70172119]
[203.77239990 298.08905029]
[192.90628052 308.42965698]
[180.11514282 316.26461792]
[165.96655273 321.24633789]
[151.08833313 323.15371704]
[136.14062500 321.90219116]
[121.78673553 317.54721069]
[108.66355896 310.28207397]
[97.35340881 300.42913818]
[88.35813904 288.42559814]
[82.07689667 274.80404663]
[78.78839111 260.16897583]
[78.63854980 245.16972351]
[81.63401031 230.47186279]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 69]
[6 68]
[7 67]
[8 66]
[9 65]
[10 64]
[11 24]
[12 23]
[13 22]
[14 21]
[15 20]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[51 62]
[52 61]
[53 60]
[54 59]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
