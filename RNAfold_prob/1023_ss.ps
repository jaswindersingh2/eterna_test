%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:14:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGUAUCGGUGCAAAAGGGAAAAGGCAGCGGACGAAAGUCGGCUGCACCGCACGGAUACAAAAAGGUGAUCUUCGGAUCAUCAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[222.70877075 218.80195618]
[220.01370239 210.87341309]
[218.31741333 202.67112732]
[217.64625549 194.32043457]
[218.01092529 185.94895935]
[219.40629578 177.68475342]
[221.81146240 169.65425110]
[208.40698242 162.92227173]
[195.00248718 156.19027710]
[181.59799194 149.45829773]
[168.19351196 142.72630310]
[153.34750366 143.92861938]
[144.48771667 130.82080078]
[131.08322144 124.08882141]
[117.67873383 117.35683441]
[104.27424622 110.62484741]
[105.55502319 125.57006836]
[94.87572479 136.10346985]
[79.94953156 134.61724854]
[71.55697632 122.18483734]
[75.75961304 107.78560638]
[89.52265930 101.81949615]
[77.23538208 93.21585083]
[69.10414124 96.29370880]
[60.51841736 95.81427002]
[52.94982147 91.93697357]
[47.66429520 85.39703369]
[45.51050186 77.36724091]
[46.78421402 69.24807739]
[35.57883835 59.27613831]
[24.37346077 49.30419922]
[13.16808510 39.33226395]
[1.96270907 29.36032486]
[-13.49009132 25.96598434]
[-17.85395622 11.72498894]
[-29.05933380 1.75305116]
[-40.26470947 -8.21888638]
[-56.42573166 -11.00337029]
[-61.84014130 -26.48291206]
[-50.93805695 -38.73348618]
[-34.93460846 -35.15275192]
[-30.29277039 -19.42426300]
[-19.08739471 -9.45232487]
[-7.88201904 0.51961309]
[6.76929760 3.20069361]
[11.93464756 18.15494919]
[23.14002228 28.12688637]
[34.34539795 38.09882355]
[45.55077362 48.07076263]
[56.75615311 58.04270172]
[78.25627899 59.93174744]
[85.83902740 80.92857361]
[98.12630463 89.53221893]
[111.00623322 97.22035217]
[124.41072845 103.95233917]
[137.81521606 110.68433380]
[151.21971130 117.41632080]
[167.02449036 116.69551849]
[174.92549133 129.32180786]
[188.32998657 136.05380249]
[201.73446655 142.78578186]
[215.13896179 149.51777649]
[228.54345703 156.24977112]
[246.06771851 138.04948425]
[269.01727295 127.54412079]
[294.19403076 126.17678833]
[318.09725952 134.11863708]
[337.41015625 150.24771118]
[349.46020508 172.30740356]
[364.15032959 169.27413940]
[378.84042358 166.24087524]
[393.53054810 163.20761108]
[408.22064209 160.17434692]
[422.91076660 157.14108276]
[437.60086060 154.10781860]
[449.48507690 142.80746460]
[465.13482666 147.70819092]
[468.45101929 163.76853943]
[456.02224731 174.46701050]
[440.63412476 168.79792786]
[425.94403076 171.83119202]
[411.25390625 174.86445618]
[396.56381226 177.89772034]
[381.87368774 180.93098450]
[367.18359375 183.96424866]
[352.49346924 186.99751282]
[352.75961304 195.32653809]
[351.99557495 203.62649536]
[350.21267700 211.77043152]
[347.43768311 219.63374329]
[343.71264648 227.09603882]
[339.09411621 234.04302979]
[333.65237427 240.36824036]
[327.47024536 245.97467041]
[320.64202881 250.77627563]
[313.27182007 254.69929504]
[305.47213745 257.68331909]
[297.36209106 259.68234253]
[289.06558228 260.66537476]
[280.70938110 260.61694336]
[272.42126465 259.53735352]
[264.32806396 257.44265747]
[256.55361938 254.36447144]
[249.21693420 250.34947205]
[242.43043518 245.45866394]
[236.29814148 239.76644897]
[230.91409302 233.35955811]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 63]
[8 62]
[9 61]
[10 60]
[11 59]
[13 57]
[14 56]
[15 55]
[16 54]
[22 53]
[23 52]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[35 44]
[36 43]
[37 42]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
