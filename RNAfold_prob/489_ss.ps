%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGAUGACGGCAGUAGAAAUACGUAGAAAUACGCCAAAAGUUUUAGAAAUGGAACGUUAUCAAAUAAUUAUUUCGAUAAUUAAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[105.00735474 202.61003113]
[110.84966278 188.79454041]
[119.33522797 176.42543030]
[130.12167358 166.00177002]
[142.77374268 157.94416809]
[156.78094482 152.57774353]
[171.58357239 150.11869812]
[158.59318542 142.61869812]
[145.60279846 135.11869812]
[132.61242676 127.61869812]
[119.62203979 120.11869812]
[106.63166046 112.61869812]
[72.79082489 127.62516785]
[57.81620407 128.49734497]
[42.84158325 129.36950684]
[34.30376053 133.04054260]
[27.41995621 130.04283142]
[12.42630291 130.47911072]
[-2.56735158 130.91537476]
[-7.94085598 145.13487244]
[-18.35053444 156.21218872]
[-32.20898438 162.45812988]
[-47.40289307 162.92022705]
[-61.61530304 157.52803040]
[-72.67892456 147.10379028]
[-78.90663147 133.23713684]
[-79.34873962 118.04263306]
[-73.93784332 103.83732605]
[-63.49906158 92.78742981]
[-49.62422562 86.57797241]
[-34.42915344 86.15584564]
[-20.23097992 91.58541870]
[-9.19482517 102.03873444]
[-3.00362253 115.92172241]
[11.99003220 115.48545074]
[26.98368645 115.04917908]
[41.96940994 114.39488983]
[56.94403076 113.52272034]
[71.91865540 112.65054321]
[76.65549469 106.83570862]
[65.02597046 97.36183929]
[74.50003052 85.73246765]
[86.12916565 95.20602417]
[90.86600494 89.39118195]
[88.69202423 74.54956055]
[86.51805115 59.70793533]
[84.34407043 44.86631012]
[82.17008972 30.02468681]
[79.99611664 15.18306160]
[69.40588379 2.66191792]
[75.20826721 -12.67641449]
[91.43426514 -15.05317307]
[101.39196777 -2.02335310]
[94.83773804 13.00908375]
[97.01171875 27.85070801]
[99.18569183 42.69233322]
[101.35967255 57.53395844]
[103.53365326 72.37557983]
[105.70762634 87.21720886]
[114.13166046 99.62831879]
[127.12203979 107.12831879]
[140.11242676 114.62831879]
[153.10279846 122.12831879]
[166.09318542 129.62831116]
[179.08357239 137.12831116]
[179.99472046 122.15602112]
[193.82978821 116.36026764]
[205.14042664 126.21265411]
[201.29621887 140.71272278]
[215.98632812 137.67945862]
[230.67643738 134.64619446]
[245.36654663 131.61293030]
[260.05667114 128.57966614]
[274.74676514 125.54640198]
[289.43688965 122.51313782]
[301.32107544 111.21279144]
[316.97082520 116.11350250]
[320.28701782 132.17385864]
[307.85824585 142.87232971]
[292.47015381 137.20324707]
[277.78002930 140.23651123]
[263.08993530 143.26977539]
[248.39981079 146.30303955]
[233.70970154 149.33630371]
[219.01959229 152.36956787]
[204.32948303 155.40283203]
[217.60269165 162.39010620]
[229.21163940 171.88917542]
[238.68791199 183.51673889]
[245.64913940 196.80361938]
[249.81442261 211.21369934]
[251.01570129 226.16552734]
[249.20449829 241.05577087]
[244.45390320 255.28363037]
[236.95559692 268.27499390]
[227.01213074 279.50564575]
[215.02474976 288.52243042]
[201.47712708 294.96151733]
[186.91592407 298.56311035]
[171.92869568 299.18185425]
[157.12016296 296.79281616]
[143.08787537 291.49234009]
[130.39804077 283.49435425]
[119.56267548 273.12155151]
[111.01901245 260.79248047]
[105.11178589 247.00465393]
[102.07934570 232.31436157]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[13 39]
[14 38]
[15 37]
[17 36]
[18 35]
[19 34]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
