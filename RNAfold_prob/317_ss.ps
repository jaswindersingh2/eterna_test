%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCCCGCUCAAAAACGAGCGCGAAUCGCAGGGCACCGAGCCUAAAUGGCCCACGAAAGUGGCGGUGCCCUUUUCGAAGGGCAAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[87.70664215 229.05314636]
[88.14849854 214.00328064]
[91.71012878 199.37425232]
[98.23582458 185.80557251]
[107.44032288 173.89042664]
[118.92123413 164.14965820]
[111.80223083 150.94664001]
[104.68322754 137.74362183]
[97.56421661 124.54060364]
[82.96854401 121.08135986]
[70.68126678 129.68501282]
[58.39398575 138.28865051]
[46.10670471 146.89230347]
[43.60948944 162.49804688]
[30.75993538 171.69938660]
[15.18145943 169.03732300]
[6.11649179 156.09120178]
[8.94311810 140.54174805]
[21.98435020 131.61415100]
[37.50305557 134.60502625]
[49.79033661 126.00137329]
[62.07761765 117.39772797]
[74.36489868 108.79408264]
[70.27230072 94.36318970]
[55.29767609 93.49102020]
[40.32305527 92.61884308]
[24.15915680 97.73399353]
[14.76929855 83.61779785]
[25.73445511 70.68714905]
[41.19522858 77.64422607]
[56.16984940 78.51639557]
[71.14447021 79.38856506]
[81.90421295 68.93734741]
[81.46794128 53.94369507]
[81.03166962 38.95003891]
[80.59539795 23.95638657]
[80.15912628 8.96273232]
[79.72286224 -6.03092194]
[79.28659058 -21.02457619]
[78.85031891 -36.01823044]
[78.41404724 -51.01188660]
[64.52639008 -52.38656998]
[52.24923706 -65.65949249]
[47.11893463 -79.75488281]
[41.98863220 -93.85027313]
[28.11487389 -101.90622711]
[25.90575218 -117.79644775]
[37.05591583 -129.33132935]
[53.01191330 -127.66228485]
[61.53366852 -114.06967163]
[56.08402252 -98.98056793]
[61.21432495 -84.88518524]
[66.34462738 -70.78979492]
[81.34304047 -71.00794983]
[86.06121063 -85.24658966]
[90.77938080 -99.48522949]
[95.49755096 -113.72386932]
[91.65325928 -129.66606140]
[103.72228241 -140.76879883]
[119.28905487 -135.61051941]
[122.33980560 -119.49764252]
[109.73619080 -109.00569916]
[105.01802063 -94.76705933]
[100.29985046 -80.52841949]
[95.58168030 -66.28977966]
[93.40769958 -51.44815445]
[93.84397125 -36.45450211]
[94.28024292 -21.46084785]
[94.71651459 -6.46719265]
[95.15278625 8.52646160]
[95.58905792 23.52011490]
[96.02532196 38.51377106]
[96.46159363 53.50742340]
[96.89786530 68.50107574]
[107.12128448 70.59509277]
[115.65499878 75.75668335]
[121.66719055 83.12678528]
[124.69403839 91.65538788]
[124.66825867 100.24421692]
[121.89644623 107.88561249]
[116.99085236 113.78050232]
[110.76724243 117.42159271]
[117.88624573 130.62461853]
[125.00524902 143.82763672]
[132.12425232 157.03065491]
[146.57141113 152.79112244]
[161.58432007 151.64837646]
[176.50671387 153.65232849]
[190.68623352 158.71542358]
[203.50302124 166.61628723]
[214.39677429 177.00955200]
[222.89126587 189.44085693]
[228.61514282 203.36676025]
[231.31820679 218.17848206]
[230.88226318 233.22853088]
[227.32640076 247.85894775]
[220.80603027 261.43020630]
[211.60623169 273.34896851]
[200.12915039 283.09423828]
[186.87652588 290.23999023]
[172.42771912 294.47384644]
[157.41433716 295.61068726]
[142.49273682 293.60086060]
[128.31521606 288.53219604]
[115.50153351 280.62628174]
[104.61187744 270.22872925]
[96.12227631 257.79409790]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 85]
[7 84]
[8 83]
[9 82]
[10 23]
[11 22]
[12 21]
[13 20]
[24 32]
[25 31]
[26 30]
[33 74]
[34 73]
[35 72]
[36 71]
[37 70]
[38 69]
[39 68]
[40 67]
[41 66]
[43 53]
[44 52]
[45 51]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
