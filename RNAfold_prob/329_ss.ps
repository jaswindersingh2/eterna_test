%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGUAGGUAGAAAAAACUACGCGAAACGCACUACAGCCACUCAAAAAGAGCAGCAAAAGCUGGGCUAUGUGUUUCGACACAUAAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[132.45739746 398.17449951]
[124.74281311 385.31039429]
[119.34565735 371.31500244]
[116.42546082 356.60202026]
[116.06854248 341.60626221]
[118.28353119 326.77896118]
[107.07815552 336.75088501]
[95.87277985 346.72280884]
[84.66740417 356.69476318]
[87.85178375 371.71990967]
[83.08169556 386.31930542]
[71.64028168 396.56573486]
[56.60521317 399.70300293]
[42.02085876 394.88717651]
[31.81033134 383.41369629]
[28.72021103 368.36886597]
[33.58172607 353.79968262]
[45.08715057 343.62518311]
[60.14159012 340.58221436]
[74.69546509 345.48937988]
[85.90084076 335.51745605]
[97.10621643 325.54550171]
[108.31159210 315.57357788]
[109.08944702 311.37405396]
[111.38710022 307.49142456]
[109.64570618 292.59283447]
[107.90431213 277.69427490]
[106.16291809 262.79568481]
[104.42152405 247.89710999]
[102.68013000 232.99853516]
[100.93873596 218.09996033]
[99.19734192 203.20138550]
[97.45594788 188.30281067]
[89.45997620 183.85690308]
[84.40756226 176.06330872]
[83.58844757 166.67182922]
[87.32390594 157.86500549]
[94.86141968 151.75097656]
[94.42514801 136.75732422]
[93.98887634 121.76367188]
[93.55260468 106.77001190]
[79.42414856 106.05938721]
[67.38779449 92.12240601]
[62.25749588 78.02701569]
[57.12719345 63.93162918]
[43.25343704 55.87567520]
[41.04431534 39.98544693]
[52.19447708 28.45056915]
[68.15047455 30.11961174]
[76.67223358 43.71223068]
[71.22257996 58.80132675]
[76.35288239 72.89671326]
[81.48318481 86.99210358]
[96.48159790 86.77394867]
[101.19977570 72.53530884]
[105.91794586 58.29666901]
[110.63611603 44.05802917]
[106.79181671 28.11583900]
[118.86084747 17.01310730]
[134.42761230 22.17137337]
[137.47836304 38.28425598]
[124.87475586 48.77619934]
[120.15658569 63.01483917]
[115.43841553 77.25347900]
[110.72023773 91.49211884]
[108.54626465 106.33374023]
[108.98253632 121.32740021]
[109.41880035 136.32104492]
[109.85507202 151.31471252]
[122.34236908 168.60014343]
[112.35452271 186.56141663]
[114.09591675 201.45999146]
[115.83731079 216.35856628]
[117.57870483 231.25714111]
[119.32009888 246.15571594]
[121.06149292 261.05429077]
[122.80288696 275.95288086]
[124.54428101 290.85144043]
[126.28567505 305.75003052]
[134.49320984 293.19467163]
[144.72998047 282.23071289]
[156.69343567 273.18218994]
[170.02995300 266.31655884]
[184.34536743 261.83673096]
[199.21655273 259.87509155]
[214.20396423 260.48968506]
[228.86460876 263.66229248]
[242.76516724 269.29916382]
[255.49479675 277.23370361]
[266.67721558 287.23135376]
[275.98196411 298.99664307]
[283.13397217 312.18182373]
[287.92184448 326.39715576]
[290.20410156 341.22250366]
[289.91326904 356.21969604]
[287.05795288 370.94543457]
[281.72253418 384.96447754]
[274.06472778 397.86242676]
[264.31085205 409.25814819]
[252.74920654 418.81472778]
[239.72152710 426.24975586]
[225.61288452 431.34347534]
[210.84025574 433.94531250]
[195.84028625 433.97836304]
[181.05633545 431.44165039]
[166.92536926 426.41018677]
[153.86505127 419.03265381]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 23]
[7 22]
[8 21]
[9 20]
[25 79]
[26 78]
[27 77]
[28 76]
[29 75]
[30 74]
[31 73]
[32 72]
[33 71]
[38 69]
[39 68]
[40 67]
[41 66]
[43 53]
[44 52]
[45 51]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
