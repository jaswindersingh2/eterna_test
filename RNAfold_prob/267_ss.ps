%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAGACUUAGUAUAGAAAUAUAAUAUAAUAUGAGAUAGUGAAAAGUAUAAUAGGAUAGGAAGUGAUAUUUCUUCGGAAAUAUAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[205.54463196 228.17584229]
[194.19694519 219.96949768]
[183.72373962 210.67201233]
[174.22950745 200.37599182]
[165.80899048 189.18402100]
[158.54623413 177.20759583]
[152.51376343 164.56605530]
[147.77182007 151.38537598]
[144.36778259 137.79693604]
[142.33572388 123.93615723]
[141.69601440 109.94122314]
[126.72138977 109.06905365]
[111.74676514 108.19688416]
[99.16713715 114.29971313]
[87.38105774 106.77774048]
[72.40644073 105.90557098]
[57.43181610 105.03339386]
[49.44964218 116.37782288]
[36.98574448 122.21366119]
[23.37772942 121.09743500]
[12.21077442 113.43159485]
[6.37306929 101.32982635]
[-8.56985092 100.02249146]
[-23.51277161 98.71515656]
[-38.45569229 97.40782166]
[-50.39985275 107.75733948]
[-66.15768433 106.54644012]
[-76.38034821 94.49352264]
[-75.00291443 78.74937439]
[-62.84259033 68.65471649]
[-47.11388397 70.19853210]
[-37.14835739 82.46489716]
[-22.20543480 83.77223969]
[-7.26251507 85.07957458]
[7.68040562 86.38690948]
[17.97687340 73.69358063]
[33.95615005 69.54290771]
[49.43519592 75.74343872]
[58.30398941 90.05877686]
[73.27861023 90.93094635]
[88.25323486 91.80311584]
[100.83286285 85.70028687]
[112.61894226 93.22225952]
[127.59355927 94.09442902]
[142.56819153 94.96660614]
[145.30807495 78.99903870]
[149.87010193 63.45468521]
[156.19320679 48.54072952]
[164.19288635 34.45593262]
[173.76229858 21.38796997]
[184.77365112 9.51094246]
[197.08000183 -1.01694620]
[210.51712036 -10.05550098]
[224.90570068 -17.48439789]
[240.05384827 -23.20478630]
[255.75947571 -27.14060593]
[271.81314087 -29.23959732]
[288.00082397 -29.47399712]
[304.10659790 -27.84090233]
[319.91586304 -24.36230469]
[335.21780396 -19.08480453]
[349.80850220 -12.07897568]
[363.49349976 -3.43842292]
[376.09051514 6.72146130]
[387.43167114 18.26504517]
[397.36596680 31.03826523]
[405.76107788 44.87068558]
[412.50531006 59.57775879]
[417.50894165 74.96331787]
[432.19903564 71.93005371]
[446.88916016 68.89678955]
[461.57925415 65.86352539]
[476.26937866 62.83026123]
[490.95947266 59.79699707]
[505.64959717 56.76373672]
[517.53381348 45.46338272]
[533.18353271 50.36409760]
[536.49975586 66.42445374]
[524.07098389 77.12292480]
[508.68286133 71.45384216]
[493.99273682 74.48710632]
[479.30264282 77.52037048]
[464.61251831 80.55363464]
[449.92242432 83.58689880]
[435.23229980 86.62016296]
[420.54220581 89.65342712]
[421.94662476 103.57287598]
[421.95596313 117.56360626]
[420.56997681 131.48611450]
[417.80236816 145.20161438]
[413.68060303 158.57333374]
[408.24569702 171.46791077]
[401.55169678 183.75675964]
[393.66522217 195.31729126]
[384.66482544 206.03419495]
[374.64013672 215.80055237]
[363.69097900 224.51890564]
[351.92648315 232.10224915]
[339.46383667 238.47485352]
[326.42727661 243.57308960]
[312.94668579 247.34603882]
[299.15643311 249.75593567]
[285.19403076 250.77865601]
[271.19860840 250.40386963]
[257.30972290 248.63520813]
[243.66584778 245.49017334]
[230.40304565 241.00001526]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 45]
[12 44]
[13 43]
[15 41]
[16 40]
[17 39]
[22 35]
[23 34]
[24 33]
[25 32]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
