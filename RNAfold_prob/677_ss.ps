%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACAACAAGAAGGAAAAAAAAAACUUCAAGUAGGAAAAAAAAAACUACAAGUUGAAAAAAAAAAACUUGAACUUCGGUUUAAGAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[144.44715881 191.89427185]
[131.92274475 200.14892578]
[117.49188995 204.24163818]
[102.49864960 203.79121399]
[88.33950043 198.83963013]
[76.33319092 189.84803772]
[67.59799194 177.65393066]
[62.94749069 163.39305115]
[62.81482697 148.39363098]
[67.21235657 134.05271912]
[75.73050690 121.70600891]
[87.57656097 112.50309753]
[73.48117065 117.63339996]
[59.38578415 122.76370239]
[45.29039383 127.89400482]
[43.30492783 143.07019043]
[34.48468399 155.57865906]
[20.85648537 162.54505920]
[5.55199385 162.36857605]
[-7.91192961 155.08973694]
[-16.44137383 142.38119507]
[-18.07633591 127.16326141]
[-12.44111443 112.93291473]
[-0.83064008 102.96017456]
[14.08708382 99.53671265]
[28.88407516 103.44921112]
[40.16009140 113.79861450]
[54.25548172 108.66831207]
[68.35086823 103.53800964]
[82.44625854 98.40770721]
[84.38740540 91.16326141]
[88.26968384 76.67437744]
[90.21083069 69.42993164]
[80.56901550 57.93926620]
[70.92720032 46.44859695]
[61.28538895 34.95793152]
[46.34537125 38.28276443]
[31.57455254 34.27259445]
[20.36715508 23.84892654]
[15.29855728 9.40704727]
[17.53348732 -5.73440838]
[26.55837250 -18.09604454]
[40.29936218 -24.83724594]
[55.59887695 -24.40893555]
[68.94120026 -16.90953445]
[77.26036072 -4.06235170]
[78.64468384 11.18042469]
[72.77605438 25.31611633]
[82.41786957 36.80678177]
[92.05968475 48.29745102]
[101.70149994 59.78811646]
[107.23780823 70.58733368]
[108.66549683 81.60668945]
[106.18963623 91.67408752]
[120.87974548 88.64082336]
[135.56985474 85.60755920]
[150.25996399 82.57429504]
[150.86177063 67.51696014]
[155.04739380 53.04999924]
[162.56936646 40.01316071]
[172.98667908 29.16208267]
[185.69064331 21.12451363]
[199.94049072 16.36399651]
[214.90652466 15.15313721]
[229.71844482 17.55799103]
[243.51593018 23.43448448]
[255.49867249 32.43702698]
[264.97271729 44.03884506]
[271.39074707 57.56279755]
[286.08087158 54.52953339]
[300.77096558 51.49626923]
[315.46109009 48.46300507]
[330.15118408 45.42974472]
[344.84130859 42.39648056]
[359.53140259 39.36321640]
[371.41561890 28.06286240]
[387.06536865 32.96358109]
[390.38156128 49.02393341]
[377.95278931 59.72240448]
[362.56466675 54.05332565]
[347.87457275 57.08658981]
[333.18444824 60.11985397]
[318.49435425 63.15311432]
[303.80422974 66.18637848]
[289.11413574 69.21964264]
[274.42401123 72.25290680]
[273.88745117 87.21286774]
[269.78344727 101.61833191]
[262.34643555 114.63072968]
[252.00491333 125.49152374]
[239.35690308 133.56640625]
[225.13525391 138.38230896]
[210.16526794 139.65521240]
[195.31675720 137.30676270]
[181.45352173 131.46922302]
[169.38310242 122.47788239]
[159.80972290 110.85192871]
[153.29322815 97.26440430]
[138.60311890 100.29766846]
[123.91300964 103.33093262]
[109.22290039 106.36419678]
[124.13584900 107.97785187]
[137.86761475 114.01429749]
[149.13922119 123.91130829]
[156.90084839 136.74708557]
[160.42958069 151.32611084]
[159.39677429 166.29051208]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 30]
[13 29]
[14 28]
[15 27]
[33 51]
[34 50]
[35 49]
[36 48]
[54 101]
[55 100]
[56 99]
[57 98]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
