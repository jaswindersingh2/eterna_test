%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:14:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAACGAGAACACACGAGACCAAAGGAGAAAACUACCAGGACUACGAGAAGUUCAACGAAAAAAGAGCUAUUUCGAUAGCUCAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[226.52302551 269.74099731]
[219.17140198 261.69625854]
[212.72669983 252.90708923]
[207.26379395 243.47526550]
[202.84614563 233.50999451]
[199.52516174 223.12673950]
[197.33947754 212.44577026]
[196.31465149 201.59085083]
[196.46272278 190.68778992]
[197.78216553 179.86294556]
[200.25788879 169.24183655]
[203.86137390 158.94761658]
[190.45687866 152.21562195]
[177.05239868 145.48362732]
[163.64790344 138.75164795]
[149.39245605 146.74664307]
[133.00970459 144.70440674]
[120.91355896 133.22700500]
[117.95668030 116.64867401]
[104.36206055 110.30939484]
[90.67668152 104.16851044]
[76.90344238 98.22731781]
[61.16731262 99.86585999]
[52.54551697 87.72032928]
[38.77227402 81.77913666]
[28.72895622 86.44005585]
[18.01080132 84.74984741]
[10.21441650 77.52534485]
[7.81656075 67.39779663]
[-5.58792877 60.66580963]
[-19.08890915 54.12948608]
[-32.68352509 47.79021072]
[-48.96421814 49.75774002]
[-58.59074783 36.48137283]
[-51.66016769 21.61869621]
[-35.30206680 20.45916176]
[-26.34425354 34.19559479]
[-12.74963570 40.53487015]
[-5.24148655 40.50886154]
[1.14405882 47.26131821]
[14.54854870 53.99330521]
[33.60446930 51.30912018]
[44.71347046 68.00588989]
[58.48671341 73.94709015]
[73.23768616 71.88359070]
[82.84464264 84.45407104]
[96.61788177 90.39527130]
[104.81382751 90.45684814]
[110.70133209 96.71478271]
[124.29595184 103.05405426]
[135.90260315 95.45820618]
[149.64051819 94.63643646]
[161.87496948 100.69795990]
[169.42268372 111.94509125]
[170.37989807 125.34716034]
[183.78437805 132.07914734]
[197.18887329 138.81112671]
[210.59335327 145.54312134]
[223.45962524 128.48912048]
[239.61227417 114.51614380]
[258.33145142 104.24396515]
[278.78347778 98.12749481]
[300.05810547 96.43663025]
[321.20898438 99.24434662]
[341.29562378 106.42354584]
[359.42544556 117.65281677]
[374.79327393 132.43083191]
[386.71716309 150.09870911]
[394.66860962 169.86940002]
[409.35873413 166.83613586]
[424.04882812 163.80287170]
[438.73895264 160.76960754]
[453.42904663 157.73634338]
[468.11917114 154.70307922]
[482.80926514 151.66981506]
[494.69345093 140.36946106]
[510.34323120 145.27018738]
[513.65942383 161.33053589]
[501.23062134 172.02900696]
[485.84252930 166.35992432]
[471.15243530 169.39318848]
[456.46231079 172.42645264]
[441.77221680 175.45971680]
[427.08209229 178.49298096]
[412.39199829 181.52624512]
[397.70187378 184.55950928]
[398.53009033 195.40559387]
[398.18750000 206.27873230]
[396.67785645 217.05291748]
[394.01843262 227.60319519]
[390.23995972 237.80726624]
[385.38595581 247.54678345]
[379.51260376 256.70877075]
[372.68777466 265.18695068]
[364.99041748 272.88287354]
[356.50964355 279.70727539]
[347.34362793 285.58087158]
[337.59851074 290.43545532]
[327.38714600 294.21453857]
[316.82781982 296.87414551]
[306.04290771 298.38333130]
[295.15737915 298.72433472]
[284.29742432 297.89306641]
[273.58886719 295.89892578]
[263.15594482 292.76492310]
[253.11956787 288.52709961]
[243.59617615 283.23446655]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 58]
[13 57]
[14 56]
[15 55]
[19 50]
[20 49]
[21 47]
[22 46]
[24 44]
[25 43]
[29 41]
[30 40]
[31 38]
[32 37]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
