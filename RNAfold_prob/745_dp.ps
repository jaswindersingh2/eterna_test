%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:26 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (745)
} def

/sequence { (\
GGAAAGCCGUGGCACUAAAAGCAAAAAAGCCACACGGAUCGCCGAGUGGCCGCAGUGACACGGGUCUUAGCUGAGUUCGCUCAGCUAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 7 0.006564463 ubox
1 8 0.034868668 ubox
1 66 0.083369044 ubox
1 67 0.185346817 ubox
1 68 0.010002909 ubox
1 95 0.065345817 ubox
1 98 0.066403729 ubox
1 101 0.067800829 ubox
1 104 0.068064705 ubox
1 107 0.017178129 ubox
2 7 0.034964206 ubox
2 65 0.036290447 ubox
2 66 0.299728222 ubox
2 67 0.019456285 ubox
2 68 0.070176463 ubox
2 95 0.033356418 ubox
2 98 0.033852603 ubox
2 101 0.034387861 ubox
2 104 0.034229083 ubox
2 107 0.011163589 ubox
3 65 0.273276704 ubox
3 67 0.090205790 ubox
3 68 0.025423465 ubox
4 65 0.051986076 ubox
4 67 0.037359793 ubox
4 68 0.041137091 ubox
5 65 0.620144124 ubox
5 67 0.066031045 ubox
6 56 0.003834694 ubox
6 65 0.119398787 ubox
6 66 0.076454193 ubox
6 67 0.004805015 ubox
6 95 0.028136284 ubox
6 98 0.028603285 ubox
6 101 0.028269174 ubox
6 104 0.027653992 ubox
6 107 0.009632149 ubox
7 55 0.003913532 ubox
7 63 0.991285861 ubox
7 64 0.109306190 ubox
8 62 0.996107453 ubox
8 63 0.077815282 ubox
9 53 0.005274339 ubox
9 61 0.999841588 ubox
10 32 0.003326911 ubox
10 52 0.005276420 ubox
10 60 0.999497228 ubox
10 62 0.004481374 ubox
11 31 0.003559143 ubox
11 51 0.005275451 ubox
11 59 0.987532381 ubox
11 61 0.005055581 ubox
12 22 0.039537919 ubox
12 30 0.003638687 ubox
12 50 0.004552554 ubox
12 53 0.004208571 ubox
12 56 0.003681837 ubox
12 59 0.049964960 ubox
13 21 0.039607251 ubox
13 29 0.003641878 ubox
13 49 0.004397875 ubox
13 52 0.004203560 ubox
13 55 0.003816339 ubox
13 57 0.969354472 ubox
14 56 0.998605531 ubox
15 21 0.007666362 ubox
15 55 0.998842553 ubox
15 57 0.003670772 ubox
16 20 0.008893941 ubox
16 21 0.007763020 ubox
16 23 0.009873840 ubox
16 24 0.007138446 ubox
16 25 0.010712761 ubox
16 26 0.005188730 ubox
16 27 0.004761343 ubox
16 28 0.004450681 ubox
16 52 0.006173029 ubox
16 54 0.982292212 ubox
16 55 0.003657115 ubox
18 56 0.004240605 ubox
21 30 0.015782234 ubox
21 50 0.012707766 ubox
21 51 0.219454618 ubox
21 53 0.857950799 ubox
21 56 0.009287281 ubox
22 29 0.018511347 ubox
22 49 0.009364344 ubox
22 52 0.857251022 ubox
22 55 0.009594398 ubox
22 57 0.008081946 ubox
23 56 0.008706449 ubox
24 56 0.003222602 ubox
29 50 0.994932148 ubox
29 51 0.083869909 ubox
29 53 0.007122236 ubox
30 49 0.999793389 ubox
30 52 0.005300412 ubox
31 48 0.999943255 ubox
32 47 0.999671018 ubox
33 46 0.997113084 ubox
35 44 0.996625452 ubox
35 52 0.007344472 ubox
36 42 0.007606063 ubox
36 43 0.999754905 ubox
36 51 0.007497151 ubox
37 42 0.995292191 ubox
37 43 0.005810055 ubox
37 50 0.007468874 ubox
39 49 0.007374754 ubox
40 48 0.007441820 ubox
41 47 0.007413901 ubox
41 50 0.003606783 ubox
42 46 0.007371147 ubox
42 49 0.003704139 ubox
43 48 0.003699163 ubox
51 57 0.011825054 ubox
52 56 0.007352487 ubox
57 66 0.003637047 ubox
58 65 0.003647727 ubox
59 64 0.003641793 ubox
62 95 0.036621524 ubox
63 95 0.019514376 ubox
64 95 0.119954550 ubox
64 98 0.045469607 ubox
64 101 0.029403336 ubox
64 104 0.024147457 ubox
64 107 0.006552207 ubox
65 88 0.008745239 ubox
65 89 0.036331156 ubox
65 90 0.084756421 ubox
65 91 0.020412013 ubox
65 92 0.470531907 ubox
65 93 0.026564443 ubox
65 94 0.086232867 ubox
65 96 0.003625884 ubox
65 97 0.034198434 ubox
65 100 0.023666971 ubox
65 103 0.019828816 ubox
65 106 0.005564257 ubox
66 91 0.548522891 ubox
67 87 0.016598017 ubox
67 88 0.748201080 ubox
67 89 0.069022204 ubox
67 90 0.487663152 ubox
67 91 0.014210163 ubox
67 92 0.022330500 ubox
67 93 0.009434646 ubox
67 94 0.004709091 ubox
67 96 0.004335895 ubox
67 97 0.003392627 ubox
67 99 0.003405803 ubox
68 87 0.933500724 ubox
68 88 0.063107459 ubox
68 89 0.283093648 ubox
68 90 0.009513621 ubox
68 91 0.016307855 ubox
68 92 0.006057993 ubox
68 93 0.003316714 ubox
69 86 0.994022535 ubox
70 85 0.999979079 ubox
71 84 0.999990106 ubox
72 83 0.999754905 ubox
73 82 0.999981910 ubox
74 81 0.999104128 ubox
75 80 0.990715316 ubox
91 95 0.036053422 ubox
91 98 0.086762430 ubox
91 101 0.037991059 ubox
91 104 0.029344143 ubox
91 107 0.008679446 ubox
5 65 0.9500000 lbox
7 63 0.9500000 lbox
8 62 0.9500000 lbox
9 61 0.9500000 lbox
10 60 0.9500000 lbox
11 59 0.9500000 lbox
13 57 0.9500000 lbox
14 56 0.9500000 lbox
15 55 0.9500000 lbox
16 54 0.9500000 lbox
21 53 0.9500000 lbox
22 52 0.9500000 lbox
29 50 0.9500000 lbox
30 49 0.9500000 lbox
31 48 0.9500000 lbox
32 47 0.9500000 lbox
33 46 0.9500000 lbox
35 44 0.9500000 lbox
36 43 0.9500000 lbox
37 42 0.9500000 lbox
67 88 0.9500000 lbox
68 87 0.9500000 lbox
69 86 0.9500000 lbox
70 85 0.9500000 lbox
71 84 0.9500000 lbox
72 83 0.9500000 lbox
73 82 0.9500000 lbox
74 81 0.9500000 lbox
75 80 0.9500000 lbox
showpage
end
%%EOF
