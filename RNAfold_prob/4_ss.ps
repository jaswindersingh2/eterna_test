%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGCGUCGGAUGAUAAGCGAAGAAGACAGGGUCGUGAGACGCUGUCAGCCAUCGGAUGCAAAAAGCAGGUCUUCGGACCUGCAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[223.39114380 219.32284546]
[220.69607544 211.39430237]
[218.99978638 203.19201660]
[218.32862854 194.84130859]
[218.69329834 186.46984863]
[220.08866882 178.20564270]
[222.49383545 170.17514038]
[209.08935547 163.44314575]
[195.68486023 156.71116638]
[182.28036499 149.97917175]
[168.87588501 143.24717712]
[154.02987671 144.44949341]
[145.17008972 131.34169006]
[131.76559448 124.60970306]
[118.36111450 117.87771606]
[104.95661926 111.14572906]
[109.97915649 125.27987671]
[106.76402283 139.93125916]
[96.28472137 150.66365051]
[81.71422577 154.22743225]
[67.46426392 149.54356384]
[57.84951782 138.03024292]
[55.78119278 123.17351532]
[61.88554382 109.47180939]
[74.31426239 101.07377625]
[89.30555725 100.52258301]
[73.74618530 101.25982666]
[62.52439117 90.98724365]
[61.91742706 76.14920807]
[50.71204758 66.17726898]
[39.50667191 56.20533371]
[28.30129814 46.23339462]
[17.09592056 36.26145935]
[1.64312112 32.86711884]
[-2.72074485 18.62612343]
[-13.92612076 8.65418434]
[-25.13149643 -1.31775320]
[-41.29252243 -4.10223675]
[-46.70692825 -19.58177948]
[-35.80484390 -31.83235359]
[-19.80139542 -28.25161934]
[-15.15955925 -12.52312946]
[-3.95418286 -2.55119133]
[7.25119305 7.42074680]
[21.90250969 10.10182667]
[27.06785965 25.05608177]
[38.27323532 35.02801895]
[49.47861099 44.99995804]
[60.68398666 54.97189713]
[71.88936615 64.94383240]
[86.69753265 63.82410812]
[98.20343018 73.77744293]
[99.27749634 89.31720734]
[111.68860626 97.74123383]
[125.09310150 104.47322083]
[138.49758911 111.20520782]
[151.90208435 117.93720245]
[167.70686340 117.21640015]
[175.60786438 129.84269714]
[189.01235962 136.57467651]
[202.41685486 143.30667114]
[215.82133484 150.03865051]
[229.22583008 156.77064514]
[246.75009155 138.57035828]
[269.69964600 128.06500244]
[294.87640381 126.69766998]
[318.77963257 134.63951111]
[338.09252930 150.76858521]
[350.14257812 172.82829285]
[364.83270264 169.79502869]
[379.52279663 166.76176453]
[394.21292114 163.72850037]
[408.90301514 160.69523621]
[423.59313965 157.66197205]
[438.28323364 154.62870789]
[450.16744995 143.32835388]
[465.81719971 148.22906494]
[469.13339233 164.28941345]
[456.70462036 174.98788452]
[441.31649780 169.31881714]
[426.62640381 172.35208130]
[411.93627930 175.38534546]
[397.24618530 178.41860962]
[382.55606079 181.45187378]
[367.86596680 184.48513794]
[353.17584229 187.51840210]
[353.44198608 195.84741211]
[352.67794800 204.14736938]
[350.89505005 212.29132080]
[348.12005615 220.15461731]
[344.39501953 227.61691284]
[339.77648926 234.56390381]
[334.33474731 240.88911438]
[328.15261841 246.49555969]
[321.32440186 251.29716492]
[313.95419312 255.22016907]
[306.15451050 258.20422363]
[298.04446411 260.20324707]
[289.74795532 261.18627930]
[281.39175415 261.13781738]
[273.10363770 260.05822754]
[265.01043701 257.96353149]
[257.23599243 254.88536072]
[249.89932251 250.87036133]
[243.11280823 245.97953796]
[236.98051453 240.28732300]
[231.59646606 233.88043213]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 63]
[8 62]
[9 61]
[10 60]
[11 59]
[13 57]
[14 56]
[15 55]
[16 54]
[26 53]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[35 44]
[36 43]
[37 42]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
