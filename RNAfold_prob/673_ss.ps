%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGAUGAAUAUGGAAAAAAAAAACAUAAAAUACGAAAAAAAAAAGUAUAACAUCAAAAAAAAAAAGUAUAUGUUCGCAUAUACAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[173.13359070 181.94821167]
[168.91918945 171.17672729]
[166.05909729 159.96797180]
[164.59693909 148.49151611]
[164.55514526 136.92105103]
[165.93469238 125.43171692]
[151.44580078 121.54943085]
[136.95692444 117.66714478]
[122.46803284 113.78485870]
[109.51366425 124.58302307]
[92.66508484 125.31864929]
[78.81889343 115.69062805]
[64.72351074 120.82092285]
[50.62811661 125.95122528]
[36.53273010 131.08152771]
[34.54726410 146.25770569]
[25.72701836 158.76618958]
[12.09881973 165.73258972]
[-3.20567060 165.55610657]
[-16.66959381 158.27726746]
[-25.19903946 145.56872559]
[-26.83400154 130.35078430]
[-21.19877815 116.12043762]
[-9.58830452 106.14770508]
[5.32942009 102.72424316]
[20.12640953 106.63674164]
[31.40242767 116.98614502]
[45.49781799 111.85584259]
[59.59320450 106.72554016]
[73.68859100 101.59523773]
[73.95364380 95.94756317]
[75.41697693 90.48633575]
[78.01126862 85.46278381]
[68.36946106 73.97211456]
[58.72764206 62.48144913]
[49.08583069 50.99078369]
[34.14581299 54.31561661]
[19.37499428 50.30544662]
[8.16759682 39.88177872]
[3.09899902 25.43989944]
[5.33392811 10.29844379]
[14.35881329 -2.06319141]
[28.09980202 -8.80439281]
[43.39931870 -8.37608242]
[56.74163818 -0.87668228]
[65.06080627 11.97050095]
[66.44512177 27.21327782]
[60.57649612 41.34896851]
[70.21830750 52.83963776]
[79.86012268 64.33029938]
[89.50193787 75.82096863]
[106.30710602 74.40595245]
[120.53058624 83.46731567]
[126.35031891 99.29597473]
[140.83920288 103.17826080]
[155.32809448 107.06054688]
[169.81698608 110.94283295]
[178.33879089 93.19844055]
[190.36436462 77.62073517]
[205.36512756 64.89083099]
[222.68252563 55.56475067]
[241.55686951 50.04914856]
[261.16067505 48.58357239]
[280.63497925 51.23005295]
[299.12689209 57.87049484]
[315.82705688 68.21195221]
[330.00500488 81.79951477]
[341.04110718 98.03636169]
[348.45370483 116.20994568]
[363.14382935 113.17668152]
[377.83392334 110.14341736]
[392.52404785 107.11015320]
[407.21414185 104.07688904]
[421.90426636 101.04363251]
[436.59436035 98.01036835]
[448.47854614 86.71001434]
[464.12832642 91.61073303]
[467.44451904 107.67108154]
[455.01571655 118.36955261]
[439.62762451 112.70047760]
[424.93753052 115.73374176]
[410.24740601 118.76699829]
[395.55731201 121.80026245]
[380.86718750 124.83352661]
[366.17709351 127.86679077]
[351.48696899 130.90005493]
[352.21231079 142.41355896]
[351.51818848 153.93029785]
[349.41482544 165.27592468]
[345.93374634 176.27865601]
[341.12731934 186.77182007]
[335.06802368 196.59645081]
[327.84725952 205.60366821]
[319.57415771 213.65690613]
[310.37365723 220.63406372]
[300.38485718 226.42922974]
[289.75878906 230.95442200]
[278.65618896 234.14083862]
[267.24502563 235.93994141]
[255.69798279 236.32417297]
[244.18983459 235.28739929]
[232.89483643 232.84498596]
[221.98400879 229.03358459]
[211.62261963 223.91059875]
[201.96765137 217.55326843]
[193.16545105 210.05757141]
[185.34945679 201.53671265]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 57]
[7 56]
[8 55]
[9 54]
[12 30]
[13 29]
[14 28]
[15 27]
[33 51]
[34 50]
[35 49]
[36 48]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
