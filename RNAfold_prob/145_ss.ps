%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:14:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGUGCUAUAGGGACGGACAAAGAAUGAAAAUAUCGGUGCGAUCGCAAAUAGAGACAAAAAAGAUUAUAUUCGUAUAAUCAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[195.23431396 223.77409363]
[191.03207397 215.82388306]
[187.79051208 207.43449402]
[185.55464172 198.72152710]
[184.35565186 189.80511475]
[184.21038818 180.80824280]
[185.12117004 171.85499573]
[187.07579041 163.06895447]
[190.04757690 154.57138062]
[176.84455872 147.45237732]
[159.42849731 148.97430420]
[149.76393127 133.38510132]
[136.35945129 126.65310669]
[122.95495605 119.92111969]
[109.55046844 113.18913269]
[92.90422058 114.65655518]
[83.73069763 100.68883514]
[67.95356750 101.86900330]
[59.68867111 89.47785187]
[46.09405136 83.13858032]
[32.40867615 76.99769592]
[18.63543510 71.05649567]
[2.89930606 72.69504547]
[-5.72249174 60.54951477]
[-19.49573326 54.60831833]
[-29.66698837 65.82546234]
[-42.93053818 73.13004303]
[-57.84765625 75.72971344]
[-72.80024719 73.34249115]
[-86.16635895 66.22731018]
[-96.49613953 55.15597916]
[-102.66909027 41.32943344]
[-104.01561737 26.24747276]
[-100.38965607 11.54607201]
[-92.18453217 -1.18006659]
[-80.29026794 -10.55050850]
[-65.99706268 -15.54881859]
[-50.85534286 -15.63281631]
[-36.50756836 -10.79339123]
[-24.51007462 -1.55548751]
[-16.16426086 11.07883549]
[-12.37542057 25.73910141]
[-13.55453682 40.83507538]
[0.21870464 46.77627182]
[14.96967888 44.71277237]
[24.57663155 57.28325653]
[38.34987259 63.22445297]
[45.85408783 62.98008347]
[52.43332672 69.54396057]
[66.02794647 75.88323212]
[80.83269501 74.24964142]
[90.06997681 87.09421539]
[101.33343506 83.77081299]
[111.90338898 88.88811493]
[116.28245544 99.78464508]
[129.68693542 106.51663208]
[143.09143066 113.24861908]
[156.49592590 119.98060608]
[169.06568909 116.66624451]
[180.13867188 122.67121887]
[183.96356201 134.24934387]
[197.16658020 141.36836243]
[213.95184326 123.53498077]
[235.49162292 111.91647339]
[259.58044434 107.69042969]
[283.75558472 111.27812958]
[305.54891968 122.30258942]
[322.73886108 139.62811279]
[333.57687378 161.47727966]
[348.26699829 158.44401550]
[362.95709229 155.41075134]
[377.64721680 152.37748718]
[392.33731079 149.34422302]
[407.02743530 146.31095886]
[421.71752930 143.27769470]
[433.60174561 131.97734070]
[449.25149536 136.87806702]
[452.56768799 152.93841553]
[440.13891602 163.63688660]
[424.75079346 157.96780396]
[410.06069946 161.00106812]
[395.37057495 164.03433228]
[380.68048096 167.06759644]
[365.99035645 170.10086060]
[351.30026245 173.13412476]
[336.61013794 176.16738892]
[337.03741455 185.11763000]
[336.41220093 194.05760193]
[334.74279785 202.86398315]
[332.05187988 211.41519165]
[328.37631226 219.59318542]
[323.76647949 227.28497314]
[318.28570557 234.38429260]
[312.00933838 240.79298401]
[305.02374268 246.42242432]
[297.42507935 251.19468689]
[289.31802368 255.04365540]
[280.81423950 257.91592407]
[272.03097534 259.77160645]
[263.08932495 260.58471680]
[254.11262512 260.34371948]
[245.22471619 259.05166626]
[236.54826355 256.72601318]
[228.20307922 253.39852905]
[220.30438232 249.11483765]
[212.96130371 243.93374634]
[206.27534485 237.92645264]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 62]
[10 61]
[12 58]
[13 57]
[14 56]
[15 55]
[17 52]
[19 50]
[20 49]
[21 47]
[22 46]
[24 44]
[25 43]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
