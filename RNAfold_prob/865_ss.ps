%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGAAGCACGAAAAAGGCAAAAGCCGAGGGAAACACUCAAGGCAAGGGAAACACUAACCAAAAACAUCUAGUUCGCUAGAUGAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[88.09801483 188.75550842]
[81.10459137 187.53376770]
[74.22992706 185.76188660]
[67.51722717 183.45098877]
[61.00867844 180.61560059]
[54.74518967 177.27354431]
[48.76612854 173.44581604]
[43.10907364 169.15649414]
[37.80957413 164.43251038]
[32.90094376 159.30357361]
[20.86909676 168.26095581]
[15.75311375 176.01966858]
[8.35451412 177.29783630]
[5.85729837 192.90357971]
[-6.99225330 202.10491943]
[-22.57073021 199.44285583]
[-31.63569832 186.49673462]
[-28.80907249 170.94728088]
[-15.76783943 162.01968384]
[-0.24913262 165.01055908]
[11.91171741 156.22911072]
[23.94356537 147.27172852]
[15.73573875 130.31059265]
[11.25869751 112.00746155]
[10.71066189 93.17269897]
[14.11589622 74.64021301]
[21.32363510 57.23053360]
[8.79131699 48.98789597]
[-3.74099994 40.74526215]
[-19.02924538 43.72977829]
[-31.62137794 35.19204712]
[-34.37244034 20.59864807]
[-46.90475464 12.35601330]
[-59.43707275 4.11337900]
[-75.37622070 5.93634462]
[-86.63719177 -5.49037933]
[-84.58154297 -21.40118790]
[-70.78617859 -29.59067154]
[-55.83373642 -23.77655792]
[-51.19443893 -8.41893864]
[-38.66212082 -0.17630364]
[-26.12980461 8.06633091]
[-11.64027214 4.81225109]
[1.18669939 12.99292755]
[4.50163460 28.21294594]
[17.03395271 36.45558167]
[29.56626892 44.69821548]
[50.70632172 25.23817062]
[76.92127228 13.47503090]
[105.51222992 10.61983871]
[107.68621063 -4.22178555]
[95.58885193 -13.68484592]
[89.85865021 -27.93477058]
[92.03699493 -43.13840103]
[101.53793335 -55.20603561]
[115.80574799 -60.89154434]
[131.00247192 -58.66555405]
[143.04026794 -49.12683868]
[148.68103027 -34.84127045]
[146.40740967 -19.65159607]
[136.83100891 -7.64375925]
[122.52783203 -2.04780769]
[120.35385895 12.79381657]
[135.28157043 17.69320679]
[149.12329102 25.12610245]
[161.45292664 34.86370850]
[171.89096069 46.60629272]
[180.11610413 59.99239731]
[185.87516785 74.60999298]
[200.56527710 71.57672882]
[215.25538635 68.54346466]
[229.94549561 65.51020050]
[244.63560486 62.47693634]
[259.32571411 59.44367218]
[274.01583862 56.41040802]
[285.90002441 45.11005402]
[301.54977417 50.01077271]
[304.86596680 66.07112122]
[292.43719482 76.76959229]
[277.04910278 71.10051727]
[262.35897827 74.13378143]
[247.66886902 77.16704559]
[232.97875977 80.20030975]
[218.28865051 83.23357391]
[203.59854126 86.26683807]
[188.90843201 89.30010223]
[189.47663879 96.37666321]
[189.48248291 103.47599792]
[188.92593384 110.55348969]
[187.81048584 117.56465149]
[186.14314270 124.46542358]
[183.93438721 131.21241760]
[181.19812012 137.76325989]
[177.95150757 144.07675171]
[174.21498108 150.11322021]
[170.01200867 155.83473206]
[165.36901855 161.20530701]
[160.31517029 166.19122314]
[154.88224792 170.76112366]
[149.10438538 174.88629150]
[143.01791382 178.54080200]
[136.66107178 181.70167542]
[130.07380676 184.34906006]
[123.29753876 186.46630859]
[116.37483978 188.04011536]
[109.34922791 189.06059265]
[102.26485443 189.52133179]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 22]
[11 21]
[13 20]
[27 47]
[28 46]
[29 45]
[32 42]
[33 41]
[34 40]
[50 63]
[51 62]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
