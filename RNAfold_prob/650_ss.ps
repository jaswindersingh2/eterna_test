%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACCGCGAACAAGAACAAGAAACAGAACAAGACAAAGAAACAGAACAAGAACAAGAAACAAGCGGGUCAUGCUUCGGCGUGACAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[27.51591301 138.07369995]
[36.26956940 125.89283752]
[47.38061523 115.81590271]
[60.35602570 108.29003143]
[74.62004852 103.64916229]
[89.54318237 102.09923553]
[77.01086426 93.85659790]
[64.47855377 85.61396790]
[51.94623184 77.37133026]
[42.36575317 88.93323517]
[31.57149506 99.37100983]
[19.69449234 108.55796051]
[6.87891865 116.38255310]
[-6.71965504 122.74980927]
[-20.93615532 127.58244324]
[-35.59800720 130.82177734]
[-50.52722549 132.42849731]
[-65.54258728 132.38311768]
[-80.46182251 130.68614197]
[-95.10382080 127.35821533]
[-109.29084015 122.43972015]
[-122.85066986 115.99035645]
[-135.61869812 108.08841705]
[-147.43994141 98.82982635]
[-158.17088318 88.32697296]
[-167.68127441 76.70735168]
[-175.85568237 64.11202240]
[-182.59484863 50.69387054]
[-187.81697083 36.61577988]
[-191.45867920 22.04865456]
[-193.47573853 7.16931772]
[-193.84368896 -7.84160519]
[-192.55804443 -22.80189705]
[-189.63441467 -37.52995300]
[-185.10829163 -51.84698486]
[-179.03463745 -65.57920074]
[-171.48715210 -78.55990601]
[-162.55746460 -90.63152313]
[-152.35397339 -101.64751434]
[-141.00054932 -111.47415161]
[-128.63499451 -119.99215698]
[-115.40744019 -127.09812927]
[-101.47843170 -132.70579529]
[-87.01706696 -136.74710083]
[-72.19889069 -139.17297363]
[-57.20378494 -139.95397949]
[-42.21377182 -139.08062744]
[-27.41082191 -136.56352234]
[-12.97462463 -132.43321228]
[0.91957569 -126.73985291]
[14.10311604 -119.55253601]
[26.41596031 -110.95852661]
[37.70864487 -101.06214142]
[47.84408188 -89.98350525]
[56.69923782 -77.85711670]
[64.16662598 -64.83016968]
[70.15558624 -51.06079865]
[74.59342957 -36.71615601]
[77.42627716 -21.97037315]
[78.61974335 -7.00244570]
[78.15934753 8.00592613]
[76.05066681 22.87255478]
[72.31930542 37.41697311]
[67.01055908 51.46262741]
[60.18886566 64.83901215]
[72.72118378 73.08164978]
[85.25350189 81.32428741]
[97.78582001 89.56691742]
[112.51849365 92.38620758]
[127.20860291 89.35294342]
[141.89871216 86.31967926]
[156.58882141 83.28642273]
[171.27893066 80.25315857]
[185.96903992 77.21989441]
[200.65914917 74.18663025]
[212.54333496 62.88627625]
[228.19309998 67.78699493]
[231.50929260 83.84734344]
[219.08050537 94.54581451]
[203.69241333 88.87673950]
[189.00230408 91.91000366]
[174.31219482 94.94326782]
[159.62208557 97.97653198]
[144.93197632 101.00978851]
[130.24186707 104.04305267]
[115.55175018 107.07631683]
[128.84544373 114.02455902]
[140.38870239 123.60334015]
[149.66932678 135.38764954]
[156.27552795 148.85456848]
[159.91416931 163.40655518]
[160.42379761 178.39790344]
[157.78178406 193.16339111]
[152.10537720 207.04785156]
[143.64645386 219.43521118]
[132.78033447 229.77578735]
[119.98920441 237.61076355]
[105.84061432 242.59248352]
[90.96237946 244.49987793]
[76.01468658 243.24833679]
[61.66078949 238.89337158]
[48.53761673 231.62821960]
[37.22746277 221.77528381]
[28.23219681 209.77172852]
[21.95095444 196.15020752]
[18.66245079 181.51512146]
[18.51260376 166.51586914]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 68]
[7 67]
[8 66]
[9 65]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
