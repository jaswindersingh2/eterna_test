%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGGAGAAAAAGCCCAAAAGCACAAGAAAACGUUGAAUGCACAGAAAACAUGAAGCAAAAAGUUAGGGUUCGCCCUAACAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[102.32203674 216.62567139]
[93.75316620 216.48139954]
[85.21800995 215.70838928]
[76.76264954 214.31082153]
[68.43271637 212.29624939]
[60.27316666 209.67552185]
[52.32805634 206.46278381]
[44.64026642 202.67541504]
[37.25129318 198.33381653]
[30.20101547 193.46144104]
[23.52749634 188.08459473]
[17.26675224 182.23228455]
[11.45257950 175.93611145]
[6.11636019 169.23007202]
[1.28689790 162.15032959]
[-3.00973892 154.73512268]
[-6.75035858 147.02447510]
[-9.91477013 139.05999756]
[-12.48589325 130.88468933]
[-27.17600250 133.91795349]
[-35.65010834 147.25830078]
[-51.09323502 150.61767578]
[-64.34325409 142.00299072]
[-67.53915405 126.52521515]
[-58.78487778 113.36701202]
[-43.27416992 110.33493042]
[-30.20926666 119.22783661]
[-15.51915741 116.19457245]
[-16.64700127 100.64575195]
[-15.69137478 85.08538818]
[-12.66934776 69.79142761]
[-7.63489676 55.03702927]
[-0.67794365 41.08572769]
[8.07725048 28.18671417]
[18.47430801 16.57038116]
[30.32752037 6.44421148]
[43.42517853 -2.01092744]
[57.53333664 -8.64401627]
[72.40000153 -13.33657837]
[69.79528046 -28.10869408]
[67.19055939 -42.88080978]
[54.52827072 -51.95298004]
[52.09714508 -66.97111511]
[60.82410431 -78.98675537]
[58.21938324 -93.75887299]
[55.61466217 -108.53099060]
[41.34575272 -114.39630127]
[32.53175735 -127.05793762]
[31.98518372 -142.47561646]
[39.88044357 -155.72961426]
[53.69818878 -162.59062195]
[69.02922821 -160.86932373]
[80.98147583 -151.11499023]
[85.74102020 -136.44017029]
[81.78910828 -121.52755737]
[70.38677979 -111.13571167]
[72.99150085 -96.36359406]
[75.59622192 -81.59148407]
[87.90647125 -73.28526306]
[90.75846863 -58.34133911]
[81.96267700 -45.48553467]
[84.56739807 -30.71341705]
[87.17211914 -15.94130135]
[114.57922363 -15.73411846]
[141.18145752 -9.13765335]
[165.51020813 3.48392439]
[186.22236633 21.43382263]
[202.17448425 43.72108841]
[212.48590088 69.11531830]
[227.17601013 66.08205414]
[241.86611938 63.04878998]
[256.55621338 60.01552582]
[271.24633789 56.98226166]
[285.93643188 53.94900131]
[300.62655640 50.91573715]
[312.51074219 39.61538315]
[328.16049194 44.51610184]
[331.47668457 60.57645035]
[319.04791260 71.27492523]
[303.65982056 65.60584259]
[288.96969604 68.63910675]
[274.27960205 71.67237091]
[259.58947754 74.70563507]
[244.89936829 77.73889923]
[230.20925903 80.77216339]
[215.51914978 83.80542755]
[216.39639282 92.33049774]
[216.64533997 100.89696503]
[216.26467896 109.45859528]
[215.25645447 117.96916962]
[213.62609863 126.38275146]
[211.38243103 134.65393066]
[208.53755188 142.73805237]
[205.10681152 150.59147644]
[201.10873413 158.17184448]
[196.56491089 165.43820190]
[191.49984741 172.35134888]
[185.94090271 178.87396240]
[179.91807556 184.97082520]
[173.46386719 190.60905457]
[166.61311340 195.75819397]
[159.40281677 200.39047241]
[151.87187195 204.48085022]
[144.06094360 208.00727844]
[136.01217651 210.95072937]
[127.76902771 213.29528809]
[119.37599945 215.02830505]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 28]
[20 27]
[39 63]
[40 62]
[41 61]
[44 58]
[45 57]
[46 56]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
