%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACCAAGAUCAGACCUAAGAGAAAUCAGAGAAAUCAAAAGAGUCAAAGAUCAAGAGAAAUCAAGGGAAUUUCUUCGGAAAUUCAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[184.51719666 226.99198914]
[176.54650879 217.66012573]
[169.64231873 207.51277161]
[163.88740540 196.67126465]
[159.35076904 185.26522827]
[156.08689880 173.43109131]
[154.13502502 161.31042480]
[153.51867676 149.04820251]
[154.24542236 136.79118347]
[156.30674744 124.68602753]
[141.93690491 120.38397980]
[127.56707001 116.08193207]
[113.19722748 111.77988434]
[95.42151642 117.08712769]
[82.68092346 103.60306549]
[68.08525085 100.14382935]
[53.48957825 96.68459320]
[38.84513855 93.43799591]
[24.15502930 90.40473175]
[9.80405521 100.27714539]
[-6.93372869 96.85958099]
[-15.90586948 82.71823883]
[-30.67798615 80.11351776]
[-39.15887070 92.76241302]
[-52.05476761 100.86277008]
[-67.13137817 103.01115417]
[-81.77660370 98.83534241]
[-93.45305634 89.05882263]
[-100.13772583 75.37543488]
[-100.67244720 60.15590668]
[-94.96458435 46.03711700]
[-84.00305939 35.46523285]
[-69.68701935 30.27189064]
[-54.49679947 31.35687256]
[-41.06420517 38.53219986]
[-31.71651077 50.55469894]
[-28.07326317 65.34140015]
[-13.30114746 67.94612885]
[-3.80370641 59.10584259]
[9.25227070 57.37206650]
[21.07371140 63.60962296]
[27.18829155 75.71462250]
[41.87840271 78.74788666]
[49.17816925 76.99108124]
[56.94881439 82.08892059]
[71.54448700 85.54815674]
[86.14015961 89.00739288]
[94.44827271 83.20384216]
[104.57848358 82.91287231]
[113.20601654 88.22996521]
[117.49927521 97.41004181]
[131.86911011 101.71208954]
[146.23895264 106.01413727]
[160.60879517 110.31618500]
[168.65101624 93.33972931]
[179.41007996 77.94445038]
[192.58392334 64.56098175]
[207.80290222 53.56349945]
[224.64024353 45.25924301]
[242.62399292 39.87995148]
[261.25021362 37.57538986]
[279.99710083 38.40916824]
[298.33972168 42.35700226]
[315.76452637 49.30742264]
[331.78384399 59.06489944]
[345.94949341 71.35536194]
[357.86541748 85.83389282]
[367.19857788 102.09439850]
[373.68838501 119.68103027]
[388.37847900 116.64776611]
[403.06860352 113.61450195]
[417.75869751 110.58123779]
[432.44882202 107.54797363]
[447.13891602 104.51470947]
[461.82904053 101.48144531]
[473.71322632 90.18109131]
[489.36297607 95.08181000]
[492.67916870 111.14215851]
[480.25039673 121.84062958]
[464.86230469 116.17155457]
[450.17218018 119.20481873]
[435.48208618 122.23808289]
[420.79196167 125.27134705]
[406.10186768 128.30461121]
[391.41174316 131.33787537]
[376.72164917 134.37113953]
[377.73168945 146.58226013]
[377.40188599 158.83151245]
[375.73602295 170.97229004]
[372.75378418 182.85931396]
[368.49075317 194.35026550]
[362.99771118 205.30761719]
[356.34024048 215.60012817]
[348.59783936 225.10455322]
[339.86300659 233.70704651]
[330.24017334 241.30453491]
[319.84432983 247.80593872]
[308.79977417 253.13331604]
[297.23861694 257.22274780]
[285.29910278 260.02511597]
[273.12408447 261.50674438]
[260.85922241 261.64965820]
[248.65130615 260.45199585]
[236.64637756 257.92788696]
[224.98817444 254.10736084]
[213.81623840 249.03594971]
[203.26434326 242.77418518]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 54]
[11 53]
[12 52]
[13 51]
[15 47]
[16 46]
[17 45]
[18 43]
[19 42]
[22 38]
[23 37]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
