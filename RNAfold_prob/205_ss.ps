%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:14:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAUUGAUAUAGAUGAUCGAAAGAUACAUCGAAGAUAUAUAUGAAAAUAAUAUAAUAUUGAUUCCUUGGUUUCGACCAAGGAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[92.14543915 308.95880127]
[77.89971924 304.26202393]
[64.53437805 297.45266724]
[52.36055374 288.68920898]
[41.66167831 278.17568970]
[32.68682098 266.15689087]
[25.64492416 252.91256714]
[20.69993210 238.75111389]
[17.96696472 224.00218201]
[17.50964928 209.00915527]
[19.33863258 194.12107849]
[23.41133308 179.68455505]
[29.63293648 166.03569031]
[37.85859680 153.49221802]
[47.89682007 142.34619141]
[59.51390076 132.85707092]
[72.44210052 125.24444580]
[57.46747971 126.11661530]
[42.49285507 126.98879242]
[27.51823425 127.86096191]
[12.55788040 128.95083618]
[-2.38503957 130.25816345]
[-17.32796097 131.56550598]
[-30.44368744 141.40977478]
[-45.41868973 134.72537231]
[-46.84797287 118.38862610]
[-33.26120758 109.20539093]
[-18.63529587 116.62258148]
[-3.69237590 115.31524658]
[11.25054455 114.00791168]
[17.73978806 110.23131561]
[26.64606285 112.88633728]
[41.62068558 112.01416779]
[56.59530640 111.14199066]
[71.56993103 110.26982117]
[76.30677032 104.45497894]
[70.97171783 90.43580627]
[85.78044128 92.82530212]
[90.51728058 87.01045990]
[88.34329987 72.16883850]
[86.16932678 57.32720947]
[83.99534607 42.48558426]
[81.82136536 27.64396095]
[79.43176270 12.83552456]
[76.82704163 -1.93659163]
[74.22232056 -16.70870781]
[71.61759949 -31.48082352]
[57.98549271 -39.14240265]
[52.51586533 -53.79222107]
[57.79129791 -68.51308441]
[71.32089996 -76.35424805]
[86.71640778 -73.61335754]
[96.70852661 -61.58457947]
[96.57928467 -45.94752884]
[86.38971710 -34.08554840]
[88.99443817 -19.31343079]
[91.59915924 -4.54131413]
[94.20388031 10.23080158]
[98.53168488 16.36620140]
[96.66299438 25.46998405]
[98.83696747 40.31160736]
[101.01094818 55.15323257]
[103.18492889 69.99485779]
[105.35890198 84.83647919]
[111.50254822 89.13830566]
[123.78982544 97.74195099]
[129.93347168 102.04377747]
[144.62358093 99.01051331]
[159.31369019 95.97724915]
[174.00379944 92.94398499]
[188.69390869 89.91072083]
[203.38401794 86.87745667]
[218.07412720 83.84419250]
[232.76423645 80.81092834]
[247.45434570 77.77766418]
[259.33853149 66.47731018]
[274.98828125 71.37802887]
[278.30450439 87.43838501]
[265.87570190 98.13685608]
[250.48760986 92.46777344]
[235.79750061 95.50103760]
[221.10739136 98.53430176]
[206.41728210 101.56756592]
[191.72717285 104.60083008]
[177.03706360 107.63409424]
[162.34695435 110.66735840]
[147.65684509 113.70062256]
[132.96673584 116.73388672]
[147.49011230 120.48506927]
[161.27374268 126.40212250]
[173.99673462 134.34727478]
[185.36288452 144.13555908]
[195.10757446 155.53910828]
[203.00395203 168.29243469]
[208.86817932 182.09861755]
[212.56373596 196.63626099]
[214.00456238 211.56689453]
[213.15715027 226.54293823]
[210.04119873 241.21574402]
[204.72926331 255.24368286]
[197.34501648 268.30020142]
[188.06036377 280.08135986]
[177.09144592 290.31280518]
[164.69364929 298.75643921]
[151.15559387 305.21560669]
[136.79244995 309.53994751]
[121.93859863 311.62884521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 35]
[18 34]
[19 33]
[20 32]
[21 30]
[22 29]
[23 28]
[39 64]
[40 63]
[41 62]
[42 61]
[43 60]
[44 58]
[45 57]
[46 56]
[47 55]
[67 88]
[68 87]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
