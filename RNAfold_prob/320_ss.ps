%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACGGUGAGCAAAAAAGCUCCACAAAGUGAACCGACUCACUCAAAAAGAGAGAGAAAACUCUGAGUGGAUUGUUCGCAAUCCAAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[64.56407166 173.30094910]
[63.14004135 158.36869812]
[65.71071625 143.59062195]
[72.09349823 130.01638794]
[81.83502960 118.61013794]
[94.24113464 110.18318176]
[80.00249481 114.90135193]
[65.76385498 119.61952209]
[51.52521515 124.33769226]
[38.12072372 131.06968689]
[25.83344269 139.67332458]
[13.54616261 148.27697754]
[1.25888205 156.88061523]
[-1.23833358 172.48637390]
[-14.08788490 181.68771362]
[-29.66636276 179.02563477]
[-38.73133087 166.07952881]
[-35.90470505 150.53005981]
[-22.86347198 141.60247803]
[-7.34476471 144.59333801]
[4.94251633 135.98970032]
[17.22979736 127.38604736]
[29.51707840 118.78240204]
[25.42447662 104.35150909]
[10.44985485 103.47933960]
[-4.52476740 102.60716248]
[-20.68866539 107.72231293]
[-30.07852364 93.60611725]
[-19.11336708 80.67546844]
[-3.65259480 87.63254547]
[11.32202721 88.50471497]
[26.29664993 89.37689209]
[41.70176315 97.52305603]
[46.80704117 110.09905243]
[61.04568100 105.38088226]
[75.28432465 100.66271210]
[89.52296448 95.94454193]
[83.64756775 90.74588013]
[79.19868469 83.83453369]
[74.06838226 69.73914337]
[68.93807983 55.64375305]
[56.94745636 45.32214355]
[59.86515808 30.71610832]
[54.73485565 16.62071991]
[49.60455322 2.52533054]
[35.73079300 -5.53062391]
[33.52167130 -21.42085075]
[44.67183685 -32.95573044]
[60.62783432 -31.28668785]
[69.14958954 -17.69407082]
[63.69994354 -2.60497165]
[68.83024597 11.49041748]
[73.96054840 25.58580780]
[85.58421326 34.89921951]
[83.03346252 50.51345062]
[88.16376495 64.60884094]
[93.29406738 78.70423126]
[93.34653473 63.70432281]
[104.45634460 53.62602615]
[119.39041901 55.03086090]
[128.42584229 67.00421143]
[125.68007660 81.75075531]
[112.94120026 89.66963959]
[127.63130951 86.63638306]
[142.32142639 83.60311890]
[148.78840637 69.62155151]
[162.09265137 62.21543884]
[177.03013611 64.04186249]
[187.89776611 74.19235992]
[202.58787537 71.15909576]
[217.27798462 68.12583160]
[231.96809387 65.09256744]
[246.65820312 62.05930328]
[261.34829712 59.02603912]
[276.03842163 55.99277496]
[287.92260742 44.69242096]
[303.57238770 49.59313965]
[306.88858032 65.65348816]
[294.45977783 76.35196686]
[279.07168579 70.68288422]
[264.38156128 73.71614838]
[249.69146729 76.74941254]
[235.00135803 79.78267670]
[220.31124878 82.81594086]
[205.62113953 85.84920502]
[190.93103027 88.88246918]
[184.97259521 102.50726318]
[171.98017883 110.10074615]
[156.83059692 108.56987762]
[145.35467529 98.29322815]
[130.66456604 101.32649231]
[115.97446442 104.35974884]
[130.93441772 105.45517731]
[145.07373047 110.46314240]
[157.38812256 119.02794647]
[167.00291443 130.54122925]
[173.23518372 144.18524170]
[175.64225769 158.99084473]
[174.05316162 173.90643311]
[168.58078003 187.87257385]
[159.61380005 199.89726257]
[147.78913879 209.12641907]
[133.94667053 214.90449524]
[119.06962585 216.82110596]
[104.21467590 214.74008179]
[90.43696594 208.80926514]
[78.71509552 199.44989014]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 37]
[7 36]
[8 35]
[9 34]
[10 23]
[11 22]
[12 21]
[13 20]
[24 32]
[25 31]
[26 30]
[39 57]
[40 56]
[41 55]
[43 53]
[44 52]
[45 51]
[63 92]
[64 91]
[65 90]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
