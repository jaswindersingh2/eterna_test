%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACAAACCGGGACAGGAAACUGCACGAAAGUGCCCAAAAGUUUUAGAAAUAAAACGGUUUGAAACAAAAAUUUCGAUUUUUGAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[147.16900635 226.82241821]
[153.01130676 213.00692749]
[161.49687195 200.63781738]
[172.28332520 190.21415710]
[184.93539429 182.15655518]
[198.94259644 176.79013062]
[213.74520874 174.33108521]
[200.75483704 166.83108521]
[187.76445007 159.33108521]
[174.77407837 151.83108521]
[161.78369141 144.33108521]
[148.79330444 136.83108521]
[135.80293274 129.33108521]
[122.13918304 140.64503479]
[105.22299194 145.98785400]
[87.53948975 144.57463074]
[71.68655396 136.61299133]
[59.99312210 123.27256012]
[54.17707062 106.51317596]
[55.09283066 88.79695129]
[41.31958771 82.85575104]
[27.54634666 76.91455841]
[13.77310562 70.97335815]
[-0.00013643 65.03216553]
[-13.77337837 59.09096527]
[-27.94189072 54.16621017]
[-42.43077850 50.28392410]
[-56.91966629 46.40163803]
[-71.40855408 42.51935196]
[-87.10024261 47.28409958]
[-98.88594055 35.88106155]
[-94.64153290 20.04069901]
[-78.73329926 16.05822563]
[-67.52626801 28.03046417]
[-53.03738022 31.91275024]
[-38.54849243 35.79503632]
[-24.05960464 39.67732239]
[-28.33610535 25.29985619]
[-20.00747490 12.82452393]
[-5.08911133 11.26170158]
[5.64411736 21.74014664]
[4.44007826 36.69174576]
[-7.83218145 45.31772614]
[5.94106007 51.25892258]
[19.71430206 57.20011902]
[33.48754501 63.14131546]
[47.26078415 69.08251190]
[61.03402710 75.02370453]
[68.99013519 65.64086151]
[79.13700104 58.68538284]
[90.75778198 54.64866638]
[103.03149414 53.81588745]
[115.09104156 56.24588394]
[126.08444977 61.76697922]
[135.23506165 69.98912811]
[141.89642334 80.33145905]
[145.59793091 92.06331635]
[146.07806396 104.35587311]
[143.30293274 116.34070587]
[156.29330444 123.84070587]
[169.28369141 131.34069824]
[182.27407837 138.84069824]
[195.26445007 146.34069824]
[208.25483704 153.84069824]
[221.24520874 161.34069824]
[222.15637207 146.36840820]
[235.99143982 140.57264709]
[247.30207825 150.42503357]
[243.45787048 164.92510986]
[258.14797974 161.89184570]
[272.83810425 158.85858154]
[287.52819824 155.82531738]
[302.21832275 152.79205322]
[316.90841675 149.75878906]
[331.59854126 146.72552490]
[343.48272705 135.42517090]
[359.13247681 140.32589722]
[362.44866943 156.38624573]
[350.01989746 167.08471680]
[334.63177490 161.41563416]
[319.94168091 164.44889832]
[305.25155640 167.48216248]
[290.56146240 170.51542664]
[275.87133789 173.54869080]
[261.18124390 176.58195496]
[246.49113464 179.61521912]
[259.76434326 186.60249329]
[271.37329102 196.10156250]
[280.84957886 207.72912598]
[287.81079102 221.01600647]
[291.97607422 235.42608643]
[293.17733765 250.37791443]
[291.36614990 265.26815796]
[286.61553955 279.49600220]
[279.11724854 292.48736572]
[269.17376709 303.71801758]
[257.18640137 312.73483276]
[243.63877869 319.17391968]
[229.07757568 322.77551270]
[214.09034729 323.39425659]
[199.28181458 321.00518799]
[185.24952698 315.70474243]
[172.55967712 307.70675659]
[161.72431946 297.33395386]
[153.18066406 285.00488281]
[147.27343750 271.21704102]
[144.24099731 256.52676392]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[13 59]
[20 48]
[21 47]
[22 46]
[23 45]
[24 44]
[25 43]
[26 37]
[27 36]
[28 35]
[29 34]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
