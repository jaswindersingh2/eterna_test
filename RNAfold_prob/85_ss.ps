%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAUUUGCGAAUUGAAAAAUUCCCGAGCGUAUGAAAAUACAGUAAGAAAUUACGCGAGGGCAAAUAGGUUCUUCGGAAUUUAAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[95.81390381 202.58558655]
[103.30510712 189.59013367]
[113.19979858 178.31649780]
[125.11356354 169.20263672]
[138.58354187 162.60266113]
[153.08641052 158.77294922]
[168.05722046 157.86225891]
[156.02537537 148.90487671]
[143.99353027 139.94749451]
[131.96168518 130.99012756]
[119.92983246 122.03274536]
[107.89798737 113.07536316]
[92.97566223 111.55083466]
[79.38104248 117.89011383]
[65.78642273 124.22938538]
[52.19181061 130.56866455]
[38.59719086 136.90792847]
[29.63938141 150.64436340]
[13.28127766 149.48483276]
[6.35069895 134.62216187]
[15.97722816 121.34578705]
[32.25791931 123.31331635]
[45.85253525 116.97404480]
[59.44715118 110.63476562]
[73.04177094 104.29549408]
[86.63638306 97.95622253]
[91.14697266 83.65046692]
[83.64697266 70.66008759]
[68.64545441 66.46578979]
[61.22443771 53.18486023]
[65.31550598 38.90904999]
[57.81550217 25.91866875]
[50.31550217 12.92828655]
[42.81550217 -0.06209429]
[35.31550217 -13.05247498]
[20.58208656 -9.67344761]
[5.50737000 -10.78895283]
[-8.56821060 -16.29979897]
[-20.39306641 -25.71596718]
[-28.91573715 -38.20017624]
[-33.37839508 -52.64234161]
[-33.38422012 -67.75827026]
[-28.93269730 -82.20387268]
[-20.41965294 -94.69464874]
[-8.60206032 -104.11992645]
[5.46926785 -109.64162445]
[20.54311943 -110.76874542]
[35.27913666 -107.40107727]
[48.36700439 -99.83806610]
[58.64295578 -88.75221252]
[65.19326782 -75.12925720]
[67.43547821 -60.18054962]
[65.17021942 -45.23531342]
[58.59891510 -31.62247467]
[48.30588531 -20.55247498]
[55.80588531 -7.56209421]
[63.30588531 5.42828655]
[70.80588531 18.41866875]
[78.30588531 31.40904808]
[92.71463013 35.00398636]
[100.50575256 48.07123947]
[96.63735199 63.16008759]
[104.13735199 76.15046692]
[116.85536194 101.04351807]
[128.88720703 110.00089264]
[140.91906738 118.95827484]
[152.95091248 127.91564941]
[164.98275757 136.87303162]
[177.01460266 145.83041382]
[191.65904236 149.07701111]
[206.34915161 146.04374695]
[221.03926086 143.01048279]
[235.72937012 139.97721863]
[250.41947937 136.94395447]
[265.10958862 133.91069031]
[276.99377441 122.61033630]
[292.64355469 127.51105499]
[295.95974731 143.57139587]
[283.53094482 154.26986694]
[268.14285278 148.60079956]
[253.45274353 151.63406372]
[238.76263428 154.66732788]
[224.07252502 157.70059204]
[209.38241577 160.73385620]
[194.69230652 163.76712036]
[207.87686157 170.92027283]
[219.40223694 180.52056885]
[228.82066345 192.19503784]
[235.76625061 205.49009705]
[239.96914673 219.88925171]
[241.26608276 234.83308411]
[239.60665894 249.74101257]
[235.05532837 264.03387451]
[227.78895569 277.15634155]
[218.08979797 288.59866333]
[206.33470154 297.91625977]
[192.98033142 304.74713135]
[178.54553223 308.82595825]
[163.59109497 309.99420166]
[148.69801331 308.20651245]
[134.44487000 303.53231812]
[121.38541412 296.15325928]
[110.02701569 286.35595703]
[100.81095123 274.52108765]
[94.09526825 261.10842896]
[90.14086914 246.63905334]
[89.10138702 231.67512512]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 69]
[8 68]
[9 67]
[10 66]
[11 65]
[12 64]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[27 63]
[28 62]
[31 59]
[32 58]
[33 57]
[34 56]
[35 55]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
