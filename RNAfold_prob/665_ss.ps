%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAUAUGAAGAUGAAAAAAAAAAACAUCAACAUCAAAAAAAAAAAGAUGAACAUAAAAAAAAAAAACUCCUUAUUCGUAAGGAGAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[76.71527100 200.89862061]
[68.34587097 198.59375000]
[60.19893646 195.59594727]
[52.33172226 191.92631531]
[44.79952621 187.61061096]
[37.65527344 182.67918396]
[30.94918442 177.16667175]
[24.72838402 171.11184692]
[19.03659439 164.55725098]
[13.91381454 157.54893494]
[9.39604950 150.13616943]
[5.51505041 142.37104797]
[-8.58033848 147.50134277]
[-22.67572784 152.63165283]
[-36.77111816 157.76194763]
[-38.75658417 172.93812561]
[-47.57682800 185.44660950]
[-61.20502472 192.41300964]
[-76.50951385 192.23651123]
[-89.97344208 184.95768738]
[-98.50288391 172.24914551]
[-100.13784790 157.03120422]
[-94.50262451 142.80085754]
[-82.89215088 132.82812500]
[-67.97442627 129.40466309]
[-53.17743683 133.31716919]
[-41.90142059 143.66656494]
[-27.80603027 138.53625488]
[-13.71064091 133.40596008]
[0.38474822 128.27565002]
[-3.19967842 91.48311615]
[6.36801481 55.77599716]
[27.86848831 25.70494080]
[18.22667313 14.21427345]
[8.58485985 2.72360682]
[-1.05695450 -8.76706028]
[-15.99697018 -5.44222641]
[-30.76778984 -9.45239735]
[-41.97518921 -19.87606430]
[-47.04378510 -34.31794357]
[-44.80885696 -49.45940018]
[-35.78396988 -61.82103348]
[-22.04298210 -68.56223297]
[-6.74346733 -68.13392639]
[6.59885597 -60.63452530]
[14.91801929 -47.78734207]
[16.30233955 -32.54456711]
[10.43371201 -18.40887451]
[20.07552719 -6.91820717]
[29.71734047 4.57245922]
[39.35915375 16.06312561]
[48.64171600 10.08316326]
[58.50826263 5.12562704]
[68.84660339 1.24688947]
[79.53918457 -1.50894523]
[90.46442413 -3.11054111]
[101.49808502 -3.53968668]
[112.51471710 -2.79150200]
[123.38903809 -0.87449491]
[133.99742126 2.18953681]
[144.21920776 6.36575270]
[153.93820190 11.60666561]
[163.04386902 17.85268211]
[171.43267822 25.03278160]
[179.00923157 33.06531906]
[185.68739319 41.85895538]
[191.39122009 51.31370544]
[196.05586243 61.32205582]
[199.62825012 71.77020264]
[214.31835938 68.73693848]
[229.00846863 65.70368195]
[243.69857788 62.67041397]
[258.38870239 59.63714981]
[273.07879639 56.60388947]
[287.76892090 53.57062531]
[299.65310669 42.27027130]
[315.30285645 47.17098999]
[318.61904907 63.23133850]
[306.19027710 73.92980957]
[290.80218506 68.26073456]
[276.11206055 71.29399872]
[261.42196655 74.32726288]
[246.73184204 77.36052704]
[232.04173279 80.39379120]
[217.35162354 83.42704773]
[202.66151428 86.46031189]
[203.43484497 95.10677338]
[203.48123169 103.78762817]
[202.80033875 112.44185638]
[201.39698792 121.00864410]
[199.28099060 129.42778015]
[196.46726990 137.64010620]
[192.97555542 145.58789062]
[188.83042908 153.21528625]
[184.06098938 160.46868896]
[178.70075989 167.29710388]
[172.78742981 173.65255737]
[166.36256409 179.49038696]
[159.47128296 184.76956177]
[152.16203308 189.45295715]
[144.48620605 193.50769043]
[136.49771118 196.90525818]
[128.25273132 199.62174988]
[119.80917358 201.63812256]
[111.22640228 202.94017029]
[102.56472778 203.51875305]
[93.88503265 203.36981201]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 30]
[13 29]
[14 28]
[15 27]
[33 51]
[34 50]
[35 49]
[36 48]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
