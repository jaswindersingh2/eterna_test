%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:14:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGAAGUUAAUGGCAUGGUGAGGCAUGAGAGUAGUAAUGGUAGUGAGGUGGCGGUCAAAAAAGAUGGACUUCGGUUUAUCAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[12.91230488 365.22595215]
[2.44599319 368.18463135]
[-8.25267887 370.14007568]
[-19.08777237 371.07479858]
[-29.96213531 370.98052979]
[-40.77827454 369.85827637]
[-51.43923187 367.71817017]
[-61.84944153 364.57949829]
[-71.91560364 360.47048950]
[-81.54751587 355.42813110]
[-90.65886688 349.49768066]
[-99.16802216 342.73242188]
[-106.99877167 335.19308472]
[-114.08097839 326.94732666]
[-120.35121918 318.06915283]
[-125.75337982 308.63824463]
[-130.23910522 298.73919678]
[-133.76829529 288.46078491]
[-136.30938721 277.89520264]
[-137.83970642 267.13720703]
[-152.83337402 267.57348633]
[-167.82702637 268.00976562]
[-182.82067871 268.44601440]
[-193.48257446 280.11218262]
[-209.27442932 280.73886108]
[-220.82722473 269.95422363]
[-221.28689575 254.15661621]
[-210.38070679 242.71849060]
[-194.57913208 242.42587280]
[-183.25694275 253.45237732]
[-168.26329041 253.01609802]
[-153.26963806 252.57983398]
[-138.27598572 252.14355469]
[-135.33296204 230.06425476]
[-128.17901611 208.96520996]
[-117.08203125 189.64167786]
[-102.45856476 172.82238770]
[-84.85820007 159.14198303]
[-64.94286346 149.11706543]
[-43.46197510 143.12677002]
[-21.22423363 141.39834595]
[0.93285006 143.99853516]
[22.17447090 150.83108521]
[41.69999695 161.64019775]
[51.00352859 149.87396240]
[60.30706024 138.10772705]
[69.61059570 126.34149170]
[78.91412354 114.57525635]
[88.21765900 102.80902100]
[97.17503357 90.77717590]
[105.77867889 78.48989105]
[114.38233185 66.20261383]
[122.98597717 53.91533279]
[131.58961487 41.62805176]
[140.19326782 29.34076881]
[141.18447876 22.54836273]
[144.96855164 18.04761505]
[149.67169189 16.60903549]
[152.16178894 0.98501635]
[166.12495422 -4.19950676]
[175.42848206 -15.96574211]
[184.73202515 -27.73197746]
[182.64854431 -43.39833069]
[192.31930542 -55.89840698]
[208.00682068 -57.81613159]
[220.40394592 -48.01374817]
[222.15570068 -32.30684280]
[212.22280884 -20.01404190]
[196.49826050 -18.42844391]
[187.19471741 -6.66220951]
[177.89118958 5.10402536]
[176.06654358 19.88644600]
[161.43792725 25.91256905]
[152.48054504 37.94441605]
[143.87690735 50.23169708]
[135.27325439 62.51897812]
[126.66960907 74.80625916]
[118.06596375 87.09353638]
[109.46231842 99.38082123]
[109.18627930 104.78808594]
[105.82002258 109.61106873]
[99.98389435 112.11255646]
[90.68035889 123.87879181]
[81.37682343 135.64501953]
[72.07329559 147.41125488]
[62.76976395 159.17749023]
[53.46622849 170.94372559]
[61.19033051 178.61878967]
[68.15353394 186.98956299]
[74.29349518 195.98091125]
[79.55525208 205.51219177]
[83.89173126 215.49787903]
[87.26414490 225.84841919]
[89.64235687 236.47096252]
[91.00515747 247.27026367]
[91.34043121 258.14947510]
[90.64527893 269.01107788]
[88.92604065 279.75769043]
[86.19823456 290.29293823]
[82.48641968 300.52246094]
[77.82397461 310.35455322]
[72.25279999 319.70111084]
[65.82293701 328.47836304]
[58.59211349 336.60772705]
[50.62524414 344.01638794]
[41.99382401 350.63796997]
[32.77530670 356.41320801]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 33]
[21 32]
[22 31]
[23 30]
[44 87]
[45 86]
[46 85]
[47 84]
[48 83]
[49 82]
[50 79]
[51 78]
[52 77]
[53 76]
[54 75]
[55 74]
[58 73]
[60 71]
[61 70]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
