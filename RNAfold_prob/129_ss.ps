%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:14:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGCACUUGAGACCGGACAAAACCACGAAAGUAGGAUGACCAGGACAGCAAGAAGCAAAAAAUACAUACUUCGGUAUGUAAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[249.33175659 249.33660889]
[245.12951660 241.38639832]
[241.88795471 232.99700928]
[239.65208435 224.28404236]
[238.45309448 215.36763000]
[238.30781555 206.37074280]
[239.21861267 197.41751099]
[241.17323303 188.63145447]
[244.14501953 180.13389587]
[230.94198608 173.01487732]
[213.52593994 174.53680420]
[203.86137390 158.94761658]
[190.45687866 152.21562195]
[177.05239868 145.48362732]
[163.64790344 138.75164795]
[149.39245605 146.74664307]
[133.00970459 144.70440674]
[120.91355896 133.22700500]
[117.95668030 116.64867401]
[104.36206055 110.30939484]
[90.67668152 104.16851044]
[76.90344238 98.22731781]
[61.16731262 99.86585999]
[52.54551697 87.72032928]
[38.77227402 81.77913666]
[28.72895622 86.44005585]
[18.01080132 84.74984741]
[10.21441650 77.52534485]
[7.81656075 67.39779663]
[-5.58792877 60.66580963]
[-19.08890915 54.12948608]
[-32.68352509 47.79021072]
[-48.96421814 49.75774002]
[-58.59074783 36.48137283]
[-51.66016769 21.61869621]
[-35.30206680 20.45916176]
[-26.34425354 34.19559479]
[-12.74963570 40.53487015]
[-5.24148655 40.50886154]
[1.14405882 47.26131821]
[14.54854870 53.99330521]
[33.60446930 51.30912018]
[44.71347046 68.00588989]
[58.48671341 73.94709015]
[73.23768616 71.88359070]
[82.84464264 84.45407104]
[96.61788177 90.39527130]
[104.81382751 90.45684814]
[110.70133209 96.71478271]
[124.29595184 103.05405426]
[135.90260315 95.45820618]
[149.64051819 94.63643646]
[161.87496948 100.69795990]
[169.42268372 111.94509125]
[170.37989807 125.34716034]
[183.78437805 132.07914734]
[197.18887329 138.81112671]
[210.59335327 145.54312134]
[223.16313171 142.22875977]
[234.23611450 148.23373413]
[238.06100464 159.81185913]
[251.26402283 166.93086243]
[268.04928589 149.09748840]
[289.58905029 137.47898865]
[313.67788696 133.25294495]
[337.85299683 136.84065247]
[359.64636230 147.86509705]
[376.83630371 165.19062805]
[387.67431641 187.03979492]
[402.36444092 184.00653076]
[417.05453491 180.97326660]
[431.74465942 177.94000244]
[446.43475342 174.90673828]
[461.12487793 171.87347412]
[475.81497192 168.84020996]
[487.69918823 157.53985596]
[503.34893799 162.44058228]
[506.66513062 178.50093079]
[494.23632812 189.19940186]
[478.84823608 183.53031921]
[464.15814209 186.56358337]
[449.46801758 189.59684753]
[434.77792358 192.63011169]
[420.08779907 195.66337585]
[405.39770508 198.69664001]
[390.70758057 201.72990417]
[391.13485718 210.68013000]
[390.50964355 219.62011719]
[388.84020996 228.42649841]
[386.14932251 236.97770691]
[382.47375488 245.15568542]
[377.86392212 252.84748840]
[372.38314819 259.94680786]
[366.10678101 266.35549927]
[359.12118530 271.98492432]
[351.52252197 276.75720215]
[343.41546631 280.60617065]
[334.91168213 283.47845459]
[326.12841797 285.33410645]
[317.18676758 286.14721680]
[308.21005249 285.90625000]
[299.32214355 284.61416626]
[290.64572144 282.28851318]
[282.30050659 278.96102905]
[274.40182495 274.67733765]
[267.05874634 269.49624634]
[260.37280273 263.48895264]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 62]
[10 61]
[12 58]
[13 57]
[14 56]
[15 55]
[19 50]
[20 49]
[21 47]
[22 46]
[24 44]
[25 43]
[29 41]
[30 40]
[31 38]
[32 37]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
