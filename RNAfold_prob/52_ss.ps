%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAACCGAGCUUUGAAAACAAAGGGAACCUGCGAAAACGCAACUUCAAAAGAAGGGAACCCUCGGACUGGAGUUCGCUCCAGUAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[48.28543472 237.93070984]
[53.08212662 223.71832275]
[60.57333755 210.72286987]
[70.46802521 199.44923401]
[82.38179016 190.33537292]
[95.85176086 183.73539734]
[110.35463715 179.90568542]
[125.32545471 178.99499512]
[113.29360199 170.03761292]
[101.26175690 161.08024597]
[89.22990417 152.12286377]
[77.19805908 143.16548157]
[62.27573395 141.64096069]
[48.68111801 147.98022461]
[35.08649826 154.31950378]
[21.49188423 160.65878296]
[7.89726639 166.99804688]
[-1.06054568 180.73448181]
[-17.41864777 179.57495117]
[-24.34922791 164.71228027]
[-14.72269726 151.43591309]
[1.55799258 153.40344238]
[15.15260983 147.06416321]
[28.74722672 140.72488403]
[42.34184265 134.38562012]
[55.93645859 128.04634094]
[56.80715561 120.59705353]
[43.03387070 126.53814697]
[31.00215340 117.58059692]
[32.74387360 102.68206024]
[46.51728821 96.74125671]
[58.54854965 105.69847870]
[59.41924667 98.24919128]
[47.65301132 88.94565582]
[35.88677597 79.64212036]
[24.12054253 70.33859253]
[7.82495737 68.49849701]
[1.51965308 53.35996628]
[11.69098663 40.49621582]
[27.87556076 43.14037704]
[33.42407608 58.57235718]
[45.19031143 67.87588501]
[56.95654297 77.17942047]
[68.72277832 86.48295593]
[78.85803986 79.93706512]
[89.24156952 78.30124664]
[87.06758881 63.45962143]
[84.89360809 48.61799622]
[82.71963501 33.77637100]
[72.12940216 21.25522804]
[77.93178558 5.91689539]
[94.15778351 3.54013634]
[104.11548615 16.56995583]
[97.56125641 31.60239410]
[99.73523712 46.44401932]
[101.90921783 61.28564072]
[104.08319092 76.12726593]
[115.58605194 79.65737915]
[124.54372406 88.66495514]
[128.40437317 101.47052765]
[125.66235352 115.24699402]
[116.34667206 126.64269257]
[102.15275574 132.59440613]
[86.15544128 131.13363647]
[98.18728638 140.09101868]
[110.21913147 149.04838562]
[122.25098419 158.00576782]
[134.28283691 166.96315002]
[148.92727661 170.20974731]
[163.61738586 167.17648315]
[178.30749512 164.14321899]
[192.99760437 161.10995483]
[207.68771362 158.07669067]
[222.37782288 155.04342651]
[237.06793213 152.01016235]
[248.95211792 140.70980835]
[264.60186768 145.61053467]
[267.91809082 161.67088318]
[255.48928833 172.36935425]
[240.10119629 166.70027161]
[225.41108704 169.73353577]
[210.72097778 172.76679993]
[196.03086853 175.80006409]
[181.34075928 178.83332825]
[166.65065002 181.86659241]
[151.96054077 184.89985657]
[165.14508057 192.05300903]
[176.67045593 201.65332031]
[186.08889771 213.32777405]
[193.03448486 226.62284851]
[197.23738098 241.02200317]
[198.53430176 255.96582031]
[196.87487793 270.87374878]
[192.32356262 285.16659546]
[185.05717468 298.28909302]
[175.35801697 309.73138428]
[163.60292053 319.04898071]
[150.24856567 325.87988281]
[135.81376648 329.95867920]
[120.85932922 331.12692261]
[105.96623993 329.33923340]
[91.71309662 324.66506958]
[78.65364075 317.28598022]
[67.29524231 307.48870850]
[58.07917786 295.65383911]
[51.36349106 282.24118042]
[47.40909195 267.77178955]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 68]
[9 67]
[10 66]
[11 65]
[12 64]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[33 44]
[34 43]
[35 42]
[36 41]
[46 57]
[47 56]
[48 55]
[49 54]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
