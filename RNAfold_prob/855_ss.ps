%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGCAGGAAAAACGCAAAAGUCCAUAGAAAUAAUGAAGACACCCGAGAGAGGAAGCAAAAACAUAUUCUUCGGAGUGUGAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[27.40538406 166.96163940]
[15.63914967 176.26516724]
[3.87291455 185.56869507]
[7.49391890 199.31455994]
[5.57907009 213.35588074]
[-1.54648054 225.55506897]
[-12.76690388 234.06788635]
[-26.35030937 237.62222290]
[-40.21603012 235.70806885]
[-52.25332260 228.65049744]
[-64.28517151 237.60787964]
[-69.40115356 245.36657715]
[-76.79975128 246.64474487]
[-79.29696655 262.25048828]
[-92.14652252 271.45184326]
[-107.72499847 268.78976440]
[-116.78996277 255.84364319]
[-113.96334076 240.29418945]
[-100.92210388 231.36660767]
[-85.40339661 234.35746765]
[-73.24254608 225.57601929]
[-61.21070099 216.61865234]
[-64.55223846 201.06555176]
[-60.79894638 185.54711914]
[-50.64582825 173.15057373]
[-36.06616211 166.36448669]
[-19.92813492 166.57922363]
[-5.43061781 173.80245972]
[6.33561707 164.49893188]
[18.10185242 155.19540405]
[9.85119438 140.33648682]
[4.27030182 124.28299713]
[1.52445257 107.51036835]
[1.69496572 90.51531219]
[4.77679157 73.80115509]
[10.67866135 57.86287308]
[19.22579002 43.17248917]
[30.16505432 30.16505432]
[43.17248917 19.22579002]
[57.86287308 10.67866135]
[73.80115509 4.77679157]
[90.51531219 1.69496572]
[107.51036835 1.52445257]
[124.28299713 4.27030182]
[140.33648682 9.85119438]
[155.19540405 18.10185242]
[164.49893188 6.33561707]
[173.80245972 -5.43061781]
[183.10600281 -17.19685364]
[192.23742676 -29.09715271]
[201.19479370 -41.12900162]
[210.15217590 -53.16085052]
[219.10955811 -65.19269562]
[221.78538513 -74.09274292]
[228.50659180 -77.43914795]
[237.81011963 -89.20538330]
[247.11366272 -100.97161865]
[256.41717529 -112.73785400]
[248.97845459 -125.99430847]
[247.18394470 -141.08894348]
[251.30731201 -155.71995544]
[260.71978760 -167.65620422]
[273.98599243 -175.07749939]
[289.08300781 -176.85214233]
[303.70855713 -172.70953369]
[315.63241577 -163.28137207]
[323.03625488 -150.00538635]
[324.79104614 -134.90608215]
[320.62918091 -120.28597260]
[311.18536377 -108.37453461]
[297.89965820 -100.98817444]
[282.79803467 -99.25324249]
[268.18341064 -103.43432617]
[258.87988281 -91.66809082]
[249.57635498 -79.90185547]
[240.27282715 -68.13562012]
[231.14140320 -56.23531723]
[222.18402100 -44.20346832]
[213.22665405 -32.17162323]
[204.26927185 -20.13977432]
[202.77645874 -12.78147888]
[194.87223816 -7.89332056]
[185.56869507 3.87291455]
[176.26516724 15.63914967]
[166.96163940 27.40538406]
[176.07641602 37.02208710]
[183.82189941 47.77233124]
[190.05865479 59.46263123]
[194.67443848 71.88256073]
[197.58616638 84.80858612]
[198.74143982 98.00803375]
[198.11944580 111.24333954]
[195.73139954 124.27627563]
[191.62026978 136.87226868]
[185.86007690 148.80458069]
[178.55445862 159.85845947]
[169.83494568 169.83494568]
[159.85845947 178.55445862]
[148.80458069 185.86007690]
[136.87226868 191.62026978]
[124.27627563 195.73139954]
[111.24333954 198.11944580]
[98.00803375 198.74143982]
[84.80858612 197.58616638]
[71.88256073 194.67443848]
[59.46263123 190.05865479]
[47.77233124 183.82189941]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[10 22]
[11 21]
[13 20]
[46 85]
[47 84]
[48 83]
[49 82]
[50 80]
[51 79]
[52 78]
[53 77]
[55 76]
[56 75]
[57 74]
[58 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
