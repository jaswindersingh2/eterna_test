%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGAAGAAGACUUGGAAGCAAAAGCAGCAAAAGCAAACCAAAGAAACUUCAACCAAAAGGAACUUGGACACUUCGGUGUCCAAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[333.49334717 153.68499756]
[318.65173340 151.51101685]
[311.05755615 160.26576233]
[300.04260254 164.24113464]
[288.36923218 162.31477356]
[279.02655029 154.86041260]
[274.46502686 143.68234253]
[259.77493286 140.64907837]
[245.08480835 137.61581421]
[230.39469910 134.58255005]
[221.42245483 146.49742126]
[208.11201477 153.36340332]
[193.07888794 153.77105713]
[179.30335999 147.58598328]
[169.53967285 135.98609924]
[165.76536560 121.23767090]
[151.07525635 118.20440674]
[136.38514709 115.17114258]
[121.69503784 112.13787842]
[111.87874603 126.92572784]
[92.25756836 133.10617065]
[70.39732361 124.72405243]
[55.45440292 126.03138733]
[42.33867645 135.87565613]
[27.36367226 129.19125366]
[25.93439293 112.85450745]
[39.52115631 103.67127228]
[54.14706802 111.08846283]
[69.08998871 109.78112793]
[70.39234924 102.39507294]
[74.29943085 80.23690033]
[60.70481491 73.89762115]
[44.42412567 75.86515045]
[34.79759598 62.58878326]
[41.72817612 47.72610855]
[58.08627701 46.56657028]
[67.04409027 60.30300522]
[80.63871002 66.64228058]
[99.03607941 64.87126923]
[114.39212799 71.73912048]
[123.32543945 83.99739838]
[124.72829437 97.44776917]
[139.41841125 100.48103333]
[154.10852051 103.51429749]
[168.79862976 106.54756165]
[178.10580444 94.50024414]
[191.66546631 87.71624756]
[206.76416016 87.49321747]
[220.40635681 93.82184601]
[229.90873718 105.39829254]
[233.42796326 119.89244843]
[248.11807251 122.92570496]
[262.80819702 125.95896912]
[277.49829102 128.99223328]
[292.75906372 117.97481537]
[310.94781494 121.39276886]
[320.82571411 136.66938782]
[335.66732788 138.84336853]
[342.88037109 120.56819153]
[354.53442383 104.76261902]
[369.84558105 92.48152161]
[387.78601074 84.54297638]
[407.15304565 81.47377777]
[426.64981079 83.47445679]
[444.97195435 90.40622711]
[460.89498901 101.80056000]
[473.35610962 116.89088440]
[481.52520752 134.66413879]
[496.21530151 131.63087463]
[510.90542603 128.59761047]
[525.59552002 125.56434631]
[540.28564453 122.53108215]
[554.97576904 119.49781799]
[569.66583252 116.46455383]
[584.35595703 113.43128967]
[596.24017334 102.13093567]
[611.88989258 107.03165436]
[615.20611572 123.09200287]
[602.77734375 133.79048157]
[587.38922119 128.12139893]
[572.69909668 131.15466309]
[558.00903320 134.18792725]
[543.31890869 137.22119141]
[528.62878418 140.25445557]
[513.93865967 143.28771973]
[499.24856567 146.32098389]
[484.55847168 149.35424805]
[484.90774536 160.65240479]
[483.56829834 171.87887573]
[480.56933594 182.78257751]
[475.97717285 193.11958313]
[469.89373779 202.65849304]
[462.45446777 211.18566895]
[453.82504272 218.50999451]
[444.19787598 224.46717834]
[433.78781128 228.92338562]
[422.82727051 231.77832031]
[411.56106567 232.96742249]
[400.24096680 232.46337891]
[389.12008667 230.27670288]
[378.44714355 226.45552063]
[368.46099854 221.08456421]
[359.38525391 214.28323364]
[351.42324829 206.20297241]
[344.75347900 197.02386475]
[339.52566528 186.95069885]
[335.85733032 176.20826721]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 58]
[2 57]
[7 54]
[8 53]
[9 52]
[10 51]
[16 45]
[17 44]
[18 43]
[19 42]
[22 29]
[23 28]
[31 38]
[32 37]
[68 87]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
