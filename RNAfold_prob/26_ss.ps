%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGCUUUGAUACAAAAGGGAAAAGGUUAUGAUUGAAAAAUGAUGACACCGUAUGAGAGCAAAAAGAGAGGAUUCGUUUUUUCAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[174.04031372 222.53524780]
[165.81301880 210.33264160]
[159.84738159 196.87510681]
[156.32872009 182.57772827]
[155.36688232 167.88168335]
[156.99278259 153.24073792]
[161.15740967 139.10711670]
[147.75291443 132.37512207]
[134.34843445 125.64314270]
[120.94393921 118.91115570]
[107.53945160 112.17916870]
[93.57142639 112.80034637]
[85.72856140 101.22532654]
[72.32407379 94.49333954]
[58.91958237 87.76135254]
[45.51509094 81.02935791]
[46.79586792 95.97457886]
[36.11656952 106.50798798]
[21.19037819 105.02176666]
[12.79781723 92.58934784]
[17.00045776 78.19012451]
[30.76350594 72.22401428]
[18.47622490 63.62036896]
[10.34498787 66.69822693]
[1.75926173 66.21878815]
[-5.80933380 62.34149170]
[-11.09485912 55.80154800]
[-13.24865246 47.77175903]
[-11.97494221 39.65259171]
[-23.18031883 29.68065453]
[-34.38569641 19.70871735]
[-45.59107208 9.73677921]
[-56.79644775 -0.23515859]
[-72.24924469 -3.62949872]
[-76.61311340 -17.87049294]
[-87.81848907 -27.84243202]
[-99.02386475 -37.81436920]
[-115.18489075 -40.59885406]
[-120.59929657 -56.07839584]
[-109.69721222 -68.32897186]
[-93.69376373 -64.74823761]
[-89.05192566 -49.01974487]
[-77.84654999 -39.04780960]
[-66.64117432 -29.07587051]
[-51.98985672 -26.39478874]
[-46.82450867 -11.44053459]
[-35.61913300 -1.46859670]
[-24.41375732 8.50334167]
[-13.20838070 18.47527885]
[-2.00300455 28.44721794]
[19.49711990 30.33626175]
[27.07987022 51.33308792]
[39.36715317 59.93673325]
[52.24707794 67.62487030]
[65.65156555 74.35685730]
[79.05606079 81.08884430]
[92.46054840 87.82083130]
[106.42857361 87.19965363]
[114.27143860 98.77467346]
[127.67592621 105.50666046]
[141.08041382 112.23864746]
[154.48490906 118.97064209]
[167.88940430 125.70262909]
[177.15393066 113.46492767]
[188.49121094 103.12369537]
[201.52035522 95.02442932]
[215.80403137 89.43735504]
[230.86308289 86.54837799]
[246.19258118 86.45294189]
[261.27886963 89.15283966]
[275.61660767 94.55622101]
[288.72586060 102.48069763]
[300.16802979 112.65953064]
[309.56060791 124.75056458]
[316.58999634 138.34777832]
[321.02185059 152.99485779]
[322.70901489 168.20059204]
[321.59634399 183.45527649]
[317.72253418 198.24781799]
[331.31713867 204.58708191]
[344.91177368 210.92636108]
[360.68890381 209.74618530]
[368.95379639 222.13734436]
[382.54840088 228.47662354]
[396.14303589 234.81588745]
[409.73764038 241.15516663]
[426.01834106 239.18763733]
[435.64486694 252.46400452]
[428.71429443 267.32669067]
[412.35617065 268.48620605]
[403.39837646 254.74978638]
[389.80374146 248.41050720]
[376.20913696 242.07124329]
[362.61453247 235.73196411]
[347.80975342 237.36555481]
[338.57247925 224.52098083]
[324.97787476 218.18170166]
[311.38327026 211.84243774]
[302.93954468 223.84960938]
[292.52191162 234.19580078]
[280.45123291 242.56063843]
[267.09948730 248.68484497]
[252.87850952 252.37817383]
[238.22714233 253.52540588]
[223.59771729 252.08990479]
[209.44210815 248.11479187]
[196.19775391 241.72163391]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 63]
[8 62]
[9 61]
[10 60]
[11 59]
[13 57]
[14 56]
[15 55]
[16 54]
[22 53]
[23 52]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[35 44]
[36 43]
[37 42]
[79 98]
[80 97]
[81 96]
[83 94]
[84 93]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
