%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACCACGGGCGCGGCCGAGCGAAAGCGGCGAAAGCAAAGGACCGAAAGCCCACGGGAAACCACGGCGGGUCCUUCGGGACCCGAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[367.61380005 181.58673096]
[353.37515259 176.86856079]
[340.42895508 186.84521484]
[323.92318726 187.19892883]
[310.29132080 177.59582520]
[304.96292114 161.62107849]
[290.59307861 157.31903076]
[277.64553833 164.59204102]
[263.01119995 160.43386841]
[255.47036743 146.80398560]
[241.10052490 142.50192261]
[226.73068237 138.19987488]
[212.36083984 133.89782715]
[194.06053162 139.85026550]
[180.22093201 125.33621216]
[165.62525940 121.87697601]
[151.02958679 118.41773224]
[136.38514709 115.17114258]
[121.69503784 112.13787842]
[111.87874603 126.92572784]
[92.25756836 133.10617065]
[70.39732361 124.72405243]
[55.45440292 126.03138733]
[42.33867645 135.87565613]
[27.36367226 129.19125366]
[25.93439293 112.85450745]
[39.52115631 103.67127228]
[54.14706802 111.08846283]
[69.08998871 109.78112793]
[70.39234924 102.39507294]
[74.29943085 80.23690033]
[60.70481491 73.89762115]
[44.42412567 75.86515045]
[34.79759598 62.58878326]
[41.72817612 47.72610855]
[58.08627701 46.56657028]
[67.04409027 60.30300522]
[80.63871002 66.64228058]
[99.03607941 64.87126923]
[114.39212799 71.73912048]
[123.32543945 83.99739838]
[124.72829437 97.44776917]
[139.41841125 100.48103333]
[148.61544800 99.14484406]
[154.48881531 103.82205963]
[169.08448792 107.28130341]
[183.68016052 110.74053955]
[192.76155090 104.40642548]
[203.61036682 104.20976257]
[212.54283142 109.97068787]
[216.66288757 119.52799225]
[231.03273010 123.83003998]
[245.40257263 128.13208008]
[259.77243042 132.43414307]
[273.56243896 125.19028473]
[288.07421875 129.75787354]
[294.89514160 142.94918823]
[309.26498413 147.25123596]
[319.64819336 138.05340576]
[333.12194824 135.24925232]
[346.10574341 139.47361755]
[355.20382690 149.50810242]
[358.09332275 162.62992859]
[372.33197021 167.34809875]
[388.37429810 148.19482422]
[411.28289795 138.34712219]
[436.12274170 139.87878418]
[457.56420898 152.41737366]
[471.02648926 173.23348999]
[485.71661377 170.20022583]
[500.40670776 167.16696167]
[515.09680176 164.13369751]
[529.78692627 161.10043335]
[544.47705078 158.06716919]
[559.16717529 155.03390503]
[571.05133057 143.73355103]
[586.70111084 148.63427734]
[590.01733398 164.69462585]
[577.58850098 175.39309692]
[562.20043945 169.72401428]
[547.51031494 172.75727844]
[532.82019043 175.79054260]
[518.13006592 178.82380676]
[503.43997192 181.85707092]
[488.74987793 184.89033508]
[474.05975342 187.92359924]
[473.99804688 195.78485107]
[472.78363037 203.55537415]
[470.44186401 211.06700134]
[467.02239990 218.15702820]
[462.59832764 224.67173767]
[457.26443481 230.46969604]
[451.13537598 235.42489624]
[444.34304810 239.42942810]
[437.03381348 242.39587402]
[429.36529541 244.25917053]
[421.50314331 244.97807312]
[413.61718750 244.53607178]
[405.87805176 242.94174194]
[398.45321655 240.22859192]
[391.50357056 236.45436096]
[385.17987061 231.69979858]
[379.61941528 226.06689453]
[374.94314575 219.67678833]
[371.25292969 212.66705322]
[368.62945557 205.18878174]
[367.13034058 197.40335083]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[6 58]
[7 57]
[10 54]
[11 53]
[12 52]
[13 51]
[15 47]
[16 46]
[17 45]
[18 43]
[19 42]
[22 29]
[23 28]
[31 38]
[32 37]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
