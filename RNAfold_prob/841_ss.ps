%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGAACCUAAAAAAAUGGAAAAGGAGUACAAAAGAUACAAUCCAGGCAAAAGACCAACCAAAAACUAAGAAUUCGUUCUUAGAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[131.20744324 117.17179108]
[116.83760071 112.86974335]
[106.39178467 120.20594025]
[93.62719727 120.21193695]
[83.17449951 112.88555908]
[78.82566833 100.88462830]
[64.58702850 96.16645813]
[54.98815155 101.68496704]
[44.16347122 100.93534851]
[35.76709747 94.41783142]
[32.49569321 84.53781128]
[18.55548096 78.99971771]
[8.87284851 89.55320740]
[-3.81581187 96.13111877]
[-17.96124268 97.95348358]
[-31.84424400 94.81956482]
[-43.78463364 87.12976074]
[-52.34457016 75.83453369]
[-56.50169754 62.31701279]
[-55.77122498 48.22362518]
[-69.54446411 42.28242874]
[-83.31771088 36.34123230]
[-97.09095001 30.40003395]
[-106.57907104 42.14218903]
[-118.88400269 50.88810730]
[-133.09265137 55.98878860]
[-148.15063477 57.06572342]
[-162.94053650 54.03900146]
[-176.36488342 47.13322067]
[-187.42745972 36.86083984]
[-195.30737305 23.98413277]
[-199.41987610 9.45864201]
[-199.45979309 -5.63774824]
[-195.42416382 -20.18478394]
[-187.61244202 -33.10297775]
[-176.60433960 -43.43371582]
[-163.21670532 -50.41038895]
[-148.44300842 -53.51527786]
[-133.37954712 -52.51798248]
[-119.14412689 -47.49251175]
[-106.79311371 -38.81178284]
[-97.24303436 -27.11996460]
[-91.20256805 -13.28467083]
[-89.11996460 1.66743028]
[-91.14974976 16.62679291]
[-77.37651062 22.56798935]
[-63.60326767 28.50918579]
[-49.83002853 34.45038223]
[-38.69695663 23.27374840]
[-24.10401344 17.18120575]
[-8.25209141 17.12335014]
[6.45588732 23.13822365]
[17.77923012 34.34111404]
[23.98082161 49.05456543]
[24.09357262 65.05950165]
[38.03378677 70.59759521]
[56.78325272 66.26279449]
[69.30519867 81.92781830]
[83.54383850 86.64598846]
[98.03737640 78.89826965]
[113.71114349 83.84018707]
[121.13964844 98.49990082]
[135.50949097 102.80194855]
[149.24588013 83.54472351]
[169.35853577 71.15387726]
[192.67442322 67.55570221]
[215.52619934 73.29160309]
[234.32907104 87.43673706]
[246.14314270 107.74909210]
[260.83325195 104.71582794]
[275.52334595 101.68256378]
[290.21347046 98.64929962]
[304.90356445 95.61603546]
[319.59368896 92.58277130]
[334.28378296 89.54950714]
[346.16799927 78.24915314]
[361.81774902 83.14987183]
[365.13394165 99.21022797]
[352.70516968 109.90869904]
[337.31704712 104.23961639]
[322.62695312 107.27288055]
[307.93682861 110.30614471]
[293.24673462 113.33940887]
[278.55661011 116.37267303]
[263.86651611 119.40593719]
[249.17640686 122.43920135]
[249.22415161 131.14682007]
[247.99472046 139.77038574]
[245.51376343 148.12353516]
[241.83401489 156.02557373]
[237.03416443 163.30546570]
[231.21713257 169.80549622]
[224.50790405 175.38467407]
[217.05082703 179.92181396]
[209.00650024 183.31816101]
[200.54830933 185.49954224]
[191.85874939 186.41799927]
[183.12541199 186.05279541]
[174.53692627 184.41093445]
[166.27899170 181.52702332]
[158.53024292 177.46250916]
[151.45846558 172.30438232]
[145.21691895 166.16336060]
[139.94104004 159.17141724]
[135.74546814 151.47906494]
[132.72161865 143.25202942]
[130.93563843 134.66766357]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[6 59]
[7 58]
[11 56]
[12 55]
[20 48]
[21 47]
[22 46]
[23 45]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
