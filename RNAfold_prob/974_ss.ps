%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACUCUCAGUAGGAAACUACAGCUCUGCAGGAAAAAACUGCAGAGCAGUAGGAAACUACAGAGAGGCAGACUUUCGAGUCUGCAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[94.17655182 181.91709900]
[102.93021393 169.73623657]
[114.04125977 159.65930176]
[127.01666260 152.13342285]
[141.28068542 147.49255371]
[156.20382690 145.94262695]
[143.67150879 137.69999695]
[131.13919067 129.45736694]
[118.60687256 121.21472931]
[106.07455444 112.97209167]
[92.12886047 111.96748352]
[85.68280792 99.56022644]
[73.15048981 91.31758881]
[60.61817169 83.07495880]
[48.08585739 74.83232117]
[34.37167358 81.60494232]
[19.20897102 80.61032104]
[6.66332674 72.21548462]
[0.04835203 58.75821686]
[1.05072689 43.89683151]
[-11.48159027 35.65419769]
[-24.01390839 27.41156197]
[-36.54622650 19.16892624]
[-52.32781601 18.05002785]
[-58.70957947 4.59185791]
[-71.24189758 -3.65077662]
[-83.77421570 -11.89341164]
[-96.30653381 -20.13604546]
[-108.83885193 -28.37868118]
[-121.37117004 -36.62131500]
[-133.90348816 -44.86394882]
[-146.43580627 -53.10658646]
[-158.96812439 -61.34922028]
[-173.89585876 -56.69128036]
[-188.30523682 -62.76612854]
[-195.39259338 -76.70541382]
[-191.81146240 -91.92742157]
[-179.25277710 -101.24479675]
[-163.64636230 -100.25814819]
[-152.36106873 -89.43334961]
[-150.72547913 -73.88153839]
[-138.19316101 -65.63890076]
[-125.66085052 -57.39626694]
[-113.12853241 -49.15363312]
[-100.59621429 -40.91099930]
[-88.06389618 -32.66836166]
[-75.53157806 -24.42572784]
[-62.99926376 -16.18309402]
[-50.46694565 -7.94045925]
[-35.58174896 -7.41112900]
[-28.30359077 6.63660955]
[-15.77127266 14.87924480]
[-3.23895574 23.12187958]
[9.29336166 31.36451340]
[22.54230690 24.55782127]
[37.51904297 25.30164719]
[50.19638824 33.49623489]
[57.11531067 47.02492142]
[56.32849121 62.30000305]
[68.86080933 70.54264069]
[81.39312744 78.78527069]
[93.92544556 87.02790833]
[107.87113953 88.03251648]
[114.31719208 100.43977356]
[126.84951019 108.68241119]
[139.38182068 116.92504120]
[151.91413879 125.16767883]
[164.44645691 133.41030884]
[179.17913818 136.22959900]
[193.86924744 133.19633484]
[208.55935669 130.16307068]
[223.24946594 127.12981415]
[237.93957520 124.09654999]
[252.62968445 121.06328583]
[267.31979370 118.03002167]
[279.20397949 106.72966766]
[294.85372925 111.63038635]
[298.16995239 127.69073486]
[285.74114990 138.38920593]
[270.35305786 132.72013855]
[255.66294861 135.75340271]
[240.97283936 138.78665161]
[226.28273010 141.81991577]
[211.59262085 144.85317993]
[196.90251160 147.88644409]
[182.21240234 150.91970825]
[195.50607300 157.86795044]
[207.04933167 167.44673157]
[216.32997131 179.23104858]
[222.93617249 192.69796753]
[226.57481384 207.24995422]
[227.08444214 222.24128723]
[224.44242859 237.00679016]
[218.76602173 250.89125061]
[210.30709839 263.27859497]
[199.44097900 273.61920166]
[186.64984131 281.45416260]
[172.50125122 286.43588257]
[157.62301636 288.34326172]
[142.67532349 287.09173584]
[128.32142639 282.73675537]
[115.19825745 275.47161865]
[103.88810730 265.61868286]
[94.89283752 253.61512756]
[88.61159515 239.99360657]
[85.32308960 225.35852051]
[85.17324829 210.35926819]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 68]
[7 67]
[8 66]
[9 65]
[10 64]
[12 62]
[13 61]
[14 60]
[15 59]
[20 54]
[21 53]
[22 52]
[23 51]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
