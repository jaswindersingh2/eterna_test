%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGUAUAAUAUGAAAACAUGAGACAACACAAAGUGGUAAAAGGUACAGUGAAGUUAAGUAUAUUAGGAGUUCGCUCUUAGAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[124.85439301 283.27322388]
[117.87533569 279.49862671]
[111.25995636 275.11666870]
[105.06098175 270.16220093]
[99.32781219 264.67456055]
[94.10615540 258.69729614]
[89.43763733 252.27798462]
[85.35952759 245.46762085]
[81.90435028 238.32034302]
[79.09971619 230.89300537]
[76.96804810 223.24468994]
[75.52641296 215.43623352]
[74.78639221 207.52975464]
[74.75397491 199.58819580]
[75.42953491 191.67475891]
[76.80780029 183.85243225]
[78.87789917 176.18348694]
[81.62346649 168.72900391]
[85.02274323 161.54832458]
[89.04878235 154.69868469]
[93.66962433 148.23463440]
[98.84857941 142.20767212]
[104.54450226 136.66586304]
[110.71214294 131.65338135]
[102.83749390 118.88663483]
[88.76311493 115.44307709]
[81.15645599 103.11080933]
[84.39575195 88.98801422]
[76.52110291 76.22126770]
[68.64645386 63.45451736]
[53.52929306 59.69831467]
[45.72514343 46.63883591]
[49.39927292 32.25007629]
[41.52462387 19.48332787]
[33.64997482 6.71657705]
[22.74957848 4.77396631]
[14.93923950 -2.75824714]
[12.69662285 -13.14804077]
[16.54133606 -22.81939507]
[9.42233086 -36.02241516]
[2.30332518 -49.22543716]
[-13.09242916 -51.16202545]
[-24.38649750 -61.80268097]
[-27.23608208 -77.05586243]
[-20.54545784 -91.05640411]
[-6.88730669 -98.42081451]
[8.48653316 -96.31732941]
[19.66450691 -85.55477142]
[22.34845543 -70.27157593]
[15.50634575 -56.34444046]
[22.62535095 -43.14142227]
[29.74435806 -29.93840027]
[46.89363861 -21.20712852]
[46.41672516 -1.15807176]
[54.29137421 11.60867882]
[62.16602325 24.37542915]
[76.67323303 27.54977226]
[84.84111023 40.38489532]
[81.41320801 55.57986832]
[89.28785706 68.34661865]
[97.16250610 81.11336517]
[111.23688507 84.55692291]
[118.84354401 96.88919067]
[115.60424805 111.01198578]
[123.47889709 123.77873230]
[153.20014954 114.86758423]
[184.15274048 116.69292450]
[212.58016968 129.01808167]
[235.03762817 150.33300781]
[248.80937195 178.03929138]
[263.49948120 175.00602722]
[278.18957520 171.97276306]
[292.87969971 168.93949890]
[307.56979370 165.90623474]
[322.25991821 162.87297058]
[334.14410400 151.57261658]
[349.79388428 156.47332764]
[353.11007690 172.53369141]
[340.68127441 183.23216248]
[325.29318237 177.56307983]
[310.60305786 180.59634399]
[295.91296387 183.62960815]
[281.22283936 186.66287231]
[266.53274536 189.69613647]
[251.84263611 192.72940063]
[252.43814087 200.62698364]
[252.32740784 208.54682922]
[251.51118469 216.42587280]
[249.99588013 224.20141602]
[247.79342651 231.81153870]
[244.92127991 239.19563293]
[241.40219116 246.29490662]
[237.26405334 253.05279541]
[232.53973389 259.41546631]
[227.26675415 265.33218384]
[221.48696899 270.75582886]
[215.24633789 275.64315796]
[208.59445190 279.95513916]
[201.58421326 283.65740967]
[194.27134705 286.72036743]
[186.71401978 289.11956787]
[178.97235107 290.83578491]
[171.10794067 291.85528564]
[163.18334961 292.16983032]
[155.26167297 291.77682495]
[147.40596008 290.67926025]
[139.67874146 288.88580322]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[24 65]
[25 64]
[28 61]
[29 60]
[30 59]
[33 56]
[34 55]
[35 54]
[39 52]
[40 51]
[41 50]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
