%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:14:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAUAUAGUAUAAGAUAAGCAAAGUUAUGUCAAAACAUUAUGCAAAGUAAAUGAUAUAGUAUAGUUUUUCUUCGGAGGGACAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[291.93789673 261.32604980]
[280.17166138 252.02252197]
[268.40542603 242.71899414]
[256.63919067 233.41546631]
[244.87294006 224.11193848]
[233.10671997 214.80839539]
[221.34048462 205.50486755]
[206.55805969 203.68022156]
[200.53193665 189.05160522]
[188.76570129 179.74807739]
[176.99946594 170.44453430]
[165.23323059 161.14100647]
[150.45080566 159.31636047]
[144.42468262 144.68774414]
[132.65844727 135.38421631]
[120.89221954 126.08068085]
[109.12598419 116.77714539]
[94.72262573 118.35498810]
[83.35681915 109.36807251]
[81.57048798 94.98908997]
[69.80425262 85.68555450]
[54.31406403 87.32625580]
[42.51396179 77.72353363]
[41.04526520 62.94589615]
[29.27903175 53.64236450]
[14.41162777 57.67554092]
[0.18641563 52.24445343]
[-8.01608753 39.62768173]
[-7.22593832 24.77797699]
[-18.99217415 15.47444534]
[-38.96103287 13.62058258]
[-45.64235687 -4.42638206]
[-57.92963409 -13.03002834]
[-70.21691895 -21.63367462]
[-82.50419617 -30.23732185]
[-98.87920380 -31.12679672]
[-106.05406952 -45.87309647]
[-96.64790344 -59.30649185]
[-80.33696747 -57.60785675]
[-73.90055084 -42.52460098]
[-61.61326981 -33.92095566]
[-49.32598877 -25.31730843]
[-37.03870773 -16.71366310]
[-26.98640442 -19.40960312]
[-16.92721558 -15.97597027]
[-10.35265732 -7.34400558]
[-9.68864059 3.70821047]
[2.07759404 13.01174259]
[16.34479904 8.81831551]
[30.51311302 13.89009094]
[39.07836533 26.47936630]
[38.58256531 41.87612915]
[50.34880066 51.17966461]
[65.06680298 49.20081329]
[77.13197327 58.46830368]
[79.10778046 73.91931915]
[90.87401581 83.22285461]
[105.27737427 81.64501190]
[116.64318085 90.63192749]
[118.42951202 105.01091003]
[130.19575500 114.31444550]
[141.96199036 123.61798096]
[153.72822571 132.92150879]
[169.35223389 135.41160583]
[174.53675842 149.37477112]
[186.30299377 158.67829895]
[198.06922913 167.98184204]
[209.83546448 177.28536987]
[225.45948792 179.77546692]
[230.64401245 193.73863220]
[242.41024780 203.04216003]
[254.17648315 212.34570312]
[265.94271851 221.64923096]
[277.70895386 230.95275879]
[289.47518921 240.25630188]
[301.24142456 249.55982971]
[312.57907104 239.67182922]
[325.54067993 232.03567505]
[339.68484497 226.91146851]
[354.52978516 224.47372437]
[369.56988525 224.80546570]
[384.29287720 227.89541626]
[398.19732666 233.63832092]
[410.80966187 241.83856201]
[421.70025635 252.21687317]
[430.49822998 264.41973877]
[436.90393066 278.03158569]
[440.69912720 292.58874512]
[441.75460815 307.59542847]
[440.03442383 322.54052734]
[435.59713745 336.91497803]
[428.59390259 350.22921753]
[419.26324463 362.02978516]
[407.92294312 371.91473389]
[394.95922852 379.54739380]
[380.81369019 384.66778564]
[365.96810913 387.10153198]
[350.92810059 386.76571655]
[336.20593262 383.67181396]
[322.30303955 377.92517090]
[309.69293213 369.72149658]
[298.80511475 359.34027100]
[290.01043701 347.13500977]
[283.60839844 333.52145386]
[279.81710815 318.96328735]
[278.76568604 303.95629883]
[280.48989868 289.01168823]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[4 73]
[5 72]
[6 71]
[7 70]
[9 68]
[10 67]
[11 66]
[12 65]
[14 63]
[15 62]
[16 61]
[17 60]
[20 57]
[21 56]
[24 53]
[25 52]
[29 48]
[30 47]
[32 43]
[33 42]
[34 41]
[35 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
