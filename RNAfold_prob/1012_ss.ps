%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:14:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAUGUGAAUUAAAAGUGAAAAGAAUAUGUUUGAAAAAAGGUGUUAACAAUUGAUAUUGAAAGAUUAUUAUUCGUAAUAAUAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[162.90116882 192.74940491]
[159.69349670 184.16439819]
[157.62535095 175.23414612]
[156.73214722 166.10922241]
[157.02943420 156.94358826]
[158.51271057 147.89193726]
[161.15740967 139.10711670]
[147.75291443 132.37512207]
[134.34843445 125.64314270]
[120.94393921 118.91115570]
[107.53945160 112.17916870]
[93.57142639 112.80034637]
[85.72856140 101.22532654]
[72.32407379 94.49333954]
[58.91958237 87.76135254]
[45.51509094 81.02935791]
[39.39791107 87.10699463]
[32.06529236 91.61912537]
[23.90838814 94.33225250]
[15.36068821 95.10863495]
[6.87497425 93.91330719]
[-1.10065699 90.81555939]
[-8.14645767 85.98500061]
[-13.89311981 79.68223572]
[-18.04113007 72.24486542]
[-20.37637901 64.06934357]
[-20.78120232 55.58989716]
[-19.24029541 47.25543594]
[-15.84120464 39.50579834]
[-27.04658127 29.53386116]
[-38.25195694 19.56192207]
[-49.45733261 9.58998489]
[-60.66270828 -0.38195294]
[-76.11550903 -3.77629304]
[-80.47937775 -18.01728821]
[-91.68475342 -27.98922539]
[-102.89012909 -37.96116257]
[-119.05114746 -40.74564743]
[-124.46556091 -56.22518921]
[-113.56347656 -68.47576141]
[-97.56002808 -64.89502716]
[-92.91819000 -49.16654205]
[-81.71281433 -39.19460297]
[-70.50743866 -29.22266388]
[-55.85612106 -26.54158401]
[-50.69076920 -11.58732891]
[-39.48539352 -1.61539102]
[-28.28001785 8.35654736]
[-17.07464218 18.32848549]
[-5.86926651 28.30042267]
[15.29598045 20.88427925]
[36.95215988 27.14180374]
[51.04328537 44.88422394]
[52.24707794 67.62487030]
[65.65156555 74.35685730]
[79.05606079 81.08884430]
[92.46054840 87.82083130]
[106.42857361 87.19965363]
[114.27143860 98.77467346]
[127.67592621 105.50666046]
[141.08041382 112.23864746]
[154.48490906 118.97064209]
[167.88940430 125.70262909]
[183.80351257 108.33665466]
[204.52792358 97.18142700]
[227.74972534 93.46765900]
[250.88201904 97.59637451]
[271.35202026 109.09567261]
[286.88726807 126.67457581]
[295.76785278 148.36801147]
[310.66641235 146.62661743]
[325.56500244 144.88522339]
[340.46356201 143.14382935]
[355.36215210 141.40243530]
[370.26071167 139.66104126]
[385.15930176 137.91964722]
[400.05786133 136.17825317]
[415.08795166 128.33398438]
[426.78640747 140.60519409]
[418.23324585 155.24346924]
[401.79925537 151.07682800]
[386.90069580 152.81822205]
[372.00210571 154.55961609]
[357.10354614 156.30101013]
[342.20495605 158.04240417]
[327.30639648 159.78379822]
[312.40780640 161.52519226]
[297.50924683 163.26658630]
[297.01654053 172.37760925]
[295.34655762 181.34977722]
[292.52697754 190.03157043]
[288.60491943 198.27633667]
[283.64608765 205.94471741]
[277.73379517 212.90701294]
[270.96740723 219.04542542]
[263.46078491 224.25598145]
[255.34036255 228.45034790]
[246.74288940 231.55728149]
[237.81333923 233.52389526]
[228.70227051 234.31651306]
[219.56343079 233.92124939]
[210.55104065 232.34428406]
[201.81729126 229.61175537]
[193.50971985 225.76927185]
[185.76873779 220.88124084]
[178.72526550 215.02975464]
[172.49845886 208.31314087]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 63]
[8 62]
[9 61]
[10 60]
[11 59]
[13 57]
[14 56]
[15 55]
[16 54]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[35 44]
[36 43]
[37 42]
[70 88]
[71 87]
[72 86]
[73 85]
[74 84]
[75 83]
[76 82]
[77 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
