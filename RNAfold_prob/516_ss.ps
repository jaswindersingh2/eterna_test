%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACUCGCAUUUAGAAACAAGUGACCAAAAGGACACUUGAGAAAAAACUAAACUAAAUAGCGAGUUGUUGUAUUCGUACAACAAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[134.78269958 193.69760132]
[139.76660156 179.54978943]
[149.67451477 168.28776550]
[163.07206726 161.54196167]
[178.01574707 160.28855896]
[165.48342896 152.04591370]
[152.95111084 143.80328369]
[140.41879272 135.56065369]
[127.88648224 127.31801605]
[115.35416412 119.07538605]
[102.82184601 110.83274841]
[90.17097473 102.77325439]
[77.40422058 94.89860535]
[64.63747406 87.02395630]
[51.87072372 79.14930725]
[39.10397339 71.27465820]
[26.33722305 63.40000916]
[6.03805637 74.69610596]
[-16.95139885 72.24974823]
[-34.25145340 57.08154678]
[-39.63052368 34.82569122]
[-54.11940765 30.94340706]
[-68.60829926 27.06112099]
[-83.09718323 23.17883492]
[-97.58607483 19.29655075]
[-112.07495880 15.41426468]
[-127.40746307 19.31617546]
[-137.69850159 8.54845619]
[-152.18739319 4.66617107]
[-167.87908936 9.43091965]
[-179.66477966 -1.97212172]
[-175.42036438 -17.81248093]
[-159.51213074 -21.79495621]
[-148.30509949 -9.82271671]
[-133.81622314 -5.94043064]
[-119.52005768 -10.12002850]
[-108.19267273 0.92537701]
[-93.70378876 4.80766249]
[-79.21489716 8.68994808]
[-64.72601318 12.57223415]
[-50.23712540 16.45451927]
[-35.74823761 20.33680534]
[-31.37285423 13.41337585]
[-25.60185051 7.58584452]
[-18.70225334 3.13082671]
[-10.99481869 0.26126993]
[-2.83911848 -0.88372016]
[5.38323355 -0.24561569]
[13.28643799 2.15056205]
[20.49861336 6.19718695]
[26.67928886 11.70885181]
[31.53548622 18.43086052]
[34.83559799 26.05099297]
[36.42042923 34.21400833]
[36.21088028 42.53820038]
[34.21187210 50.63325882]
[46.97862244 58.50790787]
[59.74537277 66.38256073]
[72.51212311 74.25720978]
[85.27886963 82.13185120]
[98.04562378 90.00650024]
[106.14610291 91.25528717]
[111.06447601 98.30043030]
[123.59679413 106.54306793]
[136.12911987 114.78569794]
[148.66143799 123.02833557]
[161.19374084 131.27096558]
[173.72605896 139.51361084]
[186.25837708 147.75624084]
[200.19859314 153.29432678]
[214.97071838 155.89904785]
[229.74282837 158.50376892]
[244.51493835 161.10850525]
[259.28704834 163.71322632]
[268.44134521 162.11010742]
[274.44827271 166.61451721]
[289.13836670 169.64778137]
[303.82849121 172.68104553]
[313.05392456 160.52151489]
[326.64547729 153.57655334]
[341.90454102 153.22511292]
[355.80142212 159.53695679]
[365.57690430 171.25885010]
[369.29000854 186.06343079]
[366.20355225 201.01121521]
[356.93029785 213.13433838]
[343.31149292 220.02571106]
[328.05117798 220.31706238]
[314.17926025 213.95054626]
[304.45001221 202.19024658]
[300.79522705 187.37115479]
[286.10513306 184.33789062]
[271.41500854 181.30462646]
[256.68234253 178.48533630]
[241.91021729 175.88061523]
[227.13810730 173.27589417]
[212.36598206 170.67117310]
[197.59387207 168.06645203]
[207.60539246 179.23648071]
[212.71975708 193.33764648]
[212.19656372 208.32852173]
[206.11152649 222.03883362]
[195.34562683 232.48370361]
[181.45744324 238.15100098]
[166.45761108 238.22027588]
[152.51766968 232.68150330]
[141.65574646 222.33651733]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 69]
[6 68]
[7 67]
[8 66]
[9 65]
[10 64]
[11 63]
[12 61]
[13 60]
[14 59]
[15 58]
[16 57]
[17 56]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
[28 35]
[29 34]
[70 98]
[71 97]
[72 96]
[73 95]
[74 94]
[76 93]
[77 92]
[78 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
