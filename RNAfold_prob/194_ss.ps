%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:14:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACUCAAGACCAGCUAUUCAAAAGAAAUAGCAAAAGUUCACAGAAAACUGGAACAGGUCAAGAGUUGAGCUUUCGAGCUCAAAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[172.97285461 220.24645996]
[184.50418091 210.65332031]
[197.73989868 203.59529114]
[212.13105774 199.36508179]
[227.07994080 198.13813782]
[214.79266357 189.53450012]
[202.50538635 180.93084717]
[190.21809387 172.32720947]
[177.93081665 163.72355652]
[163.35276794 166.55484009]
[150.76916504 158.00454712]
[147.89830017 142.69456482]
[135.61102295 134.09091187]
[123.32373810 125.48726654]
[111.03645325 116.88362122]
[91.07721710 125.31677246]
[68.12458801 110.35614014]
[53.14996719 111.22830963]
[38.17534637 112.10047913]
[23.20072365 112.97265625]
[8.22610092 113.84482574]
[-6.74852133 114.71700287]
[-21.70887566 115.80686951]
[-34.82460403 125.65114594]
[-49.79960632 118.96673584]
[-51.22888565 102.62998962]
[-37.64212036 93.44675446]
[-23.01621056 100.86394501]
[-16.52696800 97.08734894]
[-7.62069416 99.74237823]
[7.35392857 98.87020111]
[22.32855034 97.99803162]
[37.30317307 97.12586212]
[52.27779388 96.25368500]
[67.25241852 95.38151550]
[71.55423737 89.23787689]
[59.26710510 80.63402557]
[67.87115479 68.34703064]
[80.15789032 76.95059204]
[84.45970917 70.80695343]
[80.15766144 56.43711090]
[75.85561371 42.06726837]
[71.55356598 27.69742584]
[66.01253510 20.23633957]
[67.34191895 12.84677124]
[63.45963669 -1.64211595]
[59.57735062 -16.13100243]
[47.60511017 -27.33803368]
[51.58758545 -43.24626923]
[67.42794800 -47.49068069]
[78.83098602 -35.70498276]
[74.06623840 -20.01328850]
[77.94852448 -5.52440166]
[81.83081055 8.96448612]
[85.92340851 23.39537621]
[90.22545624 37.76522064]
[94.52750397 52.13506317]
[98.82955170 66.50490570]
[120.73821259 82.95648193]
[119.64010620 104.59633636]
[131.92738342 113.19998169]
[144.21466064 121.80363464]
[156.50193787 130.40727234]
[171.87052917 127.86868286]
[184.20901489 136.76904297]
[186.53446960 151.43627930]
[198.82174683 160.03991699]
[211.10902405 168.64356995]
[223.39631653 177.24722290]
[235.68359375 185.85086060]
[250.37370300 188.88412476]
[265.06381226 185.85086060]
[279.75390625 182.81759644]
[294.44403076 179.78433228]
[309.13412476 176.75106812]
[321.01834106 165.45071411]
[336.66809082 170.35144043]
[339.98428345 186.41178894]
[327.55551147 197.11026001]
[312.16738892 191.44117737]
[297.47729492 194.47444153]
[282.78717041 197.50770569]
[268.09707642 200.54096985]
[253.40696716 203.57423401]
[266.64801025 210.62225342]
[278.18658447 220.20668030]
[287.54415894 231.92997742]
[294.33261108 245.30596924]
[298.27041626 259.77987671]
[299.19421387 274.75140381]
[297.06576538 289.59960938]
[291.97326660 303.70870972]
[284.12796021 316.49349976]
[273.85525513 327.42379761]
[261.58114624 336.04623413]
[247.81471252 342.00320435]
[233.12692261 345.04766846]
[218.12692261 345.05334473]
[203.43682861 342.01998901]
[189.66590881 336.07342529]
[177.38528442 327.46026611]
[167.10429382 316.53775024]
[159.24932861 303.75888062]
[154.14617920 289.65365601]
[152.00646973 274.80703735]
[152.91896057 259.83483887]
[156.84580994 245.35795593]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 70]
[6 69]
[7 68]
[8 67]
[9 66]
[12 63]
[13 62]
[14 61]
[15 60]
[17 35]
[18 34]
[19 33]
[20 32]
[21 31]
[22 30]
[23 28]
[40 58]
[41 57]
[42 56]
[43 55]
[45 54]
[46 53]
[47 52]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
