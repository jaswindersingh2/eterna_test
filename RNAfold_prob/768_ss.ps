%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACCUAACCCGGGAUUUCCGUUUAUAGUUCAAUCUCACGAUCGAACUCGGCCCGCGUUAGCCAAGAAAUGGGUUCGCCCAUUUAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[190.62773132 150.86952209]
[176.53233337 145.73921204]
[173.83715820 146.94442749]
[170.46716309 147.06808472]
[166.86602783 145.83351135]
[163.57388306 143.14292908]
[161.15740967 139.10711670]
[147.75291443 132.37512207]
[134.34843445 125.64314270]
[120.94393921 118.91115570]
[107.53945160 112.17916870]
[93.57142639 112.80034637]
[85.72856140 101.22532654]
[72.32407379 94.49333954]
[58.91958237 87.76135254]
[45.51509094 81.02935791]
[40.83485794 81.50107574]
[36.71075439 80.46707153]
[33.57000732 78.31575775]
[31.65678406 75.53876495]
[31.01406479 72.65718842]
[18.48174667 64.41455078]
[5.94942951 56.17192078]
[5.48650980 71.16477203]
[-6.34343195 80.38716125]
[-20.99615669 77.17816925]
[-27.88865471 63.85550308]
[-22.04278374 50.04153061]
[-7.68017387 45.71355820]
[-18.88554955 35.74161911]
[-30.09092522 25.76968002]
[-41.29630280 15.79774284]
[-52.50167847 5.82580471]
[-67.95447540 2.43146467]
[-72.31834412 -11.80953026]
[-83.52371979 -21.78146744]
[-94.72909546 -31.75340652]
[-110.89012146 -34.53789139]
[-116.30452728 -50.01743317]
[-105.40244293 -62.26800537]
[-89.39899445 -58.68727112]
[-84.75715637 -42.95878220]
[-73.55178070 -32.98684311]
[-62.34640503 -23.01490593]
[-47.69509125 -20.33382607]
[-42.52973938 -5.37957096]
[-31.32436371 4.59236670]
[-20.11898804 14.56430531]
[-8.91361237 24.53624344]
[2.29176426 34.50818253]
[14.19206429 43.63960266]
[26.72438049 51.88223648]
[39.25669861 60.12487030]
[52.24707794 67.62487030]
[65.65156555 74.35685730]
[79.05606079 81.08884430]
[92.46054840 87.82083130]
[106.42857361 87.19965363]
[114.27143860 98.77467346]
[127.67592621 105.50666046]
[141.08041382 112.23864746]
[154.48490906 118.97064209]
[167.88940430 125.70262909]
[181.66264343 131.64382935]
[195.75802612 136.77412415]
[214.73410034 118.22594452]
[240.62361145 112.80019379]
[265.29412842 122.10958099]
[281.04528809 143.15254211]
[295.73538208 140.11927795]
[310.42550659 137.08601379]
[325.11560059 134.05274963]
[339.80572510 131.01948547]
[354.49581909 127.98622131]
[369.18594360 124.95295715]
[381.07012939 113.65260315]
[396.71987915 118.55332184]
[400.03607178 134.61367798]
[387.60729980 145.31214905]
[372.21920776 139.64306641]
[357.52908325 142.67633057]
[342.83898926 145.70959473]
[328.14886475 148.74285889]
[313.45877075 151.77612305]
[298.76864624 154.80938721]
[284.07855225 157.84265137]
[283.89523315 164.71472168]
[282.70846558 171.48988342]
[280.54263306 178.02232361]
[277.44323730 184.17127991]
[273.47589111 189.80409241]
[268.72500610 194.79904175]
[263.29183960 199.04800415]
[257.29248047 202.45878601]
[250.85537720 204.95709229]
[244.11845398 206.48822021]
[237.22627258 207.01814270]
[230.32688904 206.53437805]
[223.56867981 205.04621887]
[217.09713745 202.58456421]
[211.05174255 199.20127869]
[205.56298828 194.96812439]
[200.74954224 189.97518921]
[196.71563721 184.32904053]
[193.54888916 178.15037537]
[191.31837463 171.57148743]
[190.07304382 164.73344421]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 65]
[2 64]
[7 63]
[8 62]
[9 61]
[10 60]
[11 59]
[13 57]
[14 56]
[15 55]
[16 54]
[21 53]
[22 52]
[23 51]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[35 44]
[36 43]
[37 42]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
