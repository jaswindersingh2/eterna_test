%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGAUGCUGCAAAGGAGGAUCACGAUGCUGGGAAAACGAGGAUCAGAUGCUGCGAAAGGAGGAUCGAUCUUGUUCGCAAGAUCAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[169.16195679 229.90438843]
[177.91560364 217.72352600]
[189.02665710 207.64659119]
[202.00205994 200.12071228]
[216.26608276 195.47984314]
[231.18922424 193.92991638]
[218.65690613 185.68728638]
[206.12458801 177.44465637]
[191.23939514 176.91531372]
[183.96122742 162.86758423]
[171.42890930 154.62495422]
[156.54371643 154.09561157]
[149.26556396 140.04788208]
[134.17832947 146.33384705]
[118.14344025 142.40351868]
[107.46154022 129.59944153]
[106.44927979 112.78992462]
[92.48026276 112.19134521]
[85.67607117 99.97682190]
[72.90932465 92.10217285]
[57.10186386 91.44275665]
[50.33137512 78.17588806]
[37.56462479 70.30123901]
[24.79787445 62.42658997]
[11.98707294 64.63281250]
[1.47958720 57.68561554]
[-1.32163906 45.81818390]
[-13.85395622 37.57555008]
[-26.38627243 29.33291435]
[-42.16786575 28.21401596]
[-48.54962921 14.75584507]
[-61.08194733 6.51321077]
[-76.86354065 5.39431190]
[-83.24530029 -8.06385803]
[-99.18444824 -6.24089241]
[-110.44541931 -17.66761589]
[-108.38977051 -33.57842636]
[-94.59441376 -41.76791000]
[-79.64196777 -35.95379639]
[-75.00267029 -20.59617615]
[-60.11747360 -20.06684494]
[-52.83931351 -6.01910639]
[-40.30699539 2.22352815]
[-25.42179871 2.75285816]
[-18.14363861 16.80059624]
[-5.61132145 25.04323196]
[6.92099571 33.28586578]
[24.40342712 33.28763962]
[32.67252350 49.65983963]
[45.43927383 57.53448868]
[58.20602417 65.40914154]
[73.10031891 65.50531006]
[80.78397369 79.33542633]
[93.55072021 87.21007538]
[107.51973724 87.80865479]
[114.32392883 100.02317810]
[126.73391724 93.82613373]
[140.47434998 94.60479736]
[151.92237854 102.04566956]
[158.11334229 114.09299469]
[157.50819397 127.51556396]
[173.28977966 128.63446045]
[179.67155457 142.09263611]
[192.20387268 150.33526611]
[207.98545837 151.45416260]
[214.36721802 164.91233826]
[226.89953613 173.15496826]
[239.43185425 181.39759827]
[254.16452026 184.21688843]
[268.85464478 181.18362427]
[283.54473877 178.15036011]
[298.23486328 175.11709595]
[312.92495728 172.08383179]
[327.61508179 169.05058289]
[342.30517578 166.01731873]
[354.18936157 154.71696472]
[369.83914185 159.61767578]
[373.15533447 175.67802429]
[360.72653198 186.37649536]
[345.33843994 180.70742798]
[330.64834595 183.74069214]
[315.95822144 186.77394104]
[301.26812744 189.80720520]
[286.57800293 192.84046936]
[271.88790894 195.87373352]
[257.19778442 198.90699768]
[270.49148560 205.85523987]
[282.03472900 215.43402100]
[291.31536865 227.21833801]
[297.92156982 240.68525696]
[301.56021118 255.23724365]
[302.06982422 270.22857666]
[299.42782593 284.99407959]
[293.75140381 298.87854004]
[285.29248047 311.26589966]
[274.42636108 321.60647583]
[261.63525391 329.44143677]
[247.48664856 334.42315674]
[232.60841370 336.33056641]
[217.66072083 335.07901001]
[203.30682373 330.72406006]
[190.18365479 323.45892334]
[178.87350464 313.60595703]
[169.87823486 301.60241699]
[163.59698486 287.98089600]
[160.30848694 273.34579468]
[160.15864563 258.34655762]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 68]
[7 67]
[8 66]
[10 64]
[11 63]
[13 61]
[17 56]
[19 54]
[20 53]
[22 51]
[23 50]
[24 49]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[34 40]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
