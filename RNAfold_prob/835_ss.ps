%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAUCCACGAAAAAGGGAAAAGGCCACCGAAAGAGUGAAGCCAGGCGAAAGACCAAGCAAAAAGUAGCGGUUCGCCGCUACAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[136.93594360 167.00273132]
[134.85456848 158.84774780]
[133.82215881 150.49298096]
[133.85581970 142.07279968]
[134.95550537 133.72271729]
[137.10398865 125.57720947]
[123.50936890 119.23793793]
[103.08740997 130.22013855]
[80.86656952 123.59449768]
[68.83471680 132.55187988]
[56.80287170 141.50926208]
[51.68688583 149.26795959]
[44.28828812 150.54612732]
[41.79107285 166.15188599]
[28.94152069 175.35321045]
[13.36304379 172.69114685]
[4.29807568 159.74502563]
[7.12470150 144.19557190]
[20.16593361 135.26799011]
[35.68464279 138.25885010]
[47.84548950 129.47740173]
[59.87733841 120.52002716]
[71.90918732 111.56265259]
[70.28856659 106.32608032]
[69.63541412 100.88352203]
[69.97100067 95.41218567]
[71.28440094 90.09024811]
[58.75208664 81.84761047]
[46.21976852 73.60498047]
[33.45301819 65.73033142]
[20.46263885 58.23032761]
[7.47225761 50.73032761]
[-5.62582874 43.42005157]
[-21.99337578 44.43761444]
[-30.83166695 30.62397385]
[-23.04862595 16.18942261]
[-6.65077782 15.98298740]
[1.49317670 30.21703148]
[8.99013615 30.62762833]
[14.97225761 37.73994827]
[27.96263885 45.23994827]
[40.95301819 52.73994827]
[45.85500336 52.34046173]
[51.03342056 55.12611771]
[54.46240616 61.07266235]
[66.99472046 69.31529236]
[79.52703857 77.55792999]
[85.58285522 73.26174164]
[92.50000000 70.56297302]
[92.50000000 55.56297302]
[92.28184509 40.56455612]
[83.21683502 26.89862633]
[90.76065063 12.33762169]
[107.15286255 11.86065769]
[115.53056335 25.95839310]
[107.27549744 40.12828827]
[110.66838837 46.82614136]
[107.50000000 55.56297302]
[107.50000000 70.56297302]
[120.75530243 77.81878662]
[128.87457275 90.56349182]
[129.84864807 105.64331818]
[143.44326782 111.98258972]
[160.34281921 93.54244995]
[182.84280396 82.67738342]
[207.73963928 80.91245270]
[231.49650574 88.47859192]
[250.74592590 104.28256989]
[262.76696777 126.06494904]
[277.45709229 123.03168488]
[292.14718628 119.99842072]
[306.83731079 116.96515656]
[321.52740479 113.93189240]
[336.21752930 110.89862823]
[350.90762329 107.86536407]
[362.79180908 96.56501007]
[378.44158936 101.46572876]
[381.75778198 117.52608490]
[369.32897949 128.22454834]
[353.94088745 122.55547333]
[339.25079346 125.58873749]
[324.56066895 128.62200928]
[309.87057495 131.65527344]
[295.18045044 134.68853760]
[280.49035645 137.72180176]
[265.80023193 140.75505066]
[266.03506470 149.12388611]
[265.20828247 157.45703125]
[263.33270264 165.62031555]
[260.43804932 173.48225403]
[256.57043457 180.91616821]
[251.79165649 187.80216980]
[246.17825317 194.02919006]
[239.82019043 199.49665833]
[232.81947327 204.11624146]
[225.28849792 207.81315613]
[217.34825134 210.52749634]
[209.12635803 212.21511841]
[200.75505066 212.84835815]
[192.36900330 212.41654968]
[184.10322571 210.92616272]
[176.09080505 208.40071106]
[168.46084595 204.88035583]
[161.33634949 200.42131042]
[154.83224487 195.09492493]
[149.05348206 188.98655701]
[144.09344482 182.19416809]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 63]
[7 62]
[9 23]
[10 22]
[11 21]
[13 20]
[27 47]
[28 46]
[29 45]
[30 42]
[31 41]
[32 40]
[33 38]
[49 59]
[50 58]
[51 56]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
