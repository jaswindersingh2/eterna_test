%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:14:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCGCGCGGCGCAAAAGCGAAAAGCGCGCGGCGGAAACGCGGCGCGAGCGCGCGGCGCGAAGACGCCUGGCUUCGGCCGGGCAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[244.22381592 229.52169800]
[241.52874756 221.59315491]
[239.83245850 213.39086914]
[239.16130066 205.04016113]
[239.52597046 196.66870117]
[240.92134094 188.40449524]
[243.32650757 180.37399292]
[229.92202759 173.64199829]
[216.51753235 166.91001892]
[203.11303711 160.17802429]
[189.70855713 153.44604492]
[174.86254883 154.64836121]
[166.00276184 141.54054260]
[152.59826660 134.80856323]
[139.19378662 128.07656860]
[125.78929138 121.34458160]
[114.81765747 131.38227844]
[100.10233307 135.93254089]
[84.32530975 133.69311523]
[70.56632233 124.64469910]
[61.70228958 110.13825989]
[46.80371475 111.87965393]
[35.76539993 123.52161407]
[19.79403687 122.00665283]
[11.14148808 108.49691772]
[16.44524765 93.35591888]
[31.63672638 88.19854736]
[45.06232071 96.98107910]
[59.96089554 95.23968506]
[64.47148132 80.93392944]
[53.26610565 70.96199799]
[42.06072998 60.99005890]
[30.85535431 51.01811981]
[15.40255451 47.62377930]
[11.03868866 33.38278580]
[-0.16668713 23.41084671]
[-11.37206364 13.43890762]
[-27.53308678 10.65442467]
[-32.94749451 -4.82511711]
[-22.04541016 -17.07569122]
[-6.04196167 -13.49495792]
[-1.40012527 2.23353195]
[9.80525112 12.20547009]
[21.01062775 22.17740822]
[35.66194153 24.85848808]
[40.82729340 39.81274414]
[52.03266907 49.78467941]
[63.23804474 59.75661850]
[74.44342041 69.72855377]
[92.41608429 62.36774445]
[111.10303497 64.53671265]
[125.91879272 75.11277008]
[133.51293945 90.98372650]
[132.52128601 107.94009399]
[145.92576599 114.67208099]
[159.33026123 121.40406799]
[172.73475647 128.13604736]
[188.53953552 127.41525269]
[196.44053650 140.04154968]
[209.84503174 146.77354431]
[223.24952698 153.50552368]
[236.65400696 160.23751831]
[250.05850220 166.96949768]
[267.58276367 148.76922607]
[290.53231812 138.26385498]
[315.70907593 136.89653015]
[339.61230469 144.83837891]
[358.92520142 160.96745300]
[370.97525024 183.02714539]
[385.66537476 179.99388123]
[400.35546875 176.96061707]
[415.04559326 173.92735291]
[429.73568726 170.89408875]
[444.42581177 167.86082458]
[459.11590576 164.82756042]
[471.00012207 153.52720642]
[486.64987183 158.42791748]
[489.96606445 174.48828125]
[477.53729248 185.18675232]
[462.14916992 179.51766968]
[447.45907593 182.55093384]
[432.76895142 185.58419800]
[418.07885742 188.61746216]
[403.38873291 191.65072632]
[388.69863892 194.68399048]
[374.00851440 197.71725464]
[374.27465820 206.04626465]
[373.51062012 214.34622192]
[371.72772217 222.49017334]
[368.95272827 230.35348511]
[365.22769165 237.81578064]
[360.60916138 244.76275635]
[355.16741943 251.08796692]
[348.98529053 256.69439697]
[342.15707397 261.49603271]
[334.78686523 265.41903687]
[326.98718262 268.40307617]
[318.87713623 270.40209961]
[310.58062744 271.38513184]
[302.22442627 271.33666992]
[293.93630981 270.25708008]
[285.84310913 268.16238403]
[278.06866455 265.08422852]
[270.73199463 261.06921387]
[263.94549561 256.17840576]
[257.81317139 250.48617554]
[252.42913818 244.07929993]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 63]
[8 62]
[9 61]
[10 60]
[11 59]
[13 57]
[14 56]
[15 55]
[16 54]
[21 29]
[22 28]
[30 49]
[31 48]
[32 47]
[33 46]
[35 44]
[36 43]
[37 42]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
