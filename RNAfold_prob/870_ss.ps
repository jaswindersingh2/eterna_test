%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGAAGGACGAGAAAGCCGAAAGCGCGCGGAGACAGCGAACGCACGCGAAAGACGGACCAAAAAGGGUGGCUUCGGCCGCCCAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[172.88871765 317.46865845]
[163.89259338 312.82974243]
[155.36491394 307.37634277]
[147.37919617 301.15536499]
[140.00433350 294.22033691]
[133.30390930 286.63092041]
[127.33576965 278.45245361]
[122.15140533 269.75534058]
[117.79557800 260.61450195]
[114.30591583 251.10859680]
[111.71258545 241.31953430]
[110.03802490 231.33161926]
[109.29677582 221.23091125]
[109.49531555 211.10443115]
[110.63204956 201.03944397]
[112.69728088 191.12268066]
[115.67330933 181.43959045]
[119.53459930 172.07366943]
[124.24797058 163.10563660]
[129.77290344 154.61283875]
[136.06187439 146.66847229]
[125.45527649 136.06187439]
[114.84867096 125.45527649]
[96.85720825 129.30148315]
[80.09066010 121.72722626]
[71.08393097 105.68463135]
[73.34744263 87.42640686]
[61.85677719 77.78459167]
[50.36610794 68.14277649]
[34.82112122 65.19931030]
[30.04490852 51.09126282]
[18.55424118 41.44944763]
[7.06357431 31.80763435]
[-7.07211781 37.67626190]
[-22.31489372 36.29194260]
[-35.16207886 27.97277832]
[-42.66147614 14.63045502]
[-43.08978653 -0.66905934]
[-36.34858704 -14.41004848]
[-23.98695183 -23.43493462]
[-8.84549522 -25.66986275]
[5.59638453 -20.60126495]
[16.02005196 -9.39386749]
[20.03022194 5.37695169]
[16.70538902 20.31696701]
[28.19605446 29.95878220]
[39.68672180 39.60059738]
[54.40981674 41.85441208]
[60.00792313 56.65210724]
[71.49858856 66.29392242]
[82.98925781 75.93573761]
[93.35073853 71.29039764]
[104.69943237 70.90756989]
[115.35040283 74.84410095]
[123.72229767 82.51552582]
[128.57214355 92.78287506]
[129.17988586 104.12175751]
[125.45527649 114.84867096]
[136.06187439 125.45527649]
[146.66847229 136.06187439]
[166.74441528 122.22290802]
[189.38578796 113.18875122]
[213.46148682 109.40767670]
[237.76940918 111.06559753]
[261.09649658 118.07692719]
[282.27926636 130.08900452]
[300.26187134 146.49978638]
[314.14868164 166.48811340]
[323.24890137 189.05468750]
[337.93902588 186.02142334]
[352.62911987 182.98815918]
[367.31924438 179.95489502]
[382.00933838 176.92163086]
[396.69946289 173.88836670]
[411.38955688 170.85510254]
[423.27377319 159.55474854]
[438.92352295 164.45547485]
[442.23971558 180.51582336]
[429.81094360 191.21429443]
[414.42282104 185.54521179]
[399.73272705 188.57847595]
[385.04260254 191.61174011]
[370.35250854 194.64500427]
[355.66238403 197.67826843]
[340.97229004 200.71153259]
[326.28216553 203.74479675]
[327.17926025 213.81384277]
[327.13885498 223.92326355]
[326.16113281 233.98591614]
[324.25448608 243.91511536]
[321.43518066 253.62527466]
[317.72747803 263.03268433]
[313.16314697 272.05627441]
[307.78149414 280.61825562]
[301.62878418 288.64474487]
[294.75793457 296.06655884]
[287.22805786 302.81967163]
[279.10400391 308.84579468]
[270.45571899 314.09295654]
[261.35763550 318.51580811]
[251.88812256 322.07620239]
[242.12872314 324.74334717]
[232.16351318 326.49414062]
[222.07832336 327.31341553]
[211.96008301 327.19400024]
[201.89593506 326.13684082]
[191.97264099 324.15090942]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[21 60]
[22 59]
[23 58]
[27 51]
[28 50]
[29 49]
[31 47]
[32 46]
[33 45]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
