%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAACAACAAGUAGAAAACUACAGUGAAGACAAACUGACAAAAGACAGAGUCAACACAAGUUGAUUCUAACUUCGGUUAGAAAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[43.41650009 394.37710571]
[32.07405472 396.38894653]
[20.59092331 397.29598999]
[9.07445335 397.08993530]
[-2.36771631 395.77282715]
[-13.62864971 393.35705566]
[-24.60311699 389.86532593]
[-35.18857193 385.33038330]
[-45.28612137 379.79470825]
[-54.80143356 373.31015015]
[-63.64564133 365.93740845]
[-71.73614502 357.74548340]
[-78.99739838 348.81103516]
[-85.36163330 339.21762085]
[-90.76944733 329.05499268]
[-104.70966339 334.59310913]
[-118.64987183 340.13119507]
[-132.59008789 345.66928101]
[-142.33145142 358.86163330]
[-158.59445190 356.75289917]
[-164.64912415 341.51242065]
[-154.26692200 328.81823730]
[-138.12817383 331.72906494]
[-124.18796539 326.19097900]
[-110.24774933 320.65289307]
[-96.30754089 315.11480713]
[-101.00160980 294.98547363]
[-102.14432526 274.34457397]
[-99.70018005 253.81385803]
[-93.74172211 234.01205444]
[-84.44743347 215.53611755]
[-72.09636688 198.94316101]
[-57.05978012 184.73377991]
[-39.78996658 173.33689880]
[-20.80664253 165.09678650]
[-0.68133193 160.26272583]
[19.97986412 158.98139954]
[40.55450821 161.29252625]
[60.42258072 167.12753296]
[66.76185608 153.53291321]
[73.10112762 139.93829346]
[79.44040680 126.34368134]
[85.77967834 112.74906921]
[80.92272949 99.09783173]
[87.04626465 85.96586609]
[100.62570190 80.91165924]
[106.96498108 67.31703949]
[113.30425262 53.72242737]
[108.13549805 39.02815247]
[114.75807953 25.33158112]
[128.79867554 20.49451828]
[135.13795471 6.89990139]
[141.47723389 -6.69471550]
[147.81649780 -20.28933144]
[154.15577698 -33.88394928]
[160.49505615 -47.47856522]
[166.83432007 -61.07318115]
[173.17359924 -74.66780090]
[179.51287842 -88.26241302]
[177.54534912 -104.54310608]
[190.82171631 -114.16963959]
[205.68438721 -107.23905945]
[206.84391785 -90.88095093]
[193.10748291 -81.92314148]
[186.76821899 -68.32852936]
[180.42893982 -54.73390961]
[174.08966064 -41.13929367]
[167.75039673 -27.54467583]
[161.41111755 -13.95005798]
[155.07183838 -0.35544163]
[148.73257446 13.23917484]
[142.39329529 26.83379173]
[147.71301270 40.69871902]
[141.47775269 54.57589722]
[126.89887238 60.06169891]
[120.55959320 73.65631866]
[114.22032166 87.25093079]
[119.07727051 100.90216827]
[112.95373535 114.03413391]
[99.37429810 119.08834076]
[93.03501892 132.68295288]
[86.69574738 146.27757263]
[80.35647583 159.87219238]
[74.01719666 173.46681213]
[83.86162567 179.47703552]
[93.07918549 186.40948486]
[101.58380127 194.19921875]
[109.29605103 202.77339172]
[116.14393616 212.05175781]
[122.06353760 221.94754028]
[126.99961853 232.36819458]
[130.90615845 243.21623230]
[133.74673462 254.39025879]
[135.49490356 265.78579712]
[136.13444519 277.29629517]
[135.65950012 288.81417847]
[134.07461548 300.23178101]
[131.39471436 311.44244385]
[127.64496613 322.34133911]
[122.86050415 332.82666016]
[117.08617401 342.80047607]
[110.37602997 352.16958618]
[102.79288483 360.84649658]
[94.40771484 368.75018311]
[85.29895782 375.80685425]
[75.55183411 381.95062256]
[65.25749969 387.12417603]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 26]
[16 25]
[17 24]
[18 23]
[39 84]
[40 83]
[41 82]
[42 81]
[43 80]
[46 77]
[47 76]
[48 75]
[51 72]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
