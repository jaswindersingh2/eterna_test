%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACUGUACCUCAGCCAACAGGCGACAAUAGUCGAGAACAGAUUACAAAAGUAAUCGUAUAGACAGAUUCAGUUCGCUGGAUCAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[119.06076050 180.82360840]
[124.90306091 167.00811768]
[133.38862610 154.63900757]
[144.17507935 144.21534729]
[156.82714844 136.15774536]
[170.83435059 130.79132080]
[185.63696289 128.33227539]
[172.64659119 120.83227539]
[159.65620422 113.33227539]
[146.66583252 105.83227539]
[133.67544556 98.33227539]
[120.68506622 90.83227539]
[125.07289124 101.91186523]
[123.30078125 114.91530609]
[114.68603516 126.37237549]
[100.48435974 132.70225525]
[83.78081512 131.26982117]
[69.54217529 135.98799133]
[55.30353165 140.70616150]
[44.81158829 153.30976868]
[28.69870567 150.25901794]
[23.54043961 134.69224548]
[34.64316940 122.62322235]
[50.58536148 126.46752167]
[64.82399750 121.74935150]
[79.06263733 117.03118134]
[78.62636566 102.03752136]
[64.13748169 98.15523529]
[49.64859390 94.27294922]
[33.95690155 99.03770447]
[22.17120361 87.63465881]
[26.41561508 71.79430389]
[42.32384872 67.81182861]
[53.53087997 79.78406525]
[68.01976776 83.66635132]
[82.50865173 87.54863739]
[88.11134338 82.56266785]
[77.25741577 72.20929718]
[64.87927246 63.73690033]
[68.42857361 49.16286850]
[83.31626129 47.33069611]
[90.29341888 60.60823822]
[99.31671906 72.59072876]
[104.91941071 67.60475922]
[102.74542999 52.76313782]
[100.57144928 37.92151260]
[98.39747620 23.07988739]
[96.22349548 8.23826218]
[94.04951477 -6.60336208]
[83.45928955 -19.12450600]
[89.26166534 -34.46283722]
[105.48766327 -36.83959579]
[115.44536591 -23.80977631]
[108.89114380 -8.77733994]
[111.06511688 6.06428480]
[113.23909760 20.90590858]
[115.41307831 35.74753571]
[117.58705139 50.58915710]
[119.76103210 65.43078613]
[128.18505859 77.84189606]
[141.17544556 85.34189606]
[154.16583252 92.84189606]
[167.15620422 100.34189606]
[180.14659119 107.84189606]
[193.13696289 115.34189606]
[194.04812622 100.36959076]
[207.88319397 94.57384491]
[219.19383240 104.42623138]
[215.34962463 118.92630005]
[230.03973389 115.89303589]
[244.72984314 112.85977173]
[259.41995239 109.82650757]
[274.11004639 106.79324341]
[288.80017090 103.75997925]
[303.49026489 100.72671509]
[315.37448120 89.42636108]
[331.02423096 94.32707977]
[334.34042358 110.38743591]
[321.91165161 121.08590698]
[306.52352905 115.41682434]
[291.83343506 118.45008850]
[277.14331055 121.48335266]
[262.45321655 124.51661682]
[247.76310730 127.54988098]
[233.07299805 130.58314514]
[218.38288879 133.61640930]
[231.65609741 140.60368347]
[243.26504517 150.10275269]
[252.74131775 161.73031616]
[259.70254517 175.01719666]
[263.86782837 189.42727661]
[265.06909180 204.37910461]
[263.25790405 219.26934814]
[258.50729370 233.49720764]
[251.00898743 246.48855591]
[241.06553650 257.71920776]
[229.07814026 266.73602295]
[215.53053284 273.17510986]
[200.96932983 276.77670288]
[185.98208618 277.39544678]
[171.17356873 275.00637817]
[157.14128113 269.70593262]
[144.45143127 261.70794678]
[133.61607361 251.33512878]
[125.07241821 239.00607300]
[119.16518402 225.21823120]
[116.13275146 210.52793884]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[17 26]
[18 25]
[19 24]
[27 36]
[28 35]
[29 34]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
