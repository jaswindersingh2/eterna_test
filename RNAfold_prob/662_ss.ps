%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGAAGACGGCCAUUCUAUCCCAGGCCCACCUCAAAUACCACACGAGGCCCUUCACGACCACAGCUAAACGAUUCGUCGUUUAAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[229.13975525 143.56675720]
[214.76991272 139.26470947]
[202.11933899 149.61366272]
[185.63085938 150.44729614]
[171.72544861 141.24473572]
[165.93469238 125.43171692]
[151.44580078 121.54943085]
[136.95692444 117.66714478]
[122.46803284 113.78485870]
[109.51366425 124.58302307]
[92.66508484 125.31864929]
[78.81889343 115.69062805]
[64.72351074 120.82092285]
[50.62811661 125.95122528]
[36.53273010 131.08152771]
[34.54726410 146.25770569]
[25.72701836 158.76618958]
[12.09881973 165.73258972]
[-3.20567060 165.55610657]
[-16.66959381 158.27726746]
[-25.19903946 145.56872559]
[-26.83400154 130.35078430]
[-21.19877815 116.12043762]
[-9.58830452 106.14770508]
[5.32942009 102.72424316]
[20.12640953 106.63674164]
[31.40242767 116.98614502]
[45.49781799 111.85584259]
[59.59320450 106.72554016]
[73.68859100 101.59523773]
[73.95364380 95.94756317]
[75.41697693 90.48633575]
[78.01126862 85.46278381]
[68.36946106 73.97211456]
[58.72764206 62.48144913]
[49.08583069 50.99078369]
[34.14581299 54.31561661]
[19.37499428 50.30544662]
[8.16759682 39.88177872]
[3.09899902 25.43989944]
[5.33392811 10.29844379]
[14.35881329 -2.06319141]
[28.09980202 -8.80439281]
[43.39931870 -8.37608242]
[56.74163818 -0.87668228]
[65.06080627 11.97050095]
[66.44512177 27.21327782]
[60.57649612 41.34896851]
[70.21830750 52.83963776]
[79.86012268 64.33029938]
[89.50193787 75.82096863]
[106.30710602 74.40595245]
[120.53058624 83.46731567]
[126.35031891 99.29597473]
[140.83920288 103.17826080]
[155.32809448 107.06054688]
[169.81698608 110.94283295]
[179.92828369 101.44690704]
[193.31480408 98.25205231]
[206.41595459 102.09700012]
[215.80204773 111.86262512]
[219.07196045 124.89485931]
[233.44180298 129.19691467]
[247.17819214 109.93968964]
[267.29086304 97.54883575]
[290.60671997 93.95066833]
[313.45849609 99.68656158]
[332.26138306 113.83170319]
[344.07543945 134.14405823]
[358.76556396 131.11079407]
[373.45565796 128.07752991]
[388.14578247 125.04426575]
[402.83587646 122.01100159]
[417.52600098 118.97773743]
[432.21609497 115.94447327]
[444.10031128 104.64411926]
[459.75006104 109.54483795]
[463.06625366 125.60518646]
[450.63745117 136.30366516]
[435.24935913 130.63458252]
[420.55926514 133.66784668]
[405.86914062 136.70111084]
[391.17904663 139.73437500]
[376.48892212 142.76763916]
[361.79882812 145.80090332]
[347.10870361 148.83416748]
[347.15646362 157.54177856]
[345.92703247 166.16534424]
[343.44607544 174.51849365]
[339.76632690 182.42053223]
[334.96646118 189.70043945]
[329.14944458 196.20046997]
[322.44021606 201.77963257]
[314.98312378 206.31677246]
[306.93881226 209.71311951]
[298.48062134 211.89451599]
[289.79107666 212.81295776]
[281.05770874 212.44775391]
[272.46923828 210.80589294]
[264.21130371 207.92198181]
[256.46255493 203.85746765]
[249.39077759 198.69934082]
[243.14923096 192.55831909]
[237.87335205 185.56639099]
[233.67778015 177.87403870]
[230.65393066 169.64698792]
[228.86795044 161.06262207]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[6 57]
[7 56]
[8 55]
[9 54]
[12 30]
[13 29]
[14 28]
[15 27]
[33 51]
[34 50]
[35 49]
[36 48]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
