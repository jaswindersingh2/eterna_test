%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGAAGUAGACUUACAACCAAAAGGAGCAAAAGCAAAGUAAAGAAACUACAAGGAAAACCAACCUGUGGGUUUCGACCCACAAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[16.97344017 199.32768250]
[15.92012215 184.36471558]
[17.59407043 169.45840454]
[21.93992424 155.10174561]
[28.81395531 141.76954651]
[37.98882675 129.90270996]
[49.16110992 119.89371490]
[61.96131516 112.07356262]
[75.96611023 106.70088959]
[90.70965576 103.95362091]
[76.33981323 99.65157318]
[61.96997452 95.34952545]
[47.60013199 91.04747772]
[28.35766411 96.69721985]
[15.48534203 82.39210510]
[0.88966942 78.93286896]
[-13.70600319 75.47362518]
[-28.35044289 72.22703552]
[-43.04055405 69.19377136]
[-53.44629288 84.31205750]
[-73.54621887 90.32182312]
[-95.47267151 81.54570770]
[-110.41558838 82.85304260]
[-123.53131866 92.69731903]
[-138.50631714 86.01290894]
[-139.93560791 69.67616272]
[-126.34883881 60.49292755]
[-111.72292328 67.91012573]
[-96.78000641 66.60278320]
[-95.47764587 59.21672821]
[-91.57056427 37.05855560]
[-105.16517639 30.71928024]
[-121.44586945 32.68680954]
[-131.07240295 19.41043854]
[-124.14181519 4.54776430]
[-107.78371429 3.38822889]
[-98.82590485 17.12466431]
[-85.23128510 23.46393776]
[-66.72237396 21.41328621]
[-51.03358841 28.16686821]
[-41.69506836 40.59267426]
[-40.00728989 54.50366211]
[-25.31718063 57.53692627]
[-18.01741219 55.78012085]
[-10.24676514 60.87795639]
[4.34890747 64.33719635]
[18.94458008 67.79643250]
[27.29130554 61.57959366]
[37.90750885 61.05671692]
[47.20453262 66.65144348]
[51.90217972 76.67763519]
[66.27201843 80.97968292]
[80.64186859 85.28173065]
[95.01171112 89.58377838]
[91.26129150 80.43875885]
[87.99458313 71.09410095]
[95.11358643 57.89107513]
[102.23258972 44.68805695]
[95.39048004 30.76091957]
[98.07443237 15.47772408]
[109.25240326 4.71517181]
[124.62624359 2.61168361]
[138.28439331 9.97609329]
[144.97502136 23.97663498]
[142.12544250 39.22981644]
[130.83135986 49.87047577]
[115.43561554 51.80706024]
[108.31660461 65.01008606]
[101.19760132 78.21310425]
[110.15498352 90.24494934]
[124.84509277 87.21168518]
[139.53520203 84.17842102]
[154.22531128 81.14515686]
[168.91542053 78.11190033]
[183.60552979 75.07863617]
[195.48971558 63.77827835]
[211.13948059 68.67900085]
[214.45567322 84.73934937]
[202.02688599 95.43782043]
[186.63879395 89.76874542]
[171.94868469 92.80200958]
[157.25857544 95.83526611]
[142.56846619 98.86853027]
[127.87835693 101.90179443]
[113.18824768 104.93505859]
[127.63876343 108.95780945]
[141.12179565 115.53107452]
[153.19142151 124.43747711]
[163.44850159 135.38244629]
[171.55378723 148.00402832]
[177.23922729 161.88479614]
[180.31680298 176.56568909]
[180.68472290 191.56118774]
[178.33081055 206.37533569]
[173.33294678 220.51821899]
[165.85638428 233.52210999]
[156.14840698 244.95693970]
[144.53007507 254.44451904]
[131.38563538 261.67111206]
[117.14978027 266.39767456]
[102.29332733 268.46792603]
[87.30761719 267.81341553]
[72.68824768 264.45571899]
[58.91870880 258.50595093]
[46.45439148 250.16084290]
[35.70750809 239.69639587]
[27.03348541 227.45869446]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 54]
[11 53]
[12 52]
[13 51]
[15 47]
[16 46]
[17 45]
[18 43]
[19 42]
[22 29]
[23 28]
[31 38]
[32 37]
[56 69]
[57 68]
[58 67]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
