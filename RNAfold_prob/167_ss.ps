%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:14:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAACCACAGCAGGCCGAGUCAAAGGACGAAAGUACCGGAGUCAGGGCGAGCUGGAGGAAAAAACUGGGCAUUCGUGUCCAGAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[250.38961792 251.47413635]
[246.18737793 243.52392578]
[242.94581604 235.13452148]
[240.70994568 226.42155457]
[239.51095581 217.50515747]
[239.36567688 208.50827026]
[240.27647400 199.55502319]
[242.23107910 190.76898193]
[245.20288086 182.27140808]
[231.99984741 175.15240479]
[214.58378601 176.67433167]
[204.91923523 161.08512878]
[191.51473999 154.35313416]
[178.11026001 147.62115479]
[164.70576477 140.88916016]
[150.69198608 145.80337524]
[137.00201416 139.16712952]
[131.94256592 124.43486786]
[118.53807831 117.70288086]
[105.13358307 110.97089386]
[91.53897095 104.63162231]
[77.76572418 98.69042206]
[62.02959824 100.32897186]
[53.40779877 88.18344116]
[39.63455963 82.24224091]
[29.59123993 86.90316010]
[18.87308502 85.21295929]
[11.07670116 77.98844910]
[8.67884445 67.86090088]
[-4.72564459 61.12891769]
[-18.22662544 54.59259415]
[-31.82124329 48.25331879]
[-48.10193253 50.22084808]
[-57.72846222 36.94448090]
[-50.79788208 22.08180428]
[-34.43978119 20.92226791]
[-25.48196793 34.65870285]
[-11.88735199 40.99797821]
[-4.37920237 40.97196960]
[2.00634289 47.72442627]
[15.41083241 54.45641327]
[34.46675491 51.77222824]
[45.57575607 68.46900177]
[59.34899521 74.41019440]
[74.09996796 72.34670258]
[83.70692444 84.91718292]
[97.48016357 90.85837555]
[102.83153534 90.03526306]
[108.23560333 92.35668945]
[111.86557007 97.56640625]
[125.27006531 104.29839325]
[138.67454529 111.03038025]
[153.51293945 106.29119110]
[167.01110840 113.30933380]
[171.43774414 127.48468018]
[184.84223938 134.21665955]
[198.24673462 140.94865417]
[211.65121460 147.68063354]
[224.22099304 144.36627197]
[235.29397583 150.37124634]
[239.11885071 161.94938660]
[252.32188416 169.06838989]
[269.10714722 151.23501587]
[290.64691162 139.61650085]
[314.73571777 135.39045715]
[338.91085815 138.97816467]
[360.70422363 150.00262451]
[377.89416504 167.32814026]
[388.73217773 189.17730713]
[403.42230225 186.14404297]
[418.11239624 183.11077881]
[432.80252075 180.07751465]
[447.49261475 177.04426575]
[462.18273926 174.01100159]
[476.87283325 170.97773743]
[488.75701904 159.67738342]
[504.40679932 164.57809448]
[507.72299194 180.63844299]
[495.29418945 191.33691406]
[479.90609741 185.66784668]
[465.21600342 188.70111084]
[450.52587891 191.73437500]
[435.83578491 194.76762390]
[421.14566040 197.80088806]
[406.45556641 200.83415222]
[391.76544189 203.86741638]
[392.19271851 212.81765747]
[391.56750488 221.75764465]
[389.89807129 230.56401062]
[387.20718384 239.11523438]
[383.53161621 247.29321289]
[378.92178345 254.98500061]
[373.44100952 262.08432007]
[367.16464233 268.49301147]
[360.17904663 274.12246704]
[352.58038330 278.89471436]
[344.47332764 282.74368286]
[335.96954346 285.61596680]
[327.18627930 287.47161865]
[318.24462891 288.28472900]
[309.26791382 288.04376221]
[300.38000488 286.75167847]
[291.70358276 284.42602539]
[283.35836792 281.09857178]
[275.45968628 276.81488037]
[268.11660767 271.63375854]
[261.43066406 265.62646484]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 62]
[10 61]
[12 58]
[13 57]
[14 56]
[15 55]
[18 52]
[19 51]
[20 50]
[21 47]
[22 46]
[24 44]
[25 43]
[29 41]
[30 40]
[31 38]
[32 37]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
