%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGAAGCGCAGCGCGAAGCAAAAGCACGUAAUCGAAACGACGCAAAGCGCAAGGAAAUCCAACCGCCCGGGUUCGCCCGGGCAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[360.25772095 180.29010010]
[346.01907349 175.57192993]
[331.78042603 170.85375977]
[321.66381836 182.95817566]
[307.65740967 190.29939270]
[291.87084961 191.73861694]
[276.69461060 187.02850342]
[264.43795776 176.85514832]
[256.97760010 162.73818970]
[255.47036743 146.80398560]
[241.10052490 142.50192261]
[226.73068237 138.19987488]
[212.36083984 133.89782715]
[194.06053162 139.85026550]
[180.22093201 125.33621216]
[165.62525940 121.87697601]
[151.02958679 118.41773224]
[136.38514709 115.17114258]
[121.69503784 112.13787842]
[111.87874603 126.92572784]
[92.25756836 133.10617065]
[70.39732361 124.72405243]
[55.45440292 126.03138733]
[42.33867645 135.87565613]
[27.36367226 129.19125366]
[25.93439293 112.85450745]
[39.52115631 103.67127228]
[54.14706802 111.08846283]
[69.08998871 109.78112793]
[70.39234924 102.39507294]
[74.29943085 80.23690033]
[60.70481491 73.89762115]
[44.42412567 75.86515045]
[34.79759598 62.58878326]
[41.72817612 47.72610855]
[58.08627701 46.56657028]
[67.04409027 60.30300522]
[80.63871002 66.64228058]
[99.03607941 64.87126923]
[114.39212799 71.73912048]
[123.32543945 83.99739838]
[124.72829437 97.44776917]
[139.41841125 100.48103333]
[148.61544800 99.14484406]
[154.48881531 103.82205963]
[169.08448792 107.28130341]
[183.68016052 110.74053955]
[192.76155090 104.40642548]
[203.61036682 104.20976257]
[212.54283142 109.97068787]
[216.66288757 119.52799225]
[231.03273010 123.83003998]
[245.40257263 128.13208008]
[259.77243042 132.43414307]
[268.49841309 121.07690430]
[280.56549072 113.41813660]
[294.49826050 110.36985779]
[308.60156250 112.28186035]
[321.16671753 118.90173340]
[330.67852783 129.40792847]
[335.99798584 142.51168823]
[336.49859619 156.61511230]
[350.73724365 161.33328247]
[364.97589111 166.05145264]
[381.01818848 146.89819336]
[403.92681885 137.05047607]
[428.76666260 138.58215332]
[450.20812988 151.12074280]
[463.67041016 171.93685913]
[478.36053467 168.90359497]
[493.05062866 165.87033081]
[507.74075317 162.83706665]
[522.43084717 159.80380249]
[537.12097168 156.77053833]
[551.81109619 153.73727417]
[563.69525146 142.43692017]
[579.34503174 147.33763123]
[582.66125488 163.39797974]
[570.23242188 174.09646606]
[554.84436035 168.42738342]
[540.15423584 171.46064758]
[525.46411133 174.49391174]
[510.77401733 177.52717590]
[496.08389282 180.56044006]
[481.39379883 183.59370422]
[466.70367432 186.62696838]
[466.64193726 194.48822021]
[465.42755127 202.25874329]
[463.08578491 209.77037048]
[459.66632080 216.86039734]
[455.24224854 223.37509155]
[449.90835571 229.17304993]
[443.77929688 234.12825012]
[436.98696899 238.13279724]
[429.67773438 241.09922791]
[422.00921631 242.96252441]
[414.14706421 243.68144226]
[406.26110840 243.23944092]
[398.52197266 241.64511108]
[391.09713745 238.93196106]
[384.14749146 235.15771484]
[377.82379150 230.40315247]
[372.26333618 224.77026367]
[367.58706665 218.38015747]
[363.89685059 211.37040710]
[361.27337646 203.89213562]
[359.77426147 196.10670471]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[10 54]
[11 53]
[12 52]
[13 51]
[15 47]
[16 46]
[17 45]
[18 43]
[19 42]
[22 29]
[23 28]
[31 38]
[32 37]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
