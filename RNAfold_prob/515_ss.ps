%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGAAUUACCUGGCAAAGUAAGCAGCAAAAGCAGCUUACUCAAAAAAGAAAAGCCAGGAUAAUUCUAUUUGGUUCGCCAAAUAAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[124.74213409 184.08216858]
[135.85317993 174.00521851]
[148.82858276 166.47935486]
[163.09260559 161.83848572]
[178.01574707 160.28855896]
[165.48342896 152.04591370]
[152.95111084 143.80328369]
[140.41879272 135.56065369]
[127.88648224 127.31801605]
[115.35416412 119.07538605]
[102.82184601 110.83274841]
[90.17097473 102.77325439]
[77.40422058 94.89860535]
[64.63747406 87.02395630]
[51.87072372 79.14930725]
[39.10397339 71.27465820]
[26.33722305 63.40000916]
[3.52233458 72.38695526]
[-18.70729828 62.59083557]
[-27.30583382 40.11581421]
[-41.79471970 36.23353195]
[-56.28360748 32.35124588]
[-70.77249908 28.46895790]
[-85.26138306 24.58667374]
[-99.75027466 20.70438766]
[-114.23915863 16.82210159]
[-129.57165527 20.72401237]
[-139.86270142 9.95629406]
[-154.35159302 6.07400846]
[-170.04328918 10.83875656]
[-181.82897949 -0.56428432]
[-177.58456421 -16.40464401]
[-161.67633057 -20.38711929]
[-150.46929932 -8.41487885]
[-135.98042297 -4.53259325]
[-121.68425751 -8.71219158]
[-110.35687256 2.33321428]
[-95.86798859 6.21549988]
[-81.37909698 10.09778595]
[-66.89021301 13.98007107]
[-52.40132141 17.86235619]
[-37.91243744 21.74464226]
[-23.42354774 25.62692833]
[-19.38495255 19.83862495]
[-14.13512707 15.09799004]
[-7.93904781 11.65372849]
[-1.11158788 9.68887520]
[5.99848557 9.31108189]
[13.02632332 10.54674149]
[19.60972023 13.33927345]
[25.40777588 17.55167580]
[30.11855507 22.97323418]
[33.49480057 29.33005333]
[35.35690689 36.29888535]
[35.60246658 43.52357864]
[34.21187210 50.63325882]
[46.97862244 58.50790787]
[59.74537277 66.38256073]
[72.51212311 74.25720978]
[85.27886963 82.13185120]
[98.04562378 90.00650024]
[106.14610291 91.25528717]
[111.06447601 98.30043030]
[123.59679413 106.54306793]
[136.12911987 114.78569794]
[148.66143799 123.02833557]
[161.19374084 131.27096558]
[173.72605896 139.51361084]
[186.25837708 147.75624084]
[200.99105835 150.57553101]
[215.68116760 147.54226685]
[230.37127686 144.50900269]
[245.06138611 141.47573853]
[259.75149536 138.44247437]
[274.44158936 135.40921021]
[286.32580566 124.10885620]
[301.97555542 129.00958252]
[305.29174805 145.06993103]
[292.86297607 155.76840210]
[277.47485352 150.09931946]
[262.78475952 153.13258362]
[248.09465027 156.16584778]
[233.40454102 159.19911194]
[218.71443176 162.23237610]
[204.02432251 165.26564026]
[217.31799316 172.21388245]
[228.86125183 181.79266357]
[238.14189148 193.57696533]
[244.74809265 207.04389954]
[248.38673401 221.59588623]
[248.89636230 236.58721924]
[246.25434875 251.35270691]
[240.57794189 265.23718262]
[232.11901855 277.62454224]
[221.25289917 287.96511841]
[208.46176147 295.80007935]
[194.31317139 300.78179932]
[179.43495178 302.68920898]
[164.48724365 301.43765259]
[150.13334656 297.08267212]
[137.01017761 289.81753540]
[125.70002747 279.96459961]
[116.70475769 267.96105957]
[110.42351532 254.33952332]
[107.13500977 239.70443726]
[106.98516846 224.70518494]
[109.98062897 210.00732422]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 69]
[6 68]
[7 67]
[8 66]
[9 65]
[10 64]
[11 63]
[12 61]
[13 60]
[14 59]
[15 58]
[16 57]
[17 56]
[20 43]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
[28 35]
[29 34]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
