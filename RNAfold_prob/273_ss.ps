%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGUAUAAAUAUGAAAAUAUAUAUUGAAUGAGUAUGAGAAAUGAUAAAUUUGAUAAAGUAUAUAUAUAAUUCGUUAUAUAAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[200.22676086 531.92968750]
[194.93342590 517.84503174]
[192.40156555 503.01312256]
[192.72267151 487.97009277]
[195.88517761 473.25970459]
[201.77471924 459.41378784]
[210.17840576 446.93280029]
[220.79246521 436.26800537]
[233.23320007 427.80487061]
[227.29200745 414.03161621]
[221.35081482 400.25836182]
[215.40960693 386.48513794]
[209.46841431 372.71188354]
[203.52722168 358.93865967]
[188.64511108 360.38217163]
[174.02568054 357.15069580]
[161.10336304 349.54846191]
[151.15007019 338.30911255]
[145.14999390 324.52502441]
[143.70225525 309.54104614]
[146.96116638 294.82345581]
[154.61987305 281.81625366]
[165.93914795 271.79971313]
[159.99795532 258.02648926]
[154.05676270 244.25323486]
[148.11557007 230.47999573]
[142.17436218 216.70675659]
[136.23316956 202.93351746]
[130.29197693 189.16027832]
[124.35077667 175.38703918]
[118.40958405 161.61378479]
[104.51560974 156.37040710]
[98.29418945 142.48701477]
[103.88813782 127.94928741]
[97.94693756 114.17604828]
[86.84752655 105.67342377]
[88.27982330 91.76515198]
[82.33862305 77.99190521]
[75.80229950 64.49092865]
[68.68329620 51.28790665]
[61.56428909 38.08488464]
[48.20434189 29.61007881]
[48.97435379 14.73539066]
[34.74031067 6.59143639]
[34.94674683 -9.80641174]
[49.38129807 -17.58945274]
[63.19493866 -8.75116253]
[62.17737579 7.61638498]
[75.02812958 15.14682198]
[74.76731110 30.96587944]
[81.88631439 44.16889954]
[89.00532532 57.37192154]
[92.42316437 58.71955109]
[95.30806732 61.87878418]
[96.77364349 66.55522156]
[96.11186218 72.05071259]
[102.05306244 85.82395172]
[113.15247345 94.32657623]
[111.72017670 108.23484802]
[117.66137695 122.00809479]
[132.07453918 127.91559601]
[137.90354919 141.96826172]
[132.18283081 155.67259216]
[138.12402344 169.44583130]
[144.06521606 183.21907043]
[150.00640869 196.99232483]
[155.94761658 210.76556396]
[161.88880920 224.53880310]
[167.83000183 238.31204224]
[173.77119446 252.08528137]
[179.71240234 265.85852051]
[194.76593018 264.49893188]
[209.48274231 267.85427856]
[222.42433167 275.58364868]
[232.32977295 286.91931152]
[238.23846436 300.74285889]
[239.58331299 315.69552612]
[236.24514771 330.31185913]
[228.56315613 343.16320801]
[217.30046082 352.99746704]
[223.24165344 366.77069092]
[229.18286133 380.54394531]
[235.12405396 394.31716919]
[241.06524658 408.09042358]
[247.00643921 421.86364746]
[261.69964600 418.62237549]
[276.74078369 418.22061157]
[291.58605957 420.67294312]
[305.69888306 425.89068604]
[318.56903076 433.68524170]
[329.73132324 443.77484131]
[338.78219604 455.79473877]
[345.39450073 469.31045532]
[349.32919312 483.83334351]
[350.44403076 498.83847046]
[348.69869995 513.78338623]
[344.15631104 528.12780762]
[336.98107910 541.35327148]
[327.43237305 552.98162842]
[315.85537720 562.59252930]
[302.66857910 569.83856201]
[288.34869385 574.45776367]
[273.41333008 576.28320312]
[258.40246582 575.24877930]
[243.85867310 571.39202881]
[230.30772400 564.85229492]
[218.23947144 555.86596680]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 85]
[10 84]
[11 83]
[12 82]
[13 81]
[14 80]
[23 71]
[24 70]
[25 69]
[26 68]
[27 67]
[28 66]
[29 65]
[30 64]
[31 63]
[34 60]
[35 59]
[37 57]
[38 56]
[39 52]
[40 51]
[41 50]
[43 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
