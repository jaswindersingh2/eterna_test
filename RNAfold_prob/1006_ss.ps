%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:14:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACUCAAAGAGAAGAUCAAAGAUCAACAAAGAAACUUUGAACUUCAAAGAAGAAGUCAAAGACAUCGCAUUUUCGAAUGCGAAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[91.61549377 190.74800110]
[84.60824585 189.82534790]
[77.69356537 188.36244202]
[70.91304779 186.36808777]
[64.30747223 183.85429382]
[57.91656876 180.83615112]
[51.77877045 177.33183289]
[42.82139206 189.36367798]
[33.86401367 201.39552307]
[29.25544930 217.71109009]
[12.30173111 217.79922485]
[7.52378321 201.53245544]
[21.83216667 192.43814087]
[30.78954506 180.40629578]
[39.74692535 168.37445068]
[28.60465622 156.64100647]
[19.71306610 143.12199402]
[13.35245514 128.24360657]
[-1.24321771 131.70285034]
[-15.83889103 135.16207886]
[-30.43456459 138.62132263]
[-44.45236969 148.15744019]
[-57.49632263 137.32731628]
[-50.70037079 121.79504395]
[-33.89380264 124.02565002]
[-19.29812813 120.56641388]
[-4.70245552 117.10717773]
[9.89321709 113.64793396]
[8.87197113 101.08664703]
[9.59339714 88.50458527]
[12.04369926 76.14234924]
[16.17601776 64.23635101]
[21.91133308 53.01427460]
[29.13996315 42.69071960]
[37.72367096 33.46311188]
[47.49831390 25.50790977]
[58.27696228 18.97724533]
[69.85349274 13.99600792]
[82.00653076 10.65945244]
[80.26513672 -4.23912334]
[78.52374268 -19.13769913]
[76.78234863 -34.03627396]
[75.04095459 -48.93484879]
[73.29956055 -63.83342361]
[69.13831329 -72.14334869]
[71.73069000 -79.18981171]
[70.42335510 -94.13272858]
[69.11602020 -109.07565308]
[67.80868530 -124.01856995]
[55.54231262 -133.98410034]
[53.99849701 -149.71279907]
[64.09315491 -161.87312317]
[79.83730316 -163.25056458]
[91.89022064 -153.02789307]
[93.10112000 -137.27006531]
[82.75160217 -125.32590485]
[84.05893707 -110.38298798]
[85.36627197 -95.44006348]
[86.67360687 -80.49714661]
[88.19813538 -65.57482147]
[89.93952942 -50.67624283]
[91.68092346 -35.77766800]
[93.42231750 -20.87909317]
[95.16371155 -5.98051691]
[96.90510559 8.91805840]
[126.55935669 12.82145405]
[153.35282898 26.11512566]
[174.39949036 47.36716843]
[187.43234253 74.28845978]
[202.12245178 71.25519562]
[216.81256104 68.22193146]
[231.50267029 65.18866730]
[246.19277954 62.15540314]
[260.88290405 59.12214279]
[275.57299805 56.08887863]
[287.45718384 44.78852463]
[303.10696411 49.68924332]
[306.42315674 65.74959564]
[293.99435425 76.44806671]
[278.60626221 70.77898407]
[263.91616821 73.81224823]
[249.22604370 76.84551239]
[234.53593445 79.87877655]
[219.84582520 82.91204071]
[205.15571594 85.94530487]
[190.46560669 88.97856903]
[191.04765320 96.02229309]
[191.08210754 103.08994293]
[190.56875610 110.13900757]
[189.51068115 117.12709045]
[187.91424561 124.01216125]
[185.78906250 130.75282288]
[183.14790344 137.30851746]
[180.00665283 143.63981628]
[176.38421631 149.70864868]
[172.30236816 155.47851562]
[167.78565979 160.91471863]
[162.86126709 165.98454285]
[157.55879211 170.65750122]
[151.91014099 174.90551758]
[145.94927979 178.70300293]
[139.71205139 182.02714539]
[133.23597717 184.85792542]
[126.56002045 187.17834473]
[119.72431183 188.97444153]
[112.76997375 190.23539734]
[105.73883057 190.95364380]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 15]
[8 14]
[9 13]
[18 28]
[19 27]
[20 26]
[21 25]
[39 65]
[40 64]
[41 63]
[42 62]
[43 61]
[44 60]
[46 59]
[47 58]
[48 57]
[49 56]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
