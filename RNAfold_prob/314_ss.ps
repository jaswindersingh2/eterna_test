%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGGCGCUCUAAUUUGAGCGGCUUUGCCAGCCCAGCCACCGAAAACCGGGCAGUGAACUGCGGCAUUUCGGUUCGCCGAAAUAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[90.58568573 118.06929016]
[78.29840088 126.67293549]
[71.43190002 140.92642212]
[56.56839371 141.88845825]
[44.28111267 150.49209595]
[31.99383163 159.09574890]
[19.70655060 167.69938660]
[12.84004498 181.95286560]
[-2.02345920 182.91491699]
[-14.31073952 191.51855469]
[-26.59802055 200.12220764]
[-38.88529968 208.72584534]
[-51.17258072 217.32949829]
[-53.66979599 232.93524170]
[-66.51934814 242.13658142]
[-82.09782410 239.47451782]
[-91.16279602 226.52839661]
[-88.33616638 210.97894287]
[-75.29493713 202.05134583]
[-59.77622986 205.04222107]
[-47.48894882 196.43856812]
[-35.20166779 187.83491516]
[-22.91438675 179.23127747]
[-10.62710571 170.62762451]
[-4.63946819 156.98954773]
[11.10290432 155.41210938]
[23.39018440 146.80847168]
[35.67746735 138.20481873]
[47.96474457 129.60116577]
[53.95238495 115.96308136]
[69.69475555 114.38565826]
[81.98204041 105.78200531]
[67.19510651 108.30126953]
[54.53610611 100.25455475]
[50.54090118 85.79639435]
[57.27223206 72.39157104]
[71.25469208 66.96102905]
[85.26911163 72.30856323]
[92.08001709 85.67527771]
[91.64374542 70.68161774]
[91.20747375 55.68796539]
[77.31981659 54.31328201]
[65.04266357 41.04035950]
[59.91236496 26.94497108]
[54.78206253 12.84958076]
[40.90830612 4.79362679]
[38.69918442 -11.09660053]
[49.84934616 -22.63147926]
[65.80534363 -20.96243668]
[74.32710266 -7.36981964]
[68.87744904 7.71927881]
[74.00775146 21.81466866]
[79.13805389 35.91005707]
[94.13646698 35.69189835]
[98.85464478 21.45326042]
[103.57281494 7.21461964]
[108.29098511 -7.02401972]
[104.44668579 -22.96620941]
[116.51571655 -34.06893921]
[132.08248901 -28.91067505]
[135.13323975 -12.79779434]
[122.52962494 -2.30584836]
[117.81145477 11.93279076]
[113.09327698 26.17143059]
[108.37510681 40.41007233]
[106.20113373 55.25169373]
[106.63740540 70.24534607]
[107.07366943 85.23900604]
[118.83990479 94.54253387]
[133.53001404 91.50926971]
[148.22012329 88.47600555]
[162.91023254 85.44274902]
[177.60034180 82.40948486]
[192.29045105 79.37622070]
[206.98056030 76.34295654]
[218.86476135 65.04260254]
[234.51451111 69.94332123]
[237.83071899 86.00366974]
[225.40193176 96.70214081]
[210.01382446 91.03306580]
[195.32371521 94.06632996]
[180.63360596 97.09959412]
[165.94349670 100.13285828]
[151.25338745 103.16611481]
[136.56327820 106.19937897]
[121.87316895 109.23264313]
[136.76083374 111.06498718]
[150.73538208 116.51585388]
[162.93179321 125.24784851]
[172.59509277 136.72044373]
[179.12713623 150.22351074]
[182.12356567 164.92117310]
[181.39892578 179.90365601]
[176.99807739 194.24354553]
[169.19340515 207.05319214]
[158.46803284 217.53968811]
[145.48587036 225.05389404]
[131.05050659 229.13070679]
[116.05549622 229.51774597]
[101.42903900 226.19107056]
[88.07651520 219.35659790]
[76.82444763 209.43737793]
[68.36933899 197.04740906]
[63.23455811 182.95365906]
[61.73796082 168.02850342]
[63.97217941 153.19581604]
[69.79891968 139.37376404]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[4 29]
[5 28]
[6 27]
[7 26]
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[39 68]
[40 67]
[41 66]
[43 53]
[44 52]
[45 51]
[54 65]
[55 64]
[56 63]
[57 62]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
