%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGAUUGGAGGACUCAAAAGAGAUCAAAAGAUCCUAAAACUGAACAAAAGUUCAGCCAAUCAAAAUCCUGCUUCGGCAGGAUAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[104.86624146 201.64662170]
[110.70854187 187.83113098]
[119.19410706 175.46202087]
[129.98054504 165.03836060]
[142.63262939 156.98075867]
[156.63983154 151.61433411]
[171.44244385 149.15528870]
[158.45207214 141.65528870]
[145.46168518 134.15528870]
[132.47129822 126.65529633]
[119.48092651 119.15529633]
[106.49053955 111.65529633]
[118.56397247 120.55654144]
[125.61145782 133.79788208]
[126.25179291 148.78421021]
[120.35948181 162.57843018]
[109.08933258 172.47711182]
[94.65012360 176.54023743]
[79.87170410 173.97152710]
[67.65042114 165.27438354]
[60.38145065 152.15333557]
[59.48941040 137.17988586]
[65.14733124 123.29116058]
[50.55165482 119.83191681]
[41.31964874 120.90005493]
[35.58478928 116.05398560]
[21.09590149 112.17169952]
[6.60701418 108.28941345]
[-7.88187313 104.40712738]
[-23.57356453 109.17187500]
[-35.35926437 97.76883698]
[-31.11485291 81.92847443]
[-15.20661736 77.94599915]
[-3.99958754 89.91823578]
[10.48929977 93.80052185]
[24.97818756 97.68280792]
[39.46707535 101.56509399]
[54.01089478 105.23624420]
[68.60656738 108.69548798]
[74.13614655 103.62855530]
[64.00247955 92.56922913]
[75.06197357 82.43574524]
[85.19530487 93.49470520]
[90.72488403 88.42778015]
[88.55091095 73.58615112]
[86.37693024 58.74452972]
[84.20294952 43.90290451]
[82.02897644 29.06127930]
[79.85499573 14.21965504]
[69.26476288 1.69851124]
[75.06714630 -13.63982105]
[91.29314423 -16.01658058]
[101.25084686 -2.98675966]
[94.69662476 12.04567719]
[96.87059784 26.88730240]
[99.04457855 41.72892761]
[101.21855164 56.57055283]
[103.39253235 71.41217804]
[105.56651306 86.25379944]
[113.99053955 98.66490936]
[126.98092651 106.16490936]
[139.97129822 113.66490936]
[152.96168518 121.16490936]
[165.95207214 128.66491699]
[178.94244385 136.16491699]
[179.85360718 121.19261169]
[193.68867493 115.39686584]
[204.99931335 125.24924469]
[201.15510559 139.74931335]
[215.84521484 136.71604919]
[230.53532410 133.68278503]
[245.22543335 130.64952087]
[259.91552734 127.61626434]
[274.60565186 124.58300018]
[289.29574585 121.54973602]
[301.17996216 110.24938202]
[316.82971191 115.15010071]
[320.14590454 131.21044922]
[307.71713257 141.90892029]
[292.32901001 136.23983765]
[277.63891602 139.27310181]
[262.94879150 142.30636597]
[248.25869751 145.33963013]
[233.56858826 148.37289429]
[218.87847900 151.40615845]
[204.18836975 154.43942261]
[217.46157837 161.42669678]
[229.07052612 170.92576599]
[238.54679871 182.55332947]
[245.50802612 195.84022522]
[249.67330933 210.25028992]
[250.87458801 225.20211792]
[249.06338501 240.09236145]
[244.31277466 254.32022095]
[236.81446838 267.31158447]
[226.87101746 278.54223633]
[214.88362122 287.55902100]
[201.33599854 293.99813843]
[186.77481079 297.59970093]
[171.78756714 298.21847534]
[156.97904968 295.82940674]
[142.94676208 290.52893066]
[130.25691223 282.53094482]
[119.42155457 272.15814209]
[110.87789154 259.82907104]
[104.97066498 246.04124451]
[101.93823242 231.35096741]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[23 39]
[24 38]
[26 37]
[27 36]
[28 35]
[29 34]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
