%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:36 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (936)
} def

/sequence { (\
GGAAAGCGGCGGCCGGUUGCGGCAGGUUGAGGGAAUCACGCCCUCAACCACUCCUCCUGGAGGGCCGCAUGUGAGUUCGCUCACAUAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 7 0.006670373 ubox
1 95 0.067441089 ubox
1 98 0.067863858 ubox
1 101 0.069410744 ubox
1 104 0.069723664 ubox
1 107 0.017603555 ubox
2 7 0.003347310 ubox
2 70 0.006060251 ubox
2 95 0.035602087 ubox
2 98 0.035726792 ubox
2 101 0.036490478 ubox
2 104 0.036352144 ubox
2 107 0.011861982 ubox
3 70 0.008419911 ubox
3 86 0.003632184 ubox
4 18 0.018292851 ubox
4 70 0.033394026 ubox
4 86 0.003340263 ubox
5 17 0.019865572 ubox
5 18 0.003557012 ubox
5 70 0.022279916 ubox
5 86 0.003330225 ubox
6 13 0.005146620 ubox
6 17 0.004022801 ubox
6 68 0.998213842 ubox
7 12 0.005187328 ubox
7 15 0.021522829 ubox
7 16 0.003620809 ubox
7 67 0.999265192 ubox
8 14 0.021636700 ubox
8 66 0.999305007 ubox
9 13 0.021288088 ubox
9 65 0.999311955 ubox
9 68 0.028357703 ubox
10 63 0.044834539 ubox
10 64 0.997364057 ubox
10 67 0.028427980 ubox
11 23 0.049647401 ubox
11 51 0.005433661 ubox
11 66 0.028425170 ubox
12 20 0.003502808 ubox
12 23 0.996834842 ubox
12 65 0.028146002 ubox
13 19 0.003488868 ubox
13 22 0.999292749 ubox
13 60 0.005663050 ubox
13 64 0.028067817 ubox
13 75 0.003636288 ubox
14 21 0.999284250 ubox
14 59 0.005681244 ubox
14 63 0.027901745 ubox
14 73 0.003709618 ubox
15 20 0.994819125 ubox
15 23 0.007679369 ubox
15 58 0.005605345 ubox
15 72 0.003561718 ubox
16 20 0.009256601 ubox
16 23 0.013389719 ubox
16 57 0.005590775 ubox
17 21 0.003820140 ubox
17 22 0.012766650 ubox
18 24 0.004519047 ubox
18 69 0.008437287 ubox
19 23 0.004806361 ubox
19 54 0.004711884 ubox
19 68 0.023011764 ubox
20 67 0.023072310 ubox
21 52 0.003164094 ubox
21 53 0.003593254 ubox
21 66 0.023122010 ubox
22 51 0.003302060 ubox
22 52 0.003310534 ubox
22 65 0.023122220 ubox
23 64 0.023068914 ubox
24 52 0.005100618 ubox
25 49 0.998543871 ubox
26 48 0.999965101 ubox
27 47 0.999516400 ubox
28 46 0.999436965 ubox
29 45 0.999980151 ubox
30 44 0.999844986 ubox
31 42 0.010091894 ubox
31 43 0.999918040 ubox
32 41 0.014242806 ubox
32 42 0.999851335 ubox
32 43 0.006185208 ubox
33 39 0.008371397 ubox
33 41 0.998119195 ubox
33 42 0.008306829 ubox
36 40 0.026015637 ubox
49 63 0.027694505 ubox
51 62 0.976462886 ubox
51 63 0.049892040 ubox
51 64 0.004106010 ubox
52 61 0.980046550 ubox
52 62 0.021863221 ubox
52 64 0.009747297 ubox
53 60 0.980703501 ubox
53 63 0.194492593 ubox
54 59 0.980171554 ubox
54 60 0.004814704 ubox
54 62 0.194957630 ubox
55 59 0.004975962 ubox
55 61 0.194812631 ubox
56 60 0.193177571 ubox
56 63 0.009616678 ubox
57 62 0.009608458 ubox
68 91 0.003554992 ubox
69 86 0.927271099 ubox
70 85 0.981657303 ubox
70 87 0.005528372 ubox
70 88 0.003445221 ubox
70 99 0.009030288 ubox
70 102 0.004929256 ubox
71 80 0.004348186 ubox
71 84 0.999808084 ubox
71 98 0.010052694 ubox
71 101 0.005465612 ubox
72 79 0.004353441 ubox
72 83 0.999676026 ubox
72 97 0.009951976 ubox
72 100 0.005316600 ubox
73 78 0.004325864 ubox
73 82 0.999885553 ubox
74 81 0.999008313 ubox
75 80 0.990620374 ubox
75 95 0.004912032 ubox
75 98 0.005147003 ubox
76 93 0.009438909 ubox
76 94 0.004354273 ubox
76 97 0.005129715 ubox
77 92 0.009904630 ubox
77 93 0.003633952 ubox
77 96 0.004788626 ubox
78 91 0.010167029 ubox
81 92 0.005616785 ubox
82 91 0.005758358 ubox
86 90 0.004138900 ubox
86 91 0.005229636 ubox
86 92 0.007233294 ubox
86 93 0.009226100 ubox
86 94 0.004821061 ubox
86 96 0.003450450 ubox
86 97 0.003177958 ubox
91 95 0.043034990 ubox
91 98 0.103768198 ubox
91 101 0.045528499 ubox
91 104 0.035235164 ubox
91 107 0.010424744 ubox
6 68 0.9500000 lbox
7 67 0.9500000 lbox
8 66 0.9500000 lbox
9 65 0.9500000 lbox
10 64 0.9500000 lbox
12 23 0.9500000 lbox
13 22 0.9500000 lbox
14 21 0.9500000 lbox
15 20 0.9500000 lbox
25 49 0.9500000 lbox
26 48 0.9500000 lbox
27 47 0.9500000 lbox
28 46 0.9500000 lbox
29 45 0.9500000 lbox
30 44 0.9500000 lbox
31 43 0.9500000 lbox
32 42 0.9500000 lbox
33 41 0.9500000 lbox
51 62 0.9500000 lbox
52 61 0.9500000 lbox
53 60 0.9500000 lbox
54 59 0.9500000 lbox
69 86 0.9500000 lbox
70 85 0.9500000 lbox
71 84 0.9500000 lbox
72 83 0.9500000 lbox
73 82 0.9500000 lbox
74 81 0.9500000 lbox
75 80 0.9500000 lbox
showpage
end
%%EOF
