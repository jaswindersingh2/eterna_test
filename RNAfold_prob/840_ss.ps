%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACCGCGGACAAAAAAGCCAAAACACGAUCGAAAGAAUCAAGUGACUGAAAACAAGAAGGAAAAACAGGGUAUUCGUACCCUGAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[81.37121582 227.93627930]
[71.09191895 226.01208496]
[61.00177002 223.26338196]
[51.16679001 219.70814514]
[41.65132904 215.36964417]
[32.51765442 210.27627563]
[23.82552528 204.46134949]
[15.63181400 197.96292114]
[7.99013376 190.82350159]
[0.95048624 183.08981323]
[-11.08136177 192.04719543]
[-16.19734383 199.80590820]
[-23.59594536 201.08407593]
[-26.09316063 216.68981934]
[-38.94271088 225.89115906]
[-54.52118683 223.22908020]
[-63.58615494 210.28297424]
[-60.75952911 194.73350525]
[-47.71829987 185.80592346]
[-32.19959259 188.79678345]
[-20.03874016 180.01535034]
[-8.00689220 171.05796814]
[-20.96218872 145.63850403]
[-28.02675629 117.99648285]
[-28.85655785 89.47805786]
[-23.41118240 61.47204208]
[-11.95581532 35.34229279]
[-24.48813248 27.09965897]
[-37.02045059 18.85702324]
[-49.78720093 10.98237514]
[-62.77758026 3.48237538]
[-75.76795959 -4.01762438]
[-88.86605072 -11.32790089]
[-105.23359680 -10.31033993]
[-114.07188416 -24.12397957]
[-106.28884888 -38.55853271]
[-89.89099884 -38.76496506]
[-81.74703979 -24.53092194]
[-74.25008392 -24.12032509]
[-68.26795959 -17.00800514]
[-55.27758026 -9.50800610]
[-42.28720093 -2.00800562]
[-37.38521576 -2.40749359]
[-32.20679855 0.37816471]
[-28.77781487 6.32470703]
[-16.24549866 14.56734180]
[-3.71318078 22.80997658]
[4.67014933 12.66762829]
[14.04099941 3.42995405]
[24.30229568 -4.80735302]
[35.34774399 -11.95896339]
[47.06292343 -17.95079231]
[59.32647705 -22.72077370]
[72.01136780 -26.21949196]
[84.98619080 -28.41070557]
[98.11653900 -29.27171516]
[111.26640320 -28.79360199]
[124.29955292 -26.98131943]
[137.08099365 -23.85363960]
[149.47830200 -19.44296265]
[161.36306763 -13.79497910]
[172.61218262 -6.96819592]
[183.10910034 0.96666855]
[192.74510193 9.92741680]
[201.42034912 19.82122612]
[209.04499817 30.54560280]
[215.54003906 41.98945999]
[220.83821106 54.03424454]
[224.88461304 66.55518341]
[239.57472229 63.52192307]
[254.26483154 60.48865891]
[268.95495605 57.45539474]
[283.64505005 54.42213058]
[298.33517456 51.38887024]
[313.02526855 48.35560608]
[324.90945435 37.05525208]
[340.55923462 41.95597076]
[343.87542725 58.01631927]
[331.44662476 68.71479034]
[316.05853271 63.04571533]
[301.36843872 66.07897949]
[286.67831421 69.11224365]
[271.98822021 72.14550781]
[257.29809570 75.17877197]
[242.60798645 78.21202850]
[227.91787720 81.24529266]
[229.01521301 91.64540863]
[229.26837158 102.10018921]
[228.67572021 112.54122925]
[227.24111938 122.90020752]
[224.97396851 133.10934448]
[221.88909912 143.10185242]
[218.00669861 152.81233215]
[213.35215759 162.17726135]
[207.95594788 171.13534546]
[201.85336304 179.62799072]
[195.08433533 187.59960938]
[187.69316101 194.99806213]
[179.72821045 201.77493286]
[171.24157715 207.88587952]
[162.28880310 213.29090881]
[152.92846680 217.95465088]
[143.22180176 221.84661865]
[133.23234558 224.94132996]
[123.02544403 227.21852112]
[112.66788483 228.66331482]
[102.22743225 229.26625061]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 22]
[11 21]
[13 20]
[27 47]
[28 46]
[29 45]
[30 42]
[31 41]
[32 40]
[33 38]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
