%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGUGGCGGCGGAGGCGGCACAAGGGAGGCGGAAAACACCACCCAGGCGGCACCAAGGCGCGGCCGUGUGUCUUCGGAUAUACAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[169.20155334 271.60665894]
[173.99824524 257.39425659]
[181.48945618 244.39881897]
[191.38415527 233.12516785]
[203.29791260 224.01132202]
[216.76788330 217.41133118]
[231.27076721 213.58163452]
[246.24157715 212.67092896]
[234.20973206 203.71356201]
[222.17788696 194.75617981]
[207.34864807 193.36224365]
[200.89959717 178.91508484]
[188.86775208 169.95770264]
[176.83590698 161.00032043]
[159.04896545 164.81779480]
[143.77073669 154.37329102]
[140.77023315 135.79179382]
[128.23791504 127.54915619]
[113.35271454 127.01982880]
[106.07455444 112.97209167]
[92.12886047 111.96748352]
[85.68280792 99.56022644]
[69.90121460 98.44132996]
[63.51945114 84.98315430]
[48.23120499 87.96767426]
[35.63907242 79.42993927]
[32.88801193 64.83654022]
[20.35569572 56.59390640]
[7.82337809 48.35127258]
[-7.95821381 47.23237610]
[-14.33997822 33.77420425]
[-26.87229538 25.53157043]
[-42.65388870 24.41267204]
[-49.03565216 10.95450115]
[-64.97480011 12.77746677]
[-76.23577118 1.35074317]
[-74.18011475 -14.56006622]
[-60.38475800 -22.74954987]
[-45.43231201 -16.93543625]
[-40.79301834 -1.57781577]
[-25.90781975 -1.04848576]
[-18.62966156 12.99925327]
[-6.09734392 21.24188805]
[8.78785324 21.77121735]
[16.06601334 35.81895828]
[28.59832954 44.06159210]
[41.13064575 52.30422592]
[55.62017822 49.05014420]
[68.44715118 57.23082352]
[71.76208496 72.45084381]
[86.64728546 72.98017120]
[93.92544556 87.02790833]
[107.87113953 88.03251648]
[114.31719208 100.43977356]
[130.09878540 101.55867004]
[136.48054504 115.01684570]
[149.01286316 123.25947571]
[160.14244080 118.58087158]
[172.01972961 119.91610718]
[181.63618469 126.80828857]
[186.61393738 137.40805054]
[185.79328918 148.96847534]
[197.82513428 157.92585754]
[209.85697937 166.88323975]
[225.54681396 168.91786194]
[231.13525391 182.72433472]
[243.16709900 191.68170166]
[255.19895935 200.63908386]
[269.84338379 203.88568115]
[284.53350830 200.85241699]
[299.22360229 197.81915283]
[313.91372681 194.78588867]
[328.60382080 191.75262451]
[343.29394531 188.71936035]
[357.98403931 185.68609619]
[369.86825562 174.38574219]
[385.51800537 179.28646851]
[388.83419800 195.34681702]
[376.40542603 206.04528809]
[361.01730347 200.37620544]
[346.32720947 203.40946960]
[331.63708496 206.44273376]
[316.94699097 209.47599792]
[302.25686646 212.50926208]
[287.56677246 215.54252625]
[272.87664795 218.57579041]
[286.06121826 225.72895813]
[297.58657837 235.32925415]
[307.00500488 247.00370789]
[313.95059204 260.29876709]
[318.15350342 274.69793701]
[319.45043945 289.64175415]
[317.79101562 304.54968262]
[313.23968506 318.84252930]
[305.97329712 331.96502686]
[296.27413940 343.40731812]
[284.51904297 352.72491455]
[271.16467285 359.55581665]
[256.72988892 363.63461304]
[241.77545166 364.80285645]
[226.88235474 363.01516724]
[212.62921143 358.34100342]
[199.56976318 350.96191406]
[188.21136475 341.16464233]
[178.99530029 329.32977295]
[172.27961731 315.91711426]
[168.32521057 301.44772339]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 68]
[9 67]
[10 66]
[12 64]
[13 63]
[14 62]
[17 57]
[18 56]
[20 54]
[22 52]
[24 50]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[34 40]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
