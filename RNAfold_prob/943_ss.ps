%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAUUAAGACCAGAAAACUGGACAUCUGAUCAAAAAAAGAUCAGAUGACAUGAAAACAUGACUUAACCGUAUGUUCGCAUACGGAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[115.11780548 268.48208618]
[101.58383942 262.01434326]
[89.65882874 252.91522217]
[79.84696198 241.56941223]
[72.56309509 228.45661926]
[68.11518097 214.13125610]
[66.69127655 199.19898987]
[68.35158539 184.29116821]
[73.02591705 170.03807068]
[80.51663208 157.04232788]
[90.50701904 145.85340881]
[102.57234192 136.94575500]
[89.80559540 144.82040405]
[77.03884125 152.69505310]
[64.27209473 160.56970215]
[56.96955109 175.25318909]
[40.58744431 176.00056458]
[31.97827530 162.04296875]
[39.99842072 147.73880005]
[56.39744186 147.80294800]
[69.16419220 139.92829895]
[81.93094635 132.05364990]
[94.69769287 124.17900848]
[80.99057770 112.28448486]
[79.92687225 95.77449036]
[67.39455414 87.53185272]
[54.86223602 79.28921509]
[42.32992172 71.04658508]
[29.79760361 62.80394745]
[17.26528549 54.56131363]
[4.73296833 46.31867981]
[-7.79934883 38.07604599]
[-20.33166504 29.83341026]
[-35.25941086 34.49134827]
[-49.66879272 28.41649818]
[-56.75613403 14.47721767]
[-53.17501450 -0.74479306]
[-40.61632919 -10.06216431]
[-25.00990295 -9.07551861]
[-13.72461414 1.74927998]
[-12.08903122 17.30109215]
[0.44328597 25.54372787]
[12.97560310 33.78636169]
[25.50792122 42.02899551]
[38.04023743 50.27163315]
[50.57255554 58.51426697]
[63.10487366 66.75690460]
[75.63719177 74.99953461]
[88.16950989 83.24217224]
[91.60211182 81.28474426]
[95.34634399 80.02178955]
[97.52032471 65.18016052]
[99.69429779 50.33853912]
[101.86827850 35.49691391]
[95.31404877 20.46447754]
[105.27175140 7.43465757]
[121.49775696 9.81141663]
[127.30013275 25.14974785]
[116.70989990 37.67089081]
[114.53592682 52.51251602]
[112.36194611 67.35414124]
[110.18796539 82.19576263]
[122.05663300 94.92343140]
[120.44940186 113.94850922]
[135.13951111 110.91524506]
[149.82962036 107.88198090]
[158.52966309 94.96118927]
[173.47073364 92.09429169]
[185.73512268 100.46809387]
[200.42523193 97.43482971]
[215.11534119 94.40156555]
[229.80545044 91.36830139]
[244.49555969 88.33503723]
[259.18566895 85.30177307]
[273.87579346 82.26850891]
[285.75997925 70.96815491]
[301.40972900 75.86887360]
[304.72592163 91.92922211]
[292.29714966 102.62769318]
[276.90905762 96.95861816]
[262.21893311 99.99188232]
[247.52882385 103.02514648]
[232.83871460 106.05841064]
[218.14860535 109.09167480]
[203.45849609 112.12493896]
[188.76838684 115.15820312]
[180.82371521 127.70482635]
[165.96907043 130.99024963]
[152.86288452 122.57209015]
[138.17277527 125.60535431]
[123.48265839 128.63861084]
[138.37420654 126.83803558]
[153.31921387 128.12130737]
[167.68580627 132.43415833]
[180.86659241 139.59426880]
[192.30426025 149.29887390]
[201.51524353 161.13769531]
[208.11010742 174.61018372]
[211.81001282 189.14671326]
[212.45852661 204.13269043]
[210.02822876 218.93450928]
[204.62188721 232.92633057]
[196.46804810 245.51661682]
[185.91149902 256.17303467]
[173.39852905 264.44500732]
[159.45822144 269.98284912]
[144.67994690 272.55236816]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 23]
[13 22]
[14 21]
[15 20]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[51 62]
[52 61]
[53 60]
[54 59]
[64 91]
[65 90]
[66 89]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
