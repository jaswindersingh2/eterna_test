%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGUCCGAAGGAUUUACUUCGCCGAAGGCAGGGCAGGCAAGCGAUUAGCUGAAGGAAACUUCGCCGAUGAAUUUCGAUUCAUCAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[100.42707825 124.72378540]
[96.12503052 139.09362793]
[91.82298279 153.46347046]
[93.07260132 170.37130737]
[77.17145538 176.25263977]
[67.11809540 162.60104370]
[77.45314026 149.16142273]
[81.75518799 134.79158020]
[86.05723572 120.42173767]
[73.89638519 111.64029694]
[61.60910416 120.24394226]
[49.32182312 128.84759521]
[37.03454590 137.45123291]
[34.53732681 153.05699158]
[21.68777657 162.25833130]
[6.10930014 159.59625244]
[-2.95566750 146.65014648]
[-0.12904173 131.10067749]
[12.91219044 122.17308807]
[28.43089676 125.16395569]
[40.71817780 116.56031036]
[53.00545883 107.95666504]
[65.29273987 99.35301971]
[62.25947571 84.66291046]
[47.56936646 81.62964630]
[32.87925720 78.59638214]
[21.49954414 89.14540100]
[6.08863926 90.95747375]
[-7.42765141 83.33583069]
[-13.85203838 69.21113586]
[-10.71421337 54.01463318]
[0.77926642 43.58968735]
[16.20892334 41.94489670]
[29.64173889 49.71271896]
[35.91252136 63.90627289]
[50.60263062 66.93953705]
[65.29273987 69.97280121]
[76.77531433 77.35607910]
[87.22266388 85.96563721]
[86.78639221 70.97198486]
[86.35012817 55.97832870]
[72.46246338 54.60364532]
[60.18531418 41.33072281]
[55.05501175 27.23533440]
[49.92470932 13.13994503]
[36.05095291 5.08399057]
[33.84183121 -10.80623722]
[44.99199295 -22.34111595]
[60.94799042 -20.67207336]
[69.46974945 -7.07945585]
[64.02010345 8.00964260]
[69.15039825 22.10503197]
[74.28070068 36.20042038]
[89.27911377 35.98226166]
[93.99729156 21.74362373]
[98.71546173 7.50498343]
[103.43363190 -6.73365593]
[99.58933258 -22.67584610]
[111.65836334 -33.77857590]
[127.22512817 -28.62031174]
[130.27587891 -12.50743008]
[117.67227173 -2.01548481]
[112.95410156 12.22315502]
[108.23593140 26.46179390]
[103.51775360 40.70043564]
[101.34378052 55.54205704]
[101.78005219 70.53571320]
[102.21632385 85.52936554]
[113.98255920 94.83290100]
[128.67266846 91.79963684]
[143.36277771 88.76637268]
[158.05288696 85.73310852]
[172.74299622 82.69984436]
[187.43310547 79.66658020]
[202.12321472 76.63331604]
[214.00740051 65.33296204]
[229.65716553 70.23368073]
[232.97335815 86.29403687]
[220.54457092 96.99250793]
[205.15647888 91.32342529]
[190.46636963 94.35668945]
[175.77626038 97.38995361]
[161.08615112 100.42321777]
[146.39604187 103.45648193]
[131.70593262 106.48974609]
[117.01581573 109.52301025]
[131.36183167 113.90388489]
[145.70783997 118.28475952]
[160.64184570 116.87931824]
[175.39073181 119.61256409]
[188.82942200 126.27600098]
[199.93284607 136.36134338]
[207.85401917 149.09927368]
[211.98872375 163.51815796]
[212.02156067 178.51812744]
[207.95002747 192.95497131]
[200.08470154 205.72746277]
[189.02554321 215.86132812]
[175.61613464 222.58352661]
[160.87936401 225.38131714]
[145.93934631 224.04127502]
[131.93569946 218.66563416]
[119.93659973 209.66441345]
[110.85736084 197.72425842]
[105.39054108 183.75593567]
[103.95314026 168.82496643]
[106.65481567 154.07026672]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 9]
[2 8]
[3 7]
[10 23]
[11 22]
[12 21]
[13 20]
[24 37]
[25 36]
[26 35]
[39 68]
[40 67]
[41 66]
[43 53]
[44 52]
[45 51]
[54 65]
[55 64]
[56 63]
[57 62]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
