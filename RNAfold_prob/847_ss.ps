%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAACCACGAAAAAGGGAAAAGCUACCAGAAAUAGGUCCAGCAGAGGAAACAUCAAGCAAAAACUAGAAGUUCGCUUCUAGAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[6.69763470 174.48683167]
[-5.58964634 183.09046936]
[-8.63795662 195.72740173]
[-19.17878723 202.62390137]
[-31.18516350 200.49557495]
[-43.71747971 208.73822021]
[-56.24979782 216.98085022]
[-59.25030518 235.56234741]
[-74.52853394 246.00685120]
[-92.31547546 242.18937683]
[-104.34732056 251.14675903]
[-109.46330261 258.90545654]
[-116.86190033 260.18362427]
[-119.35911560 275.78939819]
[-132.20866394 284.99072266]
[-147.78713989 282.32864380]
[-156.85211182 269.38253784]
[-154.02548218 253.83306885]
[-140.98425293 244.90548706]
[-125.46555328 247.89634705]
[-113.30470276 239.11491394]
[-101.27285004 230.15753174]
[-102.09349823 218.59710693]
[-97.11576080 207.99734497]
[-87.49929810 201.10516357]
[-75.62200928 199.76992798]
[-64.49243164 204.44853210]
[-51.96011353 196.20590210]
[-39.42779922 187.96325684]
[-32.50173187 171.91131592]
[-14.19329262 170.80319214]
[-1.90601206 162.19955444]
[-10.86191559 144.30862427]
[-16.70441628 125.17336273]
[-19.26943398 105.33113861]
[-18.48493576 85.33920288]
[-14.37295151 65.75898743]
[-7.04896116 47.14038467]
[3.28135109 30.00627136]
[16.32787323 14.83783531]
[31.72421074 2.06106138]
[49.03797913 -7.96523333]
[43.49988556 -21.90544510]
[37.96179581 -35.84565735]
[23.35259628 -41.87449646]
[17.36259460 -56.49966049]
[23.54555130 -71.04430389]
[38.23323059 -76.87934113]
[52.71168900 -70.54295349]
[58.39111328 -55.79440689]
[51.90200806 -41.38375092]
[57.44010162 -27.44353867]
[62.97819138 -13.50332546]
[74.63751221 -16.66346169]
[86.55648804 -18.62921715]
[98.61309814 -19.38046646]
[110.68389893 -18.90951729]
[122.64533234 -17.22119331]
[134.37492371 -14.33277798]
[145.75257874 -10.27384281]
[156.66183472 -5.08594275]
[166.99099731 1.17780983]
[176.63432312 8.45328712]
[185.49307251 16.66600609]
[193.47654724 25.73188210]
[200.50303650 35.55810547]
[206.50059509 46.04407120]
[211.40782166 57.08243179]
[215.17445374 68.56017303]
[229.86456299 65.52690887]
[244.55467224 62.49364471]
[259.24478149 59.46038055]
[273.93490601 56.42712021]
[288.62500000 53.39385605]
[303.31512451 50.36059189]
[315.19931030 39.06023788]
[330.84906006 43.96095657]
[334.16525269 60.02130890]
[321.73648071 70.71977997]
[306.34838867 65.05069733]
[291.65826416 68.08396149]
[276.96817017 71.11722565]
[262.27804565 74.15048981]
[247.58793640 77.18375397]
[232.89782715 80.21701813]
[218.20771790 83.25028229]
[219.34390259 96.73612213]
[218.94650269 110.26390076]
[217.02066040 123.65978241]
[213.59109497 136.75164795]
[208.70188904 149.37124634]
[202.41586304 161.35643005]
[194.81379700 172.55317688]
[185.99336243 182.81762695]
[176.06793213 192.01786804]
[165.16502380 200.03569031]
[153.42475891 206.76803589]
[140.99797058 212.12843323]
[128.04437256 216.04797363]
[114.73039246 218.47630310]
[101.22712708 219.38221741]
[87.70809937 218.75407410]
[74.34702301 216.59992981]
[61.31558609 212.94749451]
[48.78124237 207.84367371]
[36.90505981 201.35406494]
[25.83964348 193.56207275]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[5 29]
[6 28]
[7 27]
[10 22]
[11 21]
[13 20]
[42 53]
[43 52]
[44 51]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
