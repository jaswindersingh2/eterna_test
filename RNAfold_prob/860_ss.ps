%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Jun 14 19:15:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGCACGAAGAAGGCAAAAGACGUCCGAAAGAGACAAGUCAGGCGAAAGAUCAAGCAACAAGCUGUGCUUCGGUACAGCAAAAGAAACAACAACAACAAC\
) } def
/len { sequence length } bind def

/coor [
[187.59344482 230.93792725]
[183.37989807 223.79356384]
[180.01551819 216.21069336]
[177.54525757 208.28982544]
[176.00221252 200.13600159]
[175.40718079 191.85740662]
[175.76838684 183.56390381]
[177.08135986 175.36561584]
[179.32901001 167.37139893]
[182.48178101 159.68746948]
[169.71502686 151.81282043]
[155.32626343 155.48695374]
[142.26678467 147.68280029]
[138.51058960 132.56564331]
[125.74383545 124.69098663]
[112.50346375 133.40737915]
[96.79379272 135.52618408]
[81.71731567 130.62896729]
[70.25146484 119.68285370]
[64.66062164 104.84959412]
[66.04892731 89.05859375]
[53.05854416 81.55859375]
[42.21983337 86.87641144]
[30.28499794 86.23403168]
[20.28406715 79.91265869]
[14.69842243 69.62025452]
[14.84550571 58.03167725]
[2.31318855 49.78903961]
[-10.21912861 41.54640579]
[-22.98587799 33.67175674]
[-35.97626114 26.17175865]
[-48.96664047 18.67175865]
[-62.06472778 11.36148167]
[-78.43227386 12.37904263]
[-87.27056885 -1.43459713]
[-79.48752594 -15.86914921]
[-63.08967590 -16.07558441]
[-54.94572067 -1.84153914]
[-47.44876099 -1.43094289]
[-41.46664047 5.68137646]
[-28.47625923 13.18137646]
[-15.48587894 20.68137741]
[-10.58389568 20.28188896]
[-5.40547752 23.06754684]
[-1.97649395 29.01408958]
[10.55582333 37.25672531]
[23.08814049 45.49935913]
[40.62301636 40.65412521]
[56.48269653 50.19261932]
[60.55854416 68.56820679]
[73.54892731 76.06820679]
[84.71199799 67.77164459]
[98.19937134 64.37490082]
[111.96051025 66.39440155]
[123.90322876 73.52311707]
[132.21183777 84.67723083]
[135.62313843 98.16093445]
[133.61848450 111.92424011]
[146.38523865 119.79888916]
[161.58021545 116.37097931]
[174.41532898 124.53886414]
[177.58967590 139.04606628]
[190.35643005 146.92071533]
[209.72586060 129.58435059]
[233.96429443 120.25691223]
[259.91171265 120.13658905]
[284.19155884 129.22233582]
[303.65026855 146.31623840]
[315.76678467 169.18141174]
[330.45687866 166.14814758]
[345.14700317 163.11488342]
[359.83709717 160.08161926]
[374.52722168 157.04835510]
[389.21731567 154.01509094]
[403.90744019 150.98182678]
[415.79162598 139.68147278]
[431.44137573 144.58218384]
[434.75756836 160.64253235]
[422.32879639 171.34100342]
[406.94070435 165.67193604]
[392.25057983 168.70520020]
[377.56048584 171.73846436]
[362.87036133 174.77172852]
[348.18026733 177.80499268]
[333.49014282 180.83825684]
[318.80004883 183.87152100]
[319.15246582 192.12591553]
[318.55300903 200.36747742]
[317.00930786 208.48677063]
[314.54150391 216.37594604]
[311.18209839 223.93020630]
[306.97534180 231.04913330]
[301.97680664 237.63804626]
[296.25262451 243.60931396]
[289.87847900 248.88342285]
[282.93884277 253.39012146]
[275.52563477 257.06930542]
[267.73709106 259.87188721]
[259.67651367 261.76028442]
[251.45085144 262.70919800]
[243.16920471 262.70565796]
[234.94154358 261.74938965]
[226.87710571 259.85278320]
[219.08302307 257.04067993]
[211.66285706 253.35014343]
[204.71527100 248.82981873]
[198.33265686 243.53947449]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 63]
[11 62]
[14 59]
[15 58]
[21 51]
[22 50]
[27 47]
[28 46]
[29 45]
[30 42]
[31 41]
[32 40]
[33 38]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
