%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCACGACAAAAAAAUGUCGCCAAAGGCAGUGCAGGCACUGGAAAACAGGAUCGAAAGAUCGCCGCACAGUUUCG\
) } def
/len { sequence length } bind def

/coor [
[-46.07578659 234.20736694]
[-53.46012878 241.65812683]
[-62.46879196 247.00459290]
[-72.51879883 249.90917969]
[-82.96189880 250.19206238]
[-93.12636566 247.84231567]
[-102.36022186 243.01806641]
[-110.07307434 236.03596497]
[-115.77380371 227.35034180]
[-130.21063232 231.42195129]
[-144.64746094 235.49354553]
[-159.08428955 239.56515503]
[-173.52111816 243.63676453]
[-181.02378845 257.54666138]
[-196.18850708 261.99719238]
[-210.01831055 254.34786987]
[-214.30822754 239.13694763]
[-206.51313782 225.38877869]
[-191.25770569 221.25991821]
[-177.59272766 229.19993591]
[-163.15589905 225.12832642]
[-148.71907043 221.05671692]
[-134.28224182 216.98512268]
[-119.84541321 212.91351318]
[-116.75186920 192.84719849]
[-104.37117004 176.67039490]
[-85.68651581 168.38748169]
[-65.25140381 170.08778381]
[-48.07996368 181.41905212]
[-35.29035950 173.58157349]
[-22.50075912 165.74409485]
[-9.71115685 157.90661621]
[-2.90210152 144.65950012]
[12.90720844 144.04606628]
[25.69680977 136.20858765]
[38.48641205 128.37110901]
[51.27601624 120.53363037]
[55.44304276 114.18586731]
[64.72518921 112.65093231]
[77.81262970 105.32161713]
[90.90007019 97.99229431]
[85.68155670 85.90824890]
[92.87111664 69.97409821]
[101.68789673 57.83884048]
[110.50466919 45.70358658]
[109.42525482 29.69688797]
[121.36352539 18.97974014]
[137.16146851 21.77342224]
[144.70024109 35.93486023]
[138.19676208 50.60061264]
[122.63993073 54.52036667]
[113.82315063 66.65561676]
[105.00637054 78.79087830]
[112.07732391 92.01969147]
[127.06575775 91.43079376]
[142.05419922 90.84189606]
[157.04263306 90.25300598]
[170.61555481 81.04933167]
[185.25260925 88.44451904]
[185.89643860 104.83101654]
[171.88473511 113.35181427]
[157.63153076 105.24143982]
[142.64309692 105.83033752]
[127.65465546 106.41923523]
[112.66622162 107.00813293]
[98.22939301 111.07973480]
[85.14195251 118.40905762]
[72.05451202 125.73837280]
[59.11349487 133.32322693]
[46.32389069 141.16070557]
[33.53429031 148.99818420]
[20.74468613 156.83566284]
[13.02083397 170.64337158]
[-1.87367797 170.69622803]
[-14.66328049 178.53370667]
[-27.45288277 186.37118530]
[-40.24248505 194.20866394]
[-37.77486038 204.46363831]
[-37.96578598 214.99520874]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[29 77]
[30 76]
[31 75]
[32 74]
[34 72]
[35 71]
[36 70]
[37 69]
[39 68]
[40 67]
[41 66]
[43 53]
[44 52]
[45 51]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
