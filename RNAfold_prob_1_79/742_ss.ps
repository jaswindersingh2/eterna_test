%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCCGGCGCAAAGGGCGGGCAAGGCGCGGCAAAAAGGCGGGCCACCGAGCGCGAAAGGGCACGGCCGGCGGUUCG\
) } def
/len { sequence length } bind def

/coor [
[98.28794098 247.46023560]
[97.69904327 232.47180176]
[97.11014557 217.48336792]
[86.03244019 207.59297180]
[85.22169495 192.40095520]
[95.67076874 180.84869385]
[95.08187103 165.86026001]
[94.49297333 150.87182617]
[93.90407562 135.88337708]
[93.31517792 120.89495087]
[81.00915527 112.31813049]
[66.74330902 116.95338440]
[52.47746277 121.58863831]
[43.94222641 135.17279053]
[27.98458099 136.82600403]
[16.84586525 125.28007507]
[19.07074738 109.39205170]
[32.95248795 101.34986115]
[47.84220505 107.32279205]
[62.10805511 102.68753815]
[76.37390137 98.05228424]
[61.37408447 97.97800446]
[51.31195831 86.85354614]
[52.73851395 71.92153168]
[64.72499084 62.90352631]
[79.46752930 65.67073822]
[87.36788177 78.42111969]
[83.86619568 63.83557129]
[80.36451721 49.25002289]
[69.61941528 37.63738632]
[74.17180634 23.45553398]
[70.67012787 8.86998558]
[59.92502594 -2.74265027]
[64.47741699 -16.92450333]
[51.60480499 -26.49922752]
[51.20870972 -42.53738785]
[63.59298325 -52.73588562]
[79.25746918 -49.27130127]
[86.18572235 -34.80136871]
[79.06296539 -20.42618370]
[89.55760956 -9.85680485]
[85.25567627 5.36830473]
[88.75735474 19.95385361]
[99.25199890 30.52323341]
[94.95006561 45.74834442]
[98.45174408 60.33389282]
[101.95343018 74.91944122]
[112.82597351 83.05239105]
[116.28227234 94.00393677]
[131.17829895 92.24087524]
[146.07432556 90.47781372]
[158.86941528 81.17210388]
[172.41789246 87.35984802]
[187.31391907 85.59678650]
[200.10900879 76.29107666]
[213.65748596 82.47882080]
[226.46647644 72.23860168]
[241.63862610 78.46257782]
[243.56613159 94.74805450]
[230.26614380 104.34192657]
[215.42054749 97.37484741]
[203.69091797 106.55444336]
[189.07698059 100.49281311]
[174.18095398 102.25587463]
[162.45132446 111.43547058]
[147.83738708 105.37384033]
[132.94136047 107.13690186]
[118.04533386 108.89996338]
[108.30361176 120.30605316]
[108.89250946 135.29447937]
[109.48140717 150.28292847]
[110.07030487 165.27136230]
[110.65920258 180.25979614]
[121.98243713 190.95661926]
[122.36614990 206.16540527]
[112.09857941 216.89447021]
[112.68747711 231.88290405]
[113.27637482 246.87133789]
[116.22158051 266.02795410]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[6 73]
[7 72]
[8 71]
[9 70]
[10 69]
[11 21]
[12 20]
[13 19]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[34 40]
[49 68]
[50 67]
[51 66]
[53 64]
[54 63]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
