%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACUAGAAGAUCGAAAAAAAAAAGAUCAACUAGAGAAAAAAAAACUAGAACUAGAAAAAAAAAAAGAUCCGUUUCG\
) } def
/len { sequence length } bind def

/coor [
[112.56101990 184.44784546]
[109.05934143 169.86230469]
[105.55766296 155.27674866]
[76.44551849 150.31494141]
[53.98924637 131.13548279]
[44.53438187 103.15795135]
[29.58062363 101.98106384]
[14.62686348 100.80417633]
[-0.32689646 99.62729645]
[-12.28047848 109.61476898]
[-27.42895317 108.20821381]
[-36.87681580 96.75075531]
[-51.83057785 95.57386780]
[-66.78433990 94.39698029]
[-81.73809814 93.22009277]
[-89.83824921 106.20647430]
[-103.05151367 113.93099976]
[-118.34156799 114.61863708]
[-132.19487000 108.11136627]
[-141.42803955 95.90451813]
[-143.91935730 80.80313110]
[-139.09632874 66.27738953]
[-128.06727600 55.66521454]
[-113.36656189 51.40519714]
[-98.37232208 54.47625732]
[-86.53012085 64.17269135]
[-80.56121063 78.26633453]
[-65.60745239 79.44322205]
[-50.65369034 80.62010956]
[-35.69992828 81.79698944]
[-24.57604218 71.95856476]
[-9.39403820 72.93907166]
[0.84998995 84.67353058]
[15.80375004 85.85041809]
[30.75750923 87.02730560]
[45.71126938 88.20419312]
[48.77723312 78.49104309]
[53.56497955 69.50088501]
[59.91357803 61.53591156]
[67.60962677 54.86386108]
[76.39443970 49.70899963]
[85.97271729 46.24460220]
[96.02250671 44.58712387]
[106.20599365 44.79227448]
[116.18087006 46.85316086]
[125.61185455 50.70050430]
[134.18193054 56.20498657]
[141.60301208 63.18157959]
[154.07505798 54.84802628]
[166.54710388 46.51447296]
[173.31103516 31.57521629]
[189.65513611 30.23280525]
[198.76602173 43.86819839]
[191.27117920 58.45447159]
[174.88066101 58.98651505]
[162.40861511 67.32006836]
[149.93656921 75.65362549]
[152.45735168 81.70701599]
[154.24732971 88.01525116]
[155.28157043 94.49045563]
[155.54566956 101.04241180]
[155.03591919 107.57984924]
[153.75946045 114.01168823]
[151.73405457 120.24832153]
[148.98793030 126.20286560]
[145.55932617 131.79237366]
[141.49601746 136.93896484]
[136.85461426 141.57095337]
[131.69978333 145.62379456]
[126.10332489 149.04104614]
[120.14321136 151.77507019]
[123.64488983 166.36062622]
[127.14656830 180.94616699]
[141.22097778 187.76124573]
[147.57475281 202.04981995]
[143.20783997 217.06527710]
[130.18217468 225.71778870]
[114.64805603 223.92187500]
[103.94023132 212.52554321]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[2 72]
[3 71]
[6 36]
[7 35]
[8 34]
[9 33]
[12 30]
[13 29]
[14 28]
[15 27]
[48 57]
[49 56]
[50 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
