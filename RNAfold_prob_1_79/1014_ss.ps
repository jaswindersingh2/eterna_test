%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGCGAAACGCAAGAUCAAAGAUCAAGUAACAAAGUUACAAGCUCAAAGAGCAAGGCAAAGCCAGAUGCAUUUCG\
) } def
/len { sequence length } bind def

/coor [
[74.34816742 283.14144897]
[65.78340912 296.08071899]
[51.23711014 301.48300171]
[36.30261993 297.27102661]
[26.72255325 285.06439209]
[26.18064308 269.55679321]
[34.88526535 256.71121216]
[49.48931122 251.46702576]
[53.56091690 237.03019714]
[57.63252640 222.59336853]
[61.70413208 208.15653992]
[65.77574158 193.71971130]
[61.78363037 179.37005615]
[72.97635651 168.18823242]
[77.04796600 153.75140381]
[81.11957550 139.31457520]
[62.37344360 122.05330658]
[56.47281265 97.26316071]
[41.88726425 93.76148224]
[27.30171585 90.25980377]
[12.71616745 86.75811768]
[-4.09681845 88.93982697]
[-10.84756088 73.38785553]
[2.22784209 62.59571838]
[16.21784782 72.17256927]
[30.80339622 75.67424774]
[45.38894653 79.17593384]
[59.97449493 82.67761230]
[65.53919220 73.26876068]
[73.26876068 65.53919220]
[82.67761230 59.97449493]
[79.17593384 45.38894653]
[75.67424774 30.80339622]
[72.17256927 16.21784782]
[68.67089081 1.63229918]
[59.09403992 -12.35770702]
[69.88617706 -25.43310928]
[85.43814850 -18.68236732]
[83.25643921 -1.86938131]
[86.75811768 12.71616745]
[90.25980377 27.30171585]
[93.76148224 41.88726425]
[97.26316071 56.47281265]
[108.17282867 57.15946960]
[118.56907654 60.53741455]
[127.79878998 66.39443970]
[139.20487976 56.65272141]
[150.61096191 46.91099930]
[162.01705933 37.16927719]
[170.13444519 22.28491211]
[186.68423462 25.96466637]
[187.72973633 42.88634491]
[171.75877380 48.57536697]
[160.35269165 58.31708908]
[148.94659424 68.05880737]
[137.54051208 77.80052948]
[141.18740845 85.65761566]
[143.20954895 94.08046722]
[143.52719116 102.73683929]
[158.11273193 106.23851776]
[172.69828796 109.74019623]
[189.51127625 107.55849457]
[196.26200867 123.11046600]
[183.18661499 133.90260315]
[169.19660950 124.32575226]
[154.61105347 120.82406616]
[140.02551270 117.32238770]
[132.65745544 128.90669250]
[122.05330658 137.62655640]
[109.26383972 142.61791992]
[95.55640411 143.38618469]
[91.48479462 157.82301331]
[87.41318512 172.25984192]
[91.11406708 187.64210510]
[80.21257019 197.79132080]
[76.14096069 212.22814941]
[72.06935120 226.66497803]
[67.99774933 241.10180664]
[63.92613983 255.53863525]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 79]
[9 78]
[10 77]
[11 76]
[12 75]
[14 73]
[15 72]
[16 71]
[18 28]
[19 27]
[20 26]
[21 25]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[46 56]
[47 55]
[48 54]
[49 53]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
