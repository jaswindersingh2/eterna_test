%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:15 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (91)
} def

/sequence { (\
GGAAAAAGCAUCGCGACUAAUGUCGCGGGACCGUACUAAUGUACAGAUCUAAUGAUCGGGACCGAUGCGCUGCACUUCG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 9 0.005219076 ubox
1 63 0.004613413 ubox
1 70 0.008571699 ubox
1 71 0.037254494 ubox
1 73 0.312045064 ubox
1 75 0.365693951 ubox
1 76 0.155995466 ubox
1 77 0.017759185 ubox
1 78 0.333551137 ubox
2 9 0.003316708 ubox
2 12 0.005667217 ubox
2 62 0.004582595 ubox
2 70 0.038901550 ubox
2 71 0.015381552 ubox
2 73 0.285673652 ubox
2 75 0.179426657 ubox
2 76 0.022065849 ubox
2 77 0.329986864 ubox
2 78 0.342702505 ubox
3 11 0.005470341 ubox
3 71 0.238789064 ubox
3 76 0.315216158 ubox
3 77 0.341519772 ubox
4 71 0.094055171 ubox
4 76 0.316758219 ubox
4 77 0.027740635 ubox
5 71 0.280106884 ubox
5 76 0.034165872 ubox
5 77 0.009063532 ubox
6 71 0.141176414 ubox
6 76 0.009574147 ubox
6 77 0.012501696 ubox
7 71 0.132447871 ubox
7 76 0.013971496 ubox
7 77 0.003991211 ubox
8 31 0.004198675 ubox
8 68 0.978020274 ubox
8 70 0.115419663 ubox
8 71 0.004255665 ubox
8 73 0.165016630 ubox
8 75 0.008796146 ubox
9 29 0.005422694 ubox
9 67 0.979348291 ubox
9 69 0.109707417 ubox
9 72 0.165239472 ubox
10 66 0.981221400 ubox
10 71 0.162675644 ubox
11 28 0.020675112 ubox
11 64 0.003354146 ubox
11 65 0.981744582 ubox
11 67 0.014940411 ubox
11 69 0.004494338 ubox
12 27 0.073029084 ubox
12 64 0.980036272 ubox
12 67 0.011527886 ubox
12 69 0.159671719 ubox
13 26 0.986002530 ubox
13 63 0.009084415 ubox
13 68 0.157878330 ubox
13 70 0.006336248 ubox
14 25 0.987986434 ubox
14 67 0.153763677 ubox
14 69 0.006273494 ubox
15 24 0.999842214 ubox
15 66 0.010101294 ubox
15 68 0.004404578 ubox
16 23 0.999664429 ubox
17 22 0.999034207 ubox
18 22 0.003436682 ubox
23 65 0.003521450 ubox
25 66 0.023339118 ubox
26 64 0.157845930 ubox
27 32 0.005788128 ubox
27 62 0.005287960 ubox
27 63 0.991789220 ubox
28 50 0.019508569 ubox
28 62 0.993275744 ubox
28 63 0.106738086 ubox
29 49 0.020774076 ubox
29 62 0.106793913 ubox
30 48 0.020596557 ubox
31 46 0.016923750 ubox
31 58 0.005263448 ubox
31 59 0.993830125 ubox
31 60 0.102007638 ubox
32 46 0.011439422 ubox
32 58 0.992804718 ubox
32 59 0.101960037 ubox
33 40 0.003525326 ubox
33 44 0.997811516 ubox
33 57 0.026019871 ubox
34 39 0.003516645 ubox
34 43 0.999125366 ubox
34 55 0.003296848 ubox
35 42 0.999273782 ubox
35 56 0.003473336 ubox
36 41 0.998789442 ubox
36 54 0.009790520 ubox
37 41 0.003481684 ubox
39 48 0.003995825 ubox
39 53 0.005419682 ubox
40 47 0.004155566 ubox
40 51 0.003644622 ubox
40 52 0.005487768 ubox
41 48 0.003729793 ubox
41 49 0.008968627 ubox
41 50 0.003727573 ubox
41 62 0.003407013 ubox
42 47 0.003970131 ubox
42 61 0.003189185 ubox
44 54 0.003890515 ubox
45 53 0.004045310 ubox
46 56 0.003298384 ubox
46 57 0.997617357 ubox
47 56 0.998927942 ubox
48 55 0.999073613 ubox
49 54 0.998723437 ubox
53 69 0.004862122 ubox
54 68 0.011688585 ubox
55 66 0.021472936 ubox
56 65 0.022108219 ubox
57 64 0.022359467 ubox
58 63 0.023212997 ubox
58 68 0.004403317 ubox
58 70 0.007195383 ubox
59 68 0.008927515 ubox
60 68 0.007547771 ubox
61 66 0.004331208 ubox
62 67 0.004765842 ubox
63 69 0.004447182 ubox
63 79 0.012188887 ubox
64 68 0.008494640 ubox
64 70 0.006540600 ubox
64 75 0.015282381 ubox
64 76 0.003191924 ubox
64 77 0.004480759 ubox
64 78 0.019723503 ubox
65 76 0.005169767 ubox
65 77 0.019037921 ubox
66 74 0.031667182 ubox
67 73 0.034454878 ubox
67 75 0.004800938 ubox
68 72 0.034228430 ubox
68 79 0.004807867 ubox
69 73 0.029958161 ubox
69 75 0.052426603 ubox
69 76 0.010203984 ubox
69 77 0.006145180 ubox
69 78 0.036914671 ubox
70 79 0.026815926 ubox
71 79 0.021131677 ubox
72 76 0.006411933 ubox
72 77 0.009089357 ubox
72 78 0.038618729 ubox
73 79 0.025434254 ubox
75 79 0.014490032 ubox
8 68 0.9500000 lbox
9 67 0.9500000 lbox
10 66 0.9500000 lbox
11 65 0.9500000 lbox
12 64 0.9500000 lbox
13 26 0.9500000 lbox
14 25 0.9500000 lbox
15 24 0.9500000 lbox
16 23 0.9500000 lbox
17 22 0.9500000 lbox
27 63 0.9500000 lbox
28 62 0.9500000 lbox
31 59 0.9500000 lbox
32 58 0.9500000 lbox
33 44 0.9500000 lbox
34 43 0.9500000 lbox
35 42 0.9500000 lbox
36 41 0.9500000 lbox
46 57 0.9500000 lbox
47 56 0.9500000 lbox
48 55 0.9500000 lbox
49 54 0.9500000 lbox
showpage
end
%%EOF
