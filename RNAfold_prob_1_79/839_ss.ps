%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGCACAAAAAAGGCAAAAGGAGUACAAAAGAUACAAUCCAGUGAAAACAACAAGCAAAAACGAGAGUUUCG\
) } def
/len { sequence length } bind def

/coor [
[114.58051300 197.13232422]
[109.83361053 189.51219177]
[107.68279266 180.76039124]
[108.36206055 171.73921204]
[111.82547760 163.34439087]
[117.74958801 156.41613770]
[111.46968842 142.79399109]
[91.73713684 143.52705383]
[73.64594269 135.61380005]
[60.78977203 120.62614441]
[46.52392578 125.26139832]
[39.09606171 131.03556824]
[31.60617256 129.78665161]
[24.10350800 143.69656372]
[8.93879414 148.14706421]
[-4.89101553 140.49775696]
[-9.18093872 125.28682709]
[-1.38584077 111.53866577]
[13.86958504 107.40980530]
[27.53456497 115.34981537]
[41.88867188 110.99555206]
[56.15451813 106.36029053]
[56.00249100 94.79434967]
[58.84943390 83.58322906]
[64.50128937 73.49111176]
[72.57281494 65.20590210]
[82.51383972 59.29233551]
[79.01216125 44.70678711]
[75.51048279 30.12123871]
[71.43887329 15.68441105]
[66.80361938 1.41856313]
[62.16836166 -12.84728432]
[57.25391006 -27.01937485]
[44.30643463 -37.08391190]
[46.81657410 -53.28981400]
[62.20211029 -58.96583939]
[74.63572693 -48.27297974]
[71.32678223 -32.21113205]
[76.73963165 -26.88578606]
[76.43421173 -17.48254013]
[81.06946564 -3.21669173]
[85.70471954 11.04915619]
[89.71575928 14.07153606]
[91.70624542 19.75718307]
[90.09603119 26.61955833]
[93.59770966 41.20510864]
[97.09938812 55.79065704]
[116.14764404 58.74308395]
[132.13931274 69.50502014]
[144.61135864 61.17146683]
[151.37528992 46.23221207]
[167.71939087 44.88980103]
[176.83027649 58.52519226]
[169.33543396 73.11146545]
[152.94491577 73.64350891]
[140.47286987 81.97706604]
[143.52650452 91.73422241]
[144.26226807 101.93154144]
[142.64100647 112.02600861]
[138.74902344 121.48006439]
[132.79357910 129.79026794]
[125.09183502 136.51409912]
[131.37173462 150.13624573]
[152.97642517 155.39472961]
[164.29127502 174.24111938]
[158.90159607 195.29083252]
[168.18800354 207.07058716]
[177.47441101 218.85034180]
[186.76081848 230.63009644]
[202.18472290 236.20104980]
[204.80532837 252.38945007]
[191.92680359 262.54205322]
[176.79745483 256.21475220]
[174.98106384 239.91650391]
[165.69465637 228.13674927]
[156.40824890 216.35699463]
[147.12184143 204.57723999]
[138.55879211 206.77171326]
[129.70341492 206.19293213]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 63]
[7 62]
[10 22]
[11 21]
[13 20]
[27 47]
[28 46]
[29 45]
[30 42]
[31 41]
[32 40]
[33 38]
[49 56]
[50 55]
[66 77]
[67 76]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
