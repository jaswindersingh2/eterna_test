%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCGGUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUCCGCGACGGUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[59.85031891 121.10583496]
[55.17327118 106.92948151]
[55.35142899 92.00259399]
[60.36549759 77.94190979]
[69.67239380 66.27034760]
[82.26409149 58.25205612]
[78.76241302 43.66650772]
[75.26072693 29.08095741]
[71.75904846 14.49540997]
[56.86160278 16.37405205]
[41.84790802 16.60242081]
[26.90021706 15.17774391]
[12.19998074 12.11731529]
[-2.07435465 7.45828676]
[-15.74951077 1.25721383]
[-28.65948296 -6.41062832]
[-40.64755630 -15.45215893]
[-51.56820679 -25.75762177]
[-61.28887177 -37.20191956]
[-69.69154358 -49.64612579]
[-76.67422485 -62.93917847]
[-82.15215302 -76.91972351]
[-86.05883789 -91.41802979]
[-88.34683990 -106.25811768]
[-88.98839569 -121.25984192]
[-87.97571564 -136.24108887]
[-85.32109070 -151.01998901]
[-81.05675507 -165.41716003]
[-75.23445892 -179.25782776]
[-67.92488861 -192.37397766]
[-59.21677399 -204.60639954]
[-49.21582413 -215.80657959]
[-38.04344177 -225.83857727]
[-25.83524513 -234.58061218]
[-12.73943520 -241.92655945]
[1.08501875 -247.78726196]
[15.47029972 -252.09153748]
[30.24178505 -254.78717041]
[45.22015762 -255.84143066]
[60.22360229 -255.24151611]
[75.06998444 -252.99472046]
[89.57908630 -249.12829590]
[103.57477570 -243.68919373]
[116.88716125 -236.74343872]
[129.35464478 -228.37533569]
[140.82588196 -218.68647766]
[151.16160583 -207.79446411]
[160.23638916 -195.83154297]
[167.94003296 -182.94290161]
[174.17903137 -169.28500366]
[178.87767029 -155.02365112]
[181.97888184 -140.33197021]
[183.44505310 -125.38829041]
[183.25834656 -110.37402344]
[181.42106628 -95.47142029]
[177.95549011 -80.86138916]
[172.90370178 -66.72128296]
[166.32702637 -53.22274780]
[158.30528259 -40.52964401]
[148.93585205 -28.79605675]
[138.33248901 -18.16441917]
[126.62388611 -8.76379013]
[113.95218658 -0.70828402]
[100.47120667 5.90431261]
[86.34459686 10.99372864]
[89.84628296 25.57927704]
[93.34796143 40.16482544]
[96.84963989 54.75037384]
[111.70915222 56.17821121]
[125.30043793 62.35240936]
[136.15141296 72.60423279]
[143.08682251 85.82330322]
[145.35548401 100.57786560]
[142.71165466 115.26982880]
[135.44171143 128.30792236]
[124.33306122 138.27995300]
[110.58888245 144.10588074]
[95.69782257 145.15467834]
[81.27272797 141.31274414]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 68]
[7 67]
[8 66]
[9 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
