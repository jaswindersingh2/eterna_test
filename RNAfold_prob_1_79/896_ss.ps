%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGAAGCAGACAGGCAACGAACACGAGGAACACCACAGCACUGACACUGCAAGCAAAAGCAACCGUGGUCAUUCG\
) } def
/len { sequence length } bind def

/coor [
[-48.13424301 211.20480347]
[-52.30273819 224.57623291]
[-59.84083176 236.36546326]
[-70.20980835 245.74264526]
[-82.67195129 252.04980469]
[-96.34304810 254.84709167]
[-110.25514221 253.94342041]
[-123.42501068 249.40946960]
[-134.92370605 241.57228088]
[-143.94207764 230.99160767]
[-157.56422424 237.27149963]
[-162.79853821 252.18382263]
[-177.08033752 258.95181274]
[-191.93649292 253.56015015]
[-198.55311584 239.20759583]
[-193.00466919 224.40927124]
[-178.58296204 217.94476318]
[-163.84413147 223.64935303]
[-150.22198486 217.36946106]
[-152.42224121 201.45307922]
[-149.68273926 185.60203552]
[-142.25123596 171.31494141]
[-130.81956482 159.94592285]
[-116.45931244 152.57635498]
[-100.52134705 149.91195679]
[-84.50873566 152.21527100]
[-69.93501282 159.27978516]
[-58.18110657 170.44845581]
[-45.09366989 163.11914062]
[-32.00622940 155.78981018]
[-18.91878700 148.46049500]
[-18.21441269 136.76342773]
[-11.78082657 126.82408142]
[-1.18227720 121.27914429]
[10.89442730 121.66925812]
[21.32077789 128.01301575]
[34.94292450 121.73310852]
[48.56507492 115.45321655]
[62.18722153 109.17331696]
[75.80937195 102.89342499]
[84.54424286 81.16709900]
[107.55718231 76.83866119]
[116.37396240 64.70340729]
[125.19074249 52.56815338]
[121.23236847 37.43986130]
[127.97103882 23.32872009]
[142.22496033 16.89758110]
[157.26388550 21.18303108]
[165.98686218 34.16160965]
[164.27519226 49.70523453]
[152.93707275 60.47467422]
[137.32600403 61.38493347]
[128.50921631 73.52018738]
[119.69244385 85.65544128]
[121.25177002 88.08695221]
[122.51235962 90.68592072]
[123.45649719 93.41582489]
[138.44493103 94.00471497]
[152.69813538 85.89434052]
[166.70983887 94.41513824]
[166.06602478 110.80164337]
[151.42897034 118.19682312]
[137.85603333 108.99315643]
[122.86759949 108.40425873]
[117.64081573 116.80357361]
[109.50536346 122.43226624]
[99.80264282 124.36225891]
[90.13246155 122.27532959]
[82.08926392 116.51557159]
[68.46711731 122.79547119]
[54.84497070 129.07536316]
[41.22282410 135.35525513]
[27.60067558 141.63516235]
[21.95649529 159.49578857]
[5.45098162 167.67102051]
[-11.58946896 161.54794312]
[-24.67690849 168.87725830]
[-37.76435089 176.20657349]
[-50.85179138 183.53588867]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 19]
[11 18]
[28 79]
[29 78]
[30 77]
[31 76]
[36 73]
[37 72]
[38 71]
[39 70]
[40 69]
[42 54]
[43 53]
[44 52]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
