%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACGCGUGCCCGGGCCGCCGGAAACGGACGGCAAAACCGCAGCCGAAAGGCGCGGACGGGUGCGCCGGGCGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[74.47930145 321.28738403]
[59.27143097 322.08764648]
[45.05517578 316.62704468]
[34.29359436 305.85171509]
[28.85119438 291.62847900]
[29.67090416 276.42163086]
[36.61070633 262.86587524]
[48.46823502 253.30976868]
[63.18910599 249.40901184]
[65.53562164 234.59368896]
[67.88214111 219.77836609]
[70.22865295 204.96304321]
[72.57517242 190.14772034]
[74.92169189 175.33239746]
[77.26820374 160.51705933]
[79.61472321 145.70173645]
[72.80486298 132.33663940]
[59.43976974 125.52678680]
[46.07467270 118.71692657]
[32.70957184 111.90707397]
[19.21334839 105.36093140]
[5.59120131 99.08103943]
[-8.03094673 92.80113983]
[-24.30289650 94.83968353]
[-33.98726273 81.60544586]
[-27.12160110 66.71267700]
[-10.76871395 65.48177338]
[-1.75105023 79.17899323]
[11.87109756 85.45888519]
[25.49324417 91.73878479]
[33.08629608 91.67691040]
[39.51943207 98.54196930]
[52.88452911 105.35182953]
[66.24962616 112.16168976]
[79.61472321 118.97154236]
[73.77409363 105.62647247]
[75.56764984 91.71796417]
[83.93076324 81.14559174]
[96.03700256 76.58460236]
[108.22778320 78.81823730]
[117.96950531 67.41214752]
[127.71122742 56.00605774]
[137.45294189 44.59996796]
[140.76924133 35.79561996]
[147.80798340 32.94705200]
[157.98999023 21.93221474]
[168.17201233 10.91737652]
[171.26153564 -5.18811321]
[186.84068298 -10.30888939]
[198.88294983 0.82286447]
[195.00028992 16.75575256]
[179.18684387 21.09938812]
[169.00483704 32.11422348]
[158.82281494 43.12906265]
[148.85903931 54.34168625]
[139.11730957 65.74777985]
[129.37559509 77.15386963]
[119.63387299 88.55995941]
[124.03409576 107.85622406]
[111.13491821 125.52435303]
[125.57174683 129.59596252]
[141.32446289 125.03701782]
[152.95988464 136.59335327]
[148.50849915 152.37680054]
[132.54949951 156.15069580]
[121.50013733 144.03279114]
[107.06330872 139.96118164]
[94.43004608 148.04826355]
[92.08353424 162.86358643]
[89.73701477 177.67890930]
[87.39049530 192.49423218]
[85.04398346 207.30955505]
[82.69746399 222.12487793]
[80.35094452 236.94020081]
[78.00443268 251.75553894]
[90.79940796 260.01437378]
[99.12359619 272.76693726]
[101.53477478 287.80377197]
[97.61519623 302.51962280]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 75]
[10 74]
[11 73]
[12 72]
[13 71]
[14 70]
[15 69]
[16 68]
[17 35]
[18 34]
[19 33]
[20 32]
[21 30]
[22 29]
[23 28]
[40 58]
[41 57]
[42 56]
[43 55]
[45 54]
[46 53]
[47 52]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
