%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACCUCCAGAAGGAAACUUCACCAUAUAGGGAAAAAACCUAUAUGGAGACUGAAAAGUCAGGAGGCCGUGCCUUCG\
) } def
/len { sequence length } bind def

/coor [
[92.15991211 134.92077637]
[85.88002014 148.54292297]
[79.60012054 162.16506958]
[81.63866425 178.43701172]
[68.40442657 188.12138367]
[53.51165390 181.25572205]
[52.28075409 164.90283203]
[65.97797394 155.88517761]
[72.25786591 142.26303101]
[78.53776550 128.64088440]
[71.89347076 122.15740204]
[67.14021301 114.18315125]
[52.42843246 117.10950470]
[37.71665573 120.03585815]
[23.00487518 122.96221924]
[11.03881931 134.17584229]
[-4.57488871 129.16145325]
[-7.77420378 113.07740784]
[4.73205519 102.46960449]
[20.07852173 108.25043488]
[34.79029846 105.32408142]
[49.50207901 102.39772797]
[64.21385956 99.47137451]
[69.85700989 80.70421600]
[84.53771210 67.72237396]
[81.03603363 53.13682556]
[77.53435516 38.55127716]
[74.03266907 23.96572876]
[70.53099060 9.38017941]
[67.02931213 -5.20536900]
[63.52762985 -19.79091835]
[60.02595139 -34.37646866]
[56.52426910 -48.96201706]
[42.44986343 -55.77708054]
[36.09608841 -70.06566620]
[40.46299744 -85.08112335]
[53.48867035 -93.73362732]
[69.02278900 -91.93772125]
[79.73060608 -80.54138184]
[80.55622864 -64.92561340]
[71.10981750 -52.46369553]
[74.61149597 -37.87814713]
[78.11318207 -23.29259872]
[81.61486053 -8.70704937]
[85.11653900 5.87849903]
[88.61822510 20.46404839]
[92.11990356 35.04959869]
[95.62158203 49.63514709]
[99.12326050 64.22069550]
[118.09750366 69.12269592]
[131.64569092 83.28241730]
[146.08251953 79.21081543]
[160.51934814 75.13920593]
[174.95617676 71.06760406]
[186.00553894 58.94969177]
[201.96453857 62.72359085]
[206.41592407 78.50703430]
[194.78050232 90.06336975]
[179.02778625 85.50443268]
[164.59095764 89.57603455]
[150.15412903 93.64764404]
[135.71730042 97.71924591]
[134.24893188 110.38930511]
[128.43074036 121.73984528]
[138.17245483 133.14593506]
[147.91416931 144.55201721]
[157.65589905 155.95811462]
[167.39761353 167.36419678]
[177.13934326 178.77029419]
[192.02369690 186.88768005]
[188.34394836 203.43746948]
[171.42227173 204.48297119]
[165.73324585 188.51200867]
[155.99153137 177.10592651]
[146.24980164 165.69982910]
[136.50808716 154.29374695]
[126.76636505 142.88764954]
[117.02464294 131.48156738]
[109.09281921 134.61572266]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[12 23]
[13 22]
[14 21]
[15 20]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[51 62]
[52 61]
[53 60]
[54 59]
[64 78]
[65 77]
[66 76]
[67 75]
[68 74]
[69 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
