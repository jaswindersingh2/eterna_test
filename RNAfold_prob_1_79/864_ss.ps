%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGAAGGACGAAAAAGCCAAAAGACCAUAGAAAUAAUGAAGUCAGACGAAAGAUCAACCAAAAAGGUCCACUUCG\
) } def
/len { sequence length } bind def

/coor [
[74.19606018 117.51367950]
[60.12318802 122.70543671]
[59.95978928 137.08369446]
[54.86750031 150.49877930]
[45.48815155 161.31823730]
[32.98390961 168.23312378]
[18.89327431 170.41630554]
[4.94181395 167.62141418]
[-7.16916370 160.21040344]
[-15.97007084 149.10684204]
[-30.23591995 153.74209595]
[-37.66378403 159.51628113]
[-45.15367126 158.26734924]
[-52.65633774 172.17726135]
[-67.82105255 176.62776184]
[-81.65086365 168.97845459]
[-85.94078064 153.76753235]
[-78.14568329 140.01936340]
[-62.89025879 135.89050293]
[-49.22528076 143.83052063]
[-34.87117386 139.47625732]
[-20.60532570 134.84098816]
[-19.64299011 119.14692688]
[-12.76369381 104.96569824]
[-0.97660935 94.44422913]
[13.96369648 89.18762970]
[29.81840324 90.01441193]
[44.19991684 96.82917786]
[54.93143082 108.63256836]
[69.00430298 103.44081116]
[69.11997223 95.64151001]
[71.16744232 88.11487579]
[75.01863098 81.33174896]
[80.43260956 75.71647644]
[87.07068634 71.62033844]
[94.51760101 69.29957581]
[102.30748749 68.89939117]
[109.95301819 70.44479370]
[116.97590637 73.83912659]
[122.93681335 78.87004089]
[127.46282959 85.22280121]
[130.27081299 92.50000000]
[145.27081299 92.50000000]
[160.27081299 92.50000000]
[175.27081299 92.50000000]
[190.27081299 92.50000000]
[200.08044434 83.86055756]
[212.73930359 84.32112122]
[221.32791138 93.07398987]
[236.31634521 93.66288757]
[251.30477905 94.25178528]
[256.52371216 80.05255890]
[265.87658691 68.16227722]
[278.44714355 59.74583817]
[293.00381470 55.62779236]
[308.12051392 56.21158218]
[322.31622314 61.44002151]
[334.20022583 70.80087280]
[342.60824585 83.37705994]
[346.71655273 97.93649292]
[346.12261963 113.05278778]
[340.88467407 127.24501038]
[331.51586914 139.12274170]
[318.93405151 147.52232361]
[304.37185669 151.62086487]
[289.25598145 151.01681519]
[275.06726074 145.76936340]
[263.19580078 136.39259338]
[254.80465698 123.80514526]
[250.71588135 109.24021912]
[235.72744751 108.65132141]
[220.73901367 108.06242371]
[205.83428955 117.10624695]
[190.27081299 107.50000000]
[175.27081299 107.50000000]
[160.27081299 107.50000000]
[145.27081299 107.50000000]
[130.27081299 107.50000000]
[116.57753754 126.41510773]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[10 22]
[11 21]
[13 20]
[42 78]
[43 77]
[44 76]
[45 75]
[46 74]
[49 72]
[50 71]
[51 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
