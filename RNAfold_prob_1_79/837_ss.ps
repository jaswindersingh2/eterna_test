%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACGAAGGUGAAAUAUCCCAAAAGGCCGCCAAAUGAGCGAAGCCAGCCGAAAGUGCAACGAAAAAUGGCGAUUUCG\
) } def
/len { sequence length } bind def

/coor [
[128.71469116 138.86978149]
[120.72584534 143.65583801]
[111.96731567 146.82067871]
[102.76436615 148.24678040]
[93.45875549 147.88116455]
[84.39606476 145.73741150]
[75.91284943 141.89514160]
[68.32413483 136.49702454]
[61.91175461 129.74356079]
[56.91383362 121.88551331]
[42.64798355 126.52076721]
[35.22011948 132.29495239]
[27.73023224 131.04602051]
[13.29340363 135.11763000]
[2.24404573 147.23553467]
[-13.71495533 143.46163940]
[-18.16634750 127.67818451]
[-6.53091955 116.12184906]
[9.22179699 120.68079376]
[23.65862465 116.60919189]
[38.01272964 112.25492096]
[52.27857971 107.61965942]
[51.96195984 94.73311615]
[55.06324768 82.22131348]
[61.36178970 70.97445679]
[70.40943909 61.79277420]
[81.56245422 55.32953644]
[78.06077576 40.74398804]
[74.55909729 26.15843773]
[70.48748779 11.72161007]
[65.85223389 -2.54423785]
[61.21697998 -16.81008530]
[56.30252457 -30.98217583]
[43.35504913 -41.04671097]
[45.86518860 -57.25261307]
[61.25072479 -62.92863846]
[73.68434143 -52.23577881]
[70.37539673 -36.17393112]
[75.78824615 -30.84858704]
[75.48282623 -21.44534111]
[80.11808014 -7.17949295]
[84.75333405 7.08635473]
[88.76437378 10.10873508]
[90.75485992 15.79438210]
[89.14464569 22.65675735]
[92.64632416 37.24230576]
[96.14800262 51.82785416]
[118.46553802 55.34109879]
[136.74731445 68.61483002]
[146.99772644 88.74799347]
[146.97648621 111.34035492]
[160.83467102 117.08060455]
[174.69287109 122.82085419]
[188.55105591 128.56111145]
[202.40925598 134.30136108]
[218.11988831 132.43412781]
[226.91741943 144.45297241]
[240.77560425 150.19322205]
[254.63380432 155.93347168]
[266.35052490 146.08578491]
[281.30407715 142.82243347]
[296.05828857 146.89334106]
[307.22271729 157.36303711]
[312.23184204 171.82563782]
[309.93463135 186.95777893]
[300.85897827 199.28218079]
[287.09036255 205.96679688]
[271.79275513 205.47554016]
[258.48138428 197.92131042]
[250.21514893 185.04000854]
[248.89355469 169.79167175]
[235.03535461 164.05142212]
[221.17716980 158.31117249]
[206.45776367 160.58898926]
[196.66900635 148.15954590]
[182.81080627 142.41929626]
[168.95262146 136.67904663]
[155.09442139 130.93879700]
[141.23623657 125.19854736]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 22]
[11 21]
[13 20]
[14 19]
[27 47]
[28 46]
[29 45]
[30 42]
[31 41]
[32 40]
[33 38]
[51 79]
[52 78]
[53 77]
[54 76]
[55 75]
[57 73]
[58 72]
[59 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
