%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGAUCAAGGUGGAAACACCAGAGAGGACGAGGUGGCGAAAGGCACAGUCAGCUCAAGAUCAGCACUCCUUCG\
) } def
/len { sequence length } bind def

/coor [
[118.45114899 264.43939209]
[116.10463715 249.62405396]
[113.75811768 234.80873108]
[99.44338989 230.61897278]
[88.32158661 220.58827209]
[82.63451385 206.66641235]
[83.55977631 191.59445190]
[90.96730042 178.36509705]
[103.43458557 169.62849426]
[101.08806610 154.81317139]
[98.74154663 139.99784851]
[96.39503479 125.18252563]
[87.10177612 121.92694855]
[79.74105835 115.38605499]
[75.41574860 106.53987122]
[60.42731094 105.95097351]
[45.43887329 105.36207581]
[30.45043945 104.77317810]
[16.19723511 112.88355255]
[2.18552351 104.36276245]
[2.82935119 87.97625732]
[17.46640396 80.58106995]
[31.03933716 89.78474426]
[46.02777100 90.37364197]
[61.01620865 90.96253967]
[76.00464630 91.55142975]
[85.86670685 78.84803772]
[101.37716675 74.59805298]
[106.56892395 60.52518463]
[111.76068115 46.45231628]
[105.39286804 32.23652267]
[110.85852051 18.03858948]
[124.45034790 12.05546284]
[129.64210510 -2.01740766]
[134.83386230 -16.09027672]
[129.58491516 -25.99746513]
[130.78575134 -36.92048264]
[137.77252197 -45.11130142]
[147.93968201 -47.90106583]
[154.21958923 -61.52321625]
[160.49948120 -75.14536285]
[159.25047302 -90.91719055]
[171.60545349 -99.23607635]
[169.56690979 -115.50802612]
[182.80114746 -125.19239807]
[197.69392395 -118.32673645]
[198.92481995 -101.97384644]
[185.22760010 -92.95618439]
[186.92578125 -78.15869904]
[174.12162781 -68.86546326]
[167.84173584 -55.24331665]
[161.56182861 -41.62117004]
[164.98521423 -22.75460625]
[148.90672302 -10.89852142]
[143.71498108 3.17434835]
[138.52322388 17.24721909]
[144.97279358 30.62401009]
[139.90809631 44.96986008]
[125.83354950 51.64406967]
[120.64179230 65.71694183]
[115.45003510 79.78981018]
[124.70657349 93.93860626]
[123.04932404 110.76493835]
[111.21035767 122.83600616]
[113.55687714 137.65133667]
[115.90338898 152.46665955]
[118.24990845 167.28198242]
[132.80676270 171.73838806]
[143.93981934 182.03118896]
[149.47729492 196.07955933]
[148.37066650 211.07743835]
[140.89285278 224.05401611]
[128.57344055 232.46221924]
[130.91995239 247.27754211]
[133.26647949 262.09286499]
[145.34819031 272.64804077]
[144.48472595 288.66784668]
[131.33845520 297.86325073]
[115.99408722 293.18032837]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[3 73]
[9 67]
[10 66]
[11 65]
[12 64]
[15 26]
[16 25]
[17 24]
[18 23]
[28 61]
[29 60]
[30 59]
[33 56]
[34 55]
[35 54]
[39 52]
[40 51]
[41 50]
[43 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
