%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACCUGCAGGAAUCGUGGAGGAACGAGCGGCGAGAGGGCGGUCGACCAGCAGCGAAGGGUGGUGGCCUGGUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[115.93630219 172.00042725]
[100.96912384 171.00871277]
[88.11770630 163.27299500]
[80.23551941 150.51091003]
[79.07267761 135.55604553]
[84.88854980 121.72731781]
[71.03035736 127.46757507]
[57.17216110 133.20782471]
[47.38339996 145.63725281]
[32.66399765 143.35943604]
[18.80580521 149.09968567]
[9.01704597 161.52911377]
[-5.70235682 159.25129700]
[-18.02197266 170.89875793]
[-32.62465668 162.28494263]
[-28.38989258 145.86839294]
[-11.44260883 145.39311218]
[-2.64507914 133.37425232]
[13.06555462 135.24150085]
[26.92374802 129.50125122]
[35.72127533 117.48239136]
[51.43191147 119.34963226]
[65.29010010 113.60938263]
[79.14829254 107.86912537]
[65.17443085 102.41649628]
[63.89414215 87.47123718]
[76.73700714 79.72134399]
[89.36308289 87.82147980]
[85.86140442 73.23593140]
[75.11629486 61.62329483]
[79.66869354 47.44144440]
[76.16701508 32.85589600]
[65.42190552 21.24325943]
[69.97430420 7.06140566]
[57.10168839 -2.51331782]
[56.70559311 -18.55148125]
[69.08986664 -28.74997711]
[84.75435638 -25.28539276]
[91.68260193 -10.81546116]
[84.55985260 3.55972528]
[95.05449677 14.12910461]
[90.75256348 29.35421371]
[94.25424194 43.93976212]
[104.74888611 54.50914383]
[100.44695282 69.73425293]
[103.94863129 84.31980133]
[115.35472107 94.06152344]
[130.30848694 95.23841095]
[145.26223755 96.41529083]
[160.21600342 97.59217834]
[175.16975403 98.76906586]
[190.12351990 99.94595337]
[205.09750366 100.82901764]
[219.19079590 93.63947296]
[231.60449219 101.87047577]
[246.59292603 102.45937347]
[256.09335327 90.19064331]
[271.00009155 85.88156128]
[285.58126831 91.18906403]
[294.23004150 104.07230377]
[293.62084961 119.57741547]
[283.98791504 131.74237061]
[269.03527832 135.88948059]
[254.51257324 130.42411804]
[246.00402832 117.44780731]
[231.01559448 116.85891724]
[217.99436951 124.09057617]
[204.50860596 115.81745148]
[197.51722717 118.78034973]
[188.94664001 114.89971161]
[173.99287415 113.72282410]
[159.03910828 112.54594421]
[144.08535767 111.36905670]
[129.13159180 110.19216919]
[114.17783356 109.01528168]
[128.24934387 114.21072388]
[138.37947083 125.27330017]
[142.31896973 139.74673462]
[139.19313049 154.41743469]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 24]
[7 23]
[8 22]
[10 20]
[11 19]
[13 17]
[28 46]
[29 45]
[31 43]
[32 42]
[34 40]
[47 75]
[48 74]
[49 73]
[50 72]
[51 71]
[52 70]
[53 68]
[55 66]
[56 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
