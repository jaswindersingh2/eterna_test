%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGGAGAAAAAGCCCAAAAGCACAAGAAAACGUUGAAUGCACAGAAAACAUGAAGCAAAAAGUUAGGGUUCG\
) } def
/len { sequence length } bind def

/coor [
[76.08477020 227.40203857]
[69.57292175 241.03187561]
[59.48385620 252.27409363]
[46.63544464 260.21731567]
[32.06924820 264.21765137]
[16.96608925 263.95080566]
[2.55030751 259.43838501]
[-10.00947189 251.04620361]
[-19.69508362 239.45458984]
[-25.72135925 225.60321045]
[-27.59977531 210.61492920]
[-25.17805862 195.70480347]
[-18.65252304 182.08151245]
[-8.55216789 170.84944153]
[4.30421734 162.91911316]
[18.87442398 158.93342590]
[33.97731018 159.21545410]
[48.38854980 163.74235535]
[56.72210312 151.27030945]
[65.05565643 138.79826355]
[73.38921356 126.32621765]
[81.72276306 113.85417175]
[76.16666412 103.71438599]
[76.13613892 91.57476044]
[82.18629456 80.38878632]
[93.32872009 73.13558197]
[107.15827179 72.03480530]
[103.65659332 57.44926071]
[100.15490723 42.86371231]
[96.08330536 28.42688179]
[91.44805145 14.16103458]
[86.81278992 -0.10481323]
[72.24707031 -5.79460621]
[64.79180908 -19.54062843]
[67.96715546 -34.85242844]
[80.27381134 -44.50024033]
[95.90094757 -43.92866516]
[107.46990204 -33.40758133]
[109.51818085 -17.90472412]
[101.07864380 -4.74006796]
[105.71389771 9.52577972]
[110.34915161 23.79162788]
[114.36018372 26.81400681]
[116.35066986 32.49965286]
[114.74045563 39.36203003]
[118.24214172 53.94757843]
[121.74382019 68.53312683]
[119.37450409 53.72143173]
[123.03314209 39.17446136]
[132.12774658 27.24600029]
[145.18675232 19.86614799]
[160.09715271 18.22900391]
[174.44633484 22.59946823]
[185.91252136 32.27037430]
[192.64042664 45.67691422]
[193.54142761 60.64982986]
[188.46974182 74.76641846]
[178.24598694 85.74252319]
[164.52444458 91.80215454]
[149.52532959 91.96482849]
[135.67343140 86.20275879]
[149.03852844 93.01261902]
[162.40362549 99.82247162]
[178.04440308 96.25234222]
[190.49716187 106.36710358]
[190.20921326 122.40757751]
[177.40145874 132.06887817]
[161.89889526 127.93968964]
[155.59376526 113.18756866]
[142.22866821 106.37771606]
[128.86357117 99.56785583]
[115.98087311 120.38278961]
[94.19480896 122.18772888]
[85.86125183 134.65977478]
[77.52770233 147.13182068]
[69.19414520 159.60386658]
[60.86059189 172.07589722]
[70.55784607 183.65779114]
[76.59803009 197.50309753]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 77]
[19 76]
[20 75]
[21 74]
[22 73]
[27 47]
[28 46]
[29 45]
[30 42]
[31 41]
[32 40]
[61 71]
[62 70]
[63 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
