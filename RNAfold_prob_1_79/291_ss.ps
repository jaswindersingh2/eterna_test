%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGCACGAGUACGAAAGUACACUCAGCUGAAAGAUGCUACGGAGUCGCAGAGGAGAAGUGCACCUGGACUUCG\
) } def
/len { sequence length } bind def

/coor [
[130.95309448 126.50989532]
[126.22844696 131.19194031]
[120.80509949 135.04306030]
[114.82752991 137.96067810]
[108.45497131 139.86705017]
[101.85717773 140.71141052]
[95.20990753 140.47126770]
[88.69024658 139.15301514]
[82.47186279 136.79174805]
[76.72041321 133.45040894]
[71.58910370 129.21797180]
[67.21463013 124.20719910]
[63.71353149 118.55156708]
[61.17906189 112.40174866]
[59.67874146 105.92156219]
[44.69030762 105.33266449]
[29.70187187 104.74376678]
[14.71343613 104.15486908]
[0.46023256 112.26524353]
[-13.55147934 103.74445343]
[-12.90765190 87.35794830]
[1.72940052 79.96276093]
[15.30233383 89.16643524]
[30.29076958 89.75533295]
[45.27920532 90.34423065]
[60.26763916 90.93312836]
[62.74441528 83.48062134]
[66.60462952 76.64154053]
[71.70493317 70.66984558]
[77.85594177 65.78729248]
[84.82923889 62.17518234]
[81.90288544 47.46340561]
[78.97653198 32.75162506]
[64.82895660 26.37779045]
[57.15902328 12.88884163]
[58.91597748 -2.52844572]
[69.42423248 -13.94580936]
[84.64315033 -16.97304153]
[98.72074890 -10.44610691]
[106.24390411 3.12525201]
[104.31980896 18.52257156]
[93.68830872 29.82526970]
[96.61466980 44.53704834]
[99.54102325 59.24882889]
[128.81726074 71.18273926]
[140.75117493 100.45897675]
[155.46295166 103.38533020]
[170.17472839 106.31169128]
[184.88650513 109.23804474]
[199.59828186 112.16439819]
[214.31007385 115.09075165]
[229.02185059 118.01710510]
[238.32402039 116.60857391]
[244.24865723 121.35797882]
[258.83419800 124.85965729]
[273.41976929 128.36134338]
[286.78854370 120.36677551]
[301.53048706 124.12575531]
[309.06970215 136.92013550]
[321.53161621 127.47371674]
[337.14739990 128.29934692]
[348.54373169 139.00715637]
[350.33963013 154.54127502]
[341.68713379 167.56695557]
[326.67166138 171.93386841]
[312.38308716 165.58007812]
[305.56802368 151.50567627]
[293.04202271 159.48281860]
[278.20031738 156.13940430]
[269.91809082 142.94688416]
[255.33253479 139.44520569]
[240.74697876 135.94352722]
[226.09548950 132.72888184]
[211.38371277 129.80253601]
[196.67193604 126.87617493]
[181.96015930 123.94982147]
[167.24838257 121.02346802]
[152.53659058 118.09711456]
[137.82481384 115.17076111]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 26]
[16 25]
[17 24]
[18 23]
[31 44]
[32 43]
[33 42]
[46 79]
[47 78]
[48 77]
[49 76]
[50 75]
[51 74]
[52 73]
[54 72]
[55 71]
[56 70]
[59 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
