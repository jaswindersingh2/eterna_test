%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGGCAAAGCCAAGGACAAAGUCCAAGUCUGAAACAGACAAGCUCAAAGAGCAACCCAAAGGGAGGUAUUGUUCG\
) } def
/len { sequence length } bind def

/coor [
[82.31345367 306.27182007]
[67.01479340 308.26040649]
[53.07941055 301.64160156]
[44.95404053 288.52740479]
[45.23145294 273.10253906]
[53.82313156 260.28900146]
[67.98750305 254.17555237]
[70.33402252 239.36022949]
[72.68053436 224.54490662]
[75.02705383 209.72958374]
[77.37357330 194.91426086]
[71.72251129 181.13330078]
[81.52337646 168.71340942]
[83.86989594 153.89808655]
[86.21640778 139.08276367]
[71.22461700 129.82325745]
[61.43503571 115.17211914]
[58.61748505 97.77805328]
[44.03193665 94.27636719]
[29.44638824 90.77468872]
[14.86083889 87.27301025]
[-1.95214725 89.45471954]
[-8.70288944 73.90274811]
[4.37251329 63.11061096]
[18.36251831 72.68746185]
[32.94806671 76.18914032]
[47.53361511 79.69081879]
[62.11916733 83.19250488]
[67.33226776 74.49963379]
[74.49963379 67.33226776]
[83.19250488 62.11916733]
[79.69081879 47.53361511]
[76.18914032 32.94806671]
[72.68746185 18.36251831]
[69.18578339 3.77697039]
[59.60892868 -10.21303558]
[70.40106201 -23.28843880]
[85.95303345 -16.53769684]
[83.77133179 0.27528986]
[87.27301025 14.86083889]
[90.77468872 29.44638824]
[94.27636719 44.03193665]
[97.77805328 58.61748505]
[107.89015198 59.31591034]
[117.53024292 62.44816589]
[126.12162781 67.82687378]
[137.52770996 58.08515167]
[148.93380737 48.34342957]
[160.33988953 38.60170746]
[168.45727539 23.71734238]
[185.00708008 27.39709663]
[186.05256653 44.31877899]
[170.08161926 50.00779724]
[158.67552185 59.74951935]
[147.26943970 69.49124146]
[135.86334229 79.23296356]
[139.17852783 86.49102783]
[141.04127502 94.24990082]
[141.38250732 102.22194672]
[155.96806335 105.72363281]
[170.55361938 109.22531128]
[187.36659241 107.04360199]
[194.11734009 122.59557343]
[181.04193115 133.38771057]
[167.05192566 123.81085968]
[152.46638489 120.30918121]
[137.88082886 116.80749512]
[123.02400970 134.45787048]
[101.03173828 141.42927551]
[98.68521881 156.24459839]
[96.33869934 171.05992126]
[101.82192230 185.90057373]
[92.18889618 197.26077271]
[89.84237671 212.07609558]
[87.49585724 226.89143372]
[85.14934540 241.70675659]
[82.80282593 256.52206421]
[94.38478088 266.71334839]
[98.59635925 281.55471802]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 77]
[8 76]
[9 75]
[10 74]
[11 73]
[13 71]
[14 70]
[15 69]
[18 28]
[19 27]
[20 26]
[21 25]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[46 56]
[47 55]
[48 54]
[49 53]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
