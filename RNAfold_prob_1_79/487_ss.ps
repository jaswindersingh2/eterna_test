%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACAAACCGGGACAGGAAACUGCACGAAAGUGCCCAAAAGUUUUAGAAAUAAAACGGUUUGAAACAAAAAUUUCG\
) } def
/len { sequence length } bind def

/coor [
[110.82682037 308.92184448]
[105.19873047 294.91372681]
[103.55982971 279.90652466]
[106.03173828 265.01382446]
[112.43103027 251.34080505]
[122.28282928 239.90206909]
[134.85606384 231.54646301]
[130.22080994 217.28060913]
[125.58555603 203.01477051]
[120.95030212 188.74891663]
[116.31504822 174.48306274]
[111.67979431 160.21722412]
[107.04454041 145.95137024]
[89.49490356 145.28572083]
[73.44451141 138.15704346]
[61.18404388 125.58272552]
[54.46325684 109.35730743]
[54.24132919 91.79645538]
[60.54992676 75.40637970]
[72.48871613 62.52622986]
[65.67885590 49.16113281]
[58.86899948 35.79603577]
[52.05914307 22.43093681]
[45.24928284 9.06583881]
[38.43942642 -4.29925871]
[30.35235214 -16.93251801]
[21.06594276 -28.71227074]
[11.77953339 -40.49202347]
[2.49312401 -52.27177811]
[-12.93077087 -57.84273148]
[-15.55138588 -74.03113556]
[-2.67285800 -84.18374634]
[12.45648766 -77.85643005]
[14.27287769 -61.55818939]
[23.55928802 -49.77843475]
[32.84569550 -37.99868011]
[42.13210678 -26.21892738]
[44.72418976 -26.11413956]
[47.43650818 -24.97119713]
[49.87820816 -22.74107361]
[51.64845657 -19.51413918]
[52.38394165 -15.51955128]
[51.80452347 -11.10911655]
[58.61438370 2.25598168]
[65.42424011 15.62107944]
[72.23410034 28.98617744]
[79.04395294 42.35127640]
[85.85381317 55.71637344]
[98.19754791 53.54673767]
[110.67229462 54.75338364]
[122.37136078 59.24860001]
[132.44444275 66.70568085]
[140.15943909 76.58262634]
[144.95559692 88.16157532]
[146.48432922 100.60095215]
[144.63453674 112.99665070]
[139.54063416 124.44773865]
[131.57289124 134.12194824]
[121.31038666 141.31611633]
[125.94564056 155.58197021]
[130.58090210 169.84780884]
[135.21615601 184.11366272]
[139.85140991 198.37951660]
[144.48666382 212.64535522]
[149.12191772 226.91120911]
[164.20518494 226.28067017]
[178.89897156 229.74406433]
[192.11291504 237.04435730]
[202.86643982 247.63984680]
[210.36155701 260.74426270]
[214.04209900 275.38516235]
[213.63493347 290.47613525]
[209.17027283 304.89727783]
[200.97941589 317.57846069]
[189.67019653 327.57867432]
[176.08183289 334.15582275]
[161.22267151 336.82183838]
[146.19534302 335.37887573]
[132.11499023 329.93405151]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[13 59]
[20 48]
[21 47]
[22 46]
[23 45]
[24 44]
[25 43]
[26 37]
[27 36]
[28 35]
[29 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
