%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGGAUGACAAAAAAGCAUCGAGGCCCGCGAAAGACGGUAGCCAGGCGUGAGACCAACCAAAAAACGUUCUUUCG\
) } def
/len { sequence length } bind def

/coor [
[89.95463562 240.89094543]
[96.00097656 225.05181885]
[96.00097656 210.05181885]
[96.00097656 195.05181885]
[96.00097656 180.05181885]
[96.00097656 165.05181885]
[96.00097656 150.05181885]
[83.86572266 141.23503113]
[69.59987640 145.87028503]
[55.33402634 150.50553894]
[41.06818008 155.14079285]
[33.64031219 160.91497803]
[26.15042496 159.66604614]
[18.64776230 173.57595825]
[3.48304677 178.02645874]
[-10.34676266 170.37715149]
[-14.63668537 155.16622925]
[-6.84158754 141.41807556]
[8.41383839 137.28919983]
[22.07881927 145.22921753]
[36.43292236 140.87495422]
[50.69877243 136.23970032]
[64.96462250 131.60444641]
[79.23046875 126.96918488]
[69.72201538 108.12882233]
[73.49123383 89.10449982]
[86.90275574 77.57347107]
[83.40106964 62.98792267]
[79.89939117 48.40237045]
[75.82778168 33.96554565]
[71.19252777 19.69969559]
[66.55727386 5.43384838]
[61.64282227 -8.73824215]
[48.69534683 -18.80277824]
[51.20548248 -35.00867844]
[66.59101868 -40.68470383]
[79.02463531 -29.99184418]
[75.71569061 -13.92999840]
[81.12854004 -8.60465336]
[80.82312012 0.79859334]
[85.45837402 15.06444073]
[90.09363556 29.33028793]
[94.10466766 32.35266876]
[96.09515381 38.03831482]
[94.48493958 44.90069199]
[97.98661804 59.48624039]
[101.48830414 74.07179260]
[121.25670624 80.77556610]
[131.32122803 101.34712982]
[123.19270325 124.91603851]
[138.14645386 126.09292603]
[153.10021973 127.26981354]
[168.05398560 128.44670105]
[174.60388184 114.75498199]
[185.66018677 104.35678101]
[199.72761536 98.65837097]
[214.90367126 98.43041992]
[229.13591003 103.70374298]
[240.49952698 113.76518250]
[247.45770264 127.25399780]
[249.06939697 142.34594727]
[245.11665344 156.99995422]
[236.13401794 169.23420715]
[223.33634949 177.39410400]
[208.45440674 180.37609863]
[193.50085449 177.77688599]
[180.49804688 169.94801331]
[171.20449829 157.94824219]
[166.87709045 143.40046692]
[151.92333984 142.22357178]
[136.96957397 141.04669189]
[122.01581573 139.86979675]
[111.00097656 150.05181885]
[111.00097656 165.05181885]
[111.00097656 180.05181885]
[111.00097656 195.05181885]
[111.00097656 210.05181885]
[111.00097656 225.05181885]
[117.04731750 240.89094543]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[5 75]
[6 74]
[7 73]
[8 24]
[9 23]
[10 22]
[11 21]
[13 20]
[27 47]
[28 46]
[29 45]
[30 42]
[31 41]
[32 40]
[33 38]
[50 72]
[51 71]
[52 70]
[53 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
