%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGGAAUGCAAGUCAGGGAGAGUCGCGAAAGUAGAAUUGCUAGAGUGGGUAUGGCCAAAAAAGUAAGGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[139.15492249 125.35312653]
[133.23422241 132.73188782]
[125.94647980 138.76428223]
[117.59148407 143.20219421]
[108.51290131 145.86305237]
[99.08415985 146.63743591]
[89.69308472 145.49348450]
[80.72596741 142.47824097]
[72.55164337 137.71574402]
[65.50635529 131.40188599]
[59.87989807 123.79636383]
[55.90370178 115.21203613]
[53.74131775 106.00198364]
[53.48169327 96.54505920]
[38.89614487 93.04337311]
[23.67103577 97.34530640]
[13.10165501 86.85066986]
[-2.12345386 91.15259552]
[-12.69283295 80.65795898]
[-27.27838135 77.15628052]
[-41.65356827 84.27902985]
[-56.12350082 77.35077667]
[-59.58808517 61.68629074]
[-49.38958740 49.30201721]
[-33.35142517 49.69811249]
[-23.77670097 62.57072830]
[-9.19115257 66.07241058]
[4.99070024 61.52001572]
[16.60333633 72.26512146]
[30.78518867 67.71272278]
[42.39782333 78.45782471]
[56.98337173 81.95951080]
[70.07956696 64.21372986]
[89.86450958 54.46801758]
[111.91525269 54.90103912]
[131.30232239 65.41599274]
[143.69172668 83.66223907]
[155.71725464 73.38133240]
[169.70945740 78.48699188]
[184.42123413 75.56063843]
[193.21501160 62.70345688]
[208.17654419 59.94528961]
[220.37969971 68.40805054]
[235.09149170 65.48169708]
[249.80326843 62.55534363]
[264.51504517 59.62899017]
[279.22683716 56.70263290]
[284.24047852 42.25235367]
[295.73797607 32.31735992]
[310.56607056 29.49004936]
[324.72372437 34.43136978]
[334.44171143 45.71971130]
[349.15347290 42.79335785]
[363.86526489 39.86700058]
[372.43615723 26.58862495]
[387.90332031 23.34165001]
[401.09033203 32.05245209]
[404.17358398 47.55306625]
[395.32385254 60.64725494]
[379.79150391 63.56646347]
[366.79162598 54.57878113]
[352.07983398 57.50513458]
[337.36807251 60.43149185]
[332.70968628 74.57946777]
[321.52069092 84.56255341]
[306.73931885 87.62492371]
[292.31506348 82.84609222]
[282.15316772 71.41441345]
[267.44140625 74.34076691]
[252.72961426 77.26712036]
[238.01783752 80.19348145]
[223.30606079 83.11983490]
[215.27037048 95.60835266]
[200.39221191 98.78566742]
[187.34759521 90.27241516]
[172.63580322 93.19877625]
[161.66256714 103.27037048]
[146.61808777 98.37402344]
[145.98738098 107.81346893]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 32]
[15 31]
[17 29]
[19 27]
[20 26]
[37 78]
[39 76]
[40 75]
[43 72]
[44 71]
[45 70]
[46 69]
[47 68]
[52 63]
[53 62]
[54 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
