%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACCCACGGCGAGGGCGAGGGAAGGGAGGAGAAAAACACCACUCACGCACGAGGAAGCACGAGCGCGGGCGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[99.23605347 123.73974609]
[94.04429626 137.81262207]
[97.35324097 153.87446594]
[84.91962433 164.56732178]
[69.53408813 158.89129639]
[67.02394867 142.68539429]
[79.97142792 132.62086487]
[85.16317749 118.54798889]
[76.47196198 103.25431824]
[80.68554688 86.17570496]
[71.86877441 74.04045105]
[62.81543350 62.08063889]
[53.52902222 50.30088425]
[44.24261475 38.52112961]
[29.62277794 32.47373581]
[27.81963348 17.68867874]
[18.53322411 5.90892506]
[9.24681473 -5.87082911]
[-5.37302113 -11.91822243]
[-7.17616510 -26.70327950]
[-22.62429237 -28.70155907]
[-31.87422562 -40.78019333]
[-29.87396812 -55.49530792]
[-44.26205063 -50.72468185]
[-59.41399002 -51.16587830]
[-73.50010681 -56.76561737]
[-84.81943512 -66.84770966]
[-92.00511932 -80.19468689]
[-94.18944550 -95.19483185]
[-91.10865021 -110.03681946]
[-83.13475037 -122.92839813]
[-71.23063660 -132.31283569]
[-56.83378601 -137.05694580]
[-41.68268967 -136.58782959]
[-27.60691643 -130.96212769]
[-16.30618286 -120.85920715]
[-9.14510918 -107.49900818]
[-6.98842859 -92.49485779]
[-10.09657192 -77.65857697]
[-18.09421539 -64.78171539]
[-3.31873083 -63.29153061]
[6.26681566 -51.47747421]
[4.60358906 -35.98968887]
[18.55919838 -30.78486252]
[21.02656937 -15.15723801]
[30.31297874 -3.37748432]
[39.59938812 8.40226936]
[53.55499649 13.60709572]
[56.02236938 29.23472023]
[65.30877686 41.01447296]
[74.59518433 52.79422760]
[81.38873291 56.18627167]
[84.00402832 65.22367096]
[92.82080841 77.35892487]
[109.42759705 78.19908905]
[121.41397095 89.72377014]
[122.90547180 106.28477478]
[135.37751770 114.61833191]
[147.84956360 122.95188141]
[160.32160950 131.28543091]
[172.79365540 139.61898804]
[188.56669617 140.85263062]
[194.85041809 154.35684204]
[209.36123657 148.85998535]
[224.32283020 152.97465515]
[233.98214722 165.11866760]
[234.62498474 180.62242126]
[226.00416565 193.52439880]
[211.43455505 198.86352539]
[196.51847839 194.58679199]
[186.99147034 182.33871460]
[186.51686096 166.82888794]
[171.63591003 166.19132996]
[164.46009827 152.09103394]
[151.98805237 143.75747681]
[139.51600647 135.42391968]
[127.04396820 127.09037018]
[114.57192230 118.75682068]
[109.89293671 121.59372711]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 8]
[2 7]
[10 54]
[11 53]
[12 51]
[13 50]
[14 49]
[16 47]
[17 46]
[18 45]
[20 43]
[23 40]
[57 78]
[58 77]
[59 76]
[60 75]
[61 74]
[63 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
