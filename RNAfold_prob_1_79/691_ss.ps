%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAGGUGCAAAGGACGUGCGAGGGUGGCGUUAAUCUCCUCCCAGGCCGGUCGAAAGUCCAGCCAACCAUUUUCG\
) } def
/len { sequence length } bind def

/coor [
[86.97693634 197.88865662]
[86.38803864 182.90022278]
[85.79914093 167.91178894]
[85.21024323 152.92335510]
[84.62134552 137.93492126]
[71.98809052 129.84783936]
[58.12989426 135.58808899]
[44.27170181 141.32833862]
[34.48294067 153.75778198]
[19.76353836 151.47996521]
[5.90534592 157.22021484]
[-3.88341403 169.64964294]
[-18.60281754 167.37182617]
[-30.92243385 179.01928711]
[-45.52511597 170.40545654]
[-41.29035187 153.98890686]
[-24.34306908 153.51362610]
[-15.54553890 141.49478149]
[0.16509448 143.36201477]
[14.02328777 137.62176514]
[22.82081604 125.60291290]
[38.53144836 127.47015381]
[52.38964462 121.72989655]
[66.24783325 115.98964691]
[64.63450623 97.50607300]
[71.98889160 81.51876068]
[85.52579498 71.83803558]
[82.02411652 57.25248337]
[78.52243805 42.66693497]
[67.77732849 31.05430031]
[72.32972717 16.87244797]
[68.82804871 2.28689837]
[58.08294296 -9.32573700]
[62.63533783 -23.50759125]
[49.76272202 -33.08231354]
[49.36662674 -49.12047577]
[61.75090027 -59.31897354]
[77.41539001 -55.85438919]
[84.34363556 -41.38445663]
[77.22088623 -27.00927162]
[87.71552277 -16.43989182]
[83.41359711 -1.21478212]
[86.91527557 13.37076664]
[97.40991211 23.94014549]
[93.10798645 39.16525650]
[96.60966492 53.75080490]
[100.11134338 68.33634949]
[118.10500336 74.02294159]
[129.66801453 88.93621063]
[144.56404114 87.17314911]
[159.46006775 85.41008759]
[172.25517273 76.10438538]
[185.80364990 82.29212189]
[200.69967651 80.52906036]
[213.49476624 71.22335052]
[227.04324341 77.41109467]
[239.85221863 67.17087555]
[255.02436829 73.39485168]
[256.95187378 89.68032837]
[243.65190125 99.27420044]
[228.80630493 92.30712128]
[217.07667542 101.48671722]
[202.46272278 95.42508698]
[187.56669617 97.18814850]
[175.83706665 106.36774445]
[161.22312927 100.30611420]
[146.32710266 102.06917572]
[131.43107605 103.83223724]
[130.46702576 111.62976074]
[127.54527283 119.16862488]
[122.74000549 125.95289612]
[116.25170898 131.50904846]
[108.40027618 135.41815186]
[99.60977936 137.34602356]
[100.19867706 152.33445740]
[100.78757477 167.32289124]
[101.37647247 182.31132507]
[101.96537018 197.29975891]
[104.91056824 216.45637512]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[4 75]
[5 74]
[6 24]
[7 23]
[8 22]
[10 20]
[11 19]
[13 17]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[34 40]
[49 68]
[50 67]
[51 66]
[53 64]
[54 63]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
