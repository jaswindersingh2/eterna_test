%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:04 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (60)
} def

/sequence { (\
GGAAAAACACAGGAUAGGAAACUAUCGGGACGGAUGGAAACAUCACUAGGAAACUAGCGGACCCUGUGUGAUACUUUCG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 8 0.005484371 ubox
1 72 0.020803046 ubox
1 74 0.176887960 ubox
1 75 0.225828907 ubox
1 76 0.023332836 ubox
1 77 0.037819707 ubox
1 78 0.694131878 ubox
2 72 0.023287678 ubox
2 74 0.259498631 ubox
2 75 0.027237269 ubox
2 76 0.058732419 ubox
2 77 0.694617513 ubox
2 78 0.371190972 ubox
3 69 0.003237659 ubox
3 72 0.059802212 ubox
3 75 0.061463232 ubox
3 76 0.691139148 ubox
3 77 0.370021959 ubox
4 69 0.004573098 ubox
4 72 0.178463781 ubox
4 75 0.641473000 ubox
4 76 0.355374753 ubox
4 77 0.032804056 ubox
5 69 0.008028357 ubox
5 72 0.149529705 ubox
5 75 0.272357880 ubox
5 76 0.041763629 ubox
5 77 0.009309669 ubox
6 69 0.038547928 ubox
6 72 0.091573128 ubox
6 75 0.048402079 ubox
6 76 0.011187099 ubox
6 77 0.003700120 ubox
7 69 0.983225590 ubox
7 72 0.029388023 ubox
7 75 0.005914114 ubox
8 68 0.998888143 ubox
8 70 0.042246207 ubox
9 67 0.998850072 ubox
9 69 0.042049552 ubox
10 66 0.999056699 ubox
10 68 0.041815841 ubox
11 65 0.997791116 ubox
11 67 0.037449704 ubox
12 26 0.005875689 ubox
12 63 0.004973432 ubox
12 64 0.991749404 ubox
12 65 0.005099336 ubox
13 25 0.004087819 ubox
13 26 0.995023833 ubox
13 62 0.003443755 ubox
13 63 0.085756689 ubox
13 64 0.003168576 ubox
13 65 0.003818419 ubox
14 25 0.998270715 ubox
15 24 0.998542021 ubox
15 61 0.007244083 ubox
16 23 0.998738477 ubox
17 22 0.998140543 ubox
17 23 0.006294921 ubox
17 26 0.003540668 ubox
17 41 0.012335417 ubox
17 58 0.003807966 ubox
18 22 0.009450218 ubox
18 26 0.007214507 ubox
18 41 0.008855069 ubox
18 58 0.004923703 ubox
19 25 0.006923524 ubox
22 29 0.003441700 ubox
22 37 0.038494096 ubox
23 28 0.003322098 ubox
23 36 0.038738937 ubox
24 35 0.038854500 ubox
25 34 0.038945095 ubox
25 61 0.003485329 ubox
26 32 0.032430626 ubox
26 33 0.039168154 ubox
26 59 0.008733133 ubox
26 60 0.005251739 ubox
27 31 0.031284738 ubox
27 58 0.008862525 ubox
27 62 0.008822683 ubox
27 63 0.986606732 ubox
27 64 0.089355667 ubox
27 65 0.003478731 ubox
28 58 0.005304568 ubox
28 62 0.989631213 ubox
28 63 0.101326977 ubox
28 64 0.004142235 ubox
29 62 0.101271391 ubox
29 63 0.004448055 ubox
31 59 0.994124107 ubox
31 60 0.023182708 ubox
32 41 0.004793045 ubox
32 44 0.010463443 ubox
32 46 0.014305162 ubox
32 58 0.982373489 ubox
33 43 0.006364289 ubox
33 44 0.996969339 ubox
33 58 0.004614047 ubox
34 43 0.998274477 ubox
35 42 0.998298897 ubox
35 45 0.009818543 ubox
35 56 0.006514882 ubox
36 41 0.998105131 ubox
36 44 0.011184574 ubox
36 54 0.004055946 ubox
36 55 0.006721762 ubox
37 41 0.007716515 ubox
37 43 0.008176364 ubox
37 44 0.013841744 ubox
37 54 0.006724529 ubox
38 43 0.012757441 ubox
41 49 0.004344028 ubox
41 50 0.003558543 ubox
43 60 0.021335681 ubox
43 61 0.016738992 ubox
44 59 0.034829479 ubox
44 60 0.018403960 ubox
46 57 0.992859860 ubox
47 56 0.998836586 ubox
47 57 0.003418339 ubox
48 55 0.999305633 ubox
49 54 0.998743012 ubox
49 55 0.008488327 ubox
50 54 0.011071963 ubox
59 63 0.004301278 ubox
66 74 0.003483021 ubox
67 73 0.003459096 ubox
69 79 0.047118535 ubox
70 74 0.021115300 ubox
70 75 0.007689664 ubox
70 76 0.012326415 ubox
70 77 0.035607673 ubox
70 78 0.269705025 ubox
71 75 0.011558429 ubox
71 76 0.039863729 ubox
71 77 0.266997313 ubox
72 79 0.005808949 ubox
73 77 0.003822816 ubox
74 79 0.022059466 ubox
1 78 0.9500000 lbox
2 77 0.9500000 lbox
3 76 0.9500000 lbox
4 75 0.9500000 lbox
7 69 0.9500000 lbox
8 68 0.9500000 lbox
9 67 0.9500000 lbox
10 66 0.9500000 lbox
11 65 0.9500000 lbox
12 64 0.9500000 lbox
13 26 0.9500000 lbox
14 25 0.9500000 lbox
15 24 0.9500000 lbox
16 23 0.9500000 lbox
17 22 0.9500000 lbox
27 63 0.9500000 lbox
28 62 0.9500000 lbox
31 59 0.9500000 lbox
32 58 0.9500000 lbox
33 44 0.9500000 lbox
34 43 0.9500000 lbox
35 42 0.9500000 lbox
36 41 0.9500000 lbox
46 57 0.9500000 lbox
47 56 0.9500000 lbox
48 55 0.9500000 lbox
49 54 0.9500000 lbox
showpage
end
%%EOF
