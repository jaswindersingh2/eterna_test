%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACGGUGAGCAAAAAAGCUCCACAAAGUGAACCGACUCACUCAAAAAGAGAGAGAAAACUCUGAGUGGAUUGUUCG\
) } def
/len { sequence length } bind def

/coor [
[46.62772369 161.73390198]
[37.66165924 170.10121155]
[26.67443085 175.50492859]
[14.61258984 177.49223328]
[2.51160002 175.90408325]
[-8.59306240 170.88789368]
[-17.75450706 162.88389587]
[-24.19517708 152.58656311]
[-38.78072739 156.08824158]
[-53.36627579 159.58992004]
[-67.88026428 163.37730408]
[-82.31709290 167.44891357]
[-96.75392151 171.52050781]
[-104.25658417 185.43041992]
[-119.42129517 189.88092041]
[-133.25111389 182.23161316]
[-137.54103088 167.02069092]
[-129.74592590 153.27253723]
[-114.49050903 149.14367676]
[-100.82552338 157.08367920]
[-86.38869476 153.01208496]
[-71.95186615 148.94047546]
[-66.21825409 143.96212769]
[-56.86795425 145.00437927]
[-42.28240585 141.50270081]
[-27.69685745 138.00102234]
[-24.84823990 120.21890259]
[-14.70990181 105.27611542]
[0.84428662 96.00791931]
[18.90822601 94.19392395]
[36.08652115 100.21650696]
[49.13270569 112.98114777]
[62.99089813 107.24089813]
[76.84909058 101.50064087]
[90.70728302 95.76039124]
[96.53793335 89.86141968]
[105.22400665 90.07865906]
[119.29687500 84.88690186]
[129.56607056 72.85135651]
[144.18469238 75.70529938]
[158.25756836 70.51354218]
[172.33042908 65.32179260]
[186.40330505 60.13003540]
[200.47618103 54.93827820]
[214.54904175 49.74652100]
[228.62191772 44.55476761]
[231.62007141 40.58156967]
[235.41394043 38.19346237]
[239.33839417 37.43890762]
[242.79290771 38.12044907]
[245.32414246 39.84424973]
[260.03591919 36.91789627]
[274.74771118 33.99153900]
[281.12152100 19.84396553]
[294.61047363 12.17403221]
[310.02777100 13.93098545]
[321.44512939 24.43923950]
[324.47238159 39.65816116]
[317.94543457 53.73575592]
[304.37408447 61.25891113]
[288.97674561 59.33481216]
[277.67404175 48.70331955]
[262.96228027 51.62967300]
[248.25050354 54.55603027]
[233.81367493 58.62763596]
[219.74079895 63.81939316]
[205.66792297 69.01114655]
[191.59506226 74.20290375]
[177.52218628 79.39466095]
[163.44932556 84.58641815]
[149.37644958 89.77816772]
[140.11384583 101.44236755]
[124.48863220 98.95977020]
[110.41576385 104.15152740]
[96.44754028 109.61858368]
[82.58934021 115.35883331]
[68.73114777 121.09909058]
[54.87295914 126.83934021]
[55.62954712 139.13903809]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 26]
[9 25]
[10 24]
[11 22]
[12 21]
[13 20]
[32 78]
[33 77]
[34 76]
[35 75]
[37 74]
[38 73]
[40 71]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[51 64]
[52 63]
[53 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
