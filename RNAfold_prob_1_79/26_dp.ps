%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:50 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (26)
} def

/sequence { (\
GGAAAAGCUUUGAUACAAAAGGGAAAAGGUUAUGAUUGAAAAAUGAUGACACCGUAUGAGAGCAAAAAGAGAGGAUUCG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 53 0.003816208 ubox
1 78 0.048059406 ubox
2 52 0.003798765 ubox
2 77 0.047104759 ubox
2 78 0.068986030 ubox
3 76 0.045022370 ubox
3 77 0.068397583 ubox
4 76 0.062080276 ubox
4 77 0.004933259 ubox
5 76 0.005760313 ubox
5 77 0.006747944 ubox
6 76 0.008027933 ubox
7 63 0.998811791 ubox
8 21 0.007984564 ubox
8 22 0.003666827 ubox
8 23 0.003552536 ubox
8 28 0.003254181 ubox
8 62 0.999878012 ubox
8 71 0.005808008 ubox
8 73 0.003550054 ubox
9 20 0.008001613 ubox
9 21 0.003661043 ubox
9 22 0.003561196 ubox
9 27 0.003265134 ubox
9 60 0.003295018 ubox
9 61 0.999557308 ubox
9 66 0.003836965 ubox
9 70 0.005741451 ubox
9 72 0.003510935 ubox
10 19 0.007994598 ubox
10 20 0.003643576 ubox
10 21 0.003556023 ubox
10 26 0.003258933 ubox
10 59 0.005192958 ubox
10 60 0.998654474 ubox
10 65 0.004620033 ubox
10 69 0.005530962 ubox
10 71 0.003393884 ubox
11 18 0.007916323 ubox
11 19 0.003628638 ubox
11 20 0.003584508 ubox
11 25 0.003223134 ubox
11 58 0.005627901 ubox
11 59 0.991233066 ubox
11 64 0.005254719 ubox
11 68 0.004961717 ubox
12 57 0.004278102 ubox
12 63 0.005398547 ubox
13 57 0.994451208 ubox
14 56 0.999131123 ubox
15 55 0.997789533 ubox
16 21 0.017660939 ubox
16 22 0.013808384 ubox
16 23 0.011659357 ubox
16 28 0.006136925 ubox
16 54 0.995944203 ubox
16 58 0.012128634 ubox
17 55 0.003319321 ubox
17 57 0.011713225 ubox
18 55 0.004864630 ubox
19 55 0.007333510 ubox
20 55 0.048108470 ubox
21 50 0.011776029 ubox
21 52 0.023696980 ubox
21 53 0.480011498 ubox
21 55 0.008246770 ubox
22 50 0.015017630 ubox
22 52 0.475332643 ubox
22 53 0.580817371 ubox
23 50 0.068581303 ubox
23 52 0.578065457 ubox
23 53 0.089226181 ubox
23 55 0.004300511 ubox
24 55 0.007120891 ubox
25 47 0.004823452 ubox
25 55 0.006086029 ubox
26 47 0.010954157 ubox
26 55 0.003668299 ubox
27 44 0.003987248 ubox
27 47 0.009433158 ubox
28 47 0.012734732 ubox
28 50 0.060110760 ubox
28 52 0.241743712 ubox
28 53 0.208000935 ubox
29 44 0.020087033 ubox
29 47 0.143496235 ubox
29 50 0.960267896 ubox
29 52 0.197980116 ubox
29 53 0.004908674 ubox
30 39 0.010369645 ubox
30 41 0.004089054 ubox
30 42 0.003309178 ubox
30 43 0.020154119 ubox
30 46 0.145174194 ubox
30 48 0.004955134 ubox
30 49 0.973464018 ubox
30 51 0.161964191 ubox
31 38 0.010632213 ubox
31 40 0.004169765 ubox
31 41 0.003339371 ubox
31 42 0.019050138 ubox
31 45 0.145287001 ubox
31 48 0.985146054 ubox
31 49 0.019556144 ubox
31 51 0.003605891 ubox
32 37 0.010426556 ubox
32 44 0.144822047 ubox
32 47 0.987545177 ubox
33 39 0.004664822 ubox
33 40 0.015833507 ubox
33 41 0.006330190 ubox
33 42 0.014153287 ubox
33 43 0.143027727 ubox
33 45 0.004163616 ubox
33 46 0.983297364 ubox
33 49 0.013753544 ubox
34 44 0.004536820 ubox
35 44 0.982419327 ubox
35 47 0.018522359 ubox
36 40 0.015985008 ubox
36 41 0.012114510 ubox
36 42 0.015326641 ubox
36 43 0.984275995 ubox
36 45 0.004205434 ubox
36 46 0.018635776 ubox
37 41 0.016953623 ubox
37 42 0.966609467 ubox
37 43 0.021812827 ubox
37 45 0.018284303 ubox
38 44 0.010127984 ubox
48 53 0.004000374 ubox
52 74 0.004491768 ubox
53 73 0.004514400 ubox
54 63 0.004595609 ubox
55 62 0.004510516 ubox
63 69 0.004403461 ubox
63 71 0.003285155 ubox
63 73 0.003378926 ubox
64 76 0.005529948 ubox
64 77 0.013581727 ubox
65 76 0.013817445 ubox
65 77 0.016017436 ubox
66 76 0.015991720 ubox
66 77 0.030757786 ubox
67 76 0.033194327 ubox
67 77 0.041980648 ubox
68 76 0.045924826 ubox
68 77 0.023973591 ubox
69 76 0.019932844 ubox
69 77 0.073498700 ubox
69 78 0.442010061 ubox
70 76 0.080062458 ubox
70 77 0.430371139 ubox
71 76 0.265680055 ubox
71 77 0.029574043 ubox
71 78 0.307307811 ubox
72 76 0.030975254 ubox
72 77 0.287825671 ubox
73 77 0.008840517 ubox
73 78 0.092303451 ubox
74 78 0.037814549 ubox
7 63 0.9500000 lbox
8 62 0.9500000 lbox
9 61 0.9500000 lbox
10 60 0.9500000 lbox
11 59 0.9500000 lbox
13 57 0.9500000 lbox
14 56 0.9500000 lbox
15 55 0.9500000 lbox
16 54 0.9500000 lbox
22 53 0.9500000 lbox
23 52 0.9500000 lbox
29 50 0.9500000 lbox
30 49 0.9500000 lbox
31 48 0.9500000 lbox
32 47 0.9500000 lbox
33 46 0.9500000 lbox
35 44 0.9500000 lbox
36 43 0.9500000 lbox
37 42 0.9500000 lbox
showpage
end
%%EOF
