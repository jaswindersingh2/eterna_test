%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGUACAGUAGAAAGCAAAAGCAGCAAAAGCAAAUCAUACGAGGUACAACGGAAACGAAGCGUACUAGUUCG\
) } def
/len { sequence length } bind def

/coor [
[77.99208832 342.19927979]
[63.77323532 335.69097900]
[57.11115265 321.54351807]
[61.15147781 306.43688965]
[73.98649597 297.50402832]
[75.16338348 282.55026245]
[76.34026337 267.59649658]
[69.62538910 254.30140686]
[78.42158508 241.15083313]
[79.59847260 226.19706726]
[80.77536011 211.24331665]
[81.95224762 196.28955078]
[83.12913513 181.33578491]
[80.44299316 174.23347473]
[84.65711975 165.82183838]
[86.42018127 150.92581177]
[73.48499298 145.55003357]
[62.42274094 136.95672607]
[54.01482010 125.75293732]
[48.85514069 112.73004150]
[47.30816650 98.80792999]
[49.48316574 84.97003174]
[35.86101913 78.69013214]
[19.58906937 80.72868347]
[9.90470219 67.49444580]
[16.77036476 52.60166931]
[33.12325287 51.37076950]
[42.14091492 65.06798553]
[55.76306152 71.34788513]
[62.73171234 62.73171234]
[71.34788513 55.76306152]
[65.06798553 42.14091492]
[51.37076950 33.12325287]
[52.60166931 16.77036476]
[67.49444580 9.90470219]
[80.72868347 19.58906937]
[78.69013214 35.86101913]
[84.97003174 49.48316574]
[96.30235291 47.42455292]
[107.81126404 47.87673569]
[118.94714355 50.81813049]
[126.27645874 37.73069000]
[133.60577393 24.64325142]
[129.07518005 9.50227547]
[136.65126038 -4.36777782]
[151.83929443 -8.73805141]
[165.62847900 -1.01574051]
[169.83792114 14.21764565]
[161.97026062 27.92440987]
[146.69322205 31.97257042]
[139.36390686 45.06000900]
[132.03457642 58.14744949]
[138.39443970 63.89297485]
[143.73898315 70.59333038]
[147.92686462 78.07133484]
[150.84733582 86.12922668]
[152.42318726 94.55392456]
[167.41162109 95.14282227]
[181.66482544 87.03244781]
[195.67654419 95.55323792]
[195.03271484 111.93974304]
[180.39566040 119.33493042]
[166.82272339 110.13125610]
[151.83428955 109.54235840]
[142.38011169 131.33331299]
[124.31784058 146.75994873]
[101.31620789 152.68887329]
[99.55314636 167.58489990]
[98.08289337 182.51268005]
[96.90600586 197.46643066]
[95.72911835 212.42019653]
[94.55223083 227.37396240]
[93.37534332 242.32771301]
[100.00604248 256.69241333]
[91.29402924 268.77337646]
[90.11714172 283.72714233]
[88.94025421 298.68090820]
[100.21983337 309.51165771]
[101.84722137 325.06433105]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 77]
[6 76]
[7 75]
[9 73]
[10 72]
[11 71]
[12 70]
[13 69]
[15 68]
[16 67]
[22 29]
[23 28]
[31 38]
[32 37]
[41 52]
[42 51]
[43 50]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
