%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:17 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (950)
} def

/sequence { (\
GGAAAGCUGCACUCCGAAAGGAGAGCGAGCACGAAAAAAACGUGCUCGCAGUGCGAAAGCACAGCAGCGCACUGCUUCG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 7 0.016587206 ubox
1 8 0.021179021 ubox
1 10 0.020005188 ubox
1 70 0.033596494 ubox
1 72 0.278013629 ubox
1 73 0.524890846 ubox
1 75 0.189147319 ubox
1 76 0.106219696 ubox
1 77 0.008967879 ubox
1 78 0.180565111 ubox
2 7 0.022493133 ubox
2 10 0.004856011 ubox
2 68 0.003230419 ubox
2 70 0.101408585 ubox
2 72 0.554625629 ubox
2 73 0.035048112 ubox
2 75 0.122463436 ubox
2 76 0.009600050 ubox
2 77 0.176120452 ubox
2 78 0.225728737 ubox
3 8 0.012358923 ubox
3 73 0.148573713 ubox
3 76 0.165896120 ubox
3 77 0.218906721 ubox
4 73 0.015410755 ubox
4 76 0.182266715 ubox
4 77 0.066288584 ubox
5 73 0.048242514 ubox
5 76 0.084777167 ubox
5 77 0.005878561 ubox
6 10 0.006757486 ubox
6 26 0.068276536 ubox
6 49 0.005085115 ubox
6 60 0.008639085 ubox
6 65 0.015336862 ubox
6 68 0.977836358 ubox
6 70 0.015470128 ubox
6 72 0.028815720 ubox
6 73 0.008485697 ubox
6 75 0.095316925 ubox
6 78 0.010325529 ubox
7 25 0.068369974 ubox
7 48 0.005085492 ubox
7 59 0.008647050 ubox
7 64 0.015354766 ubox
7 67 0.978888709 ubox
7 69 0.014387023 ubox
7 74 0.094695627 ubox
7 79 0.005520579 ubox
8 24 0.067508094 ubox
8 27 0.009570913 ubox
8 55 0.005295123 ubox
8 58 0.007449056 ubox
8 63 0.014835289 ubox
8 66 0.978853453 ubox
8 69 0.019813072 ubox
8 71 0.069685999 ubox
8 79 0.004452299 ubox
9 26 0.131818078 ubox
9 54 0.009667996 ubox
9 62 0.008107137 ubox
9 65 0.979100918 ubox
9 68 0.022360905 ubox
9 70 0.074801068 ubox
9 72 0.010077489 ubox
9 75 0.013465367 ubox
9 78 0.007764371 ubox
10 23 0.006048604 ubox
10 25 0.131833034 ubox
10 53 0.009674386 ubox
10 64 0.978082801 ubox
10 67 0.022352496 ubox
10 69 0.074739029 ubox
10 74 0.013469196 ubox
10 79 0.004916601 ubox
11 52 0.009349429 ubox
11 73 0.008200365 ubox
12 23 0.993072746 ubox
12 51 0.008255752 ubox
12 67 0.010376566 ubox
13 22 0.999121668 ubox
13 24 0.006511563 ubox
13 50 0.005270650 ubox
13 66 0.006654883 ubox
14 21 0.999926147 ubox
14 23 0.006681503 ubox
15 20 0.999540492 ubox
15 21 0.007049899 ubox
25 49 0.987697565 ubox
26 48 0.988733512 ubox
27 47 0.999889546 ubox
28 46 0.999837713 ubox
29 45 0.999987274 ubox
30 44 0.999987274 ubox
31 43 0.999784417 ubox
32 42 0.999930975 ubox
33 41 0.989944325 ubox
48 65 0.010638930 ubox
48 75 0.148154723 ubox
49 64 0.010741376 ubox
49 74 0.148426871 ubox
50 73 0.157353551 ubox
51 60 0.005589411 ubox
51 62 0.985349445 ubox
51 70 0.003486970 ubox
51 72 0.158397608 ubox
52 59 0.005528909 ubox
52 61 0.986601204 ubox
52 66 0.003266526 ubox
52 69 0.003492147 ubox
52 71 0.158377069 ubox
53 60 0.987262095 ubox
53 62 0.003275777 ubox
53 65 0.003735388 ubox
53 68 0.003645599 ubox
53 70 0.158410707 ubox
54 59 0.986881516 ubox
54 64 0.003737823 ubox
54 67 0.003648123 ubox
54 69 0.158403417 ubox
55 68 0.154382422 ubox
59 65 0.136993473 ubox
59 68 0.028938870 ubox
59 75 0.003536581 ubox
60 64 0.136833021 ubox
60 67 0.031643539 ubox
60 74 0.003536294 ubox
61 73 0.003488707 ubox
62 67 0.005809724 ubox
63 76 0.081377784 ubox
64 68 0.006019000 ubox
64 70 0.015694008 ubox
64 75 0.096679533 ubox
64 78 0.003582613 ubox
65 69 0.015598179 ubox
65 74 0.096771004 ubox
66 73 0.096731100 ubox
66 76 0.015954175 ubox
67 72 0.095944727 ubox
67 75 0.018262147 ubox
68 74 0.018581111 ubox
68 79 0.004392364 ubox
69 73 0.013346309 ubox
69 75 0.395940342 ubox
69 76 0.009680650 ubox
69 77 0.005704478 ubox
69 78 0.035420185 ubox
70 74 0.393559648 ubox
70 79 0.026090237 ubox
71 76 0.012189679 ubox
71 77 0.010351714 ubox
72 79 0.033807778 ubox
73 79 0.019650105 ubox
74 78 0.040564028 ubox
75 79 0.012479299 ubox
6 68 0.9500000 lbox
7 67 0.9500000 lbox
8 66 0.9500000 lbox
9 65 0.9500000 lbox
10 64 0.9500000 lbox
12 23 0.9500000 lbox
13 22 0.9500000 lbox
14 21 0.9500000 lbox
15 20 0.9500000 lbox
25 49 0.9500000 lbox
26 48 0.9500000 lbox
27 47 0.9500000 lbox
28 46 0.9500000 lbox
29 45 0.9500000 lbox
30 44 0.9500000 lbox
31 43 0.9500000 lbox
32 42 0.9500000 lbox
33 41 0.9500000 lbox
51 62 0.9500000 lbox
52 61 0.9500000 lbox
53 60 0.9500000 lbox
54 59 0.9500000 lbox
showpage
end
%%EOF
