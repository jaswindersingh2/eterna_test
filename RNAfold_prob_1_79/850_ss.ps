%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGGACAAAAAAGCCAAAAGACACUCAAAAGAAGUAAGUCAGCCAAAAGAGCAAGCAAAAAGUACUUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[151.95538330 145.70109558]
[140.62164307 156.01637268]
[127.29531860 163.58393860]
[112.63011169 168.03257751]
[97.34537506 169.14408875]
[82.19084167 166.86393738]
[67.90989685 161.30397034]
[55.20302582 152.73692322]
[44.69354248 141.58302307]
[36.89695358 128.38938904]
[22.63110542 133.02464294]
[15.20324039 138.79882812]
[7.71335268 137.54989624]
[0.21068856 151.45980835]
[-14.95402622 155.91030884]
[-28.78383636 148.26100159]
[-33.07375717 133.05007935]
[-25.27865982 119.30191803]
[-10.02323437 115.17304993]
[3.64174581 123.11306763]
[17.99585152 118.75879669]
[32.26169968 114.12354279]
[30.80627251 99.57561493]
[32.44003677 85.04663849]
[37.09004211 71.18525696]
[44.54869843 58.61032867]
[54.48300171 47.88325882]
[66.44943237 39.48296738]
[79.91374207 33.78448486]
[94.27481842 31.04222870]
[108.89149475 31.37862396]
[123.11120605 34.77865219]
[136.29910278 41.09051895]
[147.86640930 50.03242874]
[157.29670715 61.20516205]
[164.16896057 74.10990906]
[178.60578918 70.03830719]
[193.04261780 65.96669769]
[207.47944641 61.89509201]
[221.91627502 57.82348633]
[236.35310364 53.75187683]
[250.78993225 49.68027115]
[265.22674561 45.60866547]
[267.85833740 29.68036079]
[277.08700562 16.50422096]
[291.05633545 8.64381695]
[306.99365234 7.60209894]
[321.76037598 13.53426743]
[332.46994019 25.22702026]
[346.73577881 20.59176636]
[349.24969482 5.49411964]
[358.50109863 -6.69890928]
[372.36410522 -13.18545341]
[387.65313721 -12.47495174]
[400.85482788 -4.73067236]
[408.93554688 8.26780605]
[410.03842163 23.53352737]
[403.91000366 37.55854416]
[391.95855713 47.12000275]
[376.93045044 50.02075958]
[362.27899170 45.59423447]
[351.37103271 34.85761261]
[337.10519409 39.49286652]
[335.88665771 53.45078278]
[329.37570190 65.90634155]
[318.54327393 74.92970276]
[305.03271484 79.10827637]
[290.91055298 77.76777649]
[278.35037231 71.08081818]
[269.29837036 60.04549408]
[254.86154175 64.11710358]
[240.42471313 68.18870544]
[225.98788452 72.26031494]
[211.55105591 76.33191681]
[197.11422729 80.40352631]
[182.67739868 84.47513580]
[168.24057007 88.54673767]
[169.08792114 103.84839630]
[166.54638672 118.96128845]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 22]
[11 21]
[13 20]
[36 77]
[37 76]
[38 75]
[39 74]
[40 73]
[41 72]
[42 71]
[43 70]
[49 63]
[50 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
