%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGCGUCGGAUGAUAAGCGAAGAAGACAGGGUCGUGAGACGCUGUCAGCCAUCGGAUGCAAAAAGCAGGUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[122.62355042 312.64083862]
[117.74346924 298.37072754]
[116.56634521 283.33526611]
[119.16618347 268.47958374]
[125.37955475 254.73750305]
[134.81588745 242.97286987]
[146.88198853 233.92521667]
[141.14173889 220.06703186]
[135.40148926 206.20883179]
[129.66123962 192.35064697]
[123.92098236 178.49244690]
[111.90213776 169.69491577]
[113.76937103 153.98428345]
[108.02912140 140.12609863]
[102.28886414 126.26789856]
[96.54861450 112.40970612]
[90.18488312 125.99289703]
[77.63713837 134.21202087]
[62.64266205 134.61907959]
[49.66748047 127.09281158]
[42.57617950 113.87489319]
[43.48086929 98.90219879]
[52.11209106 86.63426971]
[65.89907837 80.72505188]
[80.73545837 82.93456268]
[92.20373535 92.60686493]
[80.88050079 81.91004181]
[80.49678802 66.70124817]
[90.76435852 55.97219086]
[90.17546082 40.98375702]
[89.58656311 25.99532127]
[88.99766541 11.00688648]
[88.40876770 -3.98154950]
[80.13564301 -17.46731758]
[87.36730194 -30.48854256]
[86.77840424 -45.47697830]
[86.18950653 -60.46541214]
[76.98583984 -74.03834534]
[84.38101959 -88.67539978]
[100.76752472 -89.31922913]
[109.28832245 -75.30751038]
[101.17794800 -61.05430984]
[101.76684570 -46.06587601]
[102.35574341 -31.07743835]
[110.58674622 -18.66374397]
[103.39720154 -4.57044649]
[103.98609924 10.41798878]
[104.57499695 25.40642357]
[105.16389465 40.39485931]
[105.75279236 55.38329697]
[116.83049774 65.27369690]
[117.64124298 80.46570587]
[107.19216919 92.01796722]
[110.40680695 106.66945648]
[116.14706421 120.52764893]
[121.88731384 134.38584900]
[127.62756348 148.24403381]
[140.05699158 158.03279114]
[137.77917480 172.75219727]
[143.51942444 186.61039734]
[149.25967407 200.46858215]
[154.99993896 214.32678223]
[160.74018860 228.18496704]
[175.66986084 226.05059814]
[190.66120911 227.69696045]
[204.77183533 233.02055359]
[217.11476135 241.68675232]
[226.91409302 253.15078735]
[233.55383301 266.69201660]
[236.61659241 281.45919800]
[235.90986633 296.52410889]
[231.47805786 310.93972778]
[223.59976196 323.79986572]
[212.77021790 334.29614258]
[199.67018127 341.76876831]
[185.12312317 345.74795532]
[170.04350281 345.98361206]
[155.37921143 342.46090698]
[142.05207825 335.40127563]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 63]
[8 62]
[9 61]
[10 60]
[11 59]
[13 57]
[14 56]
[15 55]
[16 54]
[26 53]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[35 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
