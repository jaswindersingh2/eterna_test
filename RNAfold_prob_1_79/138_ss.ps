%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGAAAUUGAUGUGGUGAUGAGUGGAGAAAUCACAAAUGACACAGAGGCAAUGGUCAAAAAACUAUUAGUUCG\
) } def
/len { sequence length } bind def

/coor [
[144.69454956 208.61300659]
[138.07737732 222.07453918]
[127.73979187 232.94349670]
[114.62656403 240.22657776]
[99.93611145 243.25817871]
[85.01099396 241.76121521]
[71.21521759 235.87252808]
[59.80959702 226.13026428]
[51.83647919 213.42477417]
[48.02453232 198.91722107]
[48.72213745 183.93345642]
[53.86553192 169.84283447]
[62.98466492 157.93312073]
[75.24613190 149.29272461]
[89.52936554 144.71131897]
[104.52900696 144.60757446]
[118.86997986 148.98893738]
[111.54065704 135.90148926]
[104.21134186 122.81405640]
[96.88201904 109.72661591]
[90.33861542 104.62973022]
[89.53340912 95.97833252]
[76.37428284 87.19495392]
[77.49020386 72.34220886]
[70.68034363 58.97711182]
[55.91889572 54.00344849]
[49.20312500 40.35232925]
[54.03572083 26.31019211]
[47.22586441 12.94509411]
[40.41600418 -0.42000362]
[33.60614777 -13.78510189]
[18.85402870 -20.09022141]
[14.72484207 -35.59278107]
[24.38614655 -48.40054321]
[40.42661667 -48.68848801]
[50.54137421 -36.23572922]
[46.97124481 -20.59495926]
[53.78110504 -7.22986126]
[60.59096146 6.13523674]
[67.40081787 19.50033379]
[81.60167694 23.84444237]
[88.69822693 37.30154419]
[84.04544830 52.16725159]
[90.85530090 65.53234863]
[103.52735138 73.35977173]
[102.89850616 89.16847992]
[109.96945953 102.39729309]
[117.29878235 115.48473358]
[124.62809753 128.57217407]
[131.95741272 141.65962219]
[143.36351013 151.40133667]
[157.43637085 156.59309387]
[171.50924683 161.78485107]
[185.72503662 155.41703796]
[199.92297363 160.88269043]
[205.90609741 174.47451782]
[219.97897339 179.66627502]
[234.05183411 184.85803223]
[248.12471008 190.04978943]
[262.19757080 195.24154663]
[276.27044678 200.43330383]
[290.51626587 193.58990479]
[305.40072632 198.90296936]
[312.09310913 213.22033691]
[306.62298584 228.04779053]
[292.23565674 234.58843994]
[277.46685791 228.96185303]
[271.07870483 214.50616455]
[257.00582886 209.31440735]
[242.93295288 204.12265015]
[228.86007690 198.93089294]
[214.78721619 193.73913574]
[200.71434021 188.54739380]
[187.33755493 194.99696350]
[172.99169922 189.93225098]
[166.31748962 175.85771179]
[152.24461365 170.66596985]
[138.17175293 165.47421265]
[144.74400330 178.95773315]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 50]
[18 49]
[19 48]
[20 47]
[22 46]
[24 44]
[25 43]
[28 40]
[29 39]
[30 38]
[31 37]
[51 78]
[52 77]
[53 76]
[56 73]
[57 72]
[58 71]
[59 70]
[60 69]
[61 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
