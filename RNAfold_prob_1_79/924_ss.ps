%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAGGAUUAGAUACAGGUGAAAAUAGUGAAAAUAACGUAAUUGAGGAUCAAGAGAAAUCAAGCGGCCAUUUUCG\
) } def
/len { sequence length } bind def

/coor [
[-38.99328232 206.55027771]
[-44.07270813 220.70550537]
[-51.53316498 233.76356506]
[-61.14793015 245.32762146]
[-72.62482452 255.04626465]
[-85.61508179 262.62414551]
[-99.72393799 267.83099365]
[-114.52264404 270.50857544]
[-129.56147766 270.57553101]
[-144.38343811 268.02981567]
[-158.53808594 262.94876099]
[-171.59529114 255.48683167]
[-183.15826416 245.87075806]
[-192.87561035 234.39276123]
[-200.45201111 221.40164185]
[-205.65727234 207.29219055]
[-208.33317566 192.49319458]
[-208.39840698 177.45434570]
[-205.85101318 162.63267517]
[-200.76837158 148.47859192]
[-193.30494690 135.42224121]
[-183.68756104 123.86035919]
[-172.20846558 114.14432526]
[-159.21649170 106.56938171]
[-145.10644531 101.36573029]
[-130.30714417 98.69150543]
[-115.26828766 98.62797546]
[-100.44690704 101.17705536]
[-86.29340363 106.26129913]
[-73.23789215 113.72619629]
[-61.67710876 123.34490204]
[-51.96237183 134.82510376]
[-44.38890457 147.81793213]
[-30.31603622 142.62617493]
[-16.24316597 137.43441772]
[-2.17029572 132.24266052]
[11.90257454 127.05091095]
[25.97544479 121.85915375]
[32.23834610 106.38196564]
[48.01900864 99.97819519]
[63.90776825 106.98383331]
[77.76596069 101.24358368]
[91.62415314 95.50333405]
[94.82466125 90.98421478]
[100.40486145 88.72262573]
[106.80201721 89.90392303]
[121.06787109 85.26866913]
[135.33370972 80.63341522]
[149.59956360 75.99816132]
[154.37693787 63.23518372]
[165.51966858 55.73540115]
[178.74990845 56.10326767]
[189.14570618 63.97385025]
[203.58253479 59.90224457]
[214.63189697 47.78433609]
[230.59089661 51.55823517]
[235.04228210 67.34168243]
[223.40686035 78.89801788]
[207.65414429 74.33907318]
[193.21731567 78.41068268]
[185.75939941 93.34877014]
[169.52494812 98.49467468]
[154.23481750 90.26400757]
[139.96896362 94.89926147]
[125.70312500 99.53451538]
[111.43727875 104.16976929]
[97.36440277 109.36152649]
[83.50621033 115.10177612]
[69.64801788 120.84202576]
[65.88674164 133.94049072]
[55.36678696 142.29139709]
[42.14847565 142.96270752]
[31.16720009 135.93202209]
[17.09432983 141.12377930]
[3.02146006 146.31553650]
[-11.05140972 151.50729370]
[-25.12428093 156.69905090]
[-39.19715118 161.89080811]
[-36.51789093 176.68920898]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[33 78]
[34 77]
[35 76]
[36 75]
[37 74]
[38 73]
[41 69]
[42 68]
[43 67]
[46 66]
[47 65]
[48 64]
[49 63]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
