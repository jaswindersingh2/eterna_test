%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGCCCACUUCACUUUGAGAAACUCAAAAGAAAACAUGACACAAAGUGCAUGAGAAGAGGGCGGAUAAUUUCG\
) } def
/len { sequence length } bind def

/coor [
[115.52957916 346.21612549]
[114.94068146 331.22769165]
[114.35178375 316.23925781]
[113.76288605 301.25082397]
[98.40456390 293.97857666]
[88.66413879 279.94796753]
[87.20470428 262.84271240]
[94.50114441 247.20681763]
[108.69076538 237.23736572]
[106.92770386 222.34133911]
[105.16464233 207.44531250]
[103.40158081 192.54928589]
[94.22197723 180.81965637]
[100.28361511 166.20571899]
[98.52055359 151.30969238]
[96.75749207 136.41366577]
[94.99443054 121.51763153]
[80.51132965 115.39330292]
[72.42314911 99.85711670]
[76.40303802 80.96134949]
[63.61343384 73.12387085]
[50.82382965 65.28639221]
[38.03422928 57.44891739]
[25.24462700 49.61143875]
[12.45502377 41.77396011]
[-4.20926046 38.65338898]
[-5.82377481 21.77649117]
[9.94662571 15.55308151]
[20.29250145 28.98435783]
[33.08210373 36.82183456]
[45.87170792 44.65931320]
[58.66130829 52.49679184]
[71.45091248 60.33427048]
[84.24051666 68.17175293]
[73.78109741 57.41998291]
[73.23156738 42.43004990]
[82.87565613 30.94129181]
[97.73409271 28.88537788]
[110.13543701 37.32378006]
[113.67684937 51.89973450]
[106.52832794 65.08897400]
[116.71033478 54.07413483]
[126.89234924 43.05929565]
[137.07435608 32.04446030]
[140.73374939 23.37709808]
[147.87890625 20.80706406]
[158.48550415 10.20046329]
[169.09210205 -0.40613854]
[176.01666260 -15.88150406]
[192.80415344 -13.51157570]
[195.17407227 3.27591300]
[179.69871521 10.20046329]
[169.09210205 20.80706406]
[158.48550415 31.41366577]
[148.08920288 42.22647095]
[137.90718079 53.24130630]
[127.72517395 64.25614929]
[117.54315948 75.27098083]
[126.12947845 102.00067139]
[109.89045715 119.75457001]
[111.65351868 134.65060425]
[113.41658020 149.54663086]
[115.17964172 164.44265747]
[124.48534393 177.23774719]
[118.29760742 190.78622437]
[120.06066895 205.68225098]
[121.82373047 220.57827759]
[123.58679199 235.47430420]
[136.15103149 239.54173279]
[146.14576721 248.10093689]
[152.05468750 259.80541992]
[152.99990845 272.83526611]
[148.87214661 285.18011475]
[140.34201050 294.94946289]
[128.75132751 300.66192627]
[129.34022522 315.65036011]
[129.92912292 330.63879395]
[130.51802063 345.62722778]
[133.46321106 364.78384399]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[4 75]
[9 68]
[10 67]
[11 66]
[12 65]
[14 63]
[15 62]
[16 61]
[17 60]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[25 29]
[41 58]
[42 57]
[43 56]
[44 55]
[46 54]
[47 53]
[48 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
