%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACUACUGCAAAGGAGAAGUAAUACGCAACAAAAAGAUGGGUAACUAGUCGCGAAAGGGAGUAGAUUUAUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[125.06948853 152.72518921]
[108.44802856 157.76725769]
[91.07879639 157.69607544]
[74.49921417 152.51794434]
[60.17683029 142.69122314]
[49.37937546 129.08569336]
[35.52118301 134.82594299]
[21.66298866 140.56619263]
[11.87422848 152.99562073]
[-2.84517431 150.71780396]
[-16.70336723 156.45805359]
[-26.49212646 168.88749695]
[-41.21152878 166.60966492]
[-53.53114700 178.25714111]
[-68.13383484 169.64331055]
[-63.89906693 153.22676086]
[-46.95178223 152.75148010]
[-38.15425110 140.73263550]
[-22.44361877 142.59986877]
[-8.58542538 136.85961914]
[0.21210365 124.84076691]
[15.92273712 126.70800018]
[29.78092957 120.96775055]
[43.63912201 115.22750092]
[41.67441940 102.55960846]
[42.52185059 89.76831818]
[46.14056015 77.47033691]
[52.35607529 66.25860596]
[60.86871719 56.67370605]
[71.26805115 49.17775726]
[83.05268097 44.13217926]
[95.65441895 41.78023529]
[108.46567535 42.23532486]
[120.86876678 45.47550964]
[132.26567078 51.34456635]
[142.10691833 59.55951691]
[149.91799927 69.72428131]
[155.32229614 81.34877777]
[170.03407288 78.42242432]
[184.74586487 75.49606323]
[199.45764160 72.56970978]
[214.16941833 69.64335632]
[228.88119507 66.71700287]
[243.59297180 63.79064560]
[258.30474854 60.86429214]
[273.01654053 57.93793869]
[278.57443237 53.60263062]
[284.57113647 53.02992630]
[288.99514771 55.40717316]
[303.89117432 53.64411163]
[318.78720093 51.88105011]
[331.58230591 42.57534790]
[345.13076782 48.76308441]
[360.02679443 47.00002289]
[372.82189941 37.69431686]
[386.37036133 43.88205719]
[399.17935181 33.64183807]
[414.35150146 39.86581421]
[416.27902222 56.15129089]
[402.97903442 65.74516296]
[388.13342285 58.77808380]
[376.40380859 67.95767975]
[361.78985596 61.89604950]
[346.89382935 63.65911102]
[335.16421509 72.83870697]
[320.55026245 66.77707672]
[305.65423584 68.54013824]
[290.75820923 70.30319977]
[275.94290161 72.64971924]
[261.23110962 75.57607269]
[246.51933289 78.50242615]
[231.80755615 81.42877960]
[217.09577942 84.35513306]
[202.38398743 87.28149414]
[187.67221069 90.20784760]
[172.96043396 93.13420105]
[158.24865723 96.06055450]
[156.82972717 113.37187958]
[150.38053894 129.49960327]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 24]
[7 23]
[8 22]
[10 20]
[11 19]
[13 17]
[38 77]
[39 76]
[40 75]
[41 74]
[42 73]
[43 72]
[44 71]
[45 70]
[46 69]
[49 68]
[50 67]
[51 66]
[53 64]
[54 63]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
