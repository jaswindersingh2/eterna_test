%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGAACCUAAAAAAAUGGAAAAGGAGUACAAAAGAUACAAUCCAGGCAAAAGACCAACCAAAAACUAAGAAUUCG\
) } def
/len { sequence length } bind def

/coor [
[143.46545410 176.07800293]
[134.64866638 163.94274902]
[121.61204529 163.68766785]
[110.99436951 155.78579712]
[106.88686371 142.99769592]
[111.03659058 130.01707458]
[102.70304108 117.54502869]
[92.53395081 116.10566711]
[84.86390686 109.27540588]
[82.26023102 99.34047699]
[85.59442139 89.62629700]
[78.26509857 76.53885651]
[64.03830719 78.62672424]
[49.99177551 75.69570923]
[37.83826447 68.12437439]
[29.05242348 56.85580444]
[24.69185638 43.28017807]
[25.26984978 29.06326485]
[30.69504547 15.94205475]
[40.28513336 5.51252270]
[33.47527313 -7.85257530]
[26.66541672 -21.21767235]
[19.85556030 -34.58277130]
[5.05662823 -31.60045624]
[-9.99805260 -32.72258759]
[-24.19132423 -37.86589813]
[-36.46995163 -46.64871597]
[-45.92277908 -58.41929626]
[-51.84834671 -72.30419159]
[-53.80693436 -87.27304077]
[-51.65320206 -102.21506500]
[-45.54697418 -116.02146149]
[-35.94137192 -127.66770172]
[-23.54919243 -136.28956604]
[-9.29001999 -141.24723816]
[5.77801991 -142.17285156]
[20.53677940 -138.99769592]
[33.89105988 -131.95739746]
[44.84988785 -121.57440186]
[52.60004044 -108.61917877]
[56.56641006 -94.05310822]
[56.45466232 -78.95707703]
[52.27309036 -64.45131683]
[44.33199310 -51.61225510]
[33.22065735 -41.39262772]
[40.03051376 -28.02753067]
[46.84037399 -14.66243267]
[53.65023041 -1.29733479]
[69.30162048 -2.80193925]
[84.38441467 1.77422798]
[96.62025452 11.77027321]
[104.14931488 25.70432663]
[105.81292725 41.49317169]
[101.33183289 56.76369095]
[91.35253906 69.20954132]
[98.68186188 82.29698181]
[115.13609314 90.72459412]
[115.17508698 109.21147919]
[123.50863647 121.68351746]
[140.61178589 124.68585968]
[150.17518616 138.77767944]
[146.78393555 155.12596130]
[155.60070801 167.26121521]
[170.07072449 162.80058289]
[185.20500183 163.28251648]
[199.36189270 168.65478516]
[211.00576782 178.33460999]
[218.87356567 191.27200317]
[222.11187744 206.06362915]
[220.36940002 221.10499573]
[213.83517456 234.76451111]
[203.21797180 245.56051636]
[189.66946411 252.32192993]
[174.65930176 254.31532288]
[159.81565857 251.32447815]
[146.74868774 243.67381287]
[136.87576294 232.19320679]
[131.26785278 218.12799072]
[130.53324890 203.00387573]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[6 59]
[7 58]
[11 56]
[12 55]
[20 48]
[21 47]
[22 46]
[23 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
