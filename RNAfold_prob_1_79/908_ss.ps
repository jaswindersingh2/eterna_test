%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGAUCAGAGCCAAGCUUCGGCAGCUUCGGCAAAGGACUCAAAGAUCAAGGAAAACCAAGCGGACUACUUCG\
) } def
/len { sequence length } bind def

/coor [
[44.30047607 227.19586182]
[43.52220535 212.21606445]
[46.15653992 197.44920349]
[52.06659317 183.66256714]
[60.94527817 171.57252502]
[72.33124542 161.80729675]
[85.63287354 154.87429810]
[100.15900421 151.13374329]
[115.15483093 150.78001404]
[129.84010315 153.83114624]
[121.02333069 141.69589233]
[112.20655060 129.56063843]
[103.38977051 117.42538452]
[86.05903625 110.99017334]
[83.84741211 92.63601685]
[74.10569000 81.22992706]
[64.36396790 69.82383728]
[54.40018082 58.61120987]
[44.21817017 47.59637451]
[32.62301254 38.08047485]
[19.83341026 30.24299431]
[7.04380846 22.40551567]
[-5.74579382 14.56803799]
[-18.53539658 6.73055935]
[-34.40806198 9.06252098]
[-46.02883911 -1.99808979]
[-44.48326111 -17.96651840]
[-30.95696259 -26.59315491]
[-15.82616425 -21.26037979]
[-10.69791794 -6.05904293]
[2.09168458 1.77843559]
[14.88128662 9.61591434]
[27.67088890 17.45339203]
[40.46049118 25.29087067]
[38.82807159 10.37996197]
[46.88802338 -2.27061963]
[61.09213257 -7.09174585]
[75.18737030 -1.96102619]
[82.96862793 10.86285782]
[81.01039124 25.73448563]
[70.17472076 36.10696411]
[55.23300934 37.41436005]
[65.41501617 48.42919922]
[72.45375824 51.27776718]
[75.77005768 60.08211517]
[85.51177979 71.48820496]
[95.25350189 82.89429474]
[105.52127838 83.12842560]
[113.94096375 89.00982666]
[117.69432831 98.56987000]
[115.52502441 108.60860443]
[124.34180450 120.74385834]
[133.15858459 132.87911987]
[141.97535706 145.01437378]
[145.22146606 145.82890320]
[148.03559875 147.35980225]
[150.27223206 149.44914246]
[165.26066589 150.03804016]
[179.51387024 141.92765808]
[193.52558899 150.44845581]
[192.88175964 166.83496094]
[178.24470520 174.23013306]
[164.67176819 165.02647400]
[149.68333435 164.43757629]
[160.37965393 174.95368958]
[168.41656494 187.61891174]
[173.37646484 201.77516174]
[175.00160217 216.68687439]
[173.20756531 231.57919312]
[168.08757019 245.67832947]
[159.90763855 258.25167847]
[149.09281921 268.64587402]
[136.20506287 276.32089233]
[121.91401672 280.87786865]
[106.96227264 282.08007812]
[92.12672424 279.86499023]
[78.17824554 274.34774780]
[65.84161377 265.81503296]
[55.75784683 254.71017456]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 54]
[11 53]
[12 52]
[13 51]
[15 47]
[16 46]
[17 45]
[18 43]
[19 42]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
