%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGCUUUGAUACAAAAGGGAAAAGGUUAUGAUUGAAAAAUGAUGACACCGUAUGAGAGCAAAAAGAGAGGAUUCG\
) } def
/len { sequence length } bind def

/coor [
[121.63531494 307.34170532]
[116.75522614 293.07159424]
[115.57810211 278.03613281]
[118.17794037 263.18045044]
[124.39131165 249.43835449]
[133.82763672 237.67372131]
[145.89375305 228.62608337]
[140.15350342 214.76788330]
[134.41323853 200.90969849]
[128.67298889 187.05149841]
[122.93273926 173.19331360]
[110.91389465 164.39578247]
[112.78112793 148.68515015]
[107.04087830 134.82695007]
[101.30062866 120.96875763]
[95.56037140 107.11056519]
[92.93790436 106.06404114]
[90.59942627 104.04523468]
[88.89978027 101.14990997]
[88.15545654 97.60002136]
[88.60101318 93.72736359]
[90.35251617 89.94256592]
[87.42616272 75.23078156]
[79.19172668 71.73731995]
[73.20008850 65.22563171]
[70.46260834 56.91190720]
[71.39273071 48.30522537]
[75.74559784 40.93368530]
[82.67577362 36.07313538]
[82.08687592 21.08470154]
[81.49797821 6.09626579]
[80.90908051 -8.89216995]
[80.32018280 -23.88060570]
[72.04705811 -37.36637115]
[79.27872467 -50.38759613]
[78.68982697 -65.37602997]
[78.10092926 -80.36447144]
[68.89726257 -93.93740082]
[76.29244232 -108.57445526]
[92.67894745 -109.21828461]
[101.19974518 -95.20657349]
[93.08936310 -80.95336914]
[93.67826080 -65.96492767]
[94.26715851 -50.97649384]
[102.49816132 -38.56280136]
[95.30862427 -24.46950150]
[95.89752197 -9.48106670]
[96.48641968 5.50736856]
[97.07531738 20.49580383]
[97.66420746 35.48424149]
[111.38963318 52.06787491]
[102.13793945 72.30442810]
[105.06430054 87.01621246]
[109.41856384 101.37031555]
[115.15882111 115.22850800]
[120.89907074 129.08670044]
[126.63932037 142.94490051]
[139.06875610 152.73365784]
[136.79093933 167.45304871]
[142.53118896 181.31124878]
[148.27143860 195.16944885]
[154.01168823 209.02763367]
[159.75193787 222.88583374]
[174.68162537 220.75144958]
[189.67295837 222.39781189]
[203.78359985 227.72142029]
[216.12652588 236.38761902]
[225.92585754 247.85163879]
[232.56558228 261.39285278]
[235.62835693 276.16006470]
[234.92161560 291.22497559]
[230.48982239 305.64059448]
[222.61152649 318.50073242]
[211.78198242 328.99700928]
[198.68194580 336.46960449]
[184.13488770 340.44882202]
[169.05525208 340.68444824]
[154.39096069 337.16177368]
[141.06382751 330.10214233]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 63]
[8 62]
[9 61]
[10 60]
[11 59]
[13 57]
[14 56]
[15 55]
[16 54]
[22 53]
[23 52]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[35 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
