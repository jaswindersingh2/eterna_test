%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGUAGCUAGGAAAAACUAGGUCAAAGACACUACAGCCACAGGAAAACUGCAUGGAAACAUGGGCACGUUUUUUCG\
) } def
/len { sequence length } bind def

/coor [
[54.01696777 257.30004883]
[47.67111588 271.11303711]
[36.51890945 281.44244385]
[22.26098824 286.71313477]
[7.07157707 286.12133789]
[-6.73304844 279.75732422]
[-17.04778290 268.59152222]
[-22.29970551 254.32669067]
[-21.68793488 239.13807678]
[-15.30576038 225.34182739]
[-4.12641954 215.04179382]
[10.14531994 209.80863953]
[25.33312225 210.44038391]
[31.61301804 196.81823730]
[37.89291382 183.19609070]
[44.17280960 169.57394409]
[50.45270538 155.95179749]
[56.73260117 142.32965088]
[63.01249695 128.70750427]
[69.29239655 115.08535767]
[65.79071045 100.49980927]
[54.01095963 91.21340179]
[42.23120499 81.92698669]
[30.27139664 72.87364960]
[18.13614082 64.05686951]
[6.00088644 55.24009323]
[-10.36719036 50.82167816]
[-10.65258121 33.87013245]
[5.55748749 28.90323830]
[14.81766510 43.10483932]
[26.95292091 51.92161942]
[39.08817673 60.73839569]
[46.54739761 62.15904236]
[51.51761627 70.14723969]
[63.29737091 79.43364716]
[75.07712555 88.72005463]
[87.17036438 78.03416443]
[102.07960510 76.57256317]
[114.00965118 83.55818939]
[127.09709167 76.22887421]
[140.18452454 68.89955139]
[136.06158447 56.43513489]
[142.15557861 40.88135529]
[150.97235107 28.74609947]
[159.78913879 16.61084366]
[158.70971680 0.60414481]
[170.64797974 -10.11300278]
[186.44592285 -7.31932068]
[193.98471069 6.84211731]
[187.48121643 21.50786781]
[171.92439270 25.42762184]
[163.10760498 37.56287766]
[154.29083252 49.69813156]
[161.36178589 62.92695236]
[176.35021973 62.33805466]
[191.33865356 61.74915695]
[206.32708740 61.16025925]
[219.90002441 51.95658875]
[234.53707886 59.35177231]
[235.18090820 75.73827362]
[221.16918945 84.25907135]
[206.91598511 76.14869690]
[191.92755127 76.73759460]
[176.93911743 77.32649231]
[161.95068359 77.91539001]
[147.51385498 81.98699188]
[134.42640686 89.31631470]
[121.33896637 96.64562988]
[118.80150604 114.13056946]
[103.19351196 125.23685455]
[82.91454315 121.36525726]
[76.63464355 134.98739624]
[70.35475159 148.60954285]
[64.07485199 162.23168945]
[57.79495621 175.85385132]
[51.51506042 189.47599792]
[45.23516464 203.09814453]
[38.95526886 216.72029114]
[49.29934692 227.85888672]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 78]
[14 77]
[15 76]
[16 75]
[17 74]
[18 73]
[19 72]
[20 71]
[21 36]
[22 35]
[23 34]
[24 32]
[25 31]
[26 30]
[39 68]
[40 67]
[41 66]
[43 53]
[44 52]
[45 51]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
