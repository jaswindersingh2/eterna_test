%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGUAUAAUAUGAAAACAUGAGACAACACAAAGUGGUAAAAGGUACAGUGAAGUUAAGUAUAUUAGGAGUUCG\
) } def
/len { sequence length } bind def

/coor [
[58.37934875 335.44351196]
[64.42568970 319.60437012]
[64.42568970 304.60437012]
[64.42568970 289.60437012]
[53.11726761 284.99887085]
[44.07688141 276.73904419]
[38.43934631 265.82867432]
[36.92374420 253.60623169]
[39.74179840 241.58068848]
[46.56866455 231.24526978]
[56.58019257 223.89195251]
[68.55234528 220.45008850]
[70.31540680 205.55406189]
[72.07846832 190.65803528]
[73.84152985 175.76200867]
[75.60459137 160.86598206]
[77.36765289 145.96995544]
[64.04699707 152.86634827]
[49.64641571 148.66835022]
[42.11832809 135.69422913]
[45.61997223 121.10867310]
[58.21763611 112.96626282]
[72.95451355 115.76347351]
[81.69248962 127.95571136]
[86.88424683 113.88284302]
[80.91354370 100.68068695]
[85.92861176 87.08673859]
[99.04288483 80.92540741]
[104.23464203 66.85253143]
[109.42639923 52.77966309]
[103.05858612 38.56387329]
[108.52423859 24.36594009]
[122.11606598 18.38281250]
[127.30782318 4.30994225]
[132.49957275 -9.76292801]
[127.25063324 -19.67011452]
[128.45147705 -30.59313202]
[135.43824768 -38.78395081]
[145.60540771 -41.57371521]
[151.88529968 -55.19586563]
[158.16519165 -68.81801605]
[150.46601868 -82.29029083]
[152.18951416 -97.71134949]
[162.67297363 -109.15148926]
[177.88528442 -112.21173096]
[191.97702026 -105.71535492]
[199.52960205 -92.16035461]
[197.63891602 -76.75889587]
[187.03196716 -65.43315887]
[171.78733826 -62.53811646]
[165.50744629 -48.91596985]
[159.22755432 -35.29381943]
[162.65092468 -16.42725563]
[146.57244873 -4.57117176]
[141.38069153 9.50169849]
[136.18893433 23.57456779]
[142.63851929 36.95135880]
[137.57380676 51.29721069]
[123.49926758 57.97142029]
[118.30751038 72.04428864]
[113.11575317 86.11715698]
[119.08645630 99.31931305]
[114.07138824 112.91326141]
[100.95711517 119.07459259]
[95.76535797 133.14746094]
[92.26367950 147.73301697]
[90.50061798 162.62904358]
[88.73755646 177.52507019]
[86.97449493 192.42109680]
[85.21143341 207.31712341]
[83.44837189 222.21315002]
[98.43841553 232.43936157]
[106.35316467 248.67683411]
[105.18476868 266.62033081]
[95.32180023 281.55703735]
[79.42568970 289.60437012]
[79.42568970 304.60437012]
[79.42568970 319.60437012]
[85.47203064 335.44351196]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[12 71]
[13 70]
[14 69]
[15 68]
[16 67]
[17 66]
[24 65]
[25 64]
[28 61]
[29 60]
[30 59]
[33 56]
[34 55]
[35 54]
[39 52]
[40 51]
[41 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
