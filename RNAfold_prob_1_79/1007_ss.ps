%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGCGAAACGCAACAACAAAGUUGAAGAAAGAAACUUUCAAGAUCAAAGAUCAAGAGAAACUCAUCCCUGGUUCG\
) } def
/len { sequence length } bind def

/coor [
[119.26250458 183.55441284]
[114.62725067 169.28855896]
[109.99199677 155.02272034]
[97.33770752 155.85920715]
[84.82033539 153.82301331]
[73.08361816 149.01884460]
[62.73112869 141.69377136]
[51.32503891 151.43550110]
[39.91894913 161.17721558]
[31.80156326 176.06158447]
[15.25176716 172.38183594]
[14.20627594 155.46014404]
[30.17722893 149.77113342]
[41.58332062 140.02940369]
[52.98941040 130.28768921]
[47.42688751 119.06324768]
[44.50247955 106.88221741]
[44.36293411 94.35583496]
[29.77738571 90.85415649]
[15.19183731 87.35247803]
[0.60628855 83.85079193]
[-16.20669746 86.03250122]
[-22.95743942 70.48052979]
[-9.88203716 59.68839645]
[4.10796881 69.26524353]
[18.69351768 72.76692963]
[33.27906799 76.26860809]
[47.86461639 79.77028656]
[55.37884521 66.29106903]
[66.29106903 55.37884521]
[79.77028656 47.86461639]
[76.26860809 33.27906799]
[72.76692963 18.69351768]
[69.26524353 4.10796881]
[65.76356506 -10.47758007]
[56.18671417 -24.46758652]
[66.97885132 -37.54298782]
[82.53082275 -30.79224586]
[80.34911346 -13.97926044]
[83.85079193 0.60628855]
[87.35247803 15.19183731]
[90.85415649 29.77738571]
[94.35583496 44.36293411]
[109.77729797 44.93872452]
[124.45420074 49.70753860]
[137.26887512 58.30622482]
[148.67495728 48.56450272]
[160.08105469 38.82278442]
[171.48713684 29.08106232]
[179.60452271 14.19669628]
[196.15432739 17.87644958]
[197.19981384 34.79813004]
[181.22886658 40.48715210]
[169.82276917 50.22887421]
[158.41668701 59.97059250]
[147.01058960 69.71231079]
[152.57312012 80.93675232]
[155.49751282 93.11778259]
[155.63706970 105.64416504]
[170.22261047 109.14584351]
[184.80816650 112.64752197]
[201.62115479 110.46582031]
[208.37188721 126.01779175]
[195.29649353 136.80992126]
[181.30648804 127.23307037]
[166.72093201 123.73139191]
[152.13539124 120.22971344]
[141.06524658 137.96031189]
[124.25784302 150.38746643]
[128.89309692 164.65330505]
[133.52835083 178.91915894]
[148.47468567 182.74154663]
[158.96507263 194.05328369]
[161.65205383 209.24484253]
[155.67822266 223.46865845]
[142.94982910 232.18595886]
[127.52842712 232.61508179]
[114.33495331 224.61911011]
[107.57939148 210.74949646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[3 69]
[7 15]
[8 14]
[9 13]
[18 28]
[19 27]
[20 26]
[21 25]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[46 56]
[47 55]
[48 54]
[49 53]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
