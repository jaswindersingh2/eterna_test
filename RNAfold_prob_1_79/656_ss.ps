%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGUCAAGUCGCCCACAUAAAACGACACGAGCUCCAGAAUCAUGCUCCGGACCGGAUAGAAGCAAUCGCAAUUCG\
) } def
/len { sequence length } bind def

/coor [
[85.52703094 107.50000000]
[70.52703094 107.50000000]
[55.52703094 107.50000000]
[49.23015976 110.66771698]
[43.23693466 110.05950928]
[39.36170578 106.86486053]
[24.99701500 113.49555969]
[12.91603851 104.78354645]
[-2.03772187 103.60665894]
[-13.99130344 113.59413147]
[-29.13977814 112.18757629]
[-38.58764267 100.73011780]
[-53.54140091 99.55323029]
[-68.49516296 98.37634277]
[-83.44892120 97.19945526]
[-91.54907990 110.18583679]
[-104.76233673 117.91036224]
[-120.05239105 118.59799957]
[-133.90570068 112.09073639]
[-143.13887024 99.88388062]
[-145.63018799 84.78249359]
[-140.80715942 70.25675964]
[-129.77809143 59.64457703]
[-115.07738495 55.38455963]
[-100.08315277 58.45562363]
[-88.24095154 68.15205383]
[-82.27203369 82.24569702]
[-67.31827545 83.42258453]
[-52.36451340 84.59947205]
[-37.41075516 85.77635956]
[-26.28686714 75.93792725]
[-11.10486412 76.91843414]
[-0.86083543 88.65290070]
[14.09292507 89.82978058]
[27.38802338 83.11490631]
[40.53859329 91.91110229]
[55.52703094 92.50000000]
[70.52703094 92.50000000]
[85.52703094 92.50000000]
[99.67995453 83.70231628]
[114.16736603 91.93757629]
[129.15579224 91.34867859]
[144.14424133 90.75978088]
[159.13267517 90.17088318]
[165.30032349 86.75839996]
[171.31280518 87.13083649]
[175.31047058 90.17088318]
[190.29890442 90.75978088]
[205.28733826 91.34867859]
[220.05374146 88.71173096]
[233.91192627 82.97148132]
[247.77012634 77.23123169]
[261.62832642 71.49098206]
[273.94793701 59.84351730]
[288.55062866 68.45733643]
[284.31585693 84.87388611]
[267.36856079 85.34917450]
[253.51037598 91.08942413]
[239.65217590 96.82967377]
[225.79399109 102.56993103]
[239.64370728 108.33057404]
[249.41244507 119.71353912]
[253.00468445 134.27703857]
[249.64985657 148.89706421]
[240.06761169 160.43745422]
[226.31344604 166.42266846]
[211.33776855 165.56880188]
[198.35302734 158.05903625]
[190.14459229 145.50428772]
[188.47326660 130.59770203]
[193.69757080 116.53687286]
[204.69844055 106.33711243]
[189.71000671 105.74821472]
[174.72157288 105.15931702]
[159.72157288 105.15931702]
[144.73313904 105.74821472]
[129.74468994 106.33711243]
[114.75626373 106.92601013]
[106.20355988 115.07424164]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 39]
[2 38]
[3 37]
[6 36]
[8 34]
[9 33]
[12 30]
[13 29]
[14 28]
[15 27]
[41 78]
[42 77]
[43 76]
[44 75]
[47 74]
[48 73]
[49 72]
[50 60]
[51 59]
[52 58]
[53 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
