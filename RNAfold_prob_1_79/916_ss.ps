%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGAUCGUACACAAAUGAAAAUAGCGAAAGCAAAGUAGUAAAAGAUCAAGAGAAAUCAAGCCUUUUUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[129.59060669 218.50019836]
[114.78446198 220.90397644]
[100.33977509 216.86035156]
[88.93360138 207.11872864]
[82.67987823 193.48454285]
[82.73762512 178.48466492]
[89.09613800 164.89903259]
[100.57697296 155.24551392]
[115.05236816 151.31321716]
[129.84010315 153.83114624]
[121.02333069 141.69589233]
[112.20655060 129.56063843]
[103.38977051 117.42538452]
[86.05903625 110.99017334]
[83.84741211 92.63601685]
[74.10569000 81.22992706]
[64.36396790 69.82383728]
[54.40018082 58.61120987]
[44.21817017 47.59637451]
[30.87002373 54.63124084]
[16.15572929 57.97070312]
[1.07853603 57.38706207]
[-13.33357048 52.92011642]
[-26.09794807 44.87443161]
[-36.34430313 33.79857254]
[-43.37401581 20.44771004]
[-46.70779419 5.73212814]
[-46.11833572 -9.34483910]
[-41.64582443 -23.75522041]
[-33.59521103 -36.51649094]
[-22.51539612 -46.75856781]
[-9.16182041 -53.78312683]
[5.55504704 -57.11122131]
[20.63178635 -56.51593781]
[35.04043961 -52.03786850]
[47.79859924 -43.98232651]
[58.03639603 -32.89855576]
[65.05580139 -19.54227066]
[68.37821198 -4.82411909]
[67.77710724 10.25238895]
[63.29347229 24.65931129]
[55.23300934 37.41436005]
[65.41501617 48.42919922]
[72.45375824 51.27776718]
[75.77005768 60.08211517]
[85.51177979 71.48820496]
[95.25350189 82.89429474]
[105.52127838 83.12842560]
[113.94096375 89.00982666]
[117.69432831 98.56987000]
[115.52502441 108.60860443]
[124.34180450 120.74385834]
[133.15858459 132.87911987]
[141.97535706 145.01437378]
[153.38145447 154.75608826]
[166.74655151 161.56594849]
[180.11164856 168.37580872]
[193.47674561 175.18565369]
[206.84184265 181.99551392]
[220.20693970 188.80537415]
[233.57203674 195.61523438]
[246.93713379 202.42509460]
[261.25994873 196.14886475]
[276.25152588 200.59710693]
[284.83328247 213.66949463]
[282.95321655 229.19363403]
[271.49899292 239.83952332]
[255.87896729 240.58049011]
[243.46844482 231.06666565]
[240.12727356 215.79019165]
[226.76217651 208.98033142]
[213.39707947 202.17047119]
[200.03198242 195.36061096]
[186.66688538 188.55076599]
[173.30178833 181.74090576]
[159.93669128 174.93104553]
[146.57159424 168.12118530]
[151.37176514 182.33238220]
[149.75259399 197.24473572]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 54]
[11 53]
[12 52]
[13 51]
[15 47]
[16 46]
[17 45]
[18 43]
[19 42]
[55 77]
[56 76]
[57 75]
[58 74]
[59 73]
[60 72]
[61 71]
[62 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
