%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGAUACAGUGCGAAAGUACAGUAUAUAUCGAAAAAAGGUGUGUGCAGUACGAAAGUACAGUGUCGGAGGACUUCG\
) } def
/len { sequence length } bind def

/coor [
[107.03167725 320.23577881]
[102.30372620 305.85089111]
[102.50521851 290.71026611]
[107.61428070 276.45626831]
[117.07673645 264.63507080]
[129.86616516 256.52896118]
[126.36447906 241.94340515]
[122.86280060 227.35784912]
[119.36112213 212.77230835]
[115.85944366 198.18675232]
[105.36479950 187.61737061]
[109.66673279 172.39227295]
[106.16505432 157.80671692]
[102.66336823 143.22117615]
[99.16168976 128.63562012]
[84.98630524 124.39857483]
[74.81530762 113.65404510]
[71.36147308 99.26776886]
[75.54597473 85.07678223]
[86.25276184 74.86605835]
[82.75108337 60.28050995]
[79.24939728 45.69496155]
[75.74771881 31.10941315]
[65.00261688 19.49677658]
[69.55500793 5.31492376]
[66.05332947 -9.27062511]
[62.55165100 -23.85617447]
[59.04996872 -38.44172287]
[55.54829025 -53.02727127]
[52.04660797 -67.61282349]
[48.54492950 -82.19837189]
[45.04324722 -96.78392029]
[41.54156494 -111.36946869]
[27.46716118 -118.18453217]
[21.11338425 -132.47311401]
[25.48029327 -147.48857117]
[38.50596619 -156.14108276]
[54.04008484 -154.34516907]
[64.74790192 -142.94883728]
[65.57352448 -127.33306122]
[56.12711716 -114.87114716]
[59.62879562 -100.28559875]
[63.13047791 -85.70005035]
[66.63215637 -71.11450195]
[70.13383484 -56.52895355]
[73.63552094 -41.94340515]
[77.13719940 -27.35785484]
[80.63887787 -12.77230549]
[84.14055634 1.81324315]
[94.63520050 12.38262272]
[90.33326721 27.60773277]
[93.83494568 42.19327927]
[97.33663177 56.77883148]
[100.83831024 71.36437988]
[115.01369476 75.60142517]
[125.18469238 86.34595490]
[128.63853455 100.73223114]
[124.45402527 114.92321777]
[113.74723816 125.13394165]
[117.24891663 139.71948242]
[120.75060272 154.30503845]
[124.25228119 168.89059448]
[134.99739075 180.50321960]
[130.44499207 194.68507385]
[133.94667053 209.27062988]
[137.44834900 223.85617065]
[140.95002747 238.44172668]
[144.45170593 253.02726746]
[159.52728271 254.44360352]
[173.32510376 260.68051147]
[184.34848022 271.06143188]
[191.40170288 284.46035767]
[193.71968079 299.42382812]
[191.05097961 314.32873535]
[183.68505859 327.55834961]
[172.42094421 337.67755127]
[158.48048401 343.58871460]
[143.37580872 344.65066528]
[128.74539185 340.74819946]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 68]
[7 67]
[8 66]
[9 65]
[10 64]
[12 62]
[13 61]
[14 60]
[15 59]
[20 54]
[21 53]
[22 52]
[23 51]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
