%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACGCCGGCCGGCCGGCCGGCCGGCCGAAAAAAAAAAAAGGCCGGCCGGCCGGCCGGCCGGCACGGCCGGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[104.98376465 145.30146790]
[100.91215515 130.86463928]
[87.44248199 128.20933533]
[76.45521545 119.97750854]
[70.12236786 107.79646301]
[69.69583130 94.07418060]
[75.25993347 81.52333832]
[85.71473694 72.62503052]
[82.21305847 58.03948212]
[78.71137238 43.45392990]
[75.20969391 28.86838341]
[71.70801544 14.28283405]
[68.20633698 -0.30271494]
[64.70465088 -14.88826370]
[61.20297241 -29.47381210]
[57.70129395 -44.05936050]
[54.19961166 -58.64490891]
[50.69793320 -73.23046112]
[47.19625092 -87.81600952]
[43.69457245 -102.40155792]
[40.19289017 -116.98710632]
[36.69121170 -131.57264709]
[33.18952942 -146.15820312]
[29.68784904 -160.74375916]
[26.18616867 -175.32929993]
[22.68448830 -189.91485596]
[19.18280792 -204.50039673]
[15.68112755 -219.08595276]
[12.17944717 -233.67149353]
[8.67776680 -248.25704956]
[-6.30377245 -250.99078369]
[-18.87451172 -259.58709717]
[-26.85649490 -272.55657959]
[-28.86679268 -287.65225220]
[-24.55711174 -302.25863647]
[-14.67412853 -313.84509277]
[-0.93013114 -320.40426636]
[14.29365158 -320.79965210]
[28.35960579 -314.96279907]
[38.83071899 -303.90496826]
[43.89281082 -289.54199219]
[42.66884232 -274.36233521]
[35.37086868 -260.99597168]
[23.26331520 -251.75872803]
[26.76499557 -237.17317200]
[30.26667595 -222.58763123]
[33.76835632 -208.00207520]
[37.27003860 -193.41653442]
[40.77171707 -178.83097839]
[44.27339935 -164.24543762]
[47.77507782 -149.65988159]
[51.27676010 -135.07434082]
[54.77843857 -120.48878479]
[58.28012085 -105.90323639]
[61.78179932 -91.31768799]
[65.28347778 -76.73213959]
[68.78516388 -62.14659119]
[72.28684235 -47.56104279]
[75.78852081 -32.97549438]
[79.29019928 -18.38994408]
[82.79188538 -3.80439544]
[86.29356384 10.78115368]
[89.79524231 25.36670303]
[93.29692841 39.95225143]
[96.79860687 54.53779984]
[100.30028534 69.12335205]
[115.66454315 73.39022827]
[126.85140991 84.75337219]
[130.87757874 100.18245697]
[126.66934967 115.56288910]
[115.34898376 126.79302979]
[119.42059326 141.22985840]
[134.02464294 146.47404480]
[142.72926331 159.31962585]
[142.18734741 174.82723999]
[132.60728455 187.03387451]
[117.67279053 191.24583435]
[103.12649536 185.84353638]
[94.56173706 172.90428162]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[8 66]
[9 65]
[10 64]
[11 63]
[12 62]
[13 61]
[14 60]
[15 59]
[16 58]
[17 57]
[18 56]
[19 55]
[20 54]
[21 53]
[22 52]
[23 51]
[24 50]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
