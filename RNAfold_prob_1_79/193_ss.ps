%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACCGCGCCUCACAGCCACUACAGUGCGCUGGCAUGGAUCUGCUCGAGCAAUCCCGAGGAUCGGUUCGGGUUUCG\
) } def
/len { sequence length } bind def

/coor [
[143.06558228 118.05224609]
[128.48002625 114.55056763]
[113.89448547 111.04888153]
[105.45005798 116.89471436]
[95.18138123 117.08553314]
[86.52559662 111.55746460]
[82.37998199 102.16087341]
[68.11413574 97.52561951]
[53.84828568 92.89036560]
[38.33258438 95.98448944]
[28.61918640 84.69293213]
[14.35333824 80.05767822]
[0.08749089 75.42242432]
[-4.72679615 76.68650055]
[-9.18464470 76.21315765]
[-12.73373318 74.37611389]
[-15.02467918 71.70222473]
[-15.94530487 68.78142548]
[-29.31040192 61.97156525]
[-42.67549896 55.16170883]
[-56.17172623 48.61557007]
[-69.79386902 42.33567429]
[-83.41602325 36.05577850]
[-99.68797302 38.09432602]
[-109.37233734 24.86008644]
[-102.50667572 9.96731186]
[-86.15378571 8.73641205]
[-77.13612366 22.43362999]
[-63.51397705 28.71352577]
[-49.89183044 34.99342346]
[-42.29877853 34.93154526]
[-35.86564255 41.79661179]
[-22.50054550 48.60646820]
[-9.13544750 55.41632462]
[4.72274590 61.15657806]
[18.98859406 65.79183197]
[33.25444031 70.42708588]
[47.74975204 67.00141907]
[58.48353958 78.62451935]
[72.74938965 83.25977325]
[87.01523590 87.89502716]
[104.81861877 82.91446686]
[117.39616394 96.46333313]
[131.98170471 99.96501923]
[146.56726074 103.46669769]
[161.42579651 105.52188110]
[176.41423035 106.11077881]
[191.40266418 106.69967651]
[206.39111328 107.28857422]
[221.37954712 107.87747192]
[236.36798096 108.46636963]
[251.35641479 109.05526733]
[266.34484863 109.64416504]
[282.27346802 100.65634155]
[296.81161499 110.27834320]
[311.81161499 110.27834320]
[326.81161499 110.27834320]
[341.81161499 110.27834320]
[357.65075684 104.23200989]
[367.84552002 117.77834320]
[357.65075684 131.32469177]
[341.81161499 125.27834320]
[326.81161499 125.27834320]
[311.81161499 125.27834320]
[296.81161499 125.27834320]
[287.88601685 133.68728638]
[275.21881104 133.65049744]
[265.75595093 124.63259888]
[250.76751709 124.04370117]
[235.77908325 123.45480347]
[220.79064941 122.86590576]
[205.80221558 122.27700806]
[190.81376648 121.68811035]
[175.82533264 121.09921265]
[160.83689880 120.51031494]
[159.07379150 122.41329956]
[156.44319153 123.73348236]
[153.16163635 124.14181519]
[149.55816650 123.39219666]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[3 43]
[7 41]
[8 40]
[9 39]
[11 37]
[12 36]
[13 35]
[18 34]
[19 33]
[20 32]
[21 30]
[22 29]
[23 28]
[46 75]
[47 74]
[48 73]
[49 72]
[50 71]
[51 70]
[52 69]
[53 68]
[55 65]
[56 64]
[57 63]
[58 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
