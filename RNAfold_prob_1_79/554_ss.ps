%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGUGAGUGGAUCGAAGAUUAGGACAAAGGUGCUGAUCGGAAAAAGCCAGAGAUCUAUCUUAUCGCUGUUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[142.83216858 359.63836670]
[141.06910706 344.74234009]
[139.30604553 329.84631348]
[137.54298401 314.95028687]
[128.36338806 303.22067261]
[134.42501831 288.60671997]
[132.66195679 273.71069336]
[130.89889526 258.81466675]
[129.13583374 243.91864014]
[127.37277222 229.02261353]
[124.44641876 214.31083679]
[120.37480927 199.87400818]
[116.30320740 185.43717957]
[112.23159790 171.00035095]
[108.15999603 156.56352234]
[104.08838654 142.12669373]
[100.01677704 127.68986511]
[82.98062897 123.79325867]
[70.82885742 109.93795776]
[69.00041962 90.64179993]
[79.29278564 73.10235596]
[70.00637817 61.32260132]
[60.71996689 49.54284668]
[51.43355560 37.76309204]
[42.14714813 25.98333931]
[32.86073685 14.20358467]
[18.24090195 8.15619183]
[16.43775749 -6.62886620]
[7.15134811 -18.40862083]
[-8.27254677 -23.97957230]
[-10.89316177 -40.16797638]
[1.98536623 -50.32059097]
[17.11471176 -43.99327469]
[18.93110275 -27.69503021]
[28.21751213 -15.91527557]
[42.17312241 -10.71044922]
[44.64049149 4.91717577]
[53.92690277 16.69692993]
[63.21331024 28.47668266]
[72.49971771 40.25643921]
[81.78612518 52.03619003]
[91.07254028 63.81594467]
[106.06097412 63.22704697]
[114.39452362 50.75500488]
[111.06583405 35.30523682]
[119.70680237 22.07235146]
[135.19090271 18.90719032]
[148.33168030 27.68758202]
[151.33296204 43.20427704]
[142.41413879 56.25149918]
[126.86656952 59.08855820]
[118.53302002 71.56060028]
[128.57823181 84.77389526]
[130.81440735 100.43718719]
[125.41730499 114.48236084]
[114.45360565 123.61825562]
[118.52521515 138.05508423]
[122.59682465 152.49191284]
[126.66842651 166.92874146]
[130.74003601 181.36557007]
[134.81164551 195.80239868]
[138.88325500 210.23922729]
[142.60896301 213.53988647]
[144.69204712 217.50941467]
[145.13636780 221.48098755]
[144.18588257 224.87136841]
[142.26879883 227.25955200]
[144.03186035 242.15557861]
[145.79492188 257.05160522]
[147.55798340 271.94763184]
[149.32104492 286.84365845]
[158.62675476 299.63876343]
[152.43901062 313.18722534]
[154.20207214 328.08325195]
[155.96513367 342.97927856]
[157.72819519 357.87530518]
[167.96841431 370.68429565]
[161.74443054 385.85644531]
[145.45895386 387.78396606]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[4 73]
[6 71]
[7 70]
[8 69]
[9 68]
[10 67]
[11 62]
[12 61]
[13 60]
[14 59]
[15 58]
[16 57]
[17 56]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
[28 35]
[29 34]
[43 52]
[44 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
