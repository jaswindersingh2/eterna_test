%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAUUCGACCUCGAGCAGUUGCUCUGACCAGCCGAGUCGCCGUAAGCCGAGGGCCAGUCUCGGUCCGGGCGAAUUCG\
) } def
/len { sequence length } bind def

/coor [
[92.11165619 129.43496704]
[84.78233337 142.52241516]
[91.40075684 156.55722046]
[88.47265625 171.79553223]
[77.12392426 182.37786865]
[61.71840286 184.23513794]
[48.17981720 176.65316772]
[41.71403122 162.54737854]
[44.80727386 147.34173584]
[56.27013016 136.88313293]
[71.69489288 135.19308472]
[79.02421570 122.10565186]
[75.03768158 117.47930145]
[72.05367279 112.15096283]
[70.19201660 106.33462524]
[55.20358276 105.74572754]
[40.21514511 105.15682983]
[25.22671127 104.56793976]
[10.97350693 112.67831421]
[-3.03820539 104.15751648]
[-2.39437795 87.77101135]
[12.24267483 80.37583160]
[25.81560707 89.57949829]
[40.80404282 90.16839600]
[55.79248047 90.75729370]
[70.78091431 91.34619141]
[74.03962708 84.04060364]
[79.08721924 77.83473969]
[85.57585907 73.15623474]
[93.05844116 70.32748413]
[101.01935577 69.54340363]
[108.91002655 70.85802460]
[116.18672180 74.18075562]
[122.34803009 79.28263855]
[126.96937561 85.81211090]
[141.55491638 82.31043243]
[156.14047241 78.80875397]
[170.72602844 75.30706787]
[185.31156921 71.80538940]
[199.82556152 68.01801300]
[214.26239014 63.94641113]
[228.69921875 59.87480164]
[243.13604736 55.80319595]
[246.99876404 42.41566086]
[256.94229126 32.81130219]
[270.24411011 29.46854973]
[283.33673096 33.17175674]
[292.76449585 42.83045197]
[307.35003662 39.32877350]
[321.93557739 35.82709122]
[336.52111816 32.32541275]
[351.10668945 28.82373238]
[365.69223022 25.32205200]
[380.27777100 21.82037163]
[389.85250854 8.94775581]
[405.89065552 8.55165863]
[416.08917236 20.93593216]
[412.62457275 36.60042191]
[398.15463257 43.52867126]
[383.77944946 36.40591812]
[369.19390869 39.90760040]
[354.60836792 43.40927887]
[340.02282715 46.91096115]
[325.43725586 50.41264343]
[310.85171509 53.91432190]
[296.26617432 57.41600418]
[290.56979370 72.68029022]
[276.81256104 81.71205902]
[260.21328735 80.85246277]
[247.20764160 70.24002838]
[232.77081299 74.31163025]
[218.33398438 78.38323975]
[203.89715576 82.45484161]
[198.16354370 87.43318939]
[188.81324768 86.39093781]
[174.22770691 89.89261627]
[159.64215088 93.39430237]
[145.05661011 96.89598083]
[130.47105408 100.39765930]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[15 26]
[16 25]
[17 24]
[18 23]
[35 79]
[36 78]
[37 77]
[38 76]
[39 75]
[40 73]
[41 72]
[42 71]
[43 70]
[48 66]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
[54 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
