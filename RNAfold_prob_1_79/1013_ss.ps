%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGCGAAACGCAACCUCAAAGAGGAAUGCAUAAAAUGCAAAAGACAAAGUCUAACGGAAACCGAUCUUGACUUCG\
) } def
/len { sequence length } bind def

/coor [
[124.52272797 160.45364380]
[112.72731781 163.98454285]
[100.47856140 165.23632812]
[88.21276093 164.16438293]
[76.36682129 160.80690002]
[65.36269379 155.28349304]
[55.59234619 147.79087830]
[44.18625641 157.53259277]
[32.78016663 167.27430725]
[24.66277885 182.15867615]
[8.11298370 178.47892761]
[7.06749153 161.55725098]
[23.03844643 155.86822510]
[34.44453430 146.12651062]
[45.85062408 136.38478088]
[38.81372452 122.63287354]
[35.20751953 107.61194611]
[35.23420715 92.16422272]
[20.64865875 88.66254425]
[6.06311035 85.16086578]
[-8.52243900 81.65917969]
[-25.33542442 83.84088898]
[-32.08616638 68.28891754]
[-19.01076317 57.49678040]
[-5.02075815 67.07363129]
[9.56479073 70.57530975]
[24.15033913 74.07699585]
[38.73588943 77.57867432]
[47.69404221 61.01161957]
[61.01161957 47.69404221]
[77.57867432 38.73588943]
[74.07699585 24.15033913]
[70.57530975 9.56479073]
[67.07363129 -5.02075815]
[63.57195282 -19.60630608]
[53.99510193 -33.59631348]
[64.78723907 -46.67171478]
[80.33921051 -39.92097473]
[78.15750122 -23.10798836]
[81.65917969 -8.52243900]
[85.16086578 6.06311035]
[88.66254425 20.64865875]
[92.16422272 35.23420715]
[107.54198456 35.19933701]
[122.50068665 38.76499176]
[136.20918274 45.73304749]
[147.90579224 55.71634293]
[156.94059753 68.16017151]
[162.81163025 82.37311554]
[165.19264221 97.56546783]
[163.95135498 112.89308929]
[178.21719360 117.52834320]
[192.48304749 122.16359711]
[206.74890137 126.79885101]
[221.01473999 131.43411255]
[235.10421753 120.38435364]
[252.84651184 119.80331421]
[267.37481689 129.73403931]
[273.17361450 146.18627930]
[287.75918579 149.68795776]
[302.34472656 153.18963623]
[319.15771484 151.00793457]
[325.90844727 166.55990601]
[312.83303833 177.35203552]
[298.84304810 167.77519226]
[284.25747681 164.27349854]
[269.67193604 160.77182007]
[261.48638916 170.13534546]
[249.98669434 175.06100464]
[237.41494751 174.51953125]
[226.25224304 168.55433655]
[218.72901917 158.28552246]
[216.37948608 145.69995117]
[202.11364746 141.06469727]
[187.84779358 136.42944336]
[173.58193970 131.79418945]
[159.31610107 127.15893555]
[153.15676880 137.82015991]
[145.10400391 147.13423157]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 15]
[8 14]
[9 13]
[18 28]
[19 27]
[20 26]
[21 25]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[51 77]
[52 76]
[53 75]
[54 74]
[55 73]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
