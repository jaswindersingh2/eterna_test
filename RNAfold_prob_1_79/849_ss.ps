%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGCACAAAAAAGGCAAAAGUCCAGCAAAAGACUGAAGACAGGCAAAAGACCAAGCAAAAAGAUGGUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[60.51574707 122.56061554]
[46.44287872 127.75237274]
[32.37000656 132.94412231]
[31.53317833 147.19253540]
[25.30228996 159.98507690]
[14.66514397 169.37036133]
[1.27877164 173.93112183]
[-12.78865051 172.99821472]
[-25.37731934 166.74850464]
[-34.56740189 156.17256165]
[-48.83324814 160.80781555]
[-56.26111603 166.58200073]
[-63.75100327 165.33306885]
[-71.25366974 179.24298096]
[-86.41838074 183.69348145]
[-100.24819183 176.04417419]
[-104.53811646 160.83325195]
[-96.74301910 147.08508301]
[-81.48758698 142.95622253]
[-67.82260895 150.89624023]
[-53.46850586 146.54196167]
[-39.20265579 141.90670776]
[-37.41125488 126.15214539]
[-28.95158005 112.67326355]
[-15.44569874 104.14830780]
[0.47595096 102.29654694]
[15.68682957 107.53179932]
[27.17825317 118.87125397]
[41.25112152 113.67949677]
[55.32399368 108.48774719]
[54.52594757 99.68703461]
[55.44504929 90.89814758]
[58.04658890 82.45294952]
[62.23233414 74.67035675]
[67.84423065 67.84423065]
[74.67035675 62.23233414]
[82.45294952 58.04658890]
[90.89814758 55.44504929]
[99.68703461 54.52594757]
[108.48774719 55.32399368]
[113.67949677 41.25112152]
[118.87125397 27.17825317]
[115.56230927 11.11640549]
[127.99592590 0.42354605]
[143.38146973 6.09957075]
[145.89160156 22.30547142]
[132.94412231 32.37000656]
[127.75237274 46.44287872]
[122.56061554 60.51574707]
[132.06907654 67.75776672]
[139.36219788 77.22709656]
[143.93614197 88.26959991]
[145.47496033 100.12243652]
[143.87234497 111.96681976]
[157.49449158 118.24671173]
[171.11663818 124.52661133]
[184.73878479 130.80650330]
[198.36093140 137.08639526]
[211.98307800 143.36630249]
[225.60522461 149.64619446]
[238.10145569 140.71647644]
[253.38990784 139.24720764]
[267.35806274 145.63360596]
[276.24856567 158.15776062]
[277.66992188 173.45074463]
[271.23977661 187.39881897]
[258.68780518 196.25001526]
[243.39044189 197.62342834]
[229.46258545 191.14958191]
[220.65077209 178.56993103]
[219.32533264 163.26834106]
[205.70318604 156.98844910]
[192.08103943 150.70855713]
[178.45889282 144.42864990]
[164.83674622 138.14875793]
[151.21459961 131.86886597]
[137.59245300 125.58896637]
[120.47080231 140.60707092]
[98.21465302 145.44006348]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[10 22]
[11 21]
[13 20]
[40 49]
[41 48]
[42 47]
[54 77]
[55 76]
[56 75]
[57 74]
[58 73]
[59 72]
[60 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
