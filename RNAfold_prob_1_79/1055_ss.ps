%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACUCGGUCUUGCCUGGGCCGCCUUGCGAGCCCGUUUGACGCGUCAAUGACCGUCUGGCACGACCAAGGGCGUUCG\
) } def
/len { sequence length } bind def

/coor [
[95.77745056 350.08557129]
[95.18855286 335.09713745]
[94.59965515 320.10870361]
[83.52194977 310.21829224]
[82.71120453 295.02627563]
[93.16027832 283.47402954]
[92.57138062 268.48559570]
[91.98248291 253.49716187]
[90.80559540 238.54339600]
[89.04253387 223.64736938]
[87.27947235 208.75134277]
[85.51641083 193.85531616]
[76.33681488 182.12568665]
[82.39844513 167.51174927]
[80.63538361 152.61572266]
[78.87232208 137.71969604]
[77.10926056 122.82366943]
[69.27178192 110.03406525]
[56.79973984 101.70051575]
[44.32769775 93.36695862]
[31.85565186 85.03340912]
[19.38360786 76.69985199]
[6.75034904 68.61277771]
[-6.03925323 60.77529907]
[-18.82885551 52.93782043]
[-35.49314117 49.81724930]
[-37.10765457 32.94034958]
[-21.33725357 26.71694374]
[-10.99137688 40.14822006]
[1.79822516 47.98569870]
[14.58782768 55.82317734]
[22.13551903 56.65419769]
[27.71716118 64.22780609]
[40.18920517 72.56136322]
[52.66125107 80.89491272]
[65.13329315 89.22846985]
[77.60533905 97.56201935]
[81.82016754 88.80473328]
[89.02349091 83.07366180]
[97.50364685 81.16742706]
[105.46585083 83.03817749]
[115.64786530 72.02333832]
[125.82987976 61.00849915]
[136.01188660 49.99365997]
[139.67127991 41.32630157]
[146.81643677 38.75626755]
[157.42303467 28.14966583]
[168.02963257 17.54306412]
[174.95419312 2.06769800]
[191.74168396 4.43762636]
[194.11160278 21.22511482]
[178.63624573 28.14966583]
[168.02963257 38.75626755]
[157.42303467 49.36286926]
[147.02671814 60.17567444]
[136.84471130 71.19051361]
[126.66270447 82.20534515]
[116.48069000 93.22018433]
[114.45969391 114.06776428]
[92.00528717 121.06060791]
[93.76834869 135.95663452]
[95.53141022 150.85266113]
[97.29447174 165.74868774]
[106.60018158 178.54377747]
[100.41243744 192.09225464]
[102.17549896 206.98828125]
[103.93856049 221.88430786]
[105.70162201 236.78033447]
[109.58749390 242.66123962]
[109.68794250 248.68440247]
[106.97091675 252.90826416]
[107.55981445 267.89669800]
[108.14871216 282.88513184]
[119.47194672 293.58197021]
[119.85565948 308.79074097]
[109.58808899 319.51980591]
[110.17698669 334.50823975]
[110.76588440 349.49667358]
[113.71109009 368.65328979]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[6 73]
[7 72]
[8 71]
[9 68]
[10 67]
[11 66]
[12 65]
[14 63]
[15 62]
[16 61]
[17 60]
[18 37]
[19 36]
[20 35]
[21 34]
[22 33]
[23 31]
[24 30]
[25 29]
[41 58]
[42 57]
[43 56]
[44 55]
[46 54]
[47 53]
[48 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
