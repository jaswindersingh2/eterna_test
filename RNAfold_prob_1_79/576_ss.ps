%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAUGGCUCAAACAGUAGGAUGCACAGGCCCACAAAUAAAACCUGUGCAUCCUACUGUUUGAGCUCUGAGAGGUUCG\
) } def
/len { sequence length } bind def

/coor [
[58.90344620 128.71362305]
[52.26662827 115.32722473]
[49.86954117 100.57944489]
[51.92510223 85.78019714]
[58.25072861 72.24397278]
[68.28457642 61.17306900]
[81.13542175 53.55081940]
[77.63374329 38.96527100]
[74.13206482 24.37972069]
[70.63038635 9.79417324]
[67.12870026 -4.79137611]
[63.62702179 -19.37692451]
[60.12534332 -33.96247482]
[56.62366104 -48.54802322]
[53.12198257 -63.13357162]
[49.62030029 -77.71912384]
[46.11861801 -92.30467224]
[42.61693954 -106.89022064]
[39.11525726 -121.47576904]
[35.61357880 -136.06130981]
[32.11189651 -150.64686584]
[28.61021805 -165.23240662]
[25.10853767 -179.81796265]
[21.60685730 -194.40350342]
[18.10517693 -208.98905945]
[14.60349560 -223.57461548]
[11.10181522 -238.16015625]
[7.60013485 -252.74571228]
[4.09845448 -267.33126831]
[0.59677380 -281.91680908]
[-14.38476562 -284.65054321]
[-26.95550537 -293.24685669]
[-34.93748856 -306.21633911]
[-36.94778442 -321.31198120]
[-32.63810349 -335.91839600]
[-22.75512123 -347.50485229]
[-9.01112461 -354.06402588]
[6.21265793 -354.45941162]
[20.27861214 -348.62255859]
[30.74972725 -337.56472778]
[35.81181717 -323.20175171]
[34.58784866 -308.02209473]
[27.28987694 -294.65573120]
[15.18232250 -285.41848755]
[18.68400383 -270.83294678]
[22.18568420 -256.24737549]
[25.68736458 -241.66183472]
[29.18904495 -227.07629395]
[32.69072342 -212.49073792]
[36.19240570 -197.90519714]
[39.69408417 -183.31964111]
[43.19576645 -168.73410034]
[46.69744492 -154.14854431]
[50.19912720 -139.56298828]
[53.70080948 -124.97744751]
[57.20248795 -110.39189911]
[60.70417023 -95.80635071]
[64.20584869 -81.22080231]
[67.70752716 -66.63525391]
[71.20921326 -52.04970169]
[74.71089172 -37.46415329]
[78.21257019 -22.87860489]
[81.71424866 -8.29305649]
[85.21593475 6.29249239]
[88.71761322 20.87804031]
[92.21929169 35.46358871]
[95.72097015 50.04913712]
[110.63159180 51.00645065]
[124.59790039 56.31542587]
[136.37939453 65.50451660]
[144.92962646 77.75753784]
[149.48916626 91.98616028]
[149.65299988 106.92657471]
[145.40661621 121.25177002]
[137.12716675 133.68936157]
[125.55002594 143.13461304]
[111.70350647 148.74861145]
[96.81746674 150.03268433]
[82.21410370 146.87281799]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 67]
[8 66]
[9 65]
[10 64]
[11 63]
[12 62]
[13 61]
[14 60]
[15 59]
[16 58]
[17 57]
[18 56]
[19 55]
[20 54]
[21 53]
[22 52]
[23 51]
[24 50]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
