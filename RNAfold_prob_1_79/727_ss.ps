%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAGUGGCAAGGGCAGUGCAACAGGCUGGAAAAACGAGGCUGAGAGGCAGGGAAACGUGGCUCUGAAUGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[137.85052490 140.21907043]
[121.28716278 150.96166992]
[102.00380707 155.19258118]
[82.46441650 152.37117004]
[65.16565704 142.85795593]
[52.31790924 127.86850739]
[38.45971680 133.60876465]
[24.60152245 139.34901428]
[14.81276226 151.77844238]
[0.09335983 149.50062561]
[-13.76483345 155.24087524]
[-23.55359268 167.67030334]
[-38.27299500 165.39248657]
[-50.59261322 177.03994751]
[-65.19529724 168.42613220]
[-60.96053314 152.00958252]
[-44.01324844 151.53430176]
[-35.21571732 139.51544189]
[-19.50508499 141.38269043]
[-5.64689159 135.64244080]
[3.15063763 123.62358093]
[18.86127090 125.49082184]
[32.71946335 119.75057220]
[46.57765579 114.01031494]
[44.85478210 103.03983307]
[45.36140442 91.94644165]
[48.07704926 81.17865753]
[52.89191437 71.17181396]
[59.61134720 62.33048630]
[67.96367645 55.01211929]
[77.61122131 49.51259232]
[88.16393280 46.05425644]
[99.19517517 44.77692413]
[110.25895691 45.73224258]
[120.90797424 48.88158417]
[130.71168518 54.09762573]
[139.27374268 61.16947937]
[146.24797058 69.81124115]
[151.35240173 79.67351532]
[154.38069153 90.35758972]
[169.36912537 89.76869202]
[184.35755920 89.17979431]
[199.34599304 88.59089661]
[214.33442688 88.00199890]
[229.32287598 87.41310120]
[241.37237549 73.07196808]
[259.75000000 71.83541870]
[273.15014648 84.01351166]
[288.04617310 82.25045013]
[302.94219971 80.48738861]
[317.83822632 78.72432709]
[330.63330078 69.41862488]
[344.18179321 75.60636139]
[359.07781982 73.84329987]
[371.87289429 64.53759766]
[385.42138672 70.72533417]
[398.23034668 60.48511505]
[413.40249634 66.70909119]
[415.33001709 82.99456787]
[402.03002930 92.58843994]
[387.18444824 85.62136078]
[375.45480347 94.80095673]
[360.84088135 88.73932648]
[345.94485474 90.50238800]
[334.21520996 99.68199158]
[319.60128784 93.62035370]
[304.70526123 95.38341522]
[289.80923462 97.14647675]
[274.91320801 98.90953827]
[269.78616333 109.44666290]
[260.03866577 116.16740417]
[248.12493896 117.23436737]
[237.11680603 112.25239563]
[229.91177368 102.40154266]
[214.92332458 102.99044037]
[199.93489075 103.57933044]
[184.94645691 104.16822815]
[169.95802307 104.75712585]
[154.96958923 105.34602356]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 24]
[7 23]
[8 22]
[10 20]
[11 19]
[13 17]
[40 79]
[41 78]
[42 77]
[43 76]
[44 75]
[45 74]
[48 69]
[49 68]
[50 67]
[51 66]
[53 64]
[54 63]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
