%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAUGUAGAGUACAAAAGUACACGUUUUUAGAAAAAAACUAAAAACGACUACAAAAGUAGACUACAUUCCAUUUUCG\
) } def
/len { sequence length } bind def

/coor [
[126.96517944 235.56648254]
[122.89356995 221.12965393]
[118.82196045 206.69282532]
[114.75035858 192.25599670]
[109.77201843 186.52236938]
[110.81426239 177.17207336]
[107.31258392 162.58653259]
[103.81090546 148.00097656]
[100.30921936 133.41543579]
[96.80754089 118.82987976]
[84.50835419 111.16983795]
[81.12584686 97.08065796]
[88.60691071 84.67179871]
[85.10523224 70.08625031]
[81.60354614 55.50070190]
[66.96757507 51.05823898]
[56.58884811 39.95964050]
[53.18157196 25.25396729]
[57.56325150 10.91322708]
[68.46136475 0.75957292]
[64.95968628 -13.82597542]
[61.45800781 -28.41152382]
[48.26549530 -36.69375610]
[44.92206955 -51.53546143]
[52.89921188 -64.06146240]
[49.39753342 -78.64701080]
[45.89585114 -93.23255920]
[42.39417267 -107.81810760]
[38.89249039 -122.40365601]
[35.39081192 -136.98921204]
[31.88912964 -151.57475281]
[28.38744926 -166.16030884]
[24.88576889 -180.74584961]
[10.81136417 -187.56092834]
[4.45758677 -201.84950256]
[8.82449532 -216.86495972]
[21.85017014 -225.51747131]
[37.38428497 -223.72155762]
[48.09210587 -212.32522583]
[48.91772842 -196.70945740]
[39.47131729 -184.24752808]
[42.97299957 -169.66198730]
[46.47467804 -155.07643127]
[49.97636032 -140.49089050]
[53.47803879 -125.90534210]
[56.97972107 -111.31979370]
[60.48139954 -96.73424530]
[63.98308182 -82.14869690]
[67.48476410 -67.56314087]
[80.27913666 -60.02394104]
[84.03811646 -45.28200531]
[76.04355621 -31.91320419]
[79.54523468 -17.32765579]
[83.04691315 -2.74210763]
[97.36686707 1.35722435]
[107.78153992 12.14567471]
[111.42186737 26.79539871]
[107.21301270 41.39616394]
[96.18909454 51.99901962]
[99.69078064 66.58457184]
[103.19245911 81.17012024]
[115.49164581 88.83016205]
[118.87415314 102.91934204]
[111.39308929 115.32820129]
[114.89476776 129.91375732]
[118.39645386 144.49929810]
[121.89813232 159.08485413]
[125.39981079 173.67039490]
[129.18717957 188.18438721]
[133.25878906 202.62121582]
[137.33039856 217.05804443]
[141.40200806 231.49487305]
[156.00605774 236.73904419]
[164.71067810 249.58464050]
[164.16876221 265.09225464]
[154.58869934 277.29888916]
[139.65420532 281.51083374]
[125.10791016 276.10855103]
[116.54315186 263.16928101]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 70]
[4 69]
[6 68]
[7 67]
[8 66]
[9 65]
[10 64]
[13 61]
[14 60]
[15 59]
[20 54]
[21 53]
[22 52]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
