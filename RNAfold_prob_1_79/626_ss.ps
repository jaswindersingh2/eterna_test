%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACGAUAUAUAGCUAACCCUAUAUGCAAAAAAAAAAAAAGCAUAUAGGGUUAGCUAUAUAUCACGACCUGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[90.47581482 120.34577942]
[84.82279968 116.56240845]
[80.56132507 111.26049805]
[78.08210754 104.92614746]
[77.61246490 98.14014435]
[79.19544220 91.52465820]
[82.68591309 85.68624878]
[87.76385498 81.16020966]
[84.26216888 66.57466125]
[80.76049042 51.98911285]
[77.25881195 37.40356445]
[73.75713348 22.81801605]
[70.25544739 8.23246670]
[66.75376892 -6.35308218]
[63.25209045 -20.93863106]
[59.75040817 -35.52418137]
[56.24872971 -50.10972977]
[52.74704742 -64.69527435]
[49.24536896 -79.28082275]
[45.74368668 -93.86637115]
[42.24200821 -108.45192719]
[38.74032593 -123.03747559]
[35.23864746 -137.62301636]
[31.73696518 -152.20857239]
[28.23528481 -166.79411316]
[24.73360443 -181.37966919]
[21.23192406 -195.96520996]
[17.73024368 -210.55076599]
[14.22856331 -225.13630676]
[10.72688293 -239.72186279]
[-4.25465679 -242.45561218]
[-16.82539558 -251.05191040]
[-24.80737877 -264.02139282]
[-26.81767654 -279.11706543]
[-22.50799561 -293.72344971]
[-12.62501335 -305.30993652]
[1.11898470 -311.86907959]
[16.34276772 -312.26446533]
[30.40872192 -306.42761230]
[40.87983704 -295.36978149]
[45.94192886 -281.00680542]
[44.71795654 -265.82714844]
[37.41998672 -252.46080017]
[25.31243134 -243.22354126]
[28.81411171 -228.63800049]
[32.31579208 -214.05244446]
[35.81747437 -199.46690369]
[39.31915283 -184.88134766]
[42.82083511 -170.29580688]
[46.32251358 -155.71025085]
[49.82419586 -141.12469482]
[53.32587433 -126.53915405]
[56.82755661 -111.95360565]
[60.32923508 -97.36805725]
[63.83091736 -82.78250885]
[67.33259583 -68.19696045]
[70.83427429 -53.61140823]
[74.33596039 -39.02585983]
[77.83763885 -24.44031143]
[81.33931732 -9.85476208]
[84.84099579 4.73078632]
[88.34268188 19.31633568]
[91.84436035 33.90188217]
[95.34603882 48.48743439]
[98.84772491 63.07298279]
[102.34940338 77.65853119]
[120.91942596 91.81229401]
[116.89062500 114.81106567]
[124.21994019 127.89850616]
[131.54925537 140.98594666]
[146.82630920 145.03410339]
[154.69396973 158.74087524]
[150.48451233 173.97425842]
[136.69534302 181.69656372]
[121.50730896 177.32629395]
[113.93121338 163.45623779]
[118.46182251 148.31526184]
[111.13249969 135.22782898]
[103.80318451 122.14038849]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 66]
[9 65]
[10 64]
[11 63]
[12 62]
[13 61]
[14 60]
[15 59]
[16 58]
[17 57]
[18 56]
[19 55]
[20 54]
[21 53]
[22 52]
[23 51]
[24 50]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[68 79]
[69 78]
[70 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
