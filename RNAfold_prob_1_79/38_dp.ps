%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:55 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (38)
} def

/sequence { (\
GGAAAUAGGAGCGCCCGGAAACGGGCCGGACCGCUCUAACGAGCAUCCCGAAAGGGAGGGACGGCUCCGUACGGGUUCG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 6 0.027808749 ubox
1 12 0.062315860 ubox
1 72 0.007876957 ubox
1 78 0.068826381 ubox
2 6 0.013414242 ubox
2 12 0.030150322 ubox
2 72 0.006074904 ubox
2 77 0.067869252 ubox
2 78 0.118697440 ubox
3 76 0.044365152 ubox
3 77 0.118304449 ubox
4 76 0.052212397 ubox
4 77 0.008334620 ubox
5 70 0.010746948 ubox
5 76 0.004575107 ubox
5 77 0.005916939 ubox
6 10 0.008211160 ubox
6 11 0.009425359 ubox
6 69 0.009950127 ubox
6 71 0.019509117 ubox
6 73 0.003855205 ubox
6 79 0.013843178 ubox
7 70 0.020038166 ubox
7 77 0.008412938 ubox
8 12 0.020641222 ubox
8 32 0.008132768 ubox
8 68 0.061244335 ubox
8 76 0.003314103 ubox
8 77 0.013601747 ubox
8 78 0.187896667 ubox
9 31 0.008139077 ubox
9 36 0.003230344 ubox
9 67 0.061315121 ubox
9 76 0.004834562 ubox
9 77 0.183605660 ubox
9 78 0.613705579 ubox
10 35 0.003251067 ubox
10 66 0.061313308 ubox
10 76 0.090510759 ubox
10 77 0.596707607 ubox
11 34 0.003256467 ubox
11 65 0.061320878 ubox
11 76 0.229838463 ubox
11 77 0.041880453 ubox
11 78 0.539532360 ubox
12 28 0.007852347 ubox
12 33 0.003253723 ubox
12 64 0.061241193 ubox
12 75 0.152063840 ubox
12 79 0.063873014 ubox
13 26 0.061959795 ubox
13 27 0.005592496 ubox
13 76 0.938587035 ubox
13 77 0.025544697 ubox
13 78 0.055242254 ubox
14 25 0.062377937 ubox
14 73 0.016333892 ubox
14 74 0.066861956 ubox
14 75 0.986098189 ubox
15 24 0.062414935 ubox
15 73 0.053598898 ubox
15 74 0.995513328 ubox
15 75 0.007846856 ubox
16 23 0.062417317 ubox
16 69 0.009634380 ubox
16 73 0.996384702 ubox
16 74 0.008654692 ubox
17 22 0.062255078 ubox
17 68 0.009686606 ubox
17 72 0.993989854 ubox
18 67 0.009477410 ubox
18 70 0.015424638 ubox
18 72 0.047916760 ubox
19 66 0.007428872 ubox
19 70 0.049434888 ubox
20 70 0.106489050 ubox
21 70 0.938635806 ubox
22 69 0.992422992 ubox
23 67 0.130199727 ubox
23 68 0.989307158 ubox
24 66 0.156850139 ubox
24 67 0.985470752 ubox
25 65 0.991911121 ubox
25 66 0.109569861 ubox
26 64 0.998046487 ubox
27 63 0.999865523 ubox
27 79 0.005947003 ubox
28 62 0.999881857 ubox
28 78 0.006640947 ubox
29 62 0.004245016 ubox
29 77 0.006643474 ubox
30 76 0.006641897 ubox
31 58 0.005115698 ubox
31 59 0.998091575 ubox
31 60 0.058556380 ubox
31 75 0.006610711 ubox
32 58 0.996867459 ubox
32 59 0.058544647 ubox
32 74 0.006560715 ubox
33 44 0.998360960 ubox
34 43 0.999401211 ubox
34 56 0.032200226 ubox
35 42 0.999065738 ubox
35 55 0.032229181 ubox
36 41 0.997203881 ubox
36 54 0.032247208 ubox
37 41 0.004752294 ubox
37 53 0.031617577 ubox
39 70 0.004536585 ubox
40 50 0.031666535 ubox
40 69 0.004756933 ubox
41 49 0.031577523 ubox
41 67 0.004441864 ubox
41 68 0.003370428 ubox
42 66 0.005575562 ubox
43 47 0.010231882 ubox
43 48 0.013004266 ubox
43 65 0.005584804 ubox
44 64 0.005565424 ubox
46 56 0.006767461 ubox
46 57 0.934289681 ubox
46 61 0.010586910 ubox
47 55 0.010388897 ubox
47 56 0.998713530 ubox
47 60 0.011352406 ubox
47 75 0.008145608 ubox
48 54 0.010333867 ubox
48 55 0.999002824 ubox
48 56 0.024497388 ubox
48 59 0.011356573 ubox
48 74 0.008447500 ubox
49 54 0.998614842 ubox
49 55 0.024725971 ubox
49 58 0.011356359 ubox
49 73 0.008486863 ubox
50 72 0.008439523 ubox
53 70 0.006102666 ubox
55 68 0.008519971 ubox
56 67 0.008535988 ubox
57 66 0.008547431 ubox
58 65 0.008539558 ubox
69 78 0.005029118 ubox
72 79 0.014164199 ubox
73 78 0.014718625 ubox
11 78 0.9500000 lbox
13 76 0.9500000 lbox
14 75 0.9500000 lbox
15 74 0.9500000 lbox
16 73 0.9500000 lbox
17 72 0.9500000 lbox
21 70 0.9500000 lbox
22 69 0.9500000 lbox
23 68 0.9500000 lbox
24 67 0.9500000 lbox
25 65 0.9500000 lbox
26 64 0.9500000 lbox
27 63 0.9500000 lbox
28 62 0.9500000 lbox
31 59 0.9500000 lbox
32 58 0.9500000 lbox
33 44 0.9500000 lbox
34 43 0.9500000 lbox
35 42 0.9500000 lbox
36 41 0.9500000 lbox
46 57 0.9500000 lbox
47 56 0.9500000 lbox
48 55 0.9500000 lbox
49 54 0.9500000 lbox
showpage
end
%%EOF
