%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGUCGGUGCAAAGGACGGACAACAUGGCGAGAAAAUGGCGAUGAGAGGUGGCGAAAGGCAGCUCGGAUUUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[93.84293365 196.95353699]
[92.07987213 182.05751038]
[90.31681061 167.16148376]
[88.55374908 152.26545715]
[86.79068756 137.36943054]
[73.84967041 129.78457642]
[59.99147797 135.52482605]
[46.13328552 141.26507568]
[36.34452438 153.69450378]
[21.62512207 151.41668701]
[7.76692915 157.15693665]
[-2.02183104 169.58636475]
[-16.74123383 167.30854797]
[-29.06085014 178.95600891]
[-43.66353607 170.34219360]
[-39.42876816 153.92564392]
[-22.48148537 153.45036316]
[-13.68395615 141.43150330]
[2.02667761 143.29875183]
[15.88487053 137.55850220]
[24.68239975 125.53964233]
[40.39303207 127.40688324]
[54.25122452 121.66663361]
[68.10942078 115.92637634]
[66.32547760 98.25869751]
[73.17379761 82.93739319]
[85.95858002 73.64069366]
[82.45689392 59.05514908]
[78.95521545 44.46959686]
[68.21011353 32.85696411]
[72.76250458 18.67510986]
[69.26082611 4.08956099]
[58.51572418 -7.52307463]
[63.06811905 -21.70492744]
[50.19550323 -31.27965164]
[49.79940796 -47.31781387]
[62.18368149 -57.51631165]
[77.84816742 -54.05172729]
[84.77642059 -39.58179474]
[77.65366364 -25.20660782]
[88.14830780 -14.63722897]
[83.84637451 0.58788037]
[87.34805298 15.17342949]
[97.84269714 25.74280930]
[93.54076385 40.96791840]
[97.04244232 55.55346680]
[100.54412842 70.13901520]
[117.07698822 75.49794006]
[127.82698822 89.15410614]
[142.72300720 87.39105225]
[157.61903381 85.62799072]
[170.41413879 76.32228088]
[183.96260071 82.51001740]
[198.85862732 80.74696350]
[211.65373230 71.44125366]
[225.20220947 77.62899017]
[238.01118469 67.38877869]
[253.18333435 73.61275482]
[255.11083984 89.89822388]
[241.81086731 99.49210358]
[226.96525574 92.52501678]
[215.23562622 101.70462036]
[200.62168884 95.64299011]
[185.72566223 97.40605164]
[173.99603271 106.58564758]
[159.38209534 100.52401733]
[144.48606873 102.28707886]
[129.59004211 104.05014038]
[127.73085785 114.53890991]
[122.11247253 124.16613770]
[113.13544464 131.57820129]
[101.68671417 135.60636902]
[103.44977570 150.50239563]
[105.21283722 165.39842224]
[106.97589874 180.29444885]
[108.73896027 195.19047546]
[118.97917175 207.99946594]
[112.75519562 223.17161560]
[96.46972656 225.09912109]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[4 73]
[5 72]
[6 24]
[7 23]
[8 22]
[10 20]
[11 19]
[13 17]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[34 40]
[49 68]
[50 67]
[51 66]
[53 64]
[54 63]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
