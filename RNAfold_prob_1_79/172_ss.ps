%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGUAAUUAAGGGUAUGAUAAAAGAUGAAAAUACUGAUGAUAACGCGGUAAUGGACAAAAAAGUUUUUAUUCG\
) } def
/len { sequence length } bind def

/coor [
[105.76032257 122.51256561]
[99.31803131 123.22782135]
[92.92880249 122.13583374]
[87.08975220 119.32154846]
[82.25518799 115.00395203]
[78.80126953 109.51895905]
[76.99671936 103.29334259]
[76.98195648 96.81148529]
[78.75812531 90.57770538]
[67.74328613 80.39569855]
[52.35742569 76.70980072]
[48.26358795 62.38884735]
[37.24874878 52.20683670]
[26.23391342 42.02482605]
[15.21907520 31.84281540]
[-0.35146004 32.28575897]
[-11.37702560 21.80283928]
[-11.70334721 6.95598412]
[-22.71818542 -3.22602701]
[-33.73302078 -13.40803814]
[-44.74785995 -23.59004974]
[-55.76269913 -33.77206039]
[-69.55263519 -27.37627792]
[-84.74064636 -26.74952316]
[-99.01066589 -31.98736763]
[-110.18661499 -42.29108047]
[-116.56425476 -56.08942413]
[-117.17102814 -71.27824402]
[-111.91441345 -85.54135895]
[-101.59600830 -96.70375061]
[-87.78929138 -103.06322479]
[-72.59968567 -103.65002441]
[-58.34349823 -98.37464905]
[-47.19469070 -88.04157257]
[-40.85337830 -74.22650146]
[-40.28656769 -59.03613281]
[-45.58068466 -44.78689957]
[-34.56584930 -34.60488510]
[-23.55101013 -24.42287636]
[-12.53617287 -14.24086475]
[-1.52133572 -4.05885363]
[13.30535412 -4.89840841]
[24.62101173 5.27068806]
[25.40108681 20.82797813]
[36.41592407 31.00998878]
[47.43075943 41.19200134]
[58.44559860 51.37401199]
[73.04360962 54.33161926]
[77.92530060 69.38085938]
[88.94013977 79.56287384]
[112.91024780 80.67845154]
[123.11386871 102.39703369]
[136.73602295 108.67692566]
[150.35816956 114.95682526]
[162.90795898 106.21324158]
[178.04927063 104.93373108]
[191.70732117 111.36212921]
[200.25666809 123.68140411]
[201.48355103 138.52593994]
[215.10569763 144.80584717]
[228.72784424 151.08573914]
[242.34999084 157.36563110]
[257.08883667 151.66104126]
[271.51052856 158.12554932]
[277.05895996 172.92387390]
[270.44235229 187.27642822]
[255.58619690 192.66810608]
[241.30439758 185.90011597]
[236.07009888 170.98777771]
[222.44795227 164.70788574]
[208.82580566 158.42799377]
[195.20364380 152.14808655]
[183.11897278 160.85592651]
[168.19897461 162.35568237]
[154.44058228 156.14492798]
[145.58003235 143.80039978]
[144.07827759 128.57896423]
[130.45613098 122.29907227]
[116.83397675 116.01918030]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 50]
[10 49]
[12 47]
[13 46]
[14 45]
[15 44]
[18 41]
[19 40]
[20 39]
[21 38]
[22 37]
[52 79]
[53 78]
[54 77]
[59 72]
[60 71]
[61 70]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
