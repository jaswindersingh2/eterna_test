%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCGGCGGCAAAGGCGGCGCAACGCGGCGGAAAAUCGGCGGCGACGCGGCGGAAAUCGGCGGCGUCUCGUAUUCG\
) } def
/len { sequence length } bind def

/coor [
[89.59931183 225.08383179]
[95.64565277 209.24470520]
[95.64565277 194.24470520]
[95.64565277 179.24470520]
[87.90834808 166.51742554]
[95.64565277 152.71725464]
[95.64565277 137.71725464]
[95.64565277 122.71726227]
[83.33963013 114.14044189]
[69.26676178 119.33219910]
[58.99757004 131.36773682]
[44.37894058 128.51379395]
[30.30607224 133.70555115]
[20.24153519 146.65303040]
[4.03563356 144.14288330]
[-1.64039099 128.75735474]
[9.05246925 116.32373810]
[25.11431503 119.63268280]
[39.18718719 114.44092560]
[48.44979095 102.77673340]
[64.07500458 105.25932312]
[78.14787292 100.06757355]
[63.14949036 100.28781128]
[52.87088776 89.36305237]
[54.00400162 74.40590668]
[65.81110382 65.15430450]
[80.60514069 67.63153076]
[88.75430298 80.22434235]
[85.25261688 65.63879395]
[74.50751495 54.02615738]
[79.05991364 39.84430313]
[75.55822754 25.25875473]
[64.81312561 13.64611912]
[69.36552429 -0.53573376]
[65.86383820 -15.12128258]
[56.28699112 -29.11128807]
[67.07912445 -42.18669128]
[82.63109589 -35.43594742]
[80.44938660 -18.62296295]
[83.95107269 -4.03741407]
[94.44570923 6.53196526]
[90.14377594 21.75707436]
[93.64546204 36.34262466]
[104.14009857 46.91200256]
[99.83816528 62.13711166]
[103.33985138 76.72266388]
[115.64587402 85.29948425]
[130.54190063 83.53642273]
[145.43792725 81.77336121]
[160.33395386 80.01029968]
[175.22998047 78.24723816]
[188.02507019 68.94152832]
[201.57354736 75.12927246]
[216.46957397 73.36621094]
[229.26466370 64.06050110]
[242.81314087 70.24824524]
[255.62211609 60.00802612]
[270.79428101 66.23200226]
[272.72177124 82.51747894]
[259.42181396 92.11135101]
[244.57620239 85.14427185]
[232.84657288 94.32386780]
[218.23263550 88.26223755]
[203.33660889 90.02529907]
[191.60697937 99.20489502]
[176.99304199 93.14326477]
[162.09701538 94.90632629]
[147.20098877 96.66938782]
[132.30496216 98.43244934]
[117.40893555 100.19551086]
[117.86771393 111.50060272]
[110.64565277 122.71726227]
[110.64565277 137.71725464]
[110.64565277 152.71725464]
[118.38294983 166.51742554]
[110.64565277 179.24470520]
[110.64565277 194.24470520]
[110.64565277 209.24470520]
[116.69199371 225.08383179]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[6 74]
[7 73]
[8 72]
[9 22]
[10 21]
[12 19]
[13 18]
[28 46]
[29 45]
[31 43]
[32 42]
[34 40]
[35 39]
[47 70]
[48 69]
[49 68]
[50 67]
[51 66]
[53 64]
[54 63]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
