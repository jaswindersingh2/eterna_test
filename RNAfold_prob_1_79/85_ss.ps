%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAUUUGCGAAUUGAAAAAUUCCCGAGCGUAUGAAAAUACAGUAAGAAAUUACGCGAGGGCAAAUAGGUUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[123.92461395 267.14077759]
[121.57809448 252.32543945]
[119.23157501 237.51011658]
[105.89875031 230.92424011]
[98.91796875 217.59260559]
[101.15201569 202.53063965]
[111.95146179 191.54528809]
[109.60494995 176.72996521]
[107.25843048 161.91464233]
[104.91191101 147.09930420]
[102.56539917 132.28398132]
[100.21887970 117.46865845]
[88.62372589 107.95275879]
[73.63528442 108.54165649]
[58.64685059 109.13055420]
[43.65841675 109.71945190]
[28.66998100 110.30834961]
[15.09704685 119.51201630]
[0.45999435 112.11683655]
[-0.18383315 95.73033142]
[13.82787895 87.20954132]
[28.08108330 95.31991577]
[43.06951904 94.73101807]
[58.05795288 94.14212036]
[73.04638672 93.55322266]
[88.03482819 92.96432495]
[100.34084320 84.38750458]
[106.08110046 70.52931213]
[100.27630615 56.07448196]
[106.29515076 42.10207748]
[120.11139679 36.65717316]
[125.85164642 22.79898071]
[131.59190369 8.94078827]
[137.33215332 -4.91740465]
[143.07240295 -18.77559662]
[131.42250061 -28.40738106]
[123.13058472 -41.04603577]
[118.93396759 -55.56773376]
[119.20579529 -70.68122101]
[123.92191315 -85.04261780]
[132.66296387 -97.37491608]
[144.65168762 -106.58152771]
[158.82206726 -111.84382629]
[173.91407776 -112.69387817]
[188.58575439 -109.05609894]
[201.53248596 -101.25395203]
[211.60307312 -89.98121643]
[217.90203857 -76.24024200]
[219.86929321 -61.25286484]
[217.32989502 -46.35176468]
[210.50965881 -32.86192703]
[200.01501465 -21.98286247]
[186.77915955 -14.68192959]
[171.97901917 -11.60832310]
[156.93060303 -13.03534603]
[151.19033813 0.82284707]
[145.45008850 14.68103981]
[139.70983887 28.53923225]
[133.96958923 42.39742661]
[139.88902283 56.01711273]
[134.26501465 70.15306091]
[119.93929291 76.26956177]
[114.19904327 90.12776184]
[115.03420258 115.12214661]
[117.38072205 129.93746948]
[119.72724152 144.75279236]
[122.07375336 159.56811523]
[124.42027283 174.38343811]
[126.76679230 189.19877625]
[140.43234253 196.30924988]
[147.21144104 209.94366455]
[144.69203186 224.77998352]
[134.04690552 235.16360474]
[136.39341736 249.97892761]
[138.73994446 264.79425049]
[150.82164001 275.34942627]
[149.95817566 291.36923218]
[136.81192017 300.56463623]
[121.46754456 295.88171387]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[3 73]
[7 69]
[8 68]
[9 67]
[10 66]
[11 65]
[12 64]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[27 63]
[28 62]
[31 59]
[32 58]
[33 57]
[34 56]
[35 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
