%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAACCGAGCUUUGAAAACAAAGGGAACCUGCGAAAACGCAACUUCAAAAGAAGGGAACCCUCGGACUGGAGUUCG\
) } def
/len { sequence length } bind def

/coor [
[11.48486805 417.16482544]
[4.72930193 431.03442383]
[-8.46417332 439.03042603]
[-23.88556671 438.60128784]
[-36.61396790 429.88400269]
[-42.58779526 415.66018677]
[-39.90081406 400.46859741]
[-29.41043472 389.15686035]
[-14.46409893 385.33447266]
[-9.82884407 371.06863403]
[-5.19358969 356.80279541]
[-0.55833465 342.53692627]
[4.07692003 328.27108765]
[8.71217537 314.00524902]
[13.34743023 299.73941040]
[17.98268509 285.47354126]
[22.61793900 271.20770264]
[15.19520092 262.14016724]
[13.17268944 250.47433472]
[17.19153404 239.20826721]
[26.32454109 231.29705811]
[38.28698730 228.87800598]
[32.36755371 215.25831604]
[37.99156952 201.12236023]
[52.31728745 195.00585938]
[58.05754089 181.14767456]
[63.79779053 167.28947449]
[69.53804016 153.43128967]
[63.61861038 139.81159973]
[69.24262238 125.67564392]
[83.56834412 119.55914307]
[89.30859375 105.70095062]
[91.36377716 90.84241486]
[89.60071564 75.94638824]
[87.83765411 61.05035782]
[86.07459259 46.15433121]
[75.83438110 33.34535217]
[82.05835724 18.17320061]
[98.34382629 16.24568748]
[107.93770599 29.54567146]
[100.97061920 44.39126968]
[102.73368073 59.28729630]
[104.49674225 74.18332672]
[106.25980377 89.07935333]
[113.18890381 91.94947815]
[133.97619629 100.55985260]
[145.75595093 91.27344513]
[157.53570557 81.98703766]
[169.31546021 72.70063019]
[174.88639832 57.27673340]
[191.07481384 54.65611649]
[201.22741699 67.53464508]
[194.90010071 82.66399384]
[178.60186768 84.48037720]
[166.82211304 93.76679230]
[155.04235840 103.05319977]
[143.26260376 112.33960724]
[103.16678619 111.44120026]
[97.42653656 125.29940033]
[103.23133087 139.75422668]
[97.21247864 153.72663879]
[83.39623260 159.17153931]
[77.65598297 173.02972412]
[71.91573334 186.88792419]
[66.17548370 200.74610901]
[71.98027039 215.20094299]
[65.96142578 229.17335510]
[52.14517975 234.61825562]
[60.12434006 251.56498718]
[53.55332947 268.77221680]
[36.88378906 275.84295654]
[32.24853134 290.10879517]
[27.61327744 304.37466431]
[22.97802353 318.64050293]
[18.34276772 332.90634155]
[13.70751286 347.17221069]
[9.07225800 361.43804932]
[4.43700314 375.70388794]
[-0.19825166 389.96972656]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 79]
[10 78]
[11 77]
[12 76]
[13 75]
[14 74]
[15 73]
[16 72]
[17 71]
[22 68]
[25 65]
[26 64]
[27 63]
[28 62]
[31 59]
[32 58]
[33 44]
[34 43]
[35 42]
[36 41]
[46 57]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
