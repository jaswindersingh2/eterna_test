%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:50 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (245)
} def

/sequence { (\
GGAAAAUAGCCCACGCUGAUGUCAGCAGCCAGGGCAAAGGAACUAACGAUCCAGCCAAGGCACGGGCGAUUGUCAUUCG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 7 0.005691445 ubox
1 12 0.011360731 ubox
1 43 0.003252033 ubox
1 71 0.004068431 ubox
1 73 0.018615098 ubox
1 74 0.298345725 ubox
1 76 0.053241125 ubox
1 77 0.016847981 ubox
1 78 0.208237096 ubox
2 7 0.003236815 ubox
2 11 0.011361007 ubox
2 70 0.003796032 ubox
2 71 0.013340368 ubox
2 73 0.274664307 ubox
2 74 0.850200789 ubox
2 76 0.013957519 ubox
2 77 0.190430157 ubox
2 78 0.203679502 ubox
3 70 0.013410187 ubox
3 71 0.039003512 ubox
3 73 0.822931016 ubox
3 76 0.178488786 ubox
3 77 0.203187749 ubox
4 70 0.037113519 ubox
4 71 0.111052465 ubox
4 73 0.048234082 ubox
4 76 0.195805005 ubox
4 77 0.007746088 ubox
5 70 0.104846785 ubox
5 71 0.759144311 ubox
5 73 0.033679015 ubox
5 76 0.008054067 ubox
5 77 0.004762101 ubox
6 70 0.826675911 ubox
6 71 0.053891347 ubox
6 73 0.147761355 ubox
6 76 0.005429679 ubox
7 36 0.004422631 ubox
7 37 0.006701760 ubox
7 68 0.031110583 ubox
7 69 0.724183237 ubox
7 72 0.148211049 ubox
7 75 0.004905510 ubox
8 70 0.017253723 ubox
8 71 0.144509630 ubox
8 73 0.004568308 ubox
9 35 0.047293218 ubox
9 67 0.996723649 ubox
9 70 0.016033536 ubox
10 34 0.047342881 ubox
10 66 0.998747190 ubox
10 68 0.005787881 ubox
11 33 0.047343026 ubox
11 64 0.003769730 ubox
11 65 0.998735582 ubox
11 66 0.007248651 ubox
12 32 0.047300568 ubox
12 64 0.997666796 ubox
12 65 0.008088992 ubox
13 22 0.006248067 ubox
14 21 0.006672530 ubox
14 28 0.015162041 ubox
14 64 0.008793526 ubox
15 20 0.004330414 ubox
15 22 0.008479125 ubox
15 26 0.997811008 ubox
15 29 0.045284461 ubox
15 63 0.004036811 ubox
16 21 0.009202980 ubox
16 25 0.998856875 ubox
16 28 0.045350158 ubox
17 24 0.998353646 ubox
17 27 0.045452444 ubox
18 22 0.004393047 ubox
18 23 0.995340968 ubox
18 26 0.045400108 ubox
20 24 0.006140585 ubox
20 25 0.014811050 ubox
20 27 0.003236506 ubox
21 26 0.003589299 ubox
28 61 0.997721162 ubox
28 63 0.006069284 ubox
29 60 0.998838137 ubox
30 59 0.998388810 ubox
32 56 0.013794907 ubox
33 55 0.010999178 ubox
33 56 0.998648595 ubox
34 55 0.998805405 ubox
35 54 0.998377378 ubox
36 50 0.004295620 ubox
37 50 0.006960049 ubox
38 50 0.003272049 ubox
39 47 0.015168914 ubox
39 50 0.004370466 ubox
39 51 0.010168445 ubox
39 52 0.997483275 ubox
39 78 0.012389050 ubox
40 47 0.012652537 ubox
40 50 0.007502920 ubox
40 51 0.997991631 ubox
40 77 0.012277809 ubox
40 78 0.039583558 ubox
41 50 0.985339132 ubox
41 76 0.011774241 ubox
41 77 0.039515891 ubox
42 50 0.029359320 ubox
42 76 0.036855229 ubox
43 48 0.644493194 ubox
44 48 0.021946330 ubox
44 49 0.038877583 ubox
44 75 0.020260001 ubox
45 50 0.003560017 ubox
45 73 0.006171378 ubox
46 73 0.044567621 ubox
47 68 0.003536086 ubox
47 72 0.046570544 ubox
48 67 0.003555127 ubox
48 71 0.046568037 ubox
49 70 0.046586203 ubox
50 66 0.003576544 ubox
50 69 0.046516115 ubox
51 65 0.003742564 ubox
51 68 0.045706431 ubox
52 64 0.003796900 ubox
52 68 0.006618770 ubox
54 61 0.006691356 ubox
54 67 0.046486624 ubox
55 60 0.006699961 ubox
55 65 0.004899551 ubox
55 66 0.046661594 ubox
56 64 0.005135419 ubox
56 65 0.046624665 ubox
59 63 0.006615272 ubox
63 79 0.007510759 ubox
64 78 0.007886005 ubox
65 74 0.009713766 ubox
65 77 0.007521283 ubox
66 73 0.009831879 ubox
66 76 0.007389566 ubox
67 72 0.009892846 ubox
67 79 0.011749713 ubox
68 74 0.046934552 ubox
68 77 0.018476445 ubox
68 78 0.092411500 ubox
69 73 0.040883635 ubox
69 76 0.020448526 ubox
69 77 0.091484589 ubox
70 75 0.019472803 ubox
71 75 0.014485413 ubox
71 79 0.017786568 ubox
72 77 0.007285689 ubox
72 78 0.040434213 ubox
74 79 0.011960375 ubox
2 74 0.9500000 lbox
3 73 0.9500000 lbox
5 71 0.9500000 lbox
6 70 0.9500000 lbox
7 69 0.9500000 lbox
9 67 0.9500000 lbox
10 66 0.9500000 lbox
11 65 0.9500000 lbox
12 64 0.9500000 lbox
15 26 0.9500000 lbox
16 25 0.9500000 lbox
17 24 0.9500000 lbox
18 23 0.9500000 lbox
28 61 0.9500000 lbox
29 60 0.9500000 lbox
30 59 0.9500000 lbox
33 56 0.9500000 lbox
34 55 0.9500000 lbox
35 54 0.9500000 lbox
39 52 0.9500000 lbox
40 51 0.9500000 lbox
41 50 0.9500000 lbox
showpage
end
%%EOF
