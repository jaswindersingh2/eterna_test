%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAUGACCAGAAACAGGACAUAAGUCAGCACAAAAAGAGCAGACAGUCACGACAAAAGACGAGACGAAGGUAUUCG\
) } def
/len { sequence length } bind def

/coor [
[102.53508759 190.90684509]
[87.53523254 190.84095764]
[75.71430206 181.60702515]
[72.01916504 167.06927490]
[77.99617767 153.31153870]
[91.14529419 146.09097290]
[77.28710175 151.83123779]
[63.42890930 157.57148743]
[53.64014816 170.00091553]
[38.92074585 167.72309875]
[25.06255341 173.46334839]
[20.53311348 188.43058777]
[7.41439962 196.94136047]
[-8.09933281 194.97715759]
[-18.68297386 183.46539307]
[-19.33925056 167.84158325]
[-9.75829124 155.48281860]
[5.53606987 152.22451782]
[19.32230186 159.60514832]
[33.18049622 153.86489868]
[41.97802353 141.84605408]
[57.68865967 143.71328735]
[71.54685211 137.97303772]
[85.40504456 132.23278809]
[70.39559174 113.04755402]
[72.12504578 90.90522003]
[86.82495880 77.24942780]
[83.32327271 62.66387939]
[79.82159424 48.07833099]
[69.07649231 36.46569443]
[73.62888336 22.28384018]
[70.12720490 7.69829178]
[55.52684784 2.71501756]
[45.95631409 -9.38491917]
[44.46953583 -24.74047279]
[51.54093170 -38.45174026]
[64.91404724 -46.14350891]
[80.32157135 -45.36136246]
[92.84701538 -36.35487747]
[98.49356079 -21.99799728]
[95.45941162 -6.87194347]
[84.71275330 4.19661140]
[88.21443939 18.78215981]
[98.70907593 29.35153961]
[94.40714264 44.57664871]
[97.90882874 59.16219711]
[101.41050720 73.74774933]
[127.15270996 85.38400269]
[130.53767395 117.87221527]
[145.43370056 116.10915375]
[160.32972717 114.34609222]
[173.12481689 105.04039001]
[186.67329407 111.22812653]
[201.56932068 109.46506500]
[209.03350830 95.86119080]
[223.08265686 89.27323151]
[238.31455994 92.23439026]
[248.87226868 103.60604858]
[250.69610596 119.01557159]
[243.08477783 132.53767395]
[228.96498108 138.97283936]
[213.76609802 135.84661865]
[203.33238220 124.36109161]
[188.43635559 126.12415314]
[176.70672607 135.30375671]
[162.09278870 129.24212646]
[147.19676208 131.00518799]
[132.30073547 132.76824951]
[125.49087524 146.13334656]
[132.82019043 159.22077942]
[140.14950562 172.30822754]
[154.51202393 180.22341919]
[154.56794739 196.62246704]
[140.25975037 204.63543701]
[126.30648804 196.01927185]
[127.06207275 179.63754272]
[119.73274994 166.55009460]
[112.40343475 153.46266174]
[118.25936127 167.27236938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 24]
[7 23]
[8 22]
[10 20]
[11 19]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[49 68]
[50 67]
[51 66]
[53 64]
[54 63]
[69 78]
[70 77]
[71 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
