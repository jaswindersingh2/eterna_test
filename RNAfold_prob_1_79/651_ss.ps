%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCCCGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAGGGCGCCGGGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[92.03112030 117.35664368]
[82.11283875 106.69371796]
[82.59420776 92.13903809]
[93.19535828 82.15474701]
[93.78425598 67.16631317]
[94.37314606 52.17787552]
[94.96204376 37.18944168]
[95.55094147 22.20100403]
[96.13983917 7.21256876]
[96.72873688 -7.77586651]
[81.86379242 -9.87929058]
[67.28791809 -13.47580433]
[53.15068817 -18.52850151]
[39.59717560 -24.98553467]
[26.76645851 -32.78064346]
[14.79020309 -41.83383942]
[3.79130530 -52.05221558]
[-6.11736917 -63.33092117]
[-14.83413982 -75.55421448]
[-22.26955986 -88.59666443]
[-28.34732819 -102.32444000]
[-33.00507736 -116.59666443]
[-36.19501114 -131.26687622]
[-37.88439560 -146.18455505]
[-38.05589676 -161.19660950]
[-36.70775223 -176.14898682]
[-33.85379410 -190.88824463]
[-29.52331543 -205.26315308]
[-23.76074982 -219.12619019]
[-16.62522888 -232.33509827]
[-8.18997765 -244.75434875]
[1.45844460 -256.25646973]
[12.22103024 -266.72344971]
[23.98733711 -276.04788208]
[36.63662338 -284.13409424]
[50.03908539 -290.89907837]
[64.05719757 -296.27340698]
[78.54710388 -300.20199585]
[93.36011505 -302.64443970]
[108.34423065 -303.57574463]
[123.34568024 -302.98635864]
[138.21054077 -300.88226318]
[152.78625488 -297.28512573]
[166.92326355 -292.23181152]
[180.47648621 -285.77416992]
[193.30685425 -277.97848511]
[205.28271484 -268.92477417]
[216.28117371 -258.70590210]
[226.18934631 -247.42677307]
[234.90557861 -235.20309448]
[242.34042358 -222.16030884]
[248.41758728 -208.43228149]
[253.07470703 -194.15985107]
[256.26400757 -179.48948669]
[257.95272827 -164.57173157]
[258.12356567 -149.55967712]
[256.77474976 -134.60736084]
[253.92015076 -119.86822510]
[249.58905029 -105.49350739]
[243.82586670 -91.63072205]
[236.68977356 -78.42212677]
[228.25396729 -66.00325775]
[218.60504150 -54.50155258]
[207.84199524 -44.03504181]
[196.07527161 -34.71112823]
[183.42562866 -26.62548828]
[170.02287292 -19.86109543]
[156.00453186 -14.48736382]
[141.51445007 -10.55943584]
[126.70133209 -8.11761856]
[111.71717072 -7.18696928]
[111.12828064 7.80146599]
[110.53938293 22.78990173]
[109.95048523 37.77833557]
[109.36158752 52.76677322]
[108.77268982 67.75521088]
[108.18379211 82.74364471]
[117.96889496 93.52891541]
[117.30683899 108.07649231]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 77]
[5 76]
[6 75]
[7 74]
[8 73]
[9 72]
[10 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
