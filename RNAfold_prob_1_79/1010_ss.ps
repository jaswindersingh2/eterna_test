%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGCCAAAGGCAAGAUCAAAGAUCAAGUUAGAAACUAACAAGUUCAAAGAACAAGACAAAGUCAGUAGUUGUUCG\
) } def
/len { sequence length } bind def

/coor [
[128.40859985 161.27186584]
[115.81392670 165.65980530]
[102.60253143 167.48716736]
[89.28964996 166.68267822]
[76.39444733 163.27770996]
[64.41980743 157.40505981]
[53.83271408 149.29374695]
[42.42662430 159.03546143]
[31.02053452 168.77717590]
[22.90314865 183.66154480]
[6.35335207 179.98179626]
[5.30786037 163.06011963]
[21.27881432 157.37109375]
[32.68490219 147.62936401]
[44.09099197 137.88764954]
[36.68809509 123.51369476]
[32.91368484 107.79214478]
[32.98407745 91.62401581]
[18.39852905 88.12233734]
[3.81297946 84.62065125]
[-10.77256966 81.11897278]
[-27.58555603 83.30068207]
[-34.33629608 67.74871063]
[-21.26089478 56.95657349]
[-7.27088881 66.53342438]
[7.31466007 70.03510284]
[21.90020943 73.53678131]
[36.48575592 77.03846741]
[45.79761887 59.70864868]
[59.70864868 45.79761887]
[77.03846741 36.48575592]
[73.53678131 21.90020943]
[70.03510284 7.31466007]
[66.53342438 -7.27088881]
[63.03174210 -21.85643768]
[53.45489120 -35.84644318]
[64.24702454 -48.92184448]
[79.79899597 -42.17110443]
[77.61729431 -25.35811806]
[81.11897278 -10.77256966]
[84.62065125 3.81297946]
[88.12233734 18.39852905]
[91.62401581 32.98407745]
[105.21156311 32.66404724]
[118.58804321 35.07099533]
[131.21174622 40.10744858]
[142.57144165 47.56943893]
[152.20706177 57.15476990]
[159.72839355 68.47525024]
[164.83084106 81.07243347]
[167.30775452 94.43613434]
[167.05883789 108.02516937]
[164.09416199 121.28919983]
[177.71630859 127.56909943]
[191.33845520 133.84899902]
[204.96060181 140.12889099]
[218.58274841 146.40878296]
[232.20489502 152.68867493]
[250.36048889 150.48063660]
[260.10983276 164.93373108]
[273.96801758 170.67398071]
[287.75427246 163.29333496]
[303.04861450 166.55163574]
[312.62957764 178.91041565]
[311.97329712 194.53422546]
[301.38967896 206.04597473]
[285.87594604 208.01017761]
[272.75723267 199.49940491]
[268.22778320 184.53216553]
[254.36958313 178.79191589]
[242.90542603 183.14506531]
[231.21655273 178.26356506]
[225.92500305 166.31083679]
[212.30285645 160.03092957]
[198.68070984 153.75103760]
[185.05856323 147.47114563]
[171.43640137 141.19123840]
[157.81425476 134.91134644]
[149.82640076 145.59190369]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 15]
[8 14]
[9 13]
[18 28]
[19 27]
[20 26]
[21 25]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[53 78]
[54 77]
[55 76]
[56 75]
[57 74]
[58 73]
[60 70]
[61 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
