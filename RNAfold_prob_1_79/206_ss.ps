%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGACGGGUUCAGAUCCAGAAAACUGAGAUCAAAAGAUGAGACAAAAGUCCAUCAGAACGGGUCUGAAGCCUUCG\
) } def
/len { sequence length } bind def

/coor [
[63.41524887 387.93884277]
[49.33765030 394.46578979]
[34.11873245 391.43853760]
[23.61047554 380.02117920]
[21.85352325 364.60391235]
[29.52345657 351.11495972]
[43.67103195 344.74111938]
[46.59738541 330.02932739]
[41.49172211 316.03713989]
[51.77263260 304.01159668]
[54.69898987 289.29983521]
[49.59332657 275.30764771]
[59.87423706 263.28210449]
[62.80059052 248.57032776]
[65.72694397 233.85855103]
[68.65329742 219.14675903]
[71.57965851 204.43498230]
[74.50601196 189.72320557]
[77.43236542 175.01142883]
[80.35871887 160.29965210]
[83.28507233 145.58787537]
[72.29619598 139.87658691]
[63.10955811 131.57115173]
[56.32279968 121.21189880]
[52.37741852 109.47271729]
[51.53008652 97.11730194]
[53.83591843 84.94941711]
[59.14491272 73.76062775]
[67.11170197 64.27882385]
[58.77814865 51.80678177]
[43.83889008 45.04285812]
[42.49648285 28.69874573]
[56.13187408 19.58786774]
[70.71814728 27.08271217]
[71.25019073 43.47322845]
[79.58374786 55.94527054]
[90.94763947 52.29573059]
[102.85850525 51.52865219]
[114.59664917 53.69038773]
[125.45281982 58.65031052]
[135.19453430 47.24422455]
[144.93626404 35.83813477]
[154.67797852 24.43204308]
[157.99427795 15.62769794]
[165.03302002 12.77912807]
[175.21502686 1.76429069]
[185.39703369 -9.25054741]
[188.48657227 -25.35603714]
[204.06571960 -30.47681236]
[216.10798645 -19.34505844]
[212.22531128 -3.41216993]
[196.41188049 0.93146425]
[186.22987366 11.94630146]
[176.04785156 22.96113968]
[166.08407593 34.17376328]
[156.34234619 45.57985306]
[146.60063171 56.98594284]
[136.85890198 68.39203644]
[146.05947876 84.63227081]
[148.45370483 103.14344025]
[143.68778992 121.19009399]
[132.46598816 136.10542297]
[116.44660187 145.68536377]
[97.99685669 148.51422119]
[95.07050323 163.22599792]
[92.14414215 177.93778992]
[89.21778870 192.64956665]
[86.29143524 207.36134338]
[83.36508179 222.07312012]
[80.43872833 236.78489685]
[77.51236725 251.49667358]
[74.58601379 266.20846558]
[79.48236847 281.25292969]
[69.41076660 292.22619629]
[66.48441315 306.93795776]
[71.38076019 321.98245239]
[61.30916595 332.95568848]
[58.38281250 347.66748047]
[69.01430511 358.97015381]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 78]
[8 77]
[10 75]
[11 74]
[13 72]
[14 71]
[15 70]
[16 69]
[17 68]
[18 67]
[19 66]
[20 65]
[21 64]
[29 36]
[30 35]
[40 58]
[41 57]
[42 56]
[43 55]
[45 54]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
