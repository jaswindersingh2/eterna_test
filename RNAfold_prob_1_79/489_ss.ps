%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGAUGACGGCAGUAGAAAUACGUAGAAAUACGCCAAAAGUUUUAGAAAUGGAACGUUAUCAAAUAAUUAUUUCG\
) } def
/len { sequence length } bind def

/coor [
[95.33795929 265.56817627]
[89.70986938 251.56007385]
[88.07096863 236.55285645]
[90.54287720 221.66017151]
[96.94216919 207.98713684]
[106.79396820 196.54840088]
[119.36720276 188.19279480]
[114.73194885 173.92694092]
[110.09669495 159.66110229]
[105.46144104 145.39524841]
[100.82618713 131.12940979]
[96.19093323 116.86355591]
[76.32312775 101.66492462]
[62.95802689 94.85506439]
[49.59292984 88.04521179]
[40.25767517 86.87587738]
[35.84465027 80.69660187]
[22.75720978 73.36727905]
[9.66977024 66.03796387]
[-2.24608636 75.47622681]
[-16.86813545 79.63123322]
[-31.96662331 77.86938477]
[-45.23913956 70.45933533]
[-54.66171646 58.53107452]
[-58.79748917 43.90356827]
[-57.01577377 28.80741310]
[-49.58827591 15.54465866]
[-37.64762878 6.13777733]
[-23.01469803 2.02125239]
[-7.92089796 3.82282305]
[5.33207512 11.26776314]
[14.72324085 23.22077370]
[18.82051277 37.85910797]
[16.99908829 52.95052338]
[30.08652878 60.27984238]
[43.17396927 67.60916138]
[56.40278625 74.68011475]
[69.76788330 81.48996735]
[83.13298035 88.29982758]
[76.83106995 74.68785095]
[84.27798462 61.66696167]
[99.20574951 60.19666672]
[109.04987335 71.51449585]
[105.52464294 86.09444427]
[117.30439758 76.80802917]
[129.08415222 67.52162170]
[140.86390686 58.23521423]
[152.64366150 48.94880295]
[164.42341614 39.66239548]
[169.99436951 24.23850060]
[186.18276978 21.61788368]
[196.33537292 34.49641418]
[190.00805664 49.62575912]
[173.70982361 51.44215012]
[161.93006897 60.72855759]
[150.15031433 70.01496887]
[138.37055969 79.30137634]
[126.59080505 88.58778381]
[114.81105042 97.87419128]
[110.45677948 112.22830200]
[115.09203339 126.49414825]
[119.72728729 140.75999451]
[124.36254120 155.02584839]
[128.99780273 169.29168701]
[133.63305664 183.55754089]
[148.71632385 182.92700195]
[163.41011047 186.39039612]
[176.62405396 193.69068909]
[187.37757874 204.28617859]
[194.87269592 217.39059448]
[198.55323792 232.03150940]
[198.14607239 247.12245178]
[193.68139648 261.54360962]
[185.49055481 274.22479248]
[174.18133545 284.22500610]
[160.59297180 290.80215454]
[145.73381042 293.46817017]
[130.70648193 292.02520752]
[116.62612915 286.58038330]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[13 39]
[14 38]
[15 37]
[17 36]
[18 35]
[19 34]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
