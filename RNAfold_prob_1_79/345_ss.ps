%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACGGCCCGGAAAAAACCGGCCCAAAGGGAGCCGAGGCGCACAAAAAGUGGUACAAAAGUACGCCGAUUAAAUUCG\
) } def
/len { sequence length } bind def

/coor [
[94.84701538 284.24707031]
[89.36462402 270.11486816]
[89.04946136 254.95977783]
[93.93959045 240.61187744]
[103.44449615 228.80371094]
[116.41641998 220.96121216]
[113.49006653 206.24942017]
[110.56371307 191.53764343]
[107.63735962 176.82586670]
[94.84775543 168.98838806]
[80.41092682 173.05999756]
[65.97409821 177.13160706]
[51.53726959 181.20321655]
[44.03460312 195.11311340]
[28.86989021 199.56361389]
[15.04008007 191.91430664]
[10.75015736 176.70338440]
[18.54525566 162.95523071]
[33.80068207 158.82637024]
[47.46566010 166.76638794]
[61.90248871 162.69477844]
[76.33931732 158.62316895]
[90.77614594 154.55155945]
[93.41309357 139.78515625]
[81.27783966 130.96838379]
[69.14257812 122.15160370]
[52.77450562 117.73318481]
[52.48911285 100.78163910]
[68.69918060 95.81475067]
[77.95935822 110.01634979]
[90.09461212 118.83312988]
[102.22987366 127.64990997]
[73.53855133 107.54080200]
[87.52506256 75.72798157]
[84.59870911 61.01620102]
[73.38507843 49.05014420]
[78.39946747 33.43643570]
[94.48351288 30.23711967]
[105.09131622 42.74337769]
[99.31048584 58.08984375]
[102.23683929 72.80162048]
[127.07300568 95.08835602]
[111.84043884 125.08572388]
[120.65721893 112.95046997]
[129.47399902 100.81521606]
[128.39457703 84.80851746]
[140.33285522 74.09136963]
[156.13079834 76.88504791]
[163.66957092 91.04648590]
[157.16609192 105.71224213]
[141.60925293 109.63199615]
[132.79248047 121.76725006]
[123.97570038 133.90249634]
[131.04664612 147.13131714]
[146.03507996 146.54241943]
[161.02351379 145.95352173]
[176.01194763 145.36462402]
[189.58488464 136.16096497]
[204.22193909 143.55613708]
[204.86576843 159.94264221]
[190.85404968 168.46343994]
[176.60084534 160.35307312]
[161.61241150 160.94197083]
[146.62397766 161.53086853]
[131.63554382 162.11975098]
[122.34913635 173.89950562]
[125.27548981 188.61129761]
[128.20184326 203.32307434]
[131.12820435 218.03485107]
[146.11389160 220.31623840]
[159.41406250 227.58819580]
[169.42266846 238.97256470]
[174.93109131 253.09463501]
[175.27418518 268.24911499]
[170.41050720 282.60601807]
[160.92736816 294.43167114]
[147.96992493 302.29806519]
[133.10282898 305.25531006]
[118.12136841 302.94628906]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 69]
[7 68]
[8 67]
[9 66]
[10 23]
[11 22]
[12 21]
[13 20]
[24 32]
[25 31]
[26 30]
[34 41]
[35 40]
[43 53]
[44 52]
[45 51]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
