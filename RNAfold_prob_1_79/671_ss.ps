%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGAUCAAGGAAGAAAAAAAAAAUUCCAAGAAGGAAAAAAAAAACUUCAAGAUCAAAAAAAAAAAGAUCUUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[104.17956543 267.46276855]
[103.59066772 252.47433472]
[103.00177002 237.48590088]
[102.11870575 222.51191711]
[100.94181824 207.55816650]
[99.76493073 192.60440063]
[98.58804321 177.65063477]
[97.41116333 162.69688416]
[96.23427582 147.74311829]
[74.97447205 140.83270264]
[59.16730499 125.02552795]
[52.25688171 103.76572418]
[37.30311966 102.58883667]
[22.34936142 101.41195679]
[7.39560080 100.23506927]
[-0.70455581 113.22144318]
[-13.91781616 120.94597626]
[-29.20787048 121.63361359]
[-43.06117249 115.12634277]
[-52.29434204 102.91949463]
[-54.78565979 87.81810760]
[-49.96263504 73.29236603]
[-38.93357086 62.68018723]
[-24.23286438 58.42016983]
[-9.23862648 61.49123383]
[2.60357428 71.18766785]
[8.57248688 85.28130341]
[23.52624702 86.45819092]
[38.48000717 87.63507843]
[53.43376541 88.81196594]
[62.78311920 69.85883331]
[79.37974548 56.77510834]
[99.99176025 52.10860062]
[102.33827972 37.29327774]
[104.68479919 22.47795105]
[107.03131104 7.66262627]
[94.72049713 -1.43146002]
[88.05648041 -15.21004772]
[88.57061005 -30.50691795]
[96.14473724 -43.80696487]
[109.03838348 -52.05392838]
[124.28868866 -53.35272598]
[138.39123535 -47.40489578]
[148.10536194 -35.57720947]
[151.19885254 -20.58757973]
[146.96081543 -5.88051701]
[136.36514282 5.16440439]
[121.84664154 10.00914288]
[119.50012207 24.82446861]
[117.15360260 39.63979340]
[114.80709076 54.45512009]
[121.18839264 57.05074692]
[127.13126373 60.53507233]
[132.51275635 64.83599854]
[137.22148132 69.86452484]
[141.16004944 75.51660156]
[144.24693298 81.67529297]
[146.41827393 88.21315002]
[147.62913513 94.99489594]
[147.85447693 101.88021088]
[147.08961487 108.72661591]
[145.35040283 115.39245605]
[142.67279053 121.73979187]
[139.11221313 127.63729858]
[134.74234009 132.96295166]
[129.65357971 137.60652161]
[123.95124817 141.47196960]
[117.75331116 144.47927856]
[111.18803406 146.56623840]
[112.36492157 161.51998901]
[113.54180908 176.47375488]
[114.71869659 191.42750549]
[115.89557648 206.38127136]
[117.07246399 221.33503723]
[120.95310211 229.90562439]
[117.99020386 236.89700317]
[118.57910156 251.88543701]
[119.16799927 266.87387085]
[122.11319733 286.03048706]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[4 74]
[5 73]
[6 72]
[7 71]
[8 70]
[9 69]
[12 30]
[13 29]
[14 28]
[15 27]
[33 51]
[34 50]
[35 49]
[36 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
