%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGAUCAGAGCCAAGCGAAAGCAGGGAAACCAAAGGACUCAAAGAUCAAGGAAAACCAAGCGUGCUACUUCG\
) } def
/len { sequence length } bind def

/coor [
[95.99155426 240.05067444]
[102.03788757 224.21154785]
[102.03788757 209.21154785]
[102.03788757 194.21154785]
[101.44898987 179.22311401]
[100.27210999 164.26934814]
[99.09522247 149.31558228]
[97.91833496 134.36183167]
[74.51994324 112.47491455]
[81.57884979 87.40522766]
[72.76207733 75.26997375]
[63.94529343 63.13471985]
[55.12851715 50.99946213]
[36.43548203 43.95286179]
[34.60917282 24.86539650]
[24.86745262 13.45930767]
[15.12573242 2.05321765]
[5.16194582 -9.15940762]
[-5.02006531 -20.17424393]
[-24.01433563 -18.54995155]
[-39.10417557 -29.78478622]
[-42.89193344 -47.95640182]
[-56.51408005 -54.23629761]
[-72.78603363 -52.19775009]
[-82.47039795 -65.43199158]
[-75.60473633 -80.32476044]
[-59.25185013 -81.55566406]
[-50.23418427 -67.85844421]
[-36.61203766 -61.57854843]
[-35.53133392 -62.72690582]
[-34.38297653 -63.80760956]
[-40.66287231 -77.42975616]
[-54.36009216 -86.44741821]
[-53.12919235 -102.80030823]
[-38.23641586 -109.66596985]
[-25.00217819 -99.98160553]
[-27.04072571 -83.70965576]
[-20.76082993 -70.08750916]
[-6.34782219 -68.27703094]
[4.98252201 -58.95287704]
[9.62527847 -44.87776566]
[5.99477196 -30.35625648]
[16.17678261 -19.34141922]
[23.21552467 -16.49284935]
[26.53182220 -7.68850279]
[36.27354431 3.71758652]
[46.01526260 15.12367630]
[56.55796051 15.04892063]
[65.50572968 21.03572655]
[69.62643433 31.22268486]
[67.26377106 42.18268585]
[76.08055115 54.31793976]
[84.89733124 66.45319366]
[93.71411133 78.58844757]
[107.78676605 74.82501984]
[123.52748108 80.76708984]
[134.25361633 96.57089996]
[149.24205017 97.15979767]
[163.49525452 89.04941559]
[177.50695801 97.57021332]
[176.86312866 113.95671844]
[162.22608948 121.35189819]
[148.65315247 112.14823151]
[133.66471863 111.55933380]
[128.46655273 116.96573639]
[141.96270752 123.51204681]
[139.90715027 138.37052917]
[125.14064789 141.00692749]
[118.07025146 127.77854156]
[112.87209320 133.18493652]
[114.04898071 148.13870239]
[115.22586823 163.09246826]
[116.40275574 178.04621887]
[120.05474854 184.07514954]
[119.91864777 190.09761047]
[117.03788757 194.21154785]
[117.03788757 209.21154785]
[117.03788757 224.21154785]
[123.08422852 240.05067444]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[5 73]
[6 72]
[7 71]
[8 70]
[10 54]
[11 53]
[12 52]
[13 51]
[15 47]
[16 46]
[17 45]
[18 43]
[19 42]
[22 29]
[23 28]
[31 38]
[32 37]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
