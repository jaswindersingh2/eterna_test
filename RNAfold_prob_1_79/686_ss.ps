%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGCCAAGUCCGAAAAAAAAAAGGACAAGUCCGAAAAAAAAAAGGACAAGGCCAAAAAAAAAAAGGGUACCUUCG\
) } def
/len { sequence length } bind def

/coor [
[134.77780151 224.63923645]
[125.31361389 212.21665955]
[120.10547638 197.47323608]
[119.66574097 181.82388306]
[124.04850769 166.77427673]
[132.84333801 153.77604675]
[123.55692291 141.99629211]
[114.27051544 130.21653748]
[104.98410034 118.43678284]
[90.60772705 116.62953949]
[81.63735199 105.25067139]
[83.23614502 90.84962463]
[73.94972992 79.06987000]
[64.66332245 67.29011536]
[55.37691498 55.51036453]
[41.64206314 61.71031570]
[26.83142471 64.44112396]
[11.80670834 63.54831696]
[-2.55897713 59.08813095]
[-15.43186474 51.32397079]
[-26.06591415 40.71087646]
[-33.84605026 27.86884499]
[-38.32374191 13.54661465]
[-39.24284744 -1.42198896]
[-36.55427551 -16.16659546]
[-30.41858292 -29.83090401]
[-21.19638634 -41.62240601]
[-30.48279572 -53.40216064]
[-39.76920319 -65.18191528]
[-55.19309998 -70.75286865]
[-57.81371307 -86.94126892]
[-44.93518829 -97.09387970]
[-29.80583954 -90.76656342]
[-27.98945045 -74.46832275]
[-18.70304108 -62.68856812]
[-9.41663170 -50.90881348]
[4.20194769 -57.12352753]
[18.92105865 -59.89982224]
[33.88590622 -59.07204819]
[48.22636414 -54.68398666]
[61.10757446 -46.98655701]
[71.77854156 -36.42347336]
[79.61592865 -23.60566711]
[84.16044617 -9.27595139]
[85.14379883 5.73402023]
[82.50448608 20.55202293]
[76.39165497 34.31594849]
[67.15666962 46.22395325]
[76.44307709 58.00370789]
[85.72948456 69.78346252]
[95.01589966 81.56321716]
[109.39227295 83.37046051]
[118.36264801 94.74932861]
[116.76385498 109.15037537]
[126.05027008 120.93013000]
[135.33666992 132.70988464]
[144.62309265 144.48963928]
[158.16435242 139.22206116]
[172.62829590 138.02160645]
[186.82127380 140.97817993]
[199.57452393 147.83900452]
[209.84057617 158.03021240]
[216.77911377 170.70478821]
[219.82591248 184.81301880]
[218.73855591 199.18937683]
[213.61585999 212.64886475]
[204.88882446 224.08462524]
[213.70559692 236.21987915]
[222.52238464 248.35513306]
[231.33915710 260.49038696]
[245.54075623 269.75054932]
[240.57386780 285.96063232]
[223.62232971 285.67523193]
[219.20390320 269.30715942]
[210.38713074 257.17190552]
[201.57034302 245.03665161]
[192.75357056 232.90139771]
[178.03280640 237.88041687]
[162.47523499 238.10874939]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 57]
[7 56]
[8 55]
[9 54]
[12 51]
[13 50]
[14 49]
[15 48]
[27 36]
[28 35]
[29 34]
[67 77]
[68 76]
[69 75]
[70 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
