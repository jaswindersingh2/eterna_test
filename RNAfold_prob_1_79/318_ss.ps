%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGGUGUGGAAAAAACCACGAGAAACUCAACCCACUCAGUGAAAAACACUGGCAAAAGCCAGAGCGGGAUAUUCG\
) } def
/len { sequence length } bind def

/coor [
[-15.86873627 193.85040283]
[-23.06026268 191.87228394]
[-29.62400055 188.35798645]
[-35.23723984 183.48699951]
[-39.62548065 177.50527954]
[-42.57586670 170.71293640]
[-57.52962494 171.88983154]
[-72.48338318 173.06671143]
[-87.43714905 174.24360657]
[-102.20354462 176.88055420]
[-116.64037323 180.95214844]
[-131.07719421 185.02375793]
[-145.51402283 189.09536743]
[-153.01669312 203.00527954]
[-168.18141174 207.45578003]
[-182.01121521 199.80647278]
[-186.30114746 184.59555054]
[-178.50604248 170.84738159]
[-163.25061035 166.71852112]
[-149.58563232 174.65853882]
[-135.14880371 170.58692932]
[-120.71198273 166.51531982]
[-106.27515411 162.44372559]
[-105.18639374 160.08905029]
[-103.09249115 158.02056885]
[-100.09773254 156.61816406]
[-96.43898773 156.21755981]
[-92.46701050 157.06672668]
[-88.61402893 159.28984070]
[-73.66027069 158.11296082]
[-58.70651245 156.93606567]
[-43.75275040 155.75918579]
[-31.65773582 134.39993286]
[-8.02800751 127.03464508]
[14.42998123 137.91760254]
[27.51742172 130.58827209]
[40.60486221 123.25896454]
[47.92874527 110.28938293]
[63.74995041 110.29708862]
[76.83738708 102.96776581]
[89.92482758 95.63845062]
[101.13745880 85.67466736]
[109.95423126 73.53940582]
[118.77101135 61.40415573]
[127.58779144 49.26889801]
[126.50837708 33.26219940]
[138.44664001 22.54505348]
[154.24458313 25.33873558]
[161.78337097 39.50017166]
[155.27987671 54.16592407]
[139.72305298 58.08567810]
[130.90626526 70.22093201]
[122.08949280 82.35618591]
[113.27271271 94.49143982]
[120.34365845 107.72026062]
[135.33209229 107.13136292]
[150.32052612 106.54246521]
[163.89346313 97.33879852]
[178.53051758 104.73397827]
[179.17434692 121.12048340]
[165.16262817 129.64128113]
[150.90942383 121.53090668]
[135.92098999 122.11979675]
[120.93255615 122.70869446]
[104.36668396 119.53402710]
[97.25415039 108.72589111]
[84.16670990 116.05520630]
[71.07926941 123.38452911]
[62.81928253 136.87834167]
[47.93418121 136.34640503]
[34.84674072 143.67572021]
[21.75930023 151.00503540]
[23.03474808 158.47521973]
[22.62613869 166.02915955]
[20.55961227 173.29258728]
[16.94330025 179.90695190]
[11.96169662 185.54704285]
[5.86624098 189.93710327]
[-1.03736246 192.86419678]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 32]
[7 31]
[8 30]
[9 29]
[10 23]
[11 22]
[12 21]
[13 20]
[35 72]
[36 71]
[37 70]
[39 68]
[40 67]
[41 66]
[42 54]
[43 53]
[44 52]
[45 51]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
