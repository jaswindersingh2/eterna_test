%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGAUUGGAGGACUCAAAAGAGAUCAAAAGAUCCUAAAACUGAACAAAAGUUCAGCCAAUCAAAAUCCUGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[143.11431885 264.90277100]
[139.04270935 250.46592712]
[134.97111511 236.02909851]
[119.49494934 230.93640137]
[109.93003845 217.54437256]
[110.13728333 200.92413330]
[120.23094177 187.51187134]
[115.59568787 173.24603271]
[110.96043396 158.98017883]
[106.32518005 144.71434021]
[101.68992615 130.44848633]
[97.05467224 116.18264008]
[97.40836334 131.17846680]
[90.92150116 144.70327759]
[79.00553894 153.81425476]
[64.25323486 156.52894592]
[49.87450790 152.25669861]
[38.99798203 141.92706299]
[33.99024963 127.78766632]
[35.94093323 112.91504669]
[44.42558670 100.54529572]
[57.59805679 93.36991882]
[72.59062958 92.94985962]
[62.84891129 81.54376984]
[54.67174530 76.89099884]
[52.95934677 69.49330139]
[43.67293930 57.71354675]
[34.38653183 45.93379211]
[25.10012054 34.15403748]
[9.67622662 28.58308601]
[7.05561066 12.39468288]
[19.93413925 2.24207020]
[35.06348419 8.56938553]
[36.87987518 24.86763000]
[46.16628265 36.64738464]
[55.45269394 48.42713928]
[64.73910522 60.20689011]
[74.25500488 71.80204773]
[83.99671936 83.20813751]
[80.47146606 68.62827301]
[90.31553650 57.31039429]
[105.24330902 58.78061295]
[112.69028473 71.80146790]
[106.38838196 85.41352081]
[118.16813660 76.12711334]
[129.94789124 66.84070587]
[141.72764587 57.55429459]
[153.50740051 48.26788712]
[165.28715515 38.98147583]
[170.85810852 23.55758286]
[187.04650879 20.93696785]
[197.19911194 33.81549454]
[190.87179565 48.94484329]
[174.57356262 50.76123047]
[162.79380798 60.04764175]
[151.01405334 69.33405304]
[139.23429871 78.62046051]
[127.45454407 87.90686798]
[115.67478943 97.19327545]
[111.32051849 111.54738617]
[115.95577240 125.81323242]
[120.59102631 140.07907104]
[125.22628021 154.34492493]
[129.86154175 168.61077881]
[134.49679565 182.87661743]
[148.02565002 186.21076965]
[158.01298523 195.76957703]
[161.87539673 208.92988586]
[158.68905640 222.15780640]
[149.40794373 231.95748901]
[153.47953796 246.39431763]
[157.55114746 260.83114624]
[172.15519714 266.07534790]
[180.85981750 278.92092896]
[180.31790161 294.42852783]
[170.73783875 306.63516235]
[155.80334473 310.84713745]
[141.25704956 305.44482422]
[132.69229126 292.50558472]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 70]
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[23 39]
[24 38]
[26 37]
[27 36]
[28 35]
[29 34]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
