%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGCGCAUGAGACGACUGUAAAUCCGGAAACGAGAGACUGUACGACGGCAUGAAGCAAAAAAGAUCGGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[164.75588989 250.29060364]
[157.15829468 249.44683838]
[149.95442200 246.84323120]
[143.54682922 242.61747742]
[138.29541016 236.99816895]
[134.49713135 230.29237366]
[132.36927795 222.86891174]
[132.03706360 215.13801575]
[133.52622986 207.52871704]
[136.76126099 200.46501160]
[141.56915283 194.34219360]
[133.73167419 181.55259705]
[127.38390350 177.38557434]
[125.84896851 168.10342407]
[118.51965332 155.01597595]
[108.16494751 153.03251648]
[100.55707550 145.41513062]
[98.50292206 134.61999512]
[102.95837402 124.33152771]
[96.67848206 110.70938110]
[90.13233948 97.21315002]
[83.32248688 83.84805298]
[70.16335297 75.06467438]
[71.27927399 60.21192932]
[64.46942139 46.84683228]
[53.63136292 43.97624207]
[46.42547607 35.67988586]
[45.15339661 24.98941231]
[50.00628662 15.62973976]
[44.26603699 1.77154648]
[38.25480270 -11.97127247]
[31.97490692 -25.59342003]
[18.27768898 -34.61108398]
[19.50858879 -50.96397018]
[34.40136337 -57.82963562]
[47.63560104 -48.14526749]
[45.59705353 -31.87331581]
[51.87694931 -18.25116920]
[57.69093704 -13.36692715]
[58.12422943 -3.96870494]
[63.86447906 9.88948822]
[80.04241180 20.18226814]
[77.83451843 40.03697586]
[84.64437866 53.40207291]
[97.31642151 61.22949219]
[96.68758392 77.03820038]
[103.49743652 90.40329742]
[109.83570099 95.75314331]
[110.30062866 104.42948151]
[116.58052826 118.05162811]
[133.53965759 128.60966492]
[131.60708618 147.68666077]
[138.93641663 160.77410889]
[146.52127075 173.71511841]
[154.35874939 186.50471497]
[178.77603149 188.23516846]
[195.10635376 206.18261719]
[194.54035950 230.22741699]
[206.67561340 239.04420471]
[218.81088257 247.86097717]
[230.94613647 256.67776489]
[243.08139038 265.49453735]
[256.77325439 258.65414429]
[272.07546997 258.97183228]
[285.47167969 266.37454224]
[293.88351440 279.16122437]
[295.37802124 294.39358521]
[289.61178589 308.57135010]
[277.90979004 318.43655396]
[262.96112061 321.72225952]
[248.20086670 317.67343140]
[237.02079773 307.22045898]
[231.99003601 292.76535034]
[234.26460266 277.62979126]
[222.12934875 268.81301880]
[209.99409485 259.99624634]
[197.85884094 251.17945862]
[185.72358704 242.36268616]
[179.44465637 246.64010620]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 55]
[12 54]
[14 53]
[15 52]
[19 50]
[20 49]
[21 47]
[22 46]
[24 44]
[25 43]
[29 41]
[30 40]
[31 38]
[32 37]
[58 78]
[59 77]
[60 76]
[61 75]
[62 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
