%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAACUAGAAGUUCGAAAGAACAGUGGUCACGAGCGGCCUUCGGACCGAGUGGUCACAACUAGACUAUCGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[136.95593262 130.34794617]
[131.40277100 136.06388855]
[124.97746277 140.77824402]
[117.85845184 144.36006165]
[110.24345398 146.70985413]
[102.34396362 147.76237488]
[94.37937927 147.48838806]
[86.57089233 145.89550781]
[79.13537598 143.02796936]
[72.27932739 138.96540833]
[66.19317627 133.82066345]
[61.04593658 127.73661041]
[56.98057175 120.88223267]
[54.10998917 113.44788361]
[52.51391220 105.64005280]
[37.52547455 105.05115509]
[22.53704071 104.46225739]
[7.54860401 103.87335968]
[-6.70459938 111.98374176]
[-20.71631241 103.46294403]
[-20.07248497 87.07643890]
[-5.43543148 79.68125916]
[8.13750172 88.88492584]
[23.12593651 89.47382355]
[38.11437225 90.06272125]
[53.10280991 90.65161896]
[56.57682037 79.97086334]
[62.44625473 70.39501190]
[70.38732910 62.45231247]
[79.96198273 56.58091736]
[75.89037323 42.14408875]
[71.81877136 27.70726013]
[67.74716187 13.27043247]
[53.83725357 5.76776838]
[49.38674927 -9.39694691]
[57.03606033 -23.22675514]
[72.24697876 -27.51667976]
[85.99514008 -19.72158051]
[90.12400818 -4.46615505]
[82.18399048 9.19882584]
[86.25559998 23.63565445]
[90.32720184 38.07248306]
[94.39881134 52.50931168]
[121.15602875 57.11455917]
[141.09335327 75.54443359]
[147.78375244 101.85784912]
[162.49552917 104.78420258]
[177.20732117 107.71055603]
[191.91909790 110.63690948]
[206.96357727 105.74056244]
[217.93681335 115.81215668]
[232.64860535 118.73851013]
[247.36038208 121.66487122]
[256.66253662 120.25633240]
[262.58718872 125.00573730]
[277.17272949 128.50741577]
[291.75830078 132.00909424]
[306.34384155 135.51077271]
[320.92938232 139.01245117]
[333.39129639 129.56604004]
[349.00708008 130.39166260]
[360.40341187 141.09948730]
[362.19931030 156.63360596]
[353.54681396 169.65928650]
[338.53134155 174.02618408]
[324.24276733 167.67240906]
[317.42770386 153.59800720]
[302.84216309 150.09632874]
[288.25662231 146.59465027]
[273.67105103 143.09297180]
[259.08551025 139.59127808]
[244.43402100 136.37664795]
[229.72224426 133.45028687]
[215.01046753 130.52394104]
[201.01826477 135.62959290]
[188.99273682 125.34868622]
[174.28096008 122.42233276]
[159.56918335 119.49597931]
[144.85740662 116.56962585]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 26]
[16 25]
[17 24]
[18 23]
[30 43]
[31 42]
[32 41]
[33 40]
[46 79]
[47 78]
[48 77]
[49 76]
[51 74]
[52 73]
[53 72]
[55 71]
[56 70]
[57 69]
[58 68]
[59 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
