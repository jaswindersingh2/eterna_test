%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGAUGCCAUCAGUAGACGAAACGUACUACACAAGUACAUGCAAAGCAGUACAGAUGACAUCCUGCUUGUUCG\
) } def
/len { sequence length } bind def

/coor [
[92.63742828 333.46228027]
[81.47496033 323.28503418]
[73.63309479 310.37451172]
[69.74753571 295.77728271]
[70.13325500 280.67666626]
[74.75899506 266.29684448]
[83.24976349 253.80351257]
[94.91725159 244.20944214]
[108.81562805 238.29237366]
[107.05256653 223.39634705]
[105.28951263 208.50032043]
[103.52645111 193.60429382]
[94.34684753 181.87464905]
[100.40847778 167.26071167]
[98.64542389 152.36468506]
[96.88236237 137.46865845]
[95.11930084 122.57263947]
[80.30889893 112.06671906]
[77.67183685 94.10097504]
[65.19979858 85.76741791]
[52.72775269 77.43386841]
[40.25570679 69.10031128]
[27.62244987 61.01323700]
[14.83284664 53.17575836]
[2.04324436 45.33828354]
[-14.62103939 42.21770859]
[-16.23555374 25.34081268]
[-0.46515381 19.11740303]
[9.88072300 32.54867935]
[22.67032623 40.38615799]
[35.45992661 48.22363663]
[43.00761795 49.05465698]
[48.58926010 56.62826920]
[61.06130600 64.96182251]
[73.53334808 73.29537964]
[86.00539398 81.62892914]
[90.21089935 79.08305359]
[94.85997772 77.48499298]
[99.74197388 76.90717316]
[104.63566589 77.37577057]
[109.31929016 78.86954498]
[119.50130463 67.85471344]
[129.68331909 56.83987427]
[139.86532593 45.82503510]
[143.52471924 37.15767288]
[150.66987610 34.58763885]
[161.27647400 23.98103905]
[171.88307190 13.37443733]
[178.80763245 -2.10092854]
[195.59510803 0.26900005]
[197.96504211 17.05648804]
[182.48968506 23.98103905]
[171.88307190 34.58763885]
[161.27647400 45.19424057]
[150.88015747 56.00704575]
[140.69815063 67.02188110]
[130.51614380 78.03672028]
[120.33412933 89.05155945]
[121.96395111 107.13652039]
[110.01532745 120.80957794]
[111.77838898 135.70559692]
[113.54145050 150.60162354]
[115.30450439 165.49765015]
[124.61021423 178.29275513]
[118.42247772 191.84123230]
[120.18553925 206.73725891]
[121.94859314 221.63328552]
[123.71165466 236.52931213]
[138.60733032 239.03837585]
[152.19213867 245.64364624]
[163.36482239 255.80966187]
[171.21965027 268.71231079]
[175.11988831 283.30563354]
[174.74932861 298.40661621]
[170.13804626 312.79107666]
[161.65983582 325.29293823]
[150.00198364 334.89871216]
[136.10955811 340.82974243]
[121.10874176 342.60522461]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 68]
[10 67]
[11 66]
[12 65]
[14 63]
[15 62]
[16 61]
[17 60]
[19 36]
[20 35]
[21 34]
[22 33]
[23 31]
[24 30]
[25 29]
[41 58]
[42 57]
[43 56]
[44 55]
[46 54]
[47 53]
[48 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
