%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACUCAAAGAGAAGUAGAAACUACAAGUAUCAAAGAUACAACUAGAAACUAGAAGACAAAGUCAUUGAACUUUCG\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 292.28982544]
[92.50000000 276.45071411]
[92.50000000 261.45071411]
[92.50000000 246.45069885]
[92.50000000 231.45069885]
[81.81912994 221.13301086]
[81.60544586 205.92088318]
[92.50000000 194.78776550]
[92.50000000 179.78776550]
[92.50000000 164.78776550]
[92.50000000 149.78776550]
[82.03456116 147.03524780]
[72.39898682 142.11003113]
[64.03838348 135.23965454]
[57.33894730 126.74145508]
[52.61013794 117.00800323]
[50.07039642 106.48889923]
[49.83703995 95.67005157]
[35.25149155 92.16837311]
[20.66594124 88.66669464]
[6.08039331 85.16500854]
[-10.73259258 87.34671783]
[-17.48333549 71.79474640]
[-4.40793228 61.00261307]
[9.58207417 70.57946014]
[24.16762352 74.08114624]
[38.75317001 77.58282471]
[53.33871841 81.08450317]
[59.97790527 69.44998932]
[69.44998932 59.97790527]
[81.08450317 53.33871841]
[77.58282471 38.75317001]
[74.08114624 24.16762352]
[70.57946014 9.58207417]
[67.07778168 -5.00347519]
[57.50093079 -18.99348068]
[68.29306793 -32.06888199]
[83.84503937 -25.31814194]
[81.66333008 -8.50515556]
[85.16500854 6.08039331]
[88.66669464 20.66594124]
[92.16837311 35.25149155]
[95.67005157 49.83703995]
[109.05060577 50.47063828]
[121.79053497 54.61009216]
[132.98805237 61.96239090]
[144.39413452 52.22067261]
[155.80023193 42.47895050]
[167.20631409 32.73722839]
[175.32369995 17.85286331]
[191.87350464 21.53261757]
[192.91899109 38.45429993]
[176.94804382 44.14331818]
[165.54194641 53.88504028]
[154.13586426 63.62676239]
[142.72976685 73.36848450]
[147.41899109 83.07337952]
[149.93515015 93.55396271]
[150.16296387 104.32994843]
[164.74850464 107.83162689]
[179.33406067 111.33330536]
[196.14704895 109.15160370]
[202.89778137 124.70357513]
[189.82238770 135.49571228]
[175.83238220 125.91885376]
[161.24682617 122.41717529]
[146.66128540 118.91549683]
[131.17106628 139.54029846]
[107.50000000 149.78776550]
[107.50000000 164.78776550]
[107.50000000 179.78776550]
[107.50000000 194.78776550]
[118.39455414 205.92088318]
[118.18087006 221.13301086]
[107.50000000 231.45069885]
[107.50000000 246.45069885]
[107.50000000 261.45071411]
[107.50000000 276.45071411]
[113.54634094 292.28982544]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[5 75]
[8 72]
[9 71]
[10 70]
[11 69]
[18 28]
[19 27]
[20 26]
[21 25]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[46 56]
[47 55]
[48 54]
[49 53]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
