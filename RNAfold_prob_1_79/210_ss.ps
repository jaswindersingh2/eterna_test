%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACAGUGCUACAGAUCCAGGAAACUGAGAUCAAACGUAGAGCCGAAAGGCCUACAGUAGUGCUGUACUGUUUUCG\
) } def
/len { sequence length } bind def

/coor [
[66.95433807 342.84347534]
[73.00067139 327.00436401]
[73.00067139 312.00436401]
[73.00067139 297.00436401]
[73.00067139 282.00436401]
[73.00067139 267.00436401]
[73.00067139 252.00434875]
[73.00067139 237.00434875]
[73.00067139 222.00434875]
[73.00067139 207.00434875]
[73.00067139 192.00434875]
[73.00067139 177.00434875]
[62.31980133 166.68667603]
[62.10612106 151.47454834]
[73.00067139 140.34141541]
[73.00067139 125.34141541]
[65.16319275 112.55181122]
[51.79809952 105.74195862]
[38.43299866 98.93209839]
[25.06790161 92.12223816]
[11.57167721 85.57610321]
[-2.05046988 79.29620361]
[-15.67261791 73.01631165]
[-31.94456863 75.05485535]
[-41.62893295 61.82061768]
[-34.76327133 46.92784500]
[-18.41038513 45.69694519]
[-9.39272118 59.39416122]
[4.22942591 65.67405701]
[17.85157394 71.95395660]
[25.44462395 71.89208221]
[31.87775993 78.75714111]
[45.24285889 85.56700134]
[58.60795593 92.37686157]
[71.97305298 99.18671417]
[75.16283417 89.09579468]
[81.70735931 81.22635651]
[90.43464661 76.57934570]
[99.92543793 75.61479950]
[108.74163055 78.21659088]
[118.48335266 66.81050110]
[128.22508240 55.40441513]
[137.96679688 43.99832535]
[141.28309631 35.19398117]
[148.32183838 32.34540939]
[158.50384521 21.33057213]
[168.68585205 10.31573486]
[171.77539062 -5.78975487]
[187.35453796 -10.91053104]
[199.39680481 0.22122276]
[195.51412964 16.15411186]
[179.70069885 20.49774551]
[169.51867676 31.51258278]
[159.33666992 42.52742004]
[149.37287903 53.74004745]
[139.63116455 65.14613342]
[129.88945007 76.55222321]
[120.14772034 87.95831299]
[124.07740021 97.25746918]
[123.78852081 107.66925812]
[119.06875610 117.31244659]
[110.52951813 124.33625031]
[99.53791809 127.27369690]
[88.00067139 125.34141541]
[88.00067139 140.34141541]
[98.89522552 151.47454834]
[98.68154907 166.68667603]
[88.00067139 177.00434875]
[88.00067139 192.00434875]
[88.00067139 207.00434875]
[88.00067139 222.00434875]
[88.00067139 237.00434875]
[88.00067139 252.00434875]
[88.00067139 267.00436401]
[88.00067139 282.00436401]
[88.00067139 297.00436401]
[88.00067139 312.00436401]
[88.00067139 327.00436401]
[94.04701233 342.84347534]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[5 75]
[6 74]
[7 73]
[8 72]
[9 71]
[10 70]
[11 69]
[12 68]
[15 65]
[16 64]
[17 35]
[18 34]
[19 33]
[20 32]
[21 30]
[22 29]
[23 28]
[40 58]
[41 57]
[42 56]
[43 55]
[45 54]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
