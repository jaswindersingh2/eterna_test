%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAAUCUAGUCCUAAUGGAAACAAGGGAAACCAAAAGAGACGAGAGAUAAAGGAAACUAAGCGAAUAUGUUCG\
) } def
/len { sequence length } bind def

/coor [
[171.36146545 260.91052246]
[154.88157654 258.23110962]
[139.42944336 251.88755798]
[125.80870819 242.20622253]
[114.72859192 229.68717957]
[106.76692963 214.97830200]
[102.34004974 198.84184265]
[101.68100739 182.11485291]
[104.82732391 165.66583252]
[111.61885071 150.34953308]
[121.70593262 136.96264648]
[111.96421814 125.55656433]
[102.22249603 114.15047455]
[89.10798645 109.30265808]
[86.37141418 95.59124756]
[76.62969208 84.18515778]
[66.88797760 72.77906799]
[56.92418671 61.56644440]
[46.74217606 50.55160522]
[31.18488884 49.77153015]
[21.01579094 38.45587158]
[21.85534668 23.62918282]
[11.67333508 12.61434555]
[1.49132419 1.59950817]
[-13.08690643 6.12034225]
[-28.18168640 3.85972381]
[-40.79593277 -4.73350000]
[-48.42508316 -17.95313835]
[-49.55435944 -33.17442322]
[-43.95954514 -47.37515640]
[-32.75149536 -57.73577118]
[-18.15557480 -62.19916153]
[-3.06981444 -59.87911606]
[9.51049614 -51.23628616]
[17.08752823 -37.98670578]
[18.15685463 -22.76109314]
[12.50616169 -8.58250332]
[22.68817329 2.43233466]
[32.87018585 13.44717216]
[47.71704102 13.77349377]
[58.19995880 24.79905891]
[57.75701523 40.36959457]
[67.93902588 51.38442993]
[74.97776794 54.23300171]
[78.29406738 63.03734589]
[88.03578186 74.44343567]
[97.77750397 85.84952545]
[110.89201355 90.69734192]
[113.62858582 104.40875244]
[123.37030792 115.81484222]
[133.11203003 127.22093201]
[144.92146301 120.60079193]
[157.74020386 116.25833130]
[171.13354492 114.33920288]
[184.64761353 114.90690613]
[197.82472229 117.94069672]
[210.21887207 123.33631897]
[221.41087341 130.90963745]
[231.02246094 140.40284729]
[238.72914124 151.49331665]
[244.27111816 163.80451965]
[247.46208191 176.91883850]
[248.19538879 190.39167786]
[246.44775391 203.76663208]
[242.27986145 216.59083557]
[235.83435059 228.43038940]
[227.33085632 238.88497925]
[217.05860901 247.60145569]
[224.38792419 260.68890381]
[231.71723938 273.77633667]
[239.04656982 286.86376953]
[253.40907288 294.77896118]
[253.46499634 311.17800903]
[239.15681458 319.19097900]
[225.20353699 310.57482910]
[225.95912170 294.19308472]
[218.62980652 281.10565186]
[211.30049133 268.01821899]
[203.97116089 254.93077087]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 51]
[12 50]
[13 49]
[15 47]
[16 46]
[17 45]
[18 43]
[19 42]
[22 39]
[23 38]
[24 37]
[68 79]
[69 78]
[70 77]
[71 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
