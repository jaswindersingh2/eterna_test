%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:00 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (516)
} def

/sequence { (\
GGAAAACUCGCAUUUAGAAACAAGUGACCAAAAGGACACUUGAGAAAAAACUAAACUAAAUAGCGAGUUGUUGUAUUCG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 69 0.006452857 ubox
1 71 0.023230133 ubox
1 72 0.109274661 ubox
1 74 0.236636410 ubox
1 76 0.020265711 ubox
1 77 0.012150484 ubox
1 78 0.146652577 ubox
2 69 0.011205045 ubox
2 71 0.115212289 ubox
2 72 0.405564022 ubox
2 74 0.078961039 ubox
2 76 0.015125872 ubox
2 77 0.139690293 ubox
2 78 0.302446881 ubox
3 68 0.006864856 ubox
3 69 0.025288401 ubox
3 71 0.410779679 ubox
3 72 0.285451318 ubox
3 74 0.017101740 ubox
3 76 0.121045684 ubox
3 77 0.301683028 ubox
4 68 0.011778197 ubox
4 69 0.053130972 ubox
4 71 0.254324627 ubox
4 72 0.068801113 ubox
4 74 0.045049352 ubox
4 76 0.295617893 ubox
4 77 0.011151247 ubox
5 68 0.039899360 ubox
5 69 0.934009763 ubox
5 71 0.050733698 ubox
5 72 0.028892541 ubox
5 74 0.036349236 ubox
5 76 0.010073954 ubox
6 68 0.993309978 ubox
6 69 0.024089897 ubox
6 71 0.018259043 ubox
6 72 0.006748259 ubox
6 74 0.011824803 ubox
7 67 0.999775086 ubox
7 70 0.013536800 ubox
7 73 0.008851152 ubox
8 66 0.999838578 ubox
9 65 0.999967455 ubox
10 64 0.999977410 ubox
11 63 0.999724648 ubox
12 57 0.004564837 ubox
12 61 0.987516567 ubox
13 20 0.003184568 ubox
13 50 0.004330135 ubox
13 55 0.014168266 ubox
13 59 0.006016774 ubox
13 60 0.996527185 ubox
13 62 0.011046535 ubox
14 19 0.003353989 ubox
14 49 0.005036984 ubox
14 54 0.017142279 ubox
14 58 0.004940600 ubox
14 59 0.997490267 ubox
14 60 0.017791036 ubox
15 48 0.005042227 ubox
15 53 0.019150225 ubox
15 58 0.998334302 ubox
15 59 0.013978753 ubox
16 52 0.020047047 ubox
16 57 0.998318301 ubox
17 51 0.020472027 ubox
17 56 0.993247780 ubox
17 57 0.004432793 ubox
18 52 0.027074775 ubox
19 52 0.051616537 ubox
20 41 0.004275441 ubox
20 52 0.082817651 ubox
21 42 0.994022145 ubox
21 44 0.011195078 ubox
22 41 0.998130153 ubox
22 52 0.004032902 ubox
23 40 0.999121787 ubox
23 41 0.003829981 ubox
23 52 0.011718201 ubox
24 39 0.999825671 ubox
24 51 0.012180640 ubox
25 38 0.999577433 ubox
25 48 0.003436570 ubox
25 50 0.012038378 ubox
26 37 0.997779347 ubox
28 34 0.033024282 ubox
28 35 0.996888386 ubox
29 34 0.996670754 ubox
29 35 0.017258596 ubox
29 44 0.007764696 ubox
32 41 0.016335822 ubox
33 40 0.016647934 ubox
34 39 0.016687386 ubox
40 47 0.004243525 ubox
40 48 0.003874581 ubox
40 49 0.004956838 ubox
40 54 0.004231991 ubox
40 55 0.004459863 ubox
41 46 0.007353865 ubox
41 47 0.006773840 ubox
41 48 0.008637275 ubox
41 49 0.004966471 ubox
41 50 0.005143121 ubox
41 53 0.007165008 ubox
41 54 0.007959365 ubox
41 55 0.003361546 ubox
42 51 0.019704203 ubox
42 52 0.006444857 ubox
43 52 0.689203860 ubox
43 57 0.013303058 ubox
44 51 0.707084148 ubox
44 52 0.043464416 ubox
44 56 0.015519598 ubox
45 52 0.076707315 ubox
46 52 0.055469275 ubox
47 52 0.060146767 ubox
48 52 0.031446278 ubox
48 57 0.003310282 ubox
52 58 0.004070915 ubox
52 62 0.004110558 ubox
53 57 0.003946287 ubox
53 61 0.004164266 ubox
68 75 0.003378602 ubox
69 75 0.008240215 ubox
69 79 0.017970322 ubox
70 74 0.011163148 ubox
70 76 0.021665505 ubox
70 77 0.021318858 ubox
70 78 0.073873189 ubox
71 75 0.021473287 ubox
71 79 0.006012943 ubox
72 79 0.073671643 ubox
73 77 0.007697993 ubox
73 78 0.138378915 ubox
74 79 0.009500937 ubox
5 69 0.9500000 lbox
6 68 0.9500000 lbox
7 67 0.9500000 lbox
8 66 0.9500000 lbox
9 65 0.9500000 lbox
10 64 0.9500000 lbox
11 63 0.9500000 lbox
12 61 0.9500000 lbox
13 60 0.9500000 lbox
14 59 0.9500000 lbox
15 58 0.9500000 lbox
16 57 0.9500000 lbox
17 56 0.9500000 lbox
21 42 0.9500000 lbox
22 41 0.9500000 lbox
23 40 0.9500000 lbox
24 39 0.9500000 lbox
25 38 0.9500000 lbox
26 37 0.9500000 lbox
28 35 0.9500000 lbox
29 34 0.9500000 lbox
showpage
end
%%EOF
