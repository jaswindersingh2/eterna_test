%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGGUCGUCUAUGUCGUCCCAAGGCCGGUCUCAAUGUCCAGCCAGCGCGGUCCUAGGUCCACGCGACAGGUUUCG\
) } def
/len { sequence length } bind def

/coor [
[77.52786255 198.92172241]
[83.57420349 183.08259583]
[83.57420349 168.08259583]
[83.57420349 153.08259583]
[83.57420349 138.08259583]
[71.10215759 129.74903870]
[57.24396515 135.48928833]
[43.38576889 141.22953796]
[33.59701157 153.65896606]
[18.87760735 151.38114929]
[5.01941442 157.12139893]
[0.48997462 172.08863831]
[-12.62873936 180.59942627]
[-28.14247131 178.63520813]
[-38.72611237 167.12345886]
[-39.38238907 151.49964905]
[-29.80142975 139.14086914]
[-14.50706959 135.88256836]
[-0.72083682 143.26321411]
[13.13735580 137.52296448]
[21.93488503 125.50411224]
[37.64551926 127.37134552]
[51.50371170 121.63109589]
[65.36190796 115.89084625]
[63.89249039 97.08403015]
[71.48941040 80.85736084]
[85.33543396 71.04512787]
[81.83375549 56.45957947]
[78.33207703 41.87403107]
[67.58697510 30.26139641]
[72.13936615 16.07954216]
[68.63768768 1.49399376]
[57.89258194 -10.11864185]
[62.44497681 -24.30049515]
[49.57236099 -33.87521744]
[49.17626572 -49.91337967]
[61.56053925 -60.11187744]
[77.22502899 -56.64729309]
[84.15327454 -42.17736053]
[77.03052521 -27.80217552]
[87.52516937 -17.23279572]
[83.22323608 -2.00768661]
[86.72491455 12.57786179]
[97.21955872 23.14724159]
[92.91762543 38.37235260]
[96.41930389 52.95790100]
[99.92098236 67.54344940]
[118.55831909 73.37252045]
[130.47779846 88.84036255]
[145.37382507 87.07730103]
[160.26985168 85.31423950]
[173.06495667 76.00853729]
[186.61341858 82.19627380]
[201.50944519 80.43321228]
[214.30455017 71.12751007]
[227.85302734 77.31524658]
[240.66200256 67.07502747]
[255.83415222 73.29900360]
[257.76165771 89.58448029]
[244.46168518 99.17835999]
[229.61608887 92.21127319]
[217.88644409 101.39087677]
[203.27250671 95.32923889]
[188.37648010 97.09230042]
[176.64685059 106.27190399]
[162.03291321 100.21026611]
[147.13688660 101.97332764]
[132.24085999 103.73638916]
[131.48394775 110.73616791]
[129.19021606 117.57302856]
[125.39758301 123.90651703]
[120.21991730 129.40573120]
[113.84445190 133.76626587]
[106.52543640 136.72654724]
[98.57420349 138.08259583]
[98.57420349 153.08259583]
[98.57420349 168.08259583]
[98.57420349 183.08259583]
[104.62053680 198.92172241]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[5 75]
[6 24]
[7 23]
[8 22]
[10 20]
[11 19]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[34 40]
[49 68]
[50 67]
[51 66]
[53 64]
[54 63]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
