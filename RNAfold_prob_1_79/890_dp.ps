%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:15 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (890)
} def

/sequence { (\
GGAAAAGACUGAGAUGAAAAGGAAAAAAGUCUGAGUCAAAAGACACAGACGCCCAUCACAGUCAAAAAGUGUAGCUUCG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 63 0.003620831 ubox
1 70 0.022880564 ubox
1 72 0.016754646 ubox
1 75 0.012704282 ubox
1 76 0.015922730 ubox
1 78 0.078698030 ubox
2 63 0.005251956 ubox
2 70 0.014145773 ubox
2 72 0.006208602 ubox
2 75 0.018355325 ubox
2 77 0.064631753 ubox
2 78 0.107918433 ubox
3 62 0.003997550 ubox
3 70 0.020019769 ubox
3 72 0.004389772 ubox
3 76 0.055279802 ubox
3 77 0.099753033 ubox
4 70 0.009412733 ubox
4 72 0.007413295 ubox
4 76 0.076776680 ubox
4 77 0.006461612 ubox
5 70 0.004294698 ubox
5 72 0.006939270 ubox
5 76 0.006293601 ubox
5 77 0.009883716 ubox
6 70 0.010815444 ubox
6 72 0.044990534 ubox
6 76 0.011466655 ubox
6 77 0.003656801 ubox
7 37 0.005881732 ubox
7 63 0.997015194 ubox
7 72 0.003693995 ubox
7 75 0.009487181 ubox
8 36 0.005888715 ubox
8 62 0.998174999 ubox
8 70 0.052706197 ubox
8 72 0.009163163 ubox
9 35 0.005890360 ubox
9 61 0.998447196 ubox
9 69 0.053029170 ubox
9 71 0.009214732 ubox
9 74 0.006033189 ubox
10 34 0.005874372 ubox
10 60 0.998129466 ubox
10 64 0.004170948 ubox
10 68 0.052612683 ubox
10 69 0.003506093 ubox
10 73 0.006000351 ubox
11 59 0.995597297 ubox
11 63 0.004977251 ubox
11 72 0.005666296 ubox
12 32 0.005876850 ubox
12 62 0.004922121 ubox
13 31 0.005893232 ubox
13 57 0.987874366 ubox
13 59 0.009112058 ubox
13 63 0.011798029 ubox
14 30 0.005881707 ubox
14 56 0.990316926 ubox
14 62 0.011796422 ubox
15 20 0.004339737 ubox
15 24 0.003269000 ubox
15 29 0.005794276 ubox
15 55 0.989611940 ubox
15 58 0.121216181 ubox
15 60 0.003439989 ubox
15 61 0.011273221 ubox
15 64 0.051148708 ubox
16 52 0.005572265 ubox
16 53 0.037270925 ubox
16 54 0.975371038 ubox
16 57 0.122921676 ubox
16 59 0.003882258 ubox
16 63 0.052841991 ubox
17 56 0.121513428 ubox
17 62 0.052442609 ubox
18 56 0.007118191 ubox
19 56 0.006777200 ubox
20 56 0.003843759 ubox
21 50 0.028692210 ubox
21 52 0.027920094 ubox
21 53 0.547461032 ubox
21 54 0.189099828 ubox
21 57 0.007135315 ubox
21 59 0.008260215 ubox
22 31 0.003647831 ubox
22 50 0.016228428 ubox
22 52 0.543934108 ubox
22 53 0.206193208 ubox
22 54 0.011957246 ubox
22 56 0.006564294 ubox
22 57 0.051218823 ubox
23 30 0.003687611 ubox
23 56 0.050128450 ubox
29 44 0.042168368 ubox
29 50 0.994972226 ubox
29 52 0.007195483 ubox
29 53 0.005764496 ubox
30 43 0.042326484 ubox
30 49 0.998760797 ubox
30 51 0.005294490 ubox
31 42 0.042341342 ubox
31 48 0.999055953 ubox
32 41 0.042251416 ubox
32 47 0.998740804 ubox
33 46 0.996226373 ubox
35 44 0.996168216 ubox
36 43 0.998620781 ubox
37 42 0.997092939 ubox
43 72 0.004006469 ubox
44 71 0.004172750 ubox
45 70 0.004172626 ubox
46 69 0.004162240 ubox
48 63 0.004771180 ubox
49 62 0.004778238 ubox
50 61 0.004777699 ubox
51 75 0.004090043 ubox
52 74 0.004079642 ubox
57 71 0.004234664 ubox
58 70 0.004259401 ubox
59 69 0.004257993 ubox
63 71 0.005452192 ubox
64 70 0.013424159 ubox
64 72 0.009871935 ubox
64 76 0.005738747 ubox
64 77 0.016702188 ubox
65 70 0.017231804 ubox
65 72 0.018459054 ubox
65 76 0.014722517 ubox
65 77 0.022433032 ubox
66 70 0.010748106 ubox
66 72 0.014473901 ubox
66 76 0.017841800 ubox
66 77 0.050161238 ubox
67 72 0.015742374 ubox
67 76 0.045237045 ubox
67 77 0.621460309 ubox
68 72 0.009703575 ubox
68 76 0.692949953 ubox
68 77 0.028929177 ubox
69 75 0.703688205 ubox
69 76 0.025140485 ubox
69 77 0.014527358 ubox
69 78 0.091640593 ubox
70 74 0.658333649 ubox
70 79 0.076664074 ubox
71 75 0.027557517 ubox
71 76 0.018885402 ubox
71 77 0.016759424 ubox
71 78 0.130310137 ubox
72 79 0.008596388 ubox
73 77 0.009568044 ubox
74 78 0.026623841 ubox
75 79 0.010050382 ubox
7 63 0.9500000 lbox
8 62 0.9500000 lbox
9 61 0.9500000 lbox
10 60 0.9500000 lbox
11 59 0.9500000 lbox
13 57 0.9500000 lbox
14 56 0.9500000 lbox
15 55 0.9500000 lbox
16 54 0.9500000 lbox
29 50 0.9500000 lbox
30 49 0.9500000 lbox
31 48 0.9500000 lbox
32 47 0.9500000 lbox
33 46 0.9500000 lbox
35 44 0.9500000 lbox
36 43 0.9500000 lbox
37 42 0.9500000 lbox
showpage
end
%%EOF
