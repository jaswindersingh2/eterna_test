%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAACUUAAAGGAUGAGAGUUUAUAUUGGGUGGGUAUGUGAGAGGGUGAGUUUGGUGAAUGAGAUGGUAUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[116.05401611 141.60095215]
[103.39260864 144.46191406]
[90.44371033 143.55511475]
[78.30461884 138.95742798]
[68.00400543 131.05845642]
[60.41477203 120.52755737]
[56.18001938 108.25714111]
[55.65861130 95.28700256]
[41.22178268 91.21540070]
[26.78495407 87.14379120]
[12.34812546 83.07218170]
[-2.08870339 79.00057983]
[-14.26725578 88.43397522]
[-29.48739052 88.88219452]
[-41.90612030 80.38283539]
[-46.87924194 66.36833954]
[-61.31607056 62.29673386]
[-75.75289917 58.22512817]
[-90.18972778 54.15351868]
[-102.29171753 63.86544037]
[-117.79253387 64.57554626]
[-130.73179626 56.01078796]
[-136.13409424 41.46448898]
[-131.92213440 26.52999878]
[-119.71549988 16.94993401]
[-104.20789337 16.40802383]
[-91.36229706 25.11264420]
[-86.11811829 39.71669006]
[-71.68128967 43.78829956]
[-57.24446106 47.85990524]
[-42.80763245 51.93151093]
[-31.24479866 42.58063889]
[-16.21518517 41.82250977]
[-3.47208190 50.15717697]
[1.98290336 64.56375122]
[16.41973114 68.63535309]
[30.85655975 72.70696259]
[45.29338837 76.77857208]
[59.73021698 80.85017395]
[69.82668304 67.16797638]
[84.31082916 58.26007843]
[101.07643890 55.42184067]
[117.68551636 59.06598663]
[131.72283936 68.66259766]
[141.14714050 82.81616974]
[144.58798218 99.46855164]
[159.40332031 101.81507111]
[174.21864319 104.16159058]
[189.03396606 106.50810242]
[203.84928894 108.85462189]
[218.66461182 111.20114136]
[233.47993469 113.54765320]
[250.35453796 106.49433899]
[263.66101074 117.75843048]
[278.55703735 119.52149200]
[293.45306396 121.28455353]
[308.34909058 123.04761505]
[318.78280640 111.56209564]
[333.98168945 108.43586731]
[348.10147095 114.87103271]
[355.71279907 128.39314270]
[353.88897705 143.80265808]
[343.33126831 155.17431641]
[328.09936523 158.13548279]
[314.05020142 151.54751587]
[306.58602905 137.94364929]
[291.69000244 136.18058777]
[276.79397583 134.41752625]
[261.89794922 132.65446472]
[252.04582214 139.95600891]
[239.47076416 138.43061829]
[231.13342285 128.36297607]
[216.31809998 126.01646423]
[201.50277710 123.66994476]
[186.68743896 121.32343292]
[171.87211609 118.97691345]
[157.05679321 116.63039398]
[142.24147034 114.28388214]
[136.33789062 125.84432983]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 39]
[9 38]
[10 37]
[11 36]
[12 35]
[16 31]
[17 30]
[18 29]
[19 28]
[46 78]
[47 77]
[48 76]
[49 75]
[50 74]
[51 73]
[52 72]
[54 69]
[55 68]
[56 67]
[57 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
