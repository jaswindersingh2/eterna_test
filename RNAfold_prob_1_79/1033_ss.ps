%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGCCAAAGGCAAGAUCAAAGAUCAAGACGCAAAGCGUCAAGCAGAAACUGCAAGCGAAACGCAGCUGUCCUUCG\
) } def
/len { sequence length } bind def

/coor [
[105.35831451 181.77449036]
[103.01180267 166.95916748]
[100.66528320 152.14384460]
[91.16021729 151.39338684]
[81.95066071 148.92488098]
[73.34449005 144.82081604]
[65.62940216 139.21841431]
[54.22331238 148.96014404]
[42.81722260 158.70185852]
[34.69983292 173.58622742]
[18.15003777 169.90646362]
[17.10454750 152.98478699]
[33.07550049 147.29577637]
[44.48159027 137.55404663]
[55.88768005 127.81232452]
[50.91752625 117.61627960]
[48.26957321 106.58676147]
[48.06910324 95.24560547]
[33.48355484 91.74392700]
[18.89800453 88.24224854]
[4.31245613 84.74057007]
[-12.50052929 86.92227173]
[-19.25127220 71.37030029]
[-6.17586946 60.57816696]
[7.81413651 70.15502167]
[22.39968491 73.65670013]
[36.98523331 77.15837860]
[51.57078171 80.66005707]
[58.49351501 68.43048859]
[68.43048859 58.49351501]
[80.66005707 51.57078171]
[77.15837860 36.98523331]
[73.65670013 22.39968491]
[70.15502167 7.81413651]
[66.65333557 -6.77141237]
[57.07648849 -20.76141739]
[67.86862183 -33.83682251]
[83.42059326 -27.08607864]
[81.23888397 -10.27309227]
[84.74057007 4.31245613]
[88.24224854 18.89800453]
[91.74392700 33.48355484]
[95.24560547 48.06910324]
[109.28509521 48.68519211]
[122.65029144 53.02780914]
[134.37060547 60.78158188]
[145.77668762 51.03986359]
[157.18278503 41.29814148]
[168.58886719 31.55642128]
[176.70625305 16.67205429]
[193.25605774 20.35180855]
[194.30154419 37.27349091]
[178.33058167 42.96250916]
[166.92449951 52.70423126]
[155.51840210 62.44594955]
[144.11231995 72.18767548]
[151.33595276 90.83255768]
[151.01211548 110.82525635]
[165.08499146 116.01701355]
[179.15785217 121.20877075]
[191.98452759 112.47630310]
[207.49328613 112.98456573]
[219.72067261 122.53812408]
[223.96502686 137.46343994]
[218.59429932 152.02142334]
[205.67366028 160.61424255]
[190.17132568 159.93775940]
[178.04829407 150.25212097]
[173.96609497 135.28164673]
[159.89323425 130.08988953]
[145.82035828 124.89813232]
[133.08239746 140.31100464]
[115.48060608 149.79731750]
[117.82712555 164.61264038]
[120.17364502 179.42796326]
[132.25535583 189.98315430]
[131.39189148 206.00294495]
[118.24562836 215.19834900]
[102.90125275 210.51542664]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[3 73]
[7 15]
[8 14]
[9 13]
[18 28]
[19 27]
[20 26]
[21 25]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[46 56]
[47 55]
[48 54]
[49 53]
[58 71]
[59 70]
[60 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
