%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAACGAGGCGUUCAACAGAACGGCUGGCCCUGAACACAGGAGUGGGACACCACGCUGGCCCUCGGCCGUGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[110.08154297 184.47227478]
[116.12788391 168.63313293]
[116.12788391 153.63313293]
[116.12788391 138.63313293]
[98.91476440 139.43380737]
[83.87535095 133.33833313]
[73.46342468 122.23005676]
[69.00241852 108.72368622]
[55.51665115 116.99681091]
[42.49542618 109.76514435]
[27.50699234 110.35404205]
[14.02122402 118.62717438]
[0.99999893 111.39550781]
[-13.98843670 111.98440552]
[-28.97687149 112.57330322]
[-43.96530914 113.16220093]
[-58.95374298 113.75109863]
[-72.52667999 122.95476532]
[-87.16372681 115.55958557]
[-87.80755615 99.17308044]
[-73.79584503 90.65228271]
[-59.54264069 98.76265717]
[-44.55420303 98.17376709]
[-29.56576920 97.58486938]
[-14.57733345 96.99597168]
[0.41110170 96.40707397]
[12.82479668 88.17606354]
[26.91809464 95.36560822]
[41.90652847 94.77671051]
[54.32022476 86.54570770]
[68.41352081 93.73525238]
[75.51359558 79.08663940]
[88.87116241 69.78242493]
[87.10810089 54.88640213]
[85.34504700 39.99037170]
[83.58198547 25.09434700]
[73.34176636 12.28536606]
[79.56574249 -2.88678503]
[95.85121918 -4.81429815]
[105.44509125 8.48568726]
[98.47801208 23.33128548]
[100.24107361 38.22731400]
[102.00412750 53.12334061]
[103.76718903 68.01936340]
[124.92904663 72.61403656]
[140.93492126 91.22731781]
[152.71467590 81.94091034]
[164.49443054 72.65450287]
[176.27418518 63.36809158]
[181.84513855 47.94419861]
[198.03353882 45.32358170]
[208.18615723 58.20211029]
[201.85884094 73.33145905]
[185.56059265 75.14785004]
[173.78083801 84.43425751]
[162.00108337 93.72066498]
[150.22132874 103.00707245]
[151.39822388 117.96083832]
[164.48565674 125.29015350]
[177.71447754 132.36109924]
[191.07957458 139.17095947]
[204.44467163 145.98081970]
[217.80976868 152.79067993]
[231.17486572 159.60054016]
[248.03262329 161.40402222]
[250.96630859 178.10221863]
[235.73280334 185.54377747]
[224.36500549 172.96563721]
[210.99990845 166.15577698]
[197.63481140 159.34591675]
[184.26971436 152.53605652]
[170.90461731 145.72619629]
[163.31498718 145.48992920]
[157.15634155 138.37759399]
[144.06889343 131.04827881]
[131.12788391 138.63313293]
[131.12788391 153.63313293]
[131.12788391 168.63313293]
[137.17422485 184.47227478]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[8 31]
[10 29]
[11 28]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[33 44]
[34 43]
[35 42]
[36 41]
[46 57]
[47 56]
[48 55]
[49 54]
[58 75]
[59 74]
[60 72]
[61 71]
[62 70]
[63 69]
[64 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
