%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGUAUAAAUAUGAAAAUAUAUAUUGAAUGAGUAUGAGAAAUGAUAAAUUUGAUAAAGUAUAUAUAUAAUUCG\
) } def
/len { sequence length } bind def

/coor [
[6.97505093 389.58297729]
[-6.24734545 396.76382446]
[-20.58986282 401.31231689]
[-35.53403091 403.06399536]
[-50.53962326 401.95553589]
[-65.06420135 398.02703857]
[-78.58271027 391.42050171]
[-90.60646057 382.37472534]
[-100.70080566 371.21673584]
[-108.50083160 358.34988403]
[-113.72458649 344.23928833]
[-116.18322754 329.39505005]
[-115.78787994 314.35375977]
[-112.55283356 299.65917969]
[-106.59502411 285.84246826]
[-98.12983704 273.40313721]
[-87.46327972 262.79083252]
[-74.98093414 254.38919067]
[-61.13403702 248.50192261]
[-46.42314148 245.34185791]
[-31.38003731 245.02320862]
[-16.54852295 247.55752563]
[-2.46475172 252.85316467]
[5.37272692 240.06356812]
[13.21020508 227.27397156]
[21.04768372 214.48435974]
[28.88516235 201.69476318]
[36.72264099 188.90516663]
[44.56011963 176.11555481]
[52.39759827 163.32595825]
[60.23507690 150.53634644]
[56.51910782 136.15834045]
[64.28523254 123.07621765]
[79.39141083 119.27605438]
[87.22888947 106.48645782]
[87.78682709 92.51576233]
[99.98150635 85.67606354]
[107.81898499 72.88646698]
[114.88993835 59.65764618]
[121.16983795 46.03549957]
[127.44972992 32.41334915]
[126.20072937 16.64152145]
[138.55570984 8.32263279]
[136.51715088 -7.94931746]
[149.75138855 -17.63368416]
[164.64416504 -10.76802158]
[165.87507629 5.58486557]
[152.17785645 14.60252953]
[153.87603760 29.40001106]
[141.07188416 38.69324493]
[134.79197693 52.31539536]
[128.51208496 65.93753815]
[129.56848145 69.56973267]
[128.73797607 73.91868591]
[125.69458008 78.00099945]
[120.60858917 80.72394562]
[112.77111053 93.51354218]
[112.21317291 107.48423767]
[100.01849365 114.32393646]
[92.18101501 127.11353302]
[95.65310669 142.29847717]
[87.52259064 155.15730286]
[73.02468109 158.37382507]
[65.18720245 171.16343689]
[57.34972000 183.95303345]
[49.51224136 196.74263000]
[41.67476654 209.53224182]
[33.83728790 222.32183838]
[25.99980736 235.11145020]
[18.16232872 247.90104675]
[10.32485104 260.69064331]
[21.43720436 270.83520508]
[30.42865753 282.89962769]
[36.97417450 296.44778442]
[40.83713531 310.98992920]
[41.87790298 326.00036621]
[40.05885315 340.93649292]
[35.44573975 355.25836182]
[28.20532227 368.44824219]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[23 71]
[24 70]
[25 69]
[26 68]
[27 67]
[28 66]
[29 65]
[30 64]
[31 63]
[34 60]
[35 59]
[37 57]
[38 56]
[39 52]
[40 51]
[41 50]
[43 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
