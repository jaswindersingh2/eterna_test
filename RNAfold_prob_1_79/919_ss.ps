%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGAAUGGUAGCAAGUGAGAGCAGUGAGAGCAAAGCAUACAAAAUUCAAGCGAAAGCAAGCGGAGACCUUCG\
) } def
/len { sequence length } bind def

/coor [
[68.51357269 285.09658813]
[58.95211029 297.04803467]
[44.92709351 303.17648315]
[29.66137314 302.07360840]
[16.66289520 293.99285889]
[8.91861534 280.79116821]
[8.20811367 265.50216675]
[14.69465733 251.63914490]
[26.88768768 242.38774109]
[41.98533249 239.87384033]
[46.62058640 225.60798645]
[51.25584412 211.34214783]
[50.30192947 203.80900574]
[56.36327362 196.61355591]
[61.55502701 182.54067993]
[66.74678802 168.46781921]
[60.29720688 155.09101868]
[65.36191559 140.74517822]
[79.43645477 134.07096863]
[62.87979889 114.34505463]
[61.86872864 88.61157990]
[76.82666779 67.64746094]
[70.54676819 54.02531815]
[64.26687622 40.40316772]
[53.54987335 37.10929489]
[46.67525482 28.53643036]
[45.82386017 17.80425644]
[51.04047012 8.64232445]
[45.84871292 -5.43054581]
[31.77417564 -12.10475636]
[26.70946884 -26.45060730]
[33.15904617 -39.82739639]
[27.96729088 -53.90026855]
[15.01981354 -63.96480560]
[17.52995110 -80.17070770]
[32.91548920 -85.84673309]
[45.34910583 -75.15386963]
[42.04016113 -59.09202576]
[47.23191452 -45.01915359]
[60.82374191 -39.03602600]
[66.28939819 -24.83809280]
[59.92158508 -10.62230206]
[65.11334229 3.45056820]
[80.87470245 14.37055492]
[77.88902283 34.12327194]
[84.16892242 47.74542236]
[90.44881439 61.36756897]
[96.97495270 60.31953812]
[103.58454895 60.36616516]
[110.09525299 61.50616074]
[116.32746124 63.70807266]
[122.10925293 66.91116333]
[127.28112030 71.02706909]
[131.70037842 75.94224548]
[135.24514771 81.52109528]
[137.81759644 87.60971832]
[139.34678650 94.04015350]
[154.33523560 94.62905121]
[168.58843994 86.51867676]
[182.60014343 95.03946686]
[181.95631409 111.42597198]
[167.31925964 118.82115173]
[153.74633789 109.61748505]
[138.75788879 109.02858734]
[135.30166626 118.37067413]
[129.63375854 126.56182098]
[122.10925293 133.08883667]
[113.19957733 137.54278564]
[103.46292877 139.64465332]
[93.50932312 139.26272583]
[99.87713623 153.47851562]
[94.41148376 167.67643738]
[80.81965637 173.65957642]
[75.62789917 187.73243713]
[70.43614197 201.80531311]
[65.52169037 215.97740173]
[60.88643646 230.24325562]
[56.25117874 244.50909424]
[66.98780060 255.41705322]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 78]
[11 77]
[12 76]
[14 75]
[15 74]
[16 73]
[19 70]
[22 47]
[23 46]
[24 45]
[28 43]
[29 42]
[32 39]
[33 38]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
