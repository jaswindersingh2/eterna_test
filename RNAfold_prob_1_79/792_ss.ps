%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAACGAGUCCGAGAUAGAGAUACCAGAGACCGAAAAGAGUCCUGAGUAUCCUAUCCGAGACCGACUAAGGUUUCG\
) } def
/len { sequence length } bind def

/coor [
[97.73403168 116.89090729]
[89.40047455 129.36294556]
[81.06692505 141.83499146]
[86.56378937 156.34582520]
[82.44911957 171.30741882]
[70.30509949 180.96672058]
[54.80134583 181.60955811]
[41.89936829 172.98873901]
[36.56024551 158.41912842]
[40.83697128 143.50306702]
[53.08506393 133.97605896]
[68.59487915 133.50143433]
[76.92842865 121.02939606]
[85.26198578 108.55735016]
[82.56140137 94.16266632]
[92.33740234 81.81108856]
[109.17776489 81.01778412]
[106.83125305 66.20245361]
[104.48473358 51.38713074]
[102.13821411 36.57180786]
[99.79169464 21.75648117]
[95.25057983 13.51678467]
[97.65581512 6.31448555]
[95.89275360 -8.58154106]
[94.12969208 -23.47756767]
[92.36663055 -38.37359619]
[90.60356903 -53.26962280]
[88.54838562 -68.12815857]
[86.20186615 -82.94348907]
[83.85534668 -97.75881195]
[79.31423187 -105.99851227]
[81.71945953 -113.20080566]
[79.95639801 -128.09683228]
[78.19333649 -142.99285889]
[76.13815308 -157.85140991]
[64.05644226 -168.40658569]
[64.91990662 -184.42637634]
[78.06616974 -193.62178040]
[93.41054535 -188.93885803]
[99.18213654 -173.96994019]
[90.95348358 -160.19792175]
[95.22339630 -153.91889954]
[93.08936310 -144.75592041]
[94.85242462 -129.85989380]
[96.61548615 -114.96386719]
[98.67067719 -100.10533142]
[101.01718903 -85.29000092]
[103.36370850 -70.47467804]
[107.63362885 -64.19566345]
[105.49959564 -55.03268433]
[107.26265717 -40.13665771]
[109.02571869 -25.24062920]
[110.78878021 -10.34460258]
[112.55184174 4.55142450]
[114.60702515 19.40996361]
[116.95353699 34.22528839]
[119.30005646 49.04061508]
[121.64657593 63.85593796]
[123.99308777 78.67126465]
[131.06404114 91.90008545]
[142.07887268 102.08209229]
[153.09371948 112.26410675]
[164.10855103 122.44612122]
[175.12339783 132.62812805]
[186.13822937 142.81013489]
[197.15306091 152.99215698]
[212.93334961 152.12132263]
[224.65156555 162.72598267]
[225.35551453 178.51458740]
[214.62754822 190.12002563]
[198.83238220 190.65701294]
[187.34101868 179.80694580]
[186.97105408 164.00698853]
[175.95622253 153.82498169]
[164.94137573 143.64295959]
[153.92654419 133.46095276]
[142.91171265 123.27894592]
[131.89686584 113.09693146]
[120.88203430 102.91492462]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[17 59]
[18 58]
[19 57]
[20 56]
[21 55]
[23 54]
[24 53]
[25 52]
[26 51]
[27 50]
[28 48]
[29 47]
[30 46]
[32 45]
[33 44]
[34 43]
[35 41]
[60 79]
[61 78]
[62 77]
[63 76]
[64 75]
[65 74]
[66 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
