%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCACGGAGGAAAAACCCAAACGUCCAGGGAAACACUGAAGACAGCCGAAAGAGCACGCAAAACAGAGACGUUCG\
) } def
/len { sequence length } bind def

/coor [
[81.86988068 198.51911926]
[79.25894165 213.29014587]
[70.69269562 225.60353088]
[57.75134277 233.18782043]
[42.82218933 234.64395142]
[28.65920639 229.70330811]
[17.87504005 219.27729797]
[12.45904636 205.28919983]
[13.41031075 190.31938171]
[20.55135536 177.13166809]
[6.28550673 181.76692200]
[-1.14235854 187.54110718]
[-8.63224602 186.29217529]
[-16.13491058 200.20208740]
[-31.29962540 204.65258789]
[-45.12943268 197.00328064]
[-49.41935730 181.79235840]
[-41.62425995 168.04418945]
[-26.36883354 163.91532898]
[-12.70385361 171.85534668]
[1.65025187 167.50108337]
[15.91609955 162.86582947]
[20.97821426 156.61482239]
[29.78086662 154.73954773]
[40.79570389 144.55752563]
[51.81054306 134.37551880]
[62.82537842 124.19351196]
[73.84021759 114.01149750]
[84.85505676 103.82948303]
[88.64242554 89.31549835]
[84.00717163 75.04965210]
[79.37191772 60.78380585]
[64.80619812 55.09401321]
[57.35093689 41.34799194]
[60.52628326 26.03619194]
[72.83293915 16.38837814]
[88.46006775 16.95995331]
[100.02902985 27.48103714]
[102.07730865 42.98389435]
[93.63776398 56.14854813]
[98.27302551 70.41439819]
[102.90827942 84.68024445]
[109.83737183 87.55036926]
[107.87938690 72.67871094]
[119.77957916 63.54714203]
[133.63787842 69.28713989]
[135.59613037 84.15876007]
[123.69556427 93.29061890]
[130.62466431 96.16075134]
[143.98976135 89.35089111]
[157.21858215 82.27993774]
[165.13377380 67.91742706]
[181.53282166 67.86150360]
[189.54579163 82.16969299]
[180.92962646 96.12296295]
[164.54789734 95.36737823]
[160.13487244 101.54665375]
[150.79962158 102.71598816]
[137.43452454 109.52584839]
[149.27734375 118.73168945]
[156.69606018 131.76866150]
[158.56134033 146.65223694]
[154.58926392 161.11676025]
[145.38447571 172.96040344]
[132.34815979 180.38026428]
[117.46474457 182.24687195]
[102.99986267 178.27607727]
[91.15541077 169.07234192]
[83.73439026 156.03668213]
[81.86647034 141.15342712]
[85.83598328 126.68820190]
[95.03706360 114.84432220]
[84.02223206 125.02633667]
[73.00739288 135.20834351]
[61.99255371 145.39035034]
[50.97771454 155.57237244]
[39.96287918 165.75437927]
[54.96135330 165.96835327]
[68.48668671 172.45411682]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 22]
[11 21]
[13 20]
[24 77]
[25 76]
[26 75]
[27 74]
[28 73]
[29 72]
[30 42]
[31 41]
[32 40]
[49 59]
[50 58]
[51 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
