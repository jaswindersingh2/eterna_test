%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAACUAUGGUAUAUAUCCUUAAAGAGAGAUGAAAAGUAGACUGAAAUAGCUACAGUAUGGUAGCUUUGUGUUCG\
) } def
/len { sequence length } bind def

/coor [
[110.59590912 133.56295776]
[101.20536804 135.17517090]
[91.72649384 134.20956421]
[82.85394287 130.73690796]
[75.23793793 125.01170349]
[69.43663025 117.45351410]
[65.87515259 108.61624908]
[64.81451416 99.14753723]
[66.33245087 89.74129486]
[53.24501038 82.41197205]
[40.15756989 75.08265686]
[27.07012939 67.75333405]
[16.39443588 75.52725220]
[3.59512663 78.58217621]
[-9.34717560 76.48288727]
[-20.44411659 69.58883667]
[-28.00508499 58.99327087]
[-30.89474869 46.34997559]
[-28.70340919 33.61520767]
[-41.17545319 25.28165245]
[-53.64749908 16.94809914]
[-66.11954498 8.61454582]
[-78.75279999 0.52747083]
[-91.54240417 -7.31000757]
[-104.33200836 -15.14748573]
[-120.99629211 -18.26805878]
[-122.61080170 -35.14495468]
[-106.84040070 -41.36836624]
[-96.49452972 -27.93708801]
[-83.70492554 -20.09960938]
[-70.91532135 -12.26213169]
[-63.36763000 -11.43111038]
[-57.78598785 -3.85749865]
[-45.31394577 4.47605515]
[-32.84189987 12.80960846]
[-20.36985588 21.14316177]
[-5.45907784 12.99254704]
[11.61720181 13.35936165]
[26.31346512 22.23285866]
[34.67443848 37.32635880]
[34.39944839 54.66589737]
[47.48688889 61.99521637]
[60.57432938 69.32453156]
[73.66176605 76.65385437]
[91.76241302 65.78176880]
[112.82783508 67.22513580]
[129.27641296 80.46446991]
[135.18814087 100.73480988]
[149.77368164 104.23648834]
[164.35923767 107.73817444]
[180.52963257 96.26077271]
[199.72352600 99.89826202]
[210.25134277 116.00413513]
[225.14736938 117.76719666]
[240.04339600 119.53025818]
[254.93942261 121.29331970]
[269.83544922 123.05638123]
[284.73147583 124.81944275]
[296.98614502 114.83950806]
[312.69964600 116.53106689]
[322.54943848 128.89054871]
[320.69186401 144.58528137]
[308.22894287 154.30387878]
[292.55471802 152.28045654]
[282.96841431 139.71546936]
[268.07238770 137.95240784]
[253.17637634 136.18934631]
[238.28033447 134.42628479]
[223.38430786 132.66322327]
[208.48828125 130.90016174]
[202.13737488 139.53781128]
[192.63203430 144.67214966]
[181.76211548 145.25653076]
[171.60882568 141.10870361]
[164.14622498 132.95919800]
[160.85755920 122.32372284]
[146.27200317 118.82203674]
[131.68646240 115.32035828]
[126.41614532 123.25794983]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 44]
[10 43]
[11 42]
[12 41]
[19 36]
[20 35]
[21 34]
[22 33]
[23 31]
[24 30]
[25 29]
[48 78]
[49 77]
[50 76]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
