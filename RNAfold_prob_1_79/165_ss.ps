%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGAAUAUAAAGGUAUGAUAAAUGACGAAAGUACAGAUGAUAACGUGGUAUAGGUCAAAAAACGUGUGGUUCG\
) } def
/len { sequence length } bind def

/coor [
[66.84950256 308.07672119]
[55.87031937 318.81698608]
[40.98796463 322.61315918]
[26.20571709 318.44415283]
[15.49992943 307.43136597]
[11.75040340 292.53717041]
[15.96574306 277.76806641]
[27.01204300 267.09686279]
[41.91790390 263.39404297]
[45.98950958 248.95719910]
[50.06111526 234.52037048]
[54.13272476 220.08354187]
[44.85160446 210.28385925]
[41.66526794 197.05593872]
[45.52766800 183.89561462]
[55.51500702 174.33682251]
[69.04386902 171.00267029]
[65.61820221 156.50735474]
[77.24130249 145.77357483]
[81.87655640 131.50772095]
[72.87720490 124.19814301]
[66.63732910 114.42664337]
[63.79176331 103.18738556]
[64.63001251 91.62384033]
[69.06680298 80.91248322]
[76.65073395 72.14308929]
[86.61020660 66.20785522]
[97.93196106 63.71062088]
[109.46411133 64.90546417]
[116.27397156 51.54036713]
[123.08382416 38.17527008]
[129.89369202 24.81017113]
[123.96416473 14.14280415]
[124.04847717 2.06009388]
[130.00523376 -8.31259155]
[140.18949890 -14.35100079]
[151.90521240 -14.59560776]
[159.74269104 -27.38521004]
[167.58016968 -40.17481232]
[175.41764832 -52.96441650]
[173.17681885 -65.84258270]
[180.18374634 -76.39540100]
[192.13433838 -79.14502716]
[200.46788025 -91.61707306]
[208.80143738 -104.08911133]
[209.33348083 -120.47962952]
[223.91975403 -127.97447205]
[237.55514526 -118.86359406]
[236.21273804 -102.51948547]
[221.27348328 -95.75556183]
[212.93992615 -83.28351593]
[204.60636902 -70.81147003]
[204.52980042 -53.37771988]
[188.20724487 -45.12693787]
[180.36976624 -32.33733368]
[172.53228760 -19.54773140]
[164.69480896 -6.75812912]
[170.14416504 10.50957489]
[161.32722473 26.68140411]
[143.25878906 31.62002945]
[136.44892883 44.98512650]
[129.63906860 58.35022354]
[122.82920837 71.71532440]
[133.78282166 86.58668518]
[136.01354980 104.92143250]
[128.94540405 121.98544312]
[114.40341949 133.37271118]
[96.14240265 136.14297485]
[91.50714874 150.40882874]
[94.60127258 165.92453003]
[83.30971527 175.63792419]
[93.40337372 189.05017090]
[93.61062622 205.67041016]
[84.04570770 219.06243896]
[68.56954956 224.15515137]
[64.49794769 238.59197998]
[60.42633820 253.02880859]
[56.35473251 267.46563721]
[67.12934875 278.41110229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 78]
[10 77]
[11 76]
[12 75]
[17 71]
[19 69]
[20 68]
[29 63]
[30 62]
[31 61]
[32 60]
[37 57]
[38 56]
[39 55]
[40 54]
[43 52]
[44 51]
[45 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
