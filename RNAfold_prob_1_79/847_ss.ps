%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAACCACGAAAAAGGGAAAAGCUACCAGAAAUAGGUCCAGCAGAGGAAACAUCAAGCAAAAACUAGAAGUUCG\
) } def
/len { sequence length } bind def

/coor [
[72.60865021 115.51773071]
[58.17182541 119.58933258]
[51.07559967 130.56713867]
[38.76699448 133.55999756]
[28.12496567 127.46704865]
[13.53941727 130.96873474]
[-1.04613197 134.47041321]
[-10.06629658 150.88671875]
[-27.84957123 155.68481445]
[-43.36803818 146.35494995]
[-57.63388824 150.99020386]
[-65.06175232 156.76438904]
[-72.55164337 155.51545715]
[-80.05430603 169.42536926]
[-95.21901703 173.87586975]
[-109.04882812 166.22656250]
[-113.33875275 151.01564026]
[-105.54365540 137.26747131]
[-90.28823090 133.13861084]
[-76.62324524 141.07862854]
[-62.26914215 136.72436523]
[-48.00329590 132.08911133]
[-45.03046799 120.75421143]
[-36.78142929 112.26097107]
[-25.30476570 108.89025116]
[-13.53621960 111.62892151]
[-4.54781246 119.88485718]
[10.03773594 116.38317871]
[24.62328529 112.88150024]
[36.51355743 100.13147736]
[54.10021591 105.15250397]
[68.53704834 101.08090210]
[68.64311981 93.58874512]
[70.53698730 86.21195221]
[74.16841888 79.37770081]
[79.38508606 73.49536896]
[85.93828583 68.93221283]
[93.49447632 65.99064636]
[101.65211487 64.88879395]
[109.96298218 65.74533081]
[117.95675659 68.56967926]
[125.16767120 73.25837708]
[133.50122070 60.78633499]
[141.83477783 48.31428909]
[138.50608826 32.86452103]
[147.14704895 19.63163757]
[162.63114929 16.46647644]
[175.77194214 25.24686813]
[178.77322388 40.76356506]
[169.85438538 53.81078339]
[154.30682373 56.64784241]
[145.97326660 69.11988831]
[137.63970947 81.59193420]
[141.71131897 96.02876282]
[155.33346558 102.30865479]
[168.95561218 108.58855438]
[184.72744751 107.33955383]
[193.04634094 119.69452667]
[206.66848755 125.97441864]
[222.44030762 124.72541809]
[230.75920105 137.08039856]
[244.38134766 143.36029053]
[259.12017822 137.65570068]
[273.54190063 144.12020874]
[279.09033203 158.91853333]
[272.47372437 173.27108765]
[257.61755371 178.66276550]
[243.33575439 171.89477539]
[238.10145569 156.98243713]
[224.47930908 150.70254517]
[209.68182373 152.40072632]
[200.38858032 139.59657288]
[186.76643372 133.31666565]
[171.96896362 135.01484680]
[162.67572021 122.21070099]
[149.05357361 115.93080139]
[135.43142700 109.65090942]
[123.21167755 126.74386597]
[104.24329376 133.83686829]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[5 29]
[6 28]
[7 27]
[10 22]
[11 21]
[13 20]
[42 53]
[43 52]
[44 51]
[54 77]
[55 76]
[56 75]
[58 73]
[59 72]
[61 70]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
