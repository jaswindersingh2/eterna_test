%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGAUCGCGAGAGACUUCGGUCGUCUUCGGACCUCAAAAGUAGUCUUCGGACUGCGUGAUCAAAGGUGUACUUCG\
) } def
/len { sequence length } bind def

/coor [
[96.30547333 267.07577515]
[90.67738342 253.06765747]
[89.03848267 238.06044006]
[91.51039124 223.16775513]
[97.90968323 209.49472046]
[107.76148224 198.05598450]
[120.33471680 189.70037842]
[115.69946289 175.43453979]
[111.06420898 161.16868591]
[106.42895508 146.90283203]
[101.79370117 132.63699341]
[97.15844727 118.37113953]
[84.21743011 110.78628540]
[69.50565338 113.71263885]
[54.79387283 116.63899231]
[42.82781601 127.85262299]
[27.21410751 122.83822632]
[24.01479149 106.75418854]
[36.52104950 96.14637756]
[51.86751556 101.92721558]
[66.57929230 99.00085449]
[81.29107666 96.07450104]
[85.64534760 81.72039795]
[75.03874207 71.11379242]
[64.43214417 60.50719452]
[53.82553864 49.90059280]
[38.26427460 51.44364929]
[25.38102531 42.58047104]
[21.25886917 27.49598122]
[27.84416199 13.31261349]
[42.02753067 6.72732067]
[57.11202240 10.84947681]
[65.97519684 23.73272514]
[64.43214417 39.29399109]
[75.03874207 49.90059280]
[85.64534760 60.50719452]
[96.25194550 71.11379242]
[88.09106445 58.52808762]
[90.47648621 43.71897888]
[102.17661285 34.33243942]
[117.15064240 35.21476746]
[127.66744995 45.91040802]
[128.29718018 60.89718628]
[118.71292114 72.43839264]
[130.49267578 63.15198135]
[142.27243042 53.86557007]
[154.05218506 44.57916260]
[165.83193970 35.29275131]
[177.61169434 26.00634384]
[183.18264771 10.58244801]
[199.37104797 7.96183300]
[209.52366638 20.84036064]
[203.19635010 35.96970749]
[186.89810181 37.78609848]
[175.11834717 47.07250595]
[163.33859253 56.35891724]
[151.55883789 65.64532471]
[139.77908325 74.93173218]
[127.99932861 84.21813965]
[111.42429352 113.73588562]
[116.05954742 128.00173950]
[120.69480133 142.26757812]
[125.33005524 156.53343201]
[129.96531677 170.79928589]
[134.60057068 185.06512451]
[149.68383789 184.43458557]
[164.37762451 187.89797974]
[177.59156799 195.19828796]
[188.34509277 205.79377747]
[195.84020996 218.89817810]
[199.52075195 233.53909302]
[199.11358643 248.63005066]
[194.64891052 263.05117798]
[186.45806885 275.73239136]
[175.14884949 285.73260498]
[161.56048584 292.30972290]
[146.70132446 294.97576904]
[131.67399597 293.53280640]
[117.59364319 288.08795166]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[13 22]
[14 21]
[15 20]
[23 37]
[24 36]
[25 35]
[26 34]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
