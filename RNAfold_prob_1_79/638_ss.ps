%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGCCGCACCCACCUUUACUUUCCCAUUCAAACCUCCACUUACCCUCCAUCUCUUUUAUAGGCCGUUGACUUUCG\
) } def
/len { sequence length } bind def

/coor [
[75.71213531 119.45546722]
[62.08998871 125.73536682]
[48.46784210 132.01525879]
[34.84569550 138.29515076]
[21.22354698 144.57505798]
[7.60139847 150.85494995]
[8.88137913 165.95916748]
[4.91522408 180.58946228]
[-3.81813407 192.97914124]
[-16.26409912 201.63211060]
[-30.91976166 205.50346375]
[-46.01537704 204.12571716]
[-59.72808075 197.66525269]
[-70.40199280 186.90219116]
[-76.74818420 173.13623047]
[-78.00032806 158.02967834]
[-74.00721741 143.40672302]
[-65.25104523 131.03315735]
[-52.78915024 122.40314484]
[-38.12638092 118.55880737]
[-23.03332710 119.96436310]
[-9.33255577 126.45008850]
[1.32150245 137.23280334]
[14.94365025 130.95291138]
[28.56579781 124.67301178]
[42.18794632 118.39311218]
[55.81009293 112.11322021]
[69.43224335 105.83332062]
[71.79007721 86.86167145]
[84.79441071 72.84847260]
[103.53738403 69.08232880]
[120.94533539 76.98460388]
[133.41737366 68.65104675]
[145.88941956 60.31749344]
[158.36146545 51.98394012]
[166.13652039 33.58196640]
[185.28097534 32.50643539]
[197.06072998 23.22002792]
[208.84048462 13.93361855]
[202.60421753 0.20873243]
[199.83444214 -14.60989761]
[200.69218445 -29.66073418]
[205.12757874 -44.06874466]
[212.88275146 -56.99626160]
[223.50683594 -67.69170380]
[236.38214111 -75.53324127]
[250.76013184 -80.06498718]
[265.80490112 -81.02346802]
[280.64172363 -78.35295868]
[294.40805054 -72.20871735]
[306.30352783 -62.94796371]
[315.63650513 -51.10910797]
[321.86447144 -37.38044357]
[324.62524414 -22.56013680]
[323.75839233 -7.50982141]
[319.31423950 6.89549685]
[311.55123901 19.81831169]
[300.92068481 30.50730705]
[288.04061890 38.34104156]
[273.65988159 42.86406708]
[258.61453247 43.81342697]
[243.77932739 41.13391876]
[230.01672363 34.98133469]
[218.12689209 25.71337318]
[206.34713745 34.99978256]
[194.56738281 44.28619003]
[194.22817993 54.82369232]
[187.89469910 63.52952194]
[177.55381775 67.24711609]
[166.69502258 64.45598602]
[154.22297668 72.78953552]
[141.75093079 81.12309265]
[129.27888489 89.45664978]
[131.11885071 100.18167877]
[129.15379333 110.88449860]
[123.62398529 120.25643158]
[115.20558929 127.15152740]
[104.92794800 130.72671509]
[94.04775238 130.54483032]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[3 26]
[4 25]
[5 24]
[6 23]
[32 73]
[33 72]
[34 71]
[35 70]
[37 66]
[38 65]
[39 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
