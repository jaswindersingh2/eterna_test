%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGAUCCAAGUGGGCCAAUGCCCUGGCAUUUCAAUUUUCCGCCAGGGCAUUGGCCCACUUGGAGACUUGUGGUUCG\
) } def
/len { sequence length } bind def

/coor [
[81.58804321 183.01516724]
[82.05044556 167.75906372]
[89.09405518 154.21836853]
[101.32035828 145.08161926]
[98.39400482 130.36982727]
[95.46764374 115.65805054]
[84.07791138 103.49341583]
[89.32857513 87.67775726]
[85.82689667 73.09220886]
[82.32521820 58.50666046]
[78.82353973 43.92111206]
[75.32185364 29.33556366]
[71.82017517 14.75001431]
[68.31849670 0.16446586]
[64.81681824 -14.42108250]
[61.31513214 -29.00663185]
[57.81345367 -43.59218216]
[54.31177139 -58.17773056]
[50.81009293 -72.76327515]
[47.30841064 -87.34882355]
[43.80673218 -101.93437958]
[40.30504990 -116.51992798]
[36.80337143 -131.10546875]
[33.30168915 -145.69102478]
[29.80001068 -160.27656555]
[26.29833031 -174.86212158]
[22.79664803 -189.44766235]
[19.29496765 -204.03321838]
[15.79328823 -218.61875916]
[12.29160786 -233.20431519]
[-2.68993187 -235.93806458]
[-15.26067066 -244.53436279]
[-23.24265289 -257.50384521]
[-25.25295258 -272.59951782]
[-20.94327164 -287.20590210]
[-11.06028843 -298.79238892]
[2.68370962 -305.35153198]
[17.90749168 -305.74691772]
[31.97344589 -299.91006470]
[42.44456100 -288.85223389]
[47.50665283 -274.48925781]
[46.28268051 -259.30960083]
[38.98471069 -245.94325256]
[26.87715721 -236.70599365]
[30.37883759 -222.12045288]
[33.88051605 -207.53489685]
[37.38219833 -192.94935608]
[40.88387680 -178.36380005]
[44.38555908 -163.77824402]
[47.88723755 -149.19270325]
[51.38891983 -134.60714722]
[54.89059830 -120.02160645]
[58.39228058 -105.43605804]
[61.89396286 -90.85050964]
[65.39564514 -76.26496124]
[68.89732361 -61.67940903]
[72.39900208 -47.09386063]
[75.90068054 -32.50831223]
[79.40236664 -17.92276382]
[82.90404510 -3.33721471]
[86.40572357 11.24833393]
[89.90740204 25.83388329]
[93.40908813 40.41943359]
[96.91076660 55.00498199]
[100.41244507 69.59053040]
[103.91412354 84.17607880]
[113.57434082 90.97480011]
[116.10593414 102.51314545]
[110.17942810 112.73169708]
[113.10578156 127.44348145]
[116.03213501 142.15525818]
[130.82424927 145.91772461]
[142.51348877 155.73220825]
[148.77896118 169.65007019]
[148.37663269 184.90788269]
[141.38641357 198.47621155]
[129.19618225 207.66104126]
[114.22634125 210.63871765]
[99.44915771 206.81803894]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 71]
[5 70]
[6 69]
[8 66]
[9 65]
[10 64]
[11 63]
[12 62]
[13 61]
[14 60]
[15 59]
[16 58]
[17 57]
[18 56]
[19 55]
[20 54]
[21 53]
[22 52]
[23 51]
[24 50]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
