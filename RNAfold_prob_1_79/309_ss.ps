%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGAGGGCUCAAAAACGAGCGGCAAUGCCACCUCAGCCACCGGAAAACGGCUCCUACGGGAGGGCGGUAACUUUCG\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 198.35873413]
[92.50000000 182.51960754]
[92.50000000 167.51960754]
[92.50000000 152.51960754]
[92.50000000 137.51960754]
[92.50000000 122.51959991]
[84.28842163 120.44642639]
[76.74530792 115.29914856]
[71.02965546 107.34196472]
[68.18027496 97.27288055]
[53.74344254 101.34449005]
[39.30661392 105.41609955]
[24.86978531 109.48770142]
[17.36712265 123.39761353]
[2.20240712 127.84811401]
[-11.62740231 120.19880676]
[-15.91732597 104.98788452]
[-8.12222767 91.23972321]
[7.13319874 87.11085510]
[20.79817963 95.05087280]
[35.23500824 90.97927094]
[49.67183685 86.90766144]
[64.10866547 82.83605194]
[66.74560547 68.06965637]
[54.61035538 59.25287628]
[42.47509766 50.43610001]
[26.10702324 46.01768112]
[25.82163239 29.06613541]
[42.03170013 24.09924316]
[51.29187775 38.30084229]
[63.42713165 47.11762238]
[75.56238556 55.93440247]
[90.56238556 55.93440247]
[102.69763947 47.11762238]
[114.83290100 38.30084229]
[117.14839935 33.01689148]
[120.97934723 29.66258812]
[125.24974060 28.49342155]
[128.95361328 29.26158333]
[142.04106140 21.93226433]
[155.12849426 14.60294628]
[151.00555420 2.13852620]
[157.09953308 -13.41525364]
[165.91632080 -25.55050850]
[174.73309326 -37.68576431]
[173.65368652 -53.69246292]
[185.59194946 -64.40960693]
[201.38989258 -61.61592865]
[208.92866516 -47.45449066]
[202.42518616 -32.78873825]
[186.86834717 -28.86898422]
[178.05157471 -16.73373032]
[169.23480225 -4.59847498]
[176.30574036 8.63034439]
[191.29418945 8.04144669]
[206.28262329 7.45254993]
[221.27105713 6.86365271]
[234.84397888 -2.34001660]
[249.48103333 5.05516577]
[250.12486267 21.44166946]
[236.11315918 29.96246529]
[221.85995483 21.85208893]
[206.87152100 22.44098473]
[191.88307190 23.02988243]
[176.89463806 23.61878014]
[162.45780945 27.69038582]
[149.37037659 35.01970673]
[136.28292847 42.34902191]
[123.64967346 50.43610001]
[111.51441956 59.25287628]
[99.37916565 68.06965637]
[123.35836792 82.47313690]
[125.26509857 107.89276886]
[107.50000000 122.51959991]
[107.50000000 137.51960754]
[107.50000000 152.51960754]
[107.50000000 167.51960754]
[107.50000000 182.51960754]
[113.54634094 198.35873413]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[5 75]
[6 74]
[10 23]
[11 22]
[12 21]
[13 20]
[24 32]
[25 31]
[26 30]
[33 71]
[34 70]
[35 69]
[39 68]
[40 67]
[41 66]
[43 53]
[44 52]
[45 51]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
