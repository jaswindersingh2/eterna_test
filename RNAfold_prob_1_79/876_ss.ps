%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCACGGUCCGGCCCUCGCUUUUGCUGGUUUUCCUUUGGUGCCAAUGACCACGCUUCGGCACGCGUGGACCUUCG\
) } def
/len { sequence length } bind def

/coor [
[73.41003418 108.55050659]
[58.42160034 109.13940430]
[43.43316650 109.72830200]
[28.44472885 110.31719971]
[13.45629406 110.90609741]
[-1.53214145 111.49499512]
[-16.52057648 112.08389282]
[-25.23690987 115.62506104]
[-32.10658264 112.38996124]
[-47.10658264 112.38996124]
[-62.10658264 112.38996124]
[-77.10658264 112.38996124]
[-89.10493469 124.94269562]
[-106.13498688 125.06537628]
[-117.84401703 113.16303253]
[-132.83245850 113.75193024]
[-147.82089233 114.34082794]
[-161.39382935 123.54449463]
[-176.03086853 116.14931488]
[-176.67469788 99.76280975]
[-162.66299438 91.24201202]
[-148.40979004 99.35239410]
[-133.42135620 98.76349640]
[-118.43291473 98.17459869]
[-110.97806549 87.47674561]
[-98.50904083 83.03852081]
[-85.59411621 86.72794342]
[-77.10658264 97.38996124]
[-62.10658264 97.38996124]
[-47.10658264 97.38996124]
[-32.10658264 97.38996124]
[-17.10947418 97.09545898]
[-2.12103868 96.50656128]
[12.86739731 95.91766357]
[27.85583305 95.32876587]
[42.84426880 94.73986816]
[57.83270264 94.15097046]
[72.82113647 93.56207275]
[81.82810974 78.78868866]
[97.80856323 72.15515900]
[114.62998199 76.20712280]
[125.83712769 89.38962555]
[140.73315430 87.62656403]
[155.62918091 85.86350250]
[144.62872314 75.66596222]
[141.42950439 61.01109695]
[147.17939758 47.15689850]
[159.81536865 39.07408142]
[174.80381775 39.66266632]
[186.76705933 48.71147537]
[191.41282654 62.97390747]
[187.07426453 77.33277130]
[175.30703735 86.63665009]
[190.01881409 89.56300354]
[204.73059082 92.48935699]
[219.44236755 95.41571045]
[234.15415955 98.34206390]
[248.86593628 101.26842499]
[260.16864014 90.63692474]
[275.56594849 88.71282959]
[289.13729858 96.23598480]
[295.66424561 110.31358337]
[292.63702393 125.53250122]
[281.21963501 136.04075623]
[265.80236816 137.79771423]
[252.31341553 130.12777710]
[245.93957520 115.98020172]
[231.22779846 113.05384827]
[216.51602173 110.12749481]
[201.80424500 107.20113373]
[187.09245300 104.27478027]
[172.38067627 101.34842682]
[157.39224243 100.75952911]
[142.49621582 102.52259064]
[127.60018921 104.28565216]
[123.05056763 115.77367401]
[113.98992157 124.17476654]
[102.19143677 127.84484100]
[89.96408081 126.06564331]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 35]
[5 34]
[6 33]
[7 32]
[9 31]
[10 30]
[11 29]
[12 28]
[15 24]
[16 23]
[17 22]
[42 75]
[43 74]
[44 73]
[53 72]
[54 71]
[55 70]
[56 69]
[57 68]
[58 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
