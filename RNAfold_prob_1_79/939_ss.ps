%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAUUUCCACAAGAAAACUUGAGCAAGAAAGAAAAAAACUUUCUUGCACUUCAAAAGAAGAGGAAACAGACUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[88.81495667 142.17654419]
[82.53506470 155.79869080]
[76.25516510 169.42083740]
[78.29371643 185.69277954]
[65.05947113 195.37715149]
[50.16670227 188.51148987]
[48.93580246 172.15859985]
[62.63301849 163.14094543]
[68.91291809 149.51878357]
[75.19281006 135.89663696]
[65.73312378 127.01382446]
[59.30406189 115.74185944]
[44.59228134 118.66821289]
[29.88050270 121.59456635]
[15.16872406 124.52092743]
[3.20266700 135.73455811]
[-12.41104031 130.72015381]
[-15.61035538 114.63611603]
[-3.10409689 104.02831268]
[12.24236870 109.80914307]
[26.95414734 106.88278961]
[41.66592789 103.95643616]
[56.37770462 101.03008270]
[63.25031281 76.47499084]
[82.67256165 59.95346069]
[79.17088318 45.36790848]
[75.66920471 30.78236198]
[72.16751862 16.19681168]
[68.66584015 1.61126363]
[65.16416168 -12.97428513]
[61.66247940 -27.55983353]
[58.16079712 -42.14538193]
[54.65911865 -56.73093033]
[40.58471298 -63.54599762]
[34.23093414 -77.83457947]
[38.59784317 -92.85004425]
[51.62351990 -101.50254059]
[67.15763092 -99.70664215]
[77.86545563 -88.31030273]
[78.69107819 -72.69452667]
[69.24466705 -60.23261261]
[72.74634552 -45.64706421]
[76.24803162 -31.06151390]
[79.74971008 -16.47596550]
[83.25138855 -1.89041674]
[86.75306702 12.69513226]
[90.25475311 27.28068161]
[93.75643158 41.86623001]
[97.25811005 56.45177841]
[106.51949310 56.85533905]
[115.48661804 59.20624924]
[123.75475311 63.39839935]
[130.95069885 69.24256897]
[136.74969482 76.47499084]
[140.88996887 84.76922607]
[143.18464661 93.75090027]
[143.53019714 103.01463318]
[141.91098022 112.14229584]
[138.40010071 120.72191620]
[150.17985535 130.00833130]
[161.95960999 139.29473877]
[173.73936462 148.58114624]
[185.51911926 157.86755371]
[197.29887390 167.15396118]
[212.19624329 162.81254578]
[226.78887939 168.08840942]
[235.46560669 180.95285034]
[234.89006042 196.45924377]
[225.28352356 208.64506531]
[210.33993530 212.82461548]
[195.80538940 207.39077759]
[187.26872253 194.43295288]
[188.01246643 178.93371582]
[176.23271179 169.64730835]
[164.45295715 160.36090088]
[152.67320251 151.07449341]
[140.89344788 141.78807068]
[129.11369324 132.50166321]
[117.01491547 140.18032837]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[12 23]
[13 22]
[14 21]
[15 20]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[59 78]
[60 77]
[61 76]
[62 75]
[63 74]
[64 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
