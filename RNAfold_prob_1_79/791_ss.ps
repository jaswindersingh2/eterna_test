%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAACGACUCAGAUAUAGCUAGUAGUGACAGCAACCAGUCUGCACAUACUACUAUACUAGAGCGAGUGCUCUUUCG\
) } def
/len { sequence length } bind def

/coor [
[76.53139496 282.82641602]
[61.62313080 281.17004395]
[47.89108276 275.13424683]
[36.59023285 265.27062988]
[28.75336266 252.48065186]
[25.09668922 237.93319702]
[25.95439529 222.95773315]
[31.24809265 208.92289734]
[40.49399185 197.11131287]
[52.84711075 188.60246277]
[67.17848969 184.17396545]
[82.17838287 184.23054504]
[96.47594452 188.76702881]
[108.76110840 197.36555481]
[105.83474731 182.65377808]
[101.32160950 176.54724121]
[103.09426117 167.30754089]
[100.74774170 152.49221802]
[98.40122223 137.67689514]
[96.05471039 122.86156464]
[93.70819092 108.04624176]
[89.33334351 100.99960327]
[91.57230377 92.60424042]
[89.80924225 77.70821381]
[88.04618073 62.81219101]
[86.28311920 47.91616440]
[84.52005768 33.02013779]
[82.46487427 18.16159630]
[80.11836243 3.34627080]
[77.77184296 -11.46905422]
[73.23072815 -19.70875168]
[75.63595581 -26.91105080]
[73.87289429 -41.80707550]
[72.10983276 -56.70310593]
[70.05464935 -71.56164551]
[57.97293854 -82.11682892]
[58.83640289 -98.13662720]
[71.98266602 -107.33202362]
[87.32703400 -102.64910126]
[93.09863281 -87.68019104]
[84.86997223 -73.90816498]
[89.13989258 -67.62915039]
[87.00585938 -58.46616364]
[88.76892090 -43.57013702]
[90.53198242 -28.67411232]
[92.58716583 -13.81557178]
[94.93368530 0.99975371]
[97.28020477 15.81507874]
[101.55011749 22.09409332]
[99.41608429 31.25707436]
[101.17914581 46.15310287]
[102.94220734 61.04912949]
[104.70526886 75.94515228]
[106.46833038 90.84117889]
[108.52351379 105.69972229]
[110.87003326 120.51504517]
[113.21655273 135.33036804]
[115.56306458 150.14569092]
[117.90958405 164.96102905]
[120.54653168 179.72741699]
[123.47288513 194.43919373]
[131.31036377 207.22880554]
[143.09011841 216.51521301]
[154.86987305 225.80162048]
[166.64962769 235.08802795]
[178.42938232 244.37443542]
[194.72761536 246.19082642]
[201.05493164 261.32019043]
[190.90232849 274.19869995]
[174.71392822 271.57809448]
[169.14297485 256.15420532]
[157.36322021 246.86778259]
[145.58346558 237.58137512]
[133.80371094 228.29496765]
[122.02395630 219.00856018]
[124.10789490 233.86309814]
[121.65756226 248.66160583]
[114.89688110 262.05163574]
[104.44373322 272.80950928]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 61]
[15 60]
[17 59]
[18 58]
[19 57]
[20 56]
[21 55]
[23 54]
[24 53]
[25 52]
[26 51]
[27 50]
[28 48]
[29 47]
[30 46]
[32 45]
[33 44]
[34 43]
[35 41]
[62 75]
[63 74]
[64 73]
[65 72]
[66 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
