%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAGGAUCCUGUCUUCGGACAGGCGAGGGUACUUCGGUACAGAUCUUCGGAUCCCGAGCGAUCCGCGUGGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[15.34994030 184.08857727]
[21.73487473 197.66181946]
[21.82180786 212.66156006]
[15.59462833 226.30789185]
[4.20743513 236.07168579]
[-10.22935963 240.14341736]
[-25.04014969 237.76844788]
[-37.48002243 229.38694763]
[-45.24346161 216.55226135]
[-46.89165497 201.64309692]
[-42.11914062 187.42257690]
[-31.80992889 176.52590942]
[-46.79836655 177.11480713]
[-61.78680038 177.70370483]
[-76.77523804 178.29260254]
[-91.76367188 178.88150024]
[-106.75210571 179.47039795]
[-120.32504272 188.67405701]
[-134.96209717 181.27888489]
[-135.60592651 164.89237976]
[-121.59420776 156.37158203]
[-107.34100342 164.48196411]
[-92.35256958 163.89306641]
[-77.36413574 163.30416870]
[-62.37569809 162.71527100]
[-47.38726425 162.12637329]
[-32.39882660 161.53747559]
[-17.96199799 157.46586609]
[-4.87455845 150.13655090]
[8.21288204 142.80723572]
[21.30032158 135.47790527]
[34.38776016 128.14859009]
[41.71164703 115.17900848]
[57.53285217 115.18672180]
[70.62029266 107.85739899]
[83.70773315 100.52808380]
[87.62902832 89.38510895]
[98.04698944 83.81659698]
[109.49058533 86.74685669]
[122.85568237 79.93700409]
[136.22077942 73.12714386]
[138.34440613 69.21845245]
[141.28738403 66.41907501]
[144.61630249 64.84895325]
[147.90249634 64.47994232]
[150.76861572 65.14954376]
[152.92724609 66.58835602]
[167.36407471 62.51675034]
[181.80090332 58.44514465]
[196.15501404 54.09087372]
[210.42086792 49.45561981]
[224.68670654 44.82036209]
[238.95256042 40.18510818]
[253.21839905 35.54985428]
[266.41390991 24.90488243]
[280.29574585 34.63786316]
[274.78598022 50.67155075]
[257.85366821 49.81570053]
[243.58781433 54.45095444]
[229.32196045 59.08621216]
[215.05612183 63.72146606]
[200.79026794 68.35671997]
[195.25653076 73.55632782]
[185.87251282 72.88197327]
[171.43568420 76.95357513]
[156.99885559 81.02518463]
[143.03063965 86.49224091]
[129.66554260 93.30210114]
[116.30043793 100.11196136]
[107.68415833 114.37604523]
[91.03704834 113.61552429]
[77.94960785 120.94483948]
[64.86216736 128.27415466]
[56.60218430 141.76797485]
[41.71707916 141.23603821]
[28.62964058 148.56535339]
[15.54220009 155.89466858]
[2.45476031 163.22398376]
[-10.63267994 170.55329895]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[28 79]
[29 78]
[30 77]
[31 76]
[32 75]
[34 73]
[35 72]
[36 71]
[39 69]
[40 68]
[41 67]
[47 66]
[48 65]
[49 64]
[50 62]
[51 61]
[52 60]
[53 59]
[54 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
