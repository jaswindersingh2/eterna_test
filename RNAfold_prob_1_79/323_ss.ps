%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACGCUUGACAAAAAAGUCAGUCAAAGACAAGCGAGUCAGGCAAAAAGCCCUUCAAAAGAAGGACUAUACCAUUCG\
) } def
/len { sequence length } bind def

/coor [
[65.41040039 135.39050293]
[59.46255493 128.38386536]
[54.91294861 120.39818573]
[51.91851425 111.70891571]
[50.58253860 102.61578369]
[50.95109558 93.43242645]
[53.01147842 84.47560120]
[39.64638138 77.66574097]
[26.28128433 70.85588837]
[12.91618633 64.04602814]
[-0.44891143 57.23617172]
[-13.81400967 50.42631149]
[-27.17910767 43.61645508]
[-38.76092529 53.42140961]
[-53.17545319 58.03274536]
[-68.21665955 56.77742004]
[-81.59508514 49.87776184]
[-91.28634644 38.41284561]
[-95.83743286 24.14985085]
[-94.58448792 9.27169895]
[-107.94958496 2.46184182]
[-121.31468201 -4.34801579]
[-135.63749695 1.92821395]
[-150.62905884 -2.52002573]
[-159.21083069 -15.59241199]
[-157.33074951 -31.11656380]
[-145.87652588 -41.76245117]
[-130.25651550 -42.50341415]
[-117.84598541 -32.98958588]
[-114.50482178 -17.71311378]
[-101.13972473 -10.90325642]
[-87.77462769 -4.09339857]
[-76.47441101 -13.85221100]
[-62.26034927 -18.55388641]
[-47.28865433 -17.45239830]
[-33.84307098 -10.68454075]
[-23.98649597 0.74618804]
[-19.24449539 15.11826038]
[-20.36924934 30.25135803]
[-7.00415182 37.06121445]
[6.36094618 43.87107086]
[19.72604370 50.68093109]
[33.09114075 57.49078751]
[46.45623779 64.30064392]
[59.82133865 71.11050415]
[77.05792999 56.15265656]
[99.17383575 50.52025223]
[121.46545410 55.41118622]
[139.19180298 69.78525543]
[148.58285522 90.58538818]
[163.57128906 89.99649048]
[177.05705261 81.72336578]
[190.07827759 88.95502472]
[205.06671143 88.36613464]
[220.05514526 87.77723694]
[235.04357910 87.18833923]
[250.03201294 86.59944153]
[263.60494995 77.39576721]
[278.24200439 84.79095459]
[278.88583374 101.17745972]
[264.87411499 109.69824982]
[250.62091064 101.58787537]
[235.63247681 102.17677307]
[220.64404297 102.76567078]
[205.65560913 103.35456848]
[190.66717529 103.94346619]
[178.25347900 112.17446899]
[164.16018677 104.98492432]
[149.17173767 105.57382202]
[147.29299927 114.57050323]
[143.78300476 123.06461334]
[138.76281738 130.76315308]
[132.40559387 137.40060425]
[124.93062592 142.74800110]
[116.59573364 146.62091064]
[107.68840790 148.88574219]
[98.51588440 149.46438599]
[89.39456177 148.33686829]
[80.63903809 145.54208374]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 45]
[8 44]
[9 43]
[10 42]
[11 41]
[12 40]
[13 39]
[20 32]
[21 31]
[22 30]
[50 69]
[51 68]
[53 66]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
