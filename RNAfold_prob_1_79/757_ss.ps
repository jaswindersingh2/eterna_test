%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCCAGAGGCGGAAAAGCCAAAAAGGUACGGUGGGCUCACAGUACCGGCCCGCGUCUGGAAUUCAGUAGCGUUCG\
) } def
/len { sequence length } bind def

/coor [
[160.79830933 301.53775024]
[171.31176758 290.52017212]
[165.57151794 276.66198730]
[159.83126831 262.80377197]
[146.01501465 257.35888672]
[139.99617004 243.38647461]
[145.80096436 228.93164062]
[140.06071472 215.07345581]
[134.32046509 201.21525574]
[128.58021545 187.35707092]
[122.83995819 173.49887085]
[110.82111359 164.70133972]
[112.68834686 148.99070740]
[106.94809723 135.13252258]
[101.20783997 121.27432251]
[95.46759033 107.41613007]
[92.43889618 105.98030853]
[89.93580627 103.29231262]
[88.47004700 99.57469177]
[88.45057678 95.25392151]
[90.10498047 90.91171265]
[86.60330200 76.32616425]
[83.10162354 61.74061203]
[79.79667664 58.76319122]
[77.76166534 55.24802780]
[77.01205444 51.64456177]
[77.42037964 48.36300659]
[78.74056244 45.73239517]
[80.64354706 43.96929169]
[80.05464935 28.98085403]
[79.46575165 13.99241924]
[78.87685394 -0.99601674]
[78.28795624 -15.98445225]
[70.01483154 -29.47022057]
[77.24649811 -42.49144363]
[76.65760040 -57.47988129]
[76.06870270 -72.46831512]
[66.86503601 -86.04125214]
[74.26021576 -100.67829895]
[90.64672089 -101.32212830]
[99.16751862 -87.31041718]
[91.05713654 -73.05721283]
[91.64603424 -58.06877899]
[92.23493195 -43.08034134]
[100.46593475 -30.66664696]
[93.27639771 -16.57334900]
[93.86529541 -1.58491397]
[94.45418549 13.40352154]
[95.04308319 28.39195633]
[95.63198090 43.38039398]
[97.68717194 58.23893356]
[101.18885040 72.82447815]
[104.69052887 87.41003418]
[109.32578278 101.67588043]
[115.06603241 115.53407288]
[120.80628967 129.39225769]
[126.54653931 143.25045776]
[138.97596741 153.03921509]
[136.69815063 167.75862122]
[142.43840027 181.61680603]
[148.17864990 195.47500610]
[153.91889954 209.33320618]
[159.65916443 223.19139099]
[173.98487854 229.30789185]
[179.60888672 243.44384766]
[173.68945312 257.06353760]
[179.42970276 270.92172241]
[185.16996765 284.77990723]
[200.39469910 285.13638306]
[214.15544128 291.66033936]
[224.06802368 303.22149658]
[228.41505432 317.81683350]
[226.44337463 332.91757202]
[218.49458313 345.90744019]
[205.94587708 354.53585815]
[190.97137451 357.30792236]
[176.16551208 353.74334717]
[164.09349060 344.45968628]
[156.84686279 331.06542969]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 68]
[3 67]
[4 66]
[7 63]
[8 62]
[9 61]
[10 60]
[11 59]
[13 57]
[14 56]
[15 55]
[16 54]
[21 53]
[22 52]
[23 51]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[35 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
