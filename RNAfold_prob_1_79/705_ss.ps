%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAGACGAGAAACACGACUUAACUCAGGAGAAAAACACCAGAGACAGACGACAAAAGACGACUGACUGCAUUUCG\
) } def
/len { sequence length } bind def

/coor [
[69.35353088 265.63284302]
[64.08274841 280.05902100]
[52.29473877 289.90475464]
[37.16041565 292.52157593]
[22.75083542 287.20559692]
[12.94210339 275.38677979]
[10.37271976 260.24432373]
[15.73383522 245.85148621]
[27.58333588 236.07984924]
[42.73376846 233.55795288]
[47.92552185 219.48507690]
[53.11727905 205.41220093]
[58.30903625 191.33934021]
[63.50078964 177.26646423]
[57.05121613 163.88967896]
[62.11592102 149.54382324]
[76.19046021 142.86961365]
[81.38221741 128.79673767]
[75.19789886 123.67974091]
[70.37256622 117.26526642]
[67.17059326 109.90476990]
[65.76744080 102.00157166]
[66.23998260 93.98870087]
[68.56233215 86.30519867]
[72.60723877 79.37207794]
[78.15307617 73.56922150]
[84.89595795 69.21457672]
[81.39427948 54.62902832]
[77.89260101 40.04347992]
[67.14749146 28.43084335]
[71.69989014 14.24899006]
[68.19821167 -0.33655834]
[53.59785080 -5.31983280]
[44.02731705 -17.41976929]
[42.54053879 -32.77532196]
[49.61193466 -46.48659134]
[62.98505020 -54.17835999]
[78.39257050 -53.39621353]
[90.91802216 -44.38972855]
[96.56456757 -30.03284645]
[93.53041840 -14.90679359]
[82.78376007 -3.83823872]
[86.28543854 10.74730968]
[96.78008270 21.31669044]
[92.47814941 36.54179764]
[95.97982788 51.12734604]
[99.48150635 65.71289825]
[119.60719299 71.86759186]
[132.34732056 88.61909485]
[147.24334717 86.85603333]
[162.13937378 85.09297180]
[174.93446350 75.78726196]
[188.48294067 81.97500610]
[203.37896729 80.21194458]
[210.84317017 66.60806274]
[224.89230347 60.02010727]
[240.12422180 62.98126984]
[250.68191528 74.35292816]
[252.50575256 89.76244354]
[244.89442444 103.28455353]
[230.77464294 109.71971893]
[215.57574463 106.59349060]
[205.14202881 95.10797119]
[190.24600220 96.87103271]
[178.51637268 106.05062866]
[163.90243530 99.98899841]
[149.00640869 101.75205994]
[134.11038208 103.51512146]
[127.57888031 120.37841797]
[113.37719727 131.57411194]
[95.45508575 133.98849487]
[90.26332855 148.06137085]
[96.63114166 162.27716064]
[91.16548920 176.47509766]
[77.57366180 182.45822144]
[72.38190460 196.53109741]
[67.19014740 210.60395813]
[61.99839401 224.67683411]
[56.80663681 238.74969482]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 79]
[11 78]
[12 77]
[13 76]
[14 75]
[17 72]
[18 71]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[49 68]
[50 67]
[51 66]
[53 64]
[54 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
