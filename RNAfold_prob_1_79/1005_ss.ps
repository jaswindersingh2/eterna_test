%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGGCAAAGCCAACAUGAAACAUGAACAAUCAAAGAUUGAACAUCAAAGAUGAAGAGAAACUCAGUUGUCGUUCG\
) } def
/len { sequence length } bind def

/coor [
[81.30390167 291.38223267]
[87.35024261 275.54312134]
[87.35024261 260.54312134]
[87.35024261 245.54310608]
[78.94130707 236.61749268]
[78.97808838 223.95030212]
[87.99598694 214.48742676]
[88.58488464 199.49899292]
[89.17378235 184.51055908]
[89.76268005 169.52212524]
[90.35157776 154.53369141]
[79.00893402 151.24832153]
[68.62070465 145.63282776]
[59.65920258 137.94252014]
[52.53189468 128.52706909]
[47.56283569 117.81457520]
[44.97795868 106.29209137]
[44.89479446 94.48352814]
[30.30924416 90.98184204]
[15.72369576 87.48016357]
[1.13814735 83.97848511]
[-15.67483807 86.16018677]
[-22.42558098 70.60821533]
[-9.35017776 59.81608200]
[4.63982773 69.39293671]
[19.22537613 72.89461517]
[33.81092453 76.39629364]
[48.39647293 79.89797211]
[55.82604218 66.59825134]
[66.59825134 55.82604218]
[79.89797211 48.39647293]
[76.39629364 33.81092453]
[72.89461517 19.22537613]
[69.39293671 4.63982773]
[65.89125061 -9.94572067]
[56.31440353 -23.93572617]
[67.10653687 -37.01113129]
[82.65850830 -30.26038742]
[80.47679901 -13.44740105]
[83.97848511 1.13814735]
[87.48016357 15.72369576]
[90.98184204 30.30924416]
[94.48352814 44.89479446]
[109.70661926 45.47663879]
[124.19520569 50.18426895]
[136.85295105 58.66145325]
[148.25903320 48.91973495]
[159.66513062 39.17801285]
[171.07121277 29.43629265]
[179.18859863 14.55192661]
[195.73840332 18.23167992]
[196.78388977 35.15336227]
[180.81294250 40.84238052]
[169.40684509 50.58410263]
[158.00076294 60.32582474]
[146.59466553 70.06754303]
[152.07192993 81.14449310]
[154.95664978 93.16021729]
[155.10520935 105.51647186]
[169.69075012 109.01815796]
[184.27630615 112.51983643]
[201.08929443 110.33812714]
[207.84002686 125.89009857]
[194.76463318 136.68223572]
[180.77462769 127.10538483]
[166.18907166 123.60370636]
[151.60353088 120.10202789]
[140.93232727 137.30361938]
[124.79236603 149.52124023]
[105.34001160 155.12258911]
[104.75111389 170.11102295]
[104.16221619 185.09945679]
[103.57332611 200.08789062]
[102.98442841 215.07632446]
[111.97224426 231.00492859]
[102.35024261 245.54310608]
[102.35024261 260.54312134]
[102.35024261 275.54312134]
[108.39658356 291.38223267]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[7 74]
[8 73]
[9 72]
[10 71]
[11 70]
[18 28]
[19 27]
[20 26]
[21 25]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[46 56]
[47 55]
[48 54]
[49 53]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
