%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAACGAGAAGUACGAGAGUACAGACUGGACAAAAUGGCGAAAGGCAUAGUCUGGUCAACUCGAGUCAUCGUUCG\
) } def
/len { sequence length } bind def

/coor [
[56.67598343 365.09860229]
[41.37732315 367.08718872]
[27.44194221 360.46838379]
[19.31657219 347.35418701]
[19.59398651 331.92932129]
[28.18566513 319.11578369]
[42.35003281 313.00234985]
[44.69654846 298.18701172]
[47.04306793 283.37170410]
[49.38958359 268.55636597]
[51.73610306 253.74104309]
[43.35445404 247.05592346]
[38.59724808 237.35633850]
[38.44006348 226.47184753]
[42.98331070 216.48922729]
[51.41950989 209.35234070]
[62.17590714 206.48374939]
[66.24751282 192.04692078]
[58.76828766 179.21739197]
[62.69181824 164.51838684]
[76.19931793 156.76048279]
[80.27092743 142.32365417]
[84.34252930 127.88681793]
[88.41413879 113.44998932]
[82.90434265 104.78256989]
[83.11682129 94.51432037]
[88.98044586 86.08224487]
[98.53254700 82.30873108]
[103.72430420 68.23586273]
[108.91606140 54.16299057]
[114.10781860 40.09011841]
[119.29957581 26.01725006]
[124.49132538 11.94437885]
[129.68309021 -2.12849092]
[134.87484741 -16.20136070]
[129.62590027 -26.10854721]
[130.82673645 -37.03156662]
[137.81350708 -45.22238541]
[147.98066711 -48.01214981]
[154.26055908 -61.63429642]
[160.54046631 -75.25644684]
[159.29145813 -91.02827454]
[171.64643860 -99.34716034]
[169.60787964 -115.61911011]
[182.84213257 -125.30348206]
[197.73489380 -118.43782043]
[198.96580505 -102.08493042]
[185.26858521 -93.06726837]
[186.96676636 -78.26978302]
[174.16261292 -68.97654724]
[167.88270569 -55.35440063]
[161.60281372 -41.73225403]
[165.02618408 -22.86568832]
[148.94770813 -11.00960541]
[143.75595093 3.06326509]
[138.56419373 17.13613510]
[133.37243652 31.20900536]
[128.18069458 45.28187561]
[122.98892975 59.35474396]
[117.79717255 73.42761230]
[112.60542297 87.50048828]
[116.88317871 105.48567963]
[102.85096741 117.52159882]
[98.77935791 131.95843506]
[94.70775604 146.39526367]
[90.63614655 160.83209229]
[98.09968567 174.50444031]
[93.76483917 189.08743286]
[80.68434143 196.11853027]
[76.61273956 210.55535889]
[87.44644165 227.16387939]
[83.05821228 246.20018005]
[66.55142975 256.08755493]
[64.20491028 270.90289307]
[61.85839081 285.71820068]
[59.51187515 300.53353882]
[57.16535950 315.34887695]
[68.74731445 325.54013062]
[72.95888519 340.38150024]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 77]
[8 76]
[9 75]
[10 74]
[11 73]
[17 70]
[18 69]
[21 66]
[22 65]
[23 64]
[24 63]
[28 61]
[29 60]
[30 59]
[31 58]
[32 57]
[33 56]
[34 55]
[35 54]
[39 52]
[40 51]
[41 50]
[43 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
