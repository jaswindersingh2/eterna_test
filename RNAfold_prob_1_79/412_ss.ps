%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGUACUAGAUACAUGAAAACUCUAGAUUGUACGAAAGUACAAUCUAGAGCAUGUAUCUAGUACGCAUGUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[99.24047089 157.39224243]
[97.47740936 142.49621582]
[95.71434784 127.60018921]
[80.27982330 119.78009033]
[72.41293335 104.36936188]
[75.13261414 87.28188324]
[87.39517212 75.07499695]
[84.46881866 60.36321640]
[81.54246521 45.65143967]
[78.61611176 30.93965912]
[75.68975830 16.22788048]
[72.76339722 1.51610124]
[69.83704376 -13.19567776]
[66.91069031 -27.90745735]
[63.98433685 -42.61923599]
[61.05798340 -57.33101654]
[58.13162613 -72.04279327]
[55.20527267 -86.75457764]
[52.27891541 -101.46635437]
[49.35256195 -116.17813110]
[45.89730072 -119.76092529]
[44.13208389 -123.88166046]
[44.00074005 -127.87584686]
[45.21429443 -131.18121338]
[47.31284332 -133.41162109]
[46.72394943 -148.40005493]
[46.13505173 -163.38848877]
[45.54615402 -178.37692261]
[44.95725632 -193.36535645]
[44.36835861 -208.35379028]
[43.77946091 -223.34222412]
[43.19056320 -238.33067322]
[42.60166550 -253.31910706]
[42.01277161 -268.30752563]
[41.42387390 -283.29595947]
[40.83497620 -298.28439331]
[40.24607849 -313.27285767]
[31.04240799 -326.84576416]
[38.43759155 -341.48281860]
[54.82409668 -342.12664795]
[63.34489059 -328.11492920]
[55.23451233 -313.86175537]
[55.82341003 -298.87329102]
[56.41230774 -283.88485718]
[57.00120544 -268.89642334]
[57.59010315 -253.90800476]
[58.17900085 -238.91955566]
[58.76789856 -223.93112183]
[59.35679245 -208.94268799]
[59.94569016 -193.95425415]
[60.53458786 -178.96582031]
[61.12348557 -163.97738647]
[61.71238327 -148.98895264]
[62.30128098 -134.00051880]
[64.06433868 -119.10448456]
[66.99069977 -104.39270782]
[69.91705322 -89.68093109]
[72.84340668 -74.96914673]
[75.76976013 -60.25737000]
[78.69611359 -45.54558945]
[81.62246704 -30.83381271]
[84.54882812 -16.12203217]
[87.47518158 -1.41025364]
[90.40153503 13.30152512]
[93.32788849 28.01330566]
[96.25424194 42.72508240]
[99.18060303 57.43686295]
[102.10695648 72.14864349]
[113.91651917 75.78290558]
[123.00260925 84.15647125]
[127.58706665 95.63063812]
[126.77269745 107.95989227]
[120.71889496 118.73138428]
[110.61037445 125.83712769]
[112.37343597 140.73315430]
[114.13649750 155.62918091]
[124.37671661 168.43817139]
[118.15274048 183.61032104]
[101.86726379 185.53782654]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[7 68]
[8 67]
[9 66]
[10 65]
[11 64]
[12 63]
[13 62]
[14 61]
[15 60]
[16 59]
[17 58]
[18 57]
[19 56]
[20 55]
[25 54]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
