%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGCGCGCGCCAGCGGAAACGCGGCGACAGCCGGCACAGCGCCGGGACACCGGCGGCGCGCAAGGCUCGGGUUCG\
) } def
/len { sequence length } bind def

/coor [
[161.28079224 314.97348022]
[160.69189453 299.98504639]
[160.10299683 284.99661255]
[145.97859192 273.66653442]
[144.32502747 255.32171631]
[156.60462952 241.17710876]
[154.84156799 226.28108215]
[153.07850647 211.38505554]
[150.44157410 196.61865234]
[146.93989563 182.03311157]
[143.43820190 167.44755554]
[139.93652344 152.86201477]
[136.43484497 138.27645874]
[132.93316650 123.69091034]
[129.43148804 109.10536194]
[99.15608978 130.95857239]
[69.80135345 107.56735992]
[54.90532684 105.80429840]
[40.00930023 104.04124451]
[25.16370392 111.00832367]
[11.86371803 101.41445160]
[13.79123116 85.12897491]
[28.96338272 78.90499878]
[41.77236176 89.14521027]
[56.66838837 90.90827179]
[71.56441498 92.67133331]
[78.89373779 79.58389282]
[69.60732269 67.80413818]
[60.32091522 56.02438736]
[44.89702225 50.45343399]
[42.27640533 34.26503372]
[55.15493393 24.11241913]
[70.28427887 30.43973351]
[72.10066986 46.73797989]
[81.38707733 58.51773071]
[90.67349243 70.29748535]
[101.19181061 69.05287170]
[111.46250153 71.40399933]
[112.63938904 56.45024109]
[107.85440826 40.18554688]
[122.15885925 31.08505249]
[134.86357117 42.31121445]
[127.59314728 57.62712860]
[126.41625977 72.58088684]
[139.64508057 79.65184021]
[151.42483521 70.36543274]
[163.20458984 61.07902145]
[174.98434448 51.79261017]
[186.76409912 42.50620270]
[192.33505249 27.08230782]
[208.52345276 24.46169281]
[218.67605591 37.34022141]
[212.34875488 52.46956635]
[196.05050659 54.28595734]
[184.27075195 63.57236481]
[172.49099731 72.85877228]
[160.71124268 82.14518738]
[148.93148804 91.43159485]
[144.01702881 105.60368347]
[147.51872253 120.18923187]
[151.02040100 134.77478027]
[154.52207947 149.36033630]
[158.02375793 163.94587708]
[161.52543640 178.53143311]
[165.02711487 193.11697388]
[169.02275085 197.27830505]
[170.65568542 202.10127258]
[170.10163879 206.49401855]
[167.97453308 209.62199402]
[169.73759460 224.51802063]
[171.50065613 239.41404724]
[182.35734558 244.98937988]
[189.00004578 255.08262634]
[189.80993652 267.01660156]
[184.69677734 277.69543457]
[175.09143066 284.40771484]
[175.68032837 299.39614868]
[176.26922607 314.38458252]
[179.21441650 333.54119873]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[6 71]
[7 70]
[8 69]
[9 65]
[10 64]
[11 63]
[12 62]
[13 61]
[14 60]
[15 59]
[17 26]
[18 25]
[19 24]
[27 36]
[28 35]
[29 34]
[38 44]
[39 43]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
