%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGGAGGAAAAACCCAAAAGCCCGGCGAAAGACCGAAGGCAGGCGAAAGACCAAGCAAAAAGGAUACCUUCG\
) } def
/len { sequence length } bind def

/coor [
[81.94787598 258.15649414]
[72.38642120 270.10794067]
[58.36140442 276.23635864]
[43.09568024 275.13348389]
[30.09720230 267.05276489]
[22.35292435 253.85105896]
[21.64242172 238.56205750]
[28.12896538 224.69903564]
[40.32199478 215.44763184]
[55.41963959 212.93373108]
[60.05489731 198.66787720]
[64.69014740 184.40203857]
[69.32540894 170.13618469]
[73.96066284 155.87033081]
[64.34849548 150.28431702]
[55.89606094 143.06256104]
[48.87830734 134.44000244]
[43.52351761 124.69713593]
[40.00588226 114.15087891]
[38.43982697 103.14430237]
[38.87629318 92.03543854]
[41.30108643 81.18566132]
[45.63533020 70.94789886]
[51.73802948 61.65519714]
[59.41067123 53.60982895]
[68.40366364 47.07351303]
[78.42446899 42.25886917]
[74.92279053 27.67332077]
[71.42110443 13.08777237]
[67.34950256 -1.34905624]
[62.71424484 -15.61490440]
[58.07899094 -29.88075256]
[53.16453552 -44.05284119]
[40.21706009 -54.11737823]
[42.72719955 -70.32328033]
[58.11273575 -75.99930573]
[70.54634857 -65.30644226]
[67.23740387 -49.24459839]
[72.65025330 -43.91925430]
[72.34484100 -34.51600647]
[76.98009491 -20.25015831]
[81.61534882 -5.98431110]
[85.62638092 -2.96193123]
[87.61686707 2.72371602]
[86.00665283 9.58609200]
[89.50833893 24.17164040]
[93.01001740 38.75719070]
[125.80636597 44.02167130]
[151.10902405 65.54119873]
[164.47412109 58.73134613]
[177.70294189 51.66039276]
[185.61813354 37.29788208]
[202.01719666 37.24195480]
[210.03016663 51.55014420]
[201.41400146 65.50341034]
[185.03227234 64.74783325]
[180.61924744 70.92710876]
[171.28398132 72.09644318]
[157.91888428 78.90630341]
[160.30612183 87.24407959]
[161.49951172 95.83438110]
[161.47541809 104.50714874]
[160.23434448 113.09069061]
[157.80082703 121.41508484]
[154.22306824 129.31553650]
[149.57188416 136.63563538]
[143.93934631 143.23049927]
[137.43696594 148.96952820]
[130.19346619 153.73915100]
[122.35224915 157.44491577]
[114.06853485 160.01348877]
[105.50630951 161.39399719]
[96.83508301 161.55911255]
[88.22650909 160.50558472]
[83.59125519 174.77143860]
[78.95600128 189.03729248]
[74.32073975 203.30313110]
[69.68548584 217.56898499]
[80.42211151 228.47694397]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 78]
[11 77]
[12 76]
[13 75]
[14 74]
[27 47]
[28 46]
[29 45]
[30 42]
[31 41]
[32 40]
[33 38]
[49 59]
[50 58]
[51 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
