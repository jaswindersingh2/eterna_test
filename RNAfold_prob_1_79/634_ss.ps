%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGCGUACACUCUACGAAAAGCUAGCGCUAGACAAAAGUCUAGUGCUAGCCGUAGAGUGUACGCCGUGCGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[110.85131836 372.91259766]
[103.46655273 359.70956421]
[100.52517700 344.87030029]
[102.31536102 329.84863281]
[108.66171265 316.11624146]
[118.94248962 305.01846313]
[132.15048218 297.64251709]
[129.22412109 282.93075562]
[126.29776764 268.21896362]
[123.37141418 253.50718689]
[120.44506073 238.79541016]
[117.51870728 224.08363342]
[114.59234619 209.37185669]
[111.66599274 194.66007996]
[108.73963928 179.94830322]
[105.81328583 165.23651123]
[102.88693237 150.52473450]
[99.96057129 135.81295776]
[97.03421783 121.10118103]
[94.10786438 106.38940430]
[91.41748047 104.39029694]
[89.48688507 101.26562500]
[88.77456665 97.33348083]
[89.59841156 93.09193420]
[92.06814575 89.15591431]
[91.47924805 74.16748047]
[90.89035034 59.17904663]
[90.30145264 44.19060898]
[89.71256256 29.20217514]
[89.12366486 14.21373940]
[88.53476715 -0.77469599]
[87.94586945 -15.76313114]
[87.35697174 -30.75156784]
[86.76807404 -45.74000168]
[86.17917633 -60.72843933]
[85.59027863 -75.71687317]
[85.00138092 -90.70530701]
[75.79771423 -104.27824402]
[83.19289398 -118.91529846]
[99.57939911 -119.55912018]
[108.10019684 -105.54740906]
[99.98981476 -91.29420471]
[100.57871246 -76.30577087]
[101.16761017 -61.31733704]
[101.75650787 -46.32889938]
[102.34540558 -31.34046364]
[102.93430328 -16.35202789]
[103.52320099 -1.36359322]
[104.11209869 13.62484264]
[104.70099640 28.61327744]
[105.28989410 43.60171509]
[105.87879181 58.59014893]
[106.46768951 73.57858276]
[107.05658722 88.56701660]
[108.81964111 103.46304321]
[111.74600220 118.17482758]
[114.67235565 132.88661194]
[117.59870911 147.59838867]
[120.52506256 162.31016541]
[123.45141602 177.02194214]
[126.37777710 191.73371887]
[129.30412292 206.44549561]
[132.23048401 221.15728760]
[135.15684509 235.86906433]
[138.08319092 250.58084106]
[141.00955200 265.29263306]
[143.93589783 280.00439453]
[146.86225891 294.71618652]
[161.88749695 296.47616577]
[175.63262939 302.79489136]
[186.75105286 313.05334473]
[194.15351868 326.24645996]
[197.11477661 341.08178711]
[195.34472656 356.10583496]
[189.01678467 369.84671021]
[178.75088501 380.95828247]
[165.55279541 388.35189819]
[150.71551514 391.30322266]
[135.69264221 389.52310181]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 68]
[8 67]
[9 66]
[10 65]
[11 64]
[12 63]
[13 62]
[14 61]
[15 60]
[16 59]
[17 58]
[18 57]
[19 56]
[20 55]
[25 54]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
