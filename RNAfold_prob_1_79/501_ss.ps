%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGAUGAUUUAUGUACAAAAUAGAUUUAAUAUGGAAAUAUGUUAGAUUUGGUAUAUAGAUUAUUGAUUAUGUUCG\
) } def
/len { sequence length } bind def

/coor [
[82.39923096 157.99121094]
[87.39692688 143.46817017]
[98.99710083 133.40180969]
[96.07074738 118.69003296]
[84.08177185 110.55302429]
[81.25501251 96.34191895]
[89.21747589 84.23632812]
[86.29112244 69.52454376]
[83.36476898 54.81276703]
[80.43841553 40.10098648]
[77.51205444 25.38920784]
[74.58570099 10.67742920]
[71.65934753 -4.03434992]
[68.73299408 -18.74612999]
[65.80664062 -33.45790863]
[62.88028336 -48.16968918]
[59.95392990 -62.88146591]
[57.02757263 -77.59324646]
[54.10121918 -92.30502319]
[51.17486191 -107.01680756]
[47.71960068 -110.59959412]
[45.95438766 -114.72033691]
[45.82304001 -118.71451569]
[47.03659821 -122.01988220]
[49.13514709 -124.25028992]
[48.54624939 -139.23872375]
[47.95735168 -154.22715759]
[47.36845398 -169.21559143]
[46.77955627 -184.20402527]
[46.19065857 -199.19247437]
[45.60176468 -214.18090820]
[45.01286697 -229.16934204]
[44.42396927 -244.15777588]
[43.83507156 -259.14620972]
[43.24617386 -274.13464355]
[42.65727615 -289.12307739]
[42.06837845 -304.11151123]
[32.86471176 -317.68444824]
[40.25989151 -332.32150269]
[56.64639664 -332.96533203]
[65.16719055 -318.95361328]
[57.05681610 -304.70040894]
[57.64571381 -289.71197510]
[58.23460770 -274.72354126]
[58.82350540 -259.73510742]
[59.41240311 -244.74667358]
[60.00130081 -229.75823975]
[60.59019852 -214.76980591]
[61.17909622 -199.78135681]
[61.76799393 -184.79292297]
[62.35689163 -169.80448914]
[62.94578552 -154.81605530]
[63.53468323 -139.82762146]
[64.12358093 -124.83918762]
[65.88664246 -109.94316101]
[68.81299591 -95.23137665]
[71.73934937 -80.51959991]
[74.66571045 -65.80782318]
[77.59206390 -51.09604263]
[80.51841736 -36.38426208]
[83.44477081 -21.67248344]
[86.37112427 -6.96070480]
[89.29747772 7.75107431]
[92.22383881 22.46285439]
[95.15019226 37.17463303]
[98.07654572 51.88641357]
[101.00289917 66.59819031]
[103.92925262 81.30996704]
[115.91822815 89.44697571]
[118.74498749 103.65808105]
[110.78252411 115.76367188]
[113.70887756 130.47544861]
[128.27827454 135.33636475]
[138.45326233 146.84136963]
[141.49684143 161.89567566]
[136.59028625 176.44975281]
[125.05344391 186.58863831]
[109.98966980 189.58500671]
[95.45104218 184.63285828]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 72]
[4 71]
[7 68]
[8 67]
[9 66]
[10 65]
[11 64]
[12 63]
[13 62]
[14 61]
[15 60]
[16 59]
[17 58]
[18 57]
[19 56]
[20 55]
[25 54]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
