%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGACAAGUACAGAUCGUCAAAAGACAGAUCAAAACUAGACUGAAAACAGCUAGAGUACAAGUCGUAUCUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[133.71102905 307.92050171]
[130.78466797 293.20870972]
[127.85831451 278.49691772]
[114.27720642 272.43957520]
[106.77840424 259.39227295]
[108.41940308 244.25422668]
[118.77924347 232.85334778]
[115.85289001 218.14157104]
[112.92652893 203.42979431]
[100.43801117 195.39410400]
[97.26069641 180.51594543]
[105.77394867 167.47132874]
[102.84759521 152.75955200]
[99.92123413 138.04776001]
[96.99488068 123.33598328]
[81.24009705 114.20087433]
[76.72444916 96.55796051]
[63.35934830 89.74810028]
[49.99425125 82.93824768]
[36.62915421 76.12838745]
[23.13292885 69.58225250]
[9.51078129 63.30235291]
[-4.11136580 57.02245712]
[-20.38331604 59.06100464]
[-30.06768227 45.82676697]
[-23.20202065 30.93399048]
[-6.84913301 29.70309067]
[2.16853023 43.40031052]
[15.79067802 49.68020630]
[29.41282463 55.96010208]
[37.00587463 55.89822769]
[43.43901062 62.76329041]
[56.80410767 69.57315063]
[70.16920471 76.38300323]
[83.53430176 83.19286346]
[87.83004761 79.86318970]
[92.77517700 77.60801697]
[98.10582733 76.54768372]
[103.53754425 76.73876953]
[108.78050232 78.17108154]
[118.52222443 66.76499176]
[128.26394653 55.35890198]
[138.00566101 43.95281219]
[141.32196045 35.14846802]
[148.36070251 32.29989624]
[158.54272461 21.28505898]
[168.72473145 10.27022171]
[171.81427002 -5.83526802]
[187.39340210 -10.95604420]
[199.43566895 0.17570961]
[195.55300903 16.10859871]
[179.73956299 20.45223236]
[169.55755615 31.46706963]
[159.37554932 42.48190689]
[149.41175842 53.69453430]
[139.67004395 65.10062408]
[129.92831421 76.50671387]
[120.18659210 87.91280365]
[122.76633453 105.94079590]
[111.70666504 120.40962982]
[114.63301849 135.12141418]
[117.55937195 149.83319092]
[120.48572540 164.54496765]
[133.34291077 173.33874512]
[136.10107422 188.30027771]
[127.63831329 200.50343323]
[130.56466675 215.21522522]
[133.49102783 229.92700195]
[147.42518616 236.49549866]
[154.73434448 249.85324097]
[152.79934692 264.77703857]
[142.57009888 275.57058716]
[145.49644470 290.28234863]
[148.42280579 304.99414062]
[161.70118713 313.56503296]
[164.94815063 329.03216553]
[156.23735046 342.21920776]
[140.73674011 345.30245972]
[127.64254761 336.45272827]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 74]
[2 73]
[3 72]
[7 68]
[8 67]
[9 66]
[12 63]
[13 62]
[14 61]
[15 60]
[17 35]
[18 34]
[19 33]
[20 32]
[21 30]
[22 29]
[23 28]
[40 58]
[41 57]
[42 56]
[43 55]
[45 54]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
