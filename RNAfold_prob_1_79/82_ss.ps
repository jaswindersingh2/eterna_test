%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAACCCAGCAGACGAAUGUCUGGCAAGGGCGCAAAAGCGCACAUCGAAGGAUGCCGGGCCUGGGCCCUCACUUCG\
) } def
/len { sequence length } bind def

/coor [
[89.80687714 140.02490234]
[83.52697754 153.64706421]
[89.23156738 168.38589478]
[82.76705933 182.80760193]
[67.96873474 188.35604858]
[53.61618042 181.73942566]
[48.22450638 166.88327026]
[54.99250031 152.60147095]
[69.90483093 147.36715698]
[76.18472290 133.74501038]
[68.71662903 126.96746063]
[63.11368942 118.58206940]
[59.70996094 109.08878326]
[44.72152710 109.67768097]
[29.73309135 110.26657867]
[14.74465561 110.85547638]
[-0.24378008 111.44437408]
[-13.81671333 120.64804840]
[-28.45376587 113.25286102]
[-29.09759331 96.86635590]
[-15.08588123 88.34556580]
[-0.83267730 96.45594025]
[14.15575790 95.86704254]
[29.14419365 95.27814484]
[44.13262939 94.68924713]
[59.12106323 94.10034943]
[67.63986969 74.33455658]
[84.94647217 61.53853226]
[106.34104919 59.18720627]
[126.01363373 67.91910553]
[137.41972351 58.17738342]
[148.82582092 48.43566132]
[160.23190308 38.69394302]
[171.63800049 28.95222092]
[177.10675049 14.10623646]
[191.80961609 11.72402382]
[203.21571350 1.98230278]
[203.47688293 -9.22642326]
[209.86183167 -18.16995621]
[219.95997620 -21.90253067]
[230.19392395 -19.36869812]
[242.32917786 -28.18547630]
[248.94587708 -42.55662155]
[263.79031372 -43.77791595]
[270.73501587 -60.69750595]
[288.10903931 -62.14167786]
[299.88879395 -71.42808533]
[311.66854858 -80.71450043]
[323.44830322 -90.00090790]
[329.01922607 -105.42480469]
[345.20764160 -108.04541779]
[355.36026001 -95.16689301]
[349.03292847 -80.03754425]
[332.73471069 -78.22115326]
[320.95495605 -68.93474579]
[309.17520142 -59.64833450]
[297.39544678 -50.36192703]
[295.59191895 -38.23244858]
[285.62139893 -30.41915703]
[272.60711670 -31.64266205]
[266.85839844 -17.90215111]
[251.14595032 -16.05022240]
[239.01069641 -7.23344278]
[232.77897644 10.90029240]
[212.95742798 13.38839245]
[201.55134583 23.13011360]
[196.89842224 37.27930450]
[181.37971497 40.35831070]
[169.97363281 50.10002899]
[158.56753540 59.84175110]
[147.16145325 69.58347321]
[135.75535583 79.32519531]
[139.87400818 89.23167419]
[141.30223083 99.86473083]
[139.94367981 110.50691223]
[135.89001465 120.44015503]
[129.41473389 128.99424744]
[120.95476532 135.59201050]
[111.08090210 139.78826904]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[30 72]
[31 71]
[32 70]
[33 69]
[34 68]
[36 66]
[37 65]
[41 63]
[42 62]
[44 60]
[46 57]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
