%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAGCGAAAAAAAGCGAAAAAAAGCGAAAAAAAAAAAAACGCUUUUUUUCGCUUUUUUUCGCAACGCAACGUUCG\
) } def
/len { sequence length } bind def

/coor [
[58.71522903 143.28086853]
[46.61503601 134.41603088]
[40.33463287 120.79412079]
[41.45108795 105.83573151]
[49.68405533 93.29705811]
[62.96615219 86.32669830]
[77.96210480 86.67497253]
[90.90787506 94.25599670]
[87.40619659 79.67044830]
[83.90451050 65.08489990]
[80.40283203 50.49935532]
[76.90115356 35.91380310]
[73.39947510 21.32825661]
[69.89778900 6.74270725]
[66.39611053 -7.84284163]
[62.89442825 -22.42839050]
[59.39274979 -37.01393890]
[55.89106750 -51.59948730]
[52.38938904 -66.18503571]
[48.88770676 -80.77058411]
[45.38602829 -95.35613251]
[41.88434601 -109.94168091]
[38.38266754 -124.52722931]
[34.88098526 -139.11277771]
[31.37930679 -153.69833374]
[27.87762451 -168.28387451]
[24.37594414 -182.86943054]
[20.87426376 -197.45497131]
[17.37258339 -212.04052734]
[13.87090397 -226.62606812]
[-1.11063576 -229.35981750]
[-13.68137455 -237.95611572]
[-21.66335678 -250.92561340]
[-23.67365646 -266.02127075]
[-19.36397552 -280.62765503]
[-9.48099232 -292.21414185]
[4.26300573 -298.77328491]
[19.48678780 -299.16867065]
[33.55274200 -293.33181763]
[44.02385712 -282.27398682]
[49.08594894 -267.91101074]
[47.86197662 -252.73136902]
[40.56400681 -239.36502075]
[28.45645332 -230.12774658]
[31.95813370 -215.54220581]
[35.45981216 -200.95664978]
[38.96149445 -186.37110901]
[42.46317291 -171.78555298]
[45.96485519 -157.20001221]
[49.46653366 -142.61445618]
[52.96821594 -128.02891541]
[56.46989441 -113.44336700]
[59.97157669 -98.85781097]
[63.47325516 -84.27226257]
[66.97493744 -69.68671417]
[70.47661591 -55.10116959]
[73.97830200 -40.51562119]
[77.47998047 -25.93007088]
[80.98165894 -11.34452152]
[84.48333740 3.24102688]
[87.98502350 17.82657623]
[91.48670197 32.41212463]
[94.98838043 46.99767303]
[98.49005890 61.58322144]
[101.99174500 76.16876984]
[105.49342346 90.75431824]
[111.77331543 104.37646484]
[120.59009552 116.51171875]
[129.40687561 128.64697266]
[138.22364807 140.78222656]
[152.42526245 150.04240417]
[147.45835876 166.25247192]
[130.50682068 165.96708679]
[126.08840179 149.59901428]
[117.27162170 137.46376038]
[108.45484161 125.32849884]
[99.63806152 113.19324493]
[96.99605560 127.95874023]
[87.52265167 139.58863831]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 66]
[9 65]
[10 64]
[11 63]
[12 62]
[13 61]
[14 60]
[15 59]
[16 58]
[17 57]
[18 56]
[19 55]
[20 54]
[21 53]
[22 52]
[23 51]
[24 50]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[67 77]
[68 76]
[69 75]
[70 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
