%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGGUGUCGACAGUGGAAACGCGUCGAAAGGCGUCAAAAUGUGUGGAAACAUAUAGAUAUCAAACGGAGGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[142.83811951 147.45094299]
[136.98098755 161.26013184]
[126.15645599 171.64424133]
[112.11599731 176.92303467]
[97.13145447 176.24238586]
[83.62739563 169.71241760]
[73.78886414 158.38972473]
[69.20779419 144.10638428]
[70.62543488 129.17352295]
[77.81239319 116.00737000]
[89.60810089 106.73712158]
[74.65433502 105.56023407]
[59.70057678 104.38334656]
[44.74681854 103.20645905]
[29.79305840 102.02957153]
[20.72092247 104.52169800]
[14.27911282 100.50158691]
[-0.61691439 98.73852539]
[-15.51294136 96.97546387]
[-30.35853958 103.94254303]
[-43.65852356 94.34867096]
[-41.73101044 78.06319427]
[-26.55886078 71.83921814]
[-13.74987984 82.07943726]
[1.14614654 83.84249878]
[16.04217339 85.60556030]
[30.96994400 87.07581329]
[45.92370605 88.25270081]
[60.87746429 89.42958832]
[75.83122253 90.60647583]
[90.78498077 91.78336334]
[98.02324677 87.85634613]
[106.09083557 89.35915375]
[119.94902802 83.61890411]
[133.80722046 77.87864685]
[147.66542053 72.13839722]
[157.45417786 59.70896912]
[172.17356873 61.98678589]
[186.03176880 56.24653244]
[186.95770264 35.69419861]
[197.59358215 18.16242981]
[215.27717590 7.91480303]
[235.64166260 7.40708780]
[253.69398499 16.69904137]
[265.47375488 7.41263247]
[277.25350952 -1.87377679]
[289.03326416 -11.16018581]
[300.81301880 -20.44659615]
[312.59277344 -29.73300362]
[318.16372681 -45.15689850]
[334.35211182 -47.77751541]
[344.50473022 -34.89898682]
[338.17742920 -19.76963997]
[321.87918091 -17.95325089]
[310.09942627 -8.66684151]
[298.31967163 0.61956787]
[286.53991699 9.90597725]
[274.76016235 19.19238663]
[262.98040771 28.47879601]
[266.65640259 38.19606781]
[267.77154541 48.53987122]
[266.24691772 58.84584427]
[262.17340088 68.45021820]
[255.80622864 76.73258209]
[247.54911804 83.15593719]
[237.92858887 87.30152893]
[227.56037903 88.89613342]
[217.11010742 87.83005524]
[207.25048828 84.16464233]
[198.61804199 78.12880707]
[191.77201843 70.10472870]
[177.91383362 75.84497833]
[169.11630249 87.86383057]
[153.40567017 85.99658966]
[139.54747009 91.73683929]
[125.68927765 97.47709656]
[111.83108521 103.21734619]
[125.91192627 108.38743591]
[136.81642151 118.68754578]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 31]
[12 30]
[13 29]
[14 28]
[15 27]
[17 26]
[18 25]
[19 24]
[33 77]
[34 76]
[35 75]
[36 74]
[38 72]
[39 71]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
