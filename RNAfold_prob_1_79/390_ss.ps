%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAUAUAUAUAUAUAUGAAAAUAUAUAUAUAUACUAAUGUAUAUAUAUAUACAUAUAUAUAUAUAUAUAUAGUUCG\
) } def
/len { sequence length } bind def

/coor [
[94.37314606 147.82212830]
[93.78425598 132.83369446]
[93.19535828 117.84525299]
[82.62689972 107.93294525]
[82.05804443 93.45458984]
[91.81620789 82.74364471]
[91.22731018 67.75521088]
[90.63841248 52.76677322]
[90.04951477 37.77833557]
[89.46061707 22.78990173]
[88.87171936 7.80146599]
[88.28282928 -7.18696928]
[87.69393158 -22.17540550]
[87.10503387 -37.16384125]
[86.51613617 -52.15227509]
[85.92723846 -67.14070892]
[85.33834076 -82.12915039]
[84.74944305 -97.11758423]
[84.16054535 -112.10601807]
[83.57164764 -127.09445190]
[70.08358002 -134.30688477]
[62.06950760 -147.21702576]
[61.59663391 -162.30485535]
[68.69186401 -175.51521301]
[81.36145020 -183.34765625]
[80.77255249 -198.33609009]
[80.18366241 -213.32452393]
[79.59476471 -228.31295776]
[79.00586700 -243.30140686]
[78.41696930 -258.28982544]
[77.82807159 -273.27825928]
[77.23917389 -288.26669312]
[76.65027618 -303.25515747]
[76.06137848 -318.24359131]
[75.47248077 -333.23202515]
[74.88358307 -348.22045898]
[74.29468536 -363.20889282]
[65.09101868 -376.78182983]
[72.48619843 -391.41888428]
[88.87270355 -392.06271362]
[97.39350128 -378.05099487]
[89.28311920 -363.79779053]
[89.87201691 -348.80935669]
[90.46091461 -333.82092285]
[91.04981232 -318.83248901]
[91.63871002 -303.84405518]
[92.22760773 -288.85559082]
[92.81650543 -273.86715698]
[93.40540314 -258.87872314]
[93.99430084 -243.89030457]
[94.58319855 -228.90185547]
[95.17209625 -213.91342163]
[95.76099396 -198.92498779]
[96.34989166 -183.93655396]
[109.59494781 -177.12231445]
[117.70478058 -164.50935364]
[118.41713715 -149.43092346]
[111.44068909 -135.93182373]
[98.56008148 -127.68334961]
[99.14897919 -112.69491577]
[99.73787689 -97.70648193]
[100.32677460 -82.71804810]
[100.91567230 -67.72960663]
[101.50457001 -52.74117279]
[102.09346771 -37.75273895]
[102.68236542 -22.76430321]
[103.27126312 -7.77586651]
[103.86016083 7.21256876]
[104.44905853 22.20100403]
[105.03795624 37.18944168]
[105.62685394 52.17787552]
[106.21574402 67.16631317]
[106.80464172 82.15474701]
[117.37310028 92.06705475]
[117.94195557 106.54541016]
[108.18379211 117.25635529]
[108.77268982 132.24479675]
[109.36158752 147.23323059]
[112.30678558 166.38983154]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[6 73]
[7 72]
[8 71]
[9 70]
[10 69]
[11 68]
[12 67]
[13 66]
[14 65]
[15 64]
[16 63]
[17 62]
[18 61]
[19 60]
[20 59]
[25 54]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
