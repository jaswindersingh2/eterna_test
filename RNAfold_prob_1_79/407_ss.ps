%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACGGGCCGAUCCCGGGAAACCCGGGACCCGCAGGGCGGGUCGCGCAGGGCGCGAUCGGCCCGGGCCCGGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 285.87966919]
[92.50000000 270.04052734]
[92.50000000 255.04054260]
[92.50000000 240.04054260]
[81.81912994 229.72285461]
[81.60544586 214.51072693]
[92.50000000 203.37759399]
[92.50000000 188.37759399]
[92.50000000 173.37759399]
[92.50000000 158.37759399]
[92.50000000 143.37759399]
[92.50000000 128.37759399]
[81.35564423 122.66993713]
[73.60399628 112.83702087]
[70.65563965 100.66815948]
[56.07009125 97.16647339]
[41.48454285 93.66479492]
[26.89899254 90.16311646]
[12.31344318 86.66143799]
[-2.27210522 83.15975189]
[-16.85765457 79.65807343]
[-33.67063904 81.83978271]
[-40.42138290 66.28781128]
[-27.34597969 55.49567413]
[-13.35597324 65.07252502]
[1.22957516 68.57420349]
[15.81512356 72.07588196]
[30.40067291 75.57756805]
[44.98622131 79.07924652]
[59.57176971 82.58092499]
[74.15731812 86.08261108]
[78.43486023 80.08812714]
[84.06986237 75.34703827]
[90.70761108 72.15777588]
[97.93029022 70.72109222]
[105.28324890 71.12743378]
[112.30364990 73.35120392]
[118.54956818 77.25244141]
[130.68482971 68.43566132]
[142.82008362 59.61888123]
[154.95533752 50.80210495]
[161.57203674 36.43095779]
[176.41648865 35.20966339]
[188.55174255 26.39288521]
[200.68699646 17.57610512]
[212.82225037 8.75932693]
[224.95750427 -0.05745206]
[237.09275818 -8.87423038]
[249.22801208 -17.69100952]
[261.36328125 -26.50778770]
[270.62344360 -40.70938873]
[286.83352661 -35.74249649]
[286.54812622 -18.79095078]
[270.18005371 -14.37253380]
[258.04479980 -5.55575466]
[245.90954590 3.26102400]
[233.77429199 12.07780266]
[221.63902283 20.89458084]
[209.50376892 29.71136093]
[197.36851501 38.52814102]
[185.23326111 47.34491730]
[179.48455811 61.08542633]
[163.77210999 62.93735886]
[151.63685608 71.75413513]
[139.50160217 80.57091522]
[127.36634827 89.38769531]
[126.15279388 113.32551575]
[107.50000000 128.37759399]
[107.50000000 143.37759399]
[107.50000000 158.37759399]
[107.50000000 173.37759399]
[107.50000000 188.37759399]
[107.50000000 203.37759399]
[118.39455414 214.51072693]
[118.18087006 229.72285461]
[107.50000000 240.04054260]
[107.50000000 255.04054260]
[107.50000000 270.04052734]
[113.54634094 285.87966919]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[7 73]
[8 72]
[9 71]
[10 70]
[11 69]
[12 68]
[15 31]
[16 30]
[17 29]
[18 28]
[19 27]
[20 26]
[21 25]
[38 66]
[39 65]
[40 64]
[41 63]
[43 61]
[44 60]
[45 59]
[46 58]
[47 57]
[48 56]
[49 55]
[50 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
