%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAUAUUGAUUAAGAAUAUAGAAAUAUAAUUCAAAACAAUAUUAGAAAUAAAUUGAUAAUUGAUACAAGAAUUUCG\
) } def
/len { sequence length } bind def

/coor [
[203.62278748 170.41392517]
[196.02696228 167.87809753]
[189.83460999 162.69131470]
[185.93937683 155.53550720]
[184.92755127 147.38107300]
[171.30540466 141.10118103]
[157.68325806 134.82128906]
[144.06111145 128.54138184]
[130.43896484 122.26148987]
[116.81681061 115.98159790]
[103.19466400 109.70169830]
[94.90505981 109.42435455]
[89.16847992 102.89850616]
[75.80337524 96.08865356]
[60.93766785 100.74143982]
[47.48056793 93.64488220]
[43.13645935 79.44402313]
[29.77136230 72.63417053]
[16.40626526 65.82431030]
[3.04116702 59.01445389]
[-10.45505714 52.46831512]
[-24.07720566 46.18841934]
[-37.69935226 39.90852356]
[-53.97130203 41.94707108]
[-63.65567017 28.71283150]
[-56.79000854 13.82005692]
[-40.43711853 12.58915710]
[-31.41945648 26.28637505]
[-17.79730797 32.56627274]
[-4.17516136 38.84616852]
[3.41788912 38.78429413]
[9.85102463 45.64935684]
[23.21612167 52.45921326]
[36.58121872 59.26906967]
[49.94631958 66.07892609]
[63.98845291 61.24633026]
[77.63957214 67.96210480]
[82.61323547 82.72355652]
[95.97833252 89.53340912]
[109.47455597 96.07955170]
[123.09670258 102.35944366]
[136.71885681 108.63934326]
[150.34100342 114.91923523]
[163.96315002 121.19913483]
[177.58529663 127.47903442]
[191.20744324 133.75892639]
[213.79000854 128.91409302]
[227.62779236 146.53335571]
[242.21334839 150.03503418]
[256.79888916 153.53671265]
[271.38442993 157.03839111]
[285.97000122 160.54006958]
[296.71200562 152.15402222]
[310.13137817 151.58146667]
[321.21978760 158.80790710]
[325.97131348 170.95046997]
[340.40814209 175.02207947]
[354.84497070 179.09368896]
[365.79043579 168.31906128]
[380.66079712 164.47624207]
[395.45605469 168.59890747]
[406.19628906 179.57809448]
[409.99249268 194.46044922]
[405.82348633 209.24269104]
[394.81066895 219.94848633]
[379.91650391 223.69801331]
[365.14739990 219.48266602]
[354.47616577 208.43637085]
[350.77334595 193.53051758]
[336.33651733 189.45890808]
[321.89968872 185.38729858]
[307.73562622 194.22737122]
[291.20477295 190.13249207]
[282.46832275 175.12562561]
[267.88275146 171.62394714]
[253.29721069 168.12226868]
[238.71165466 164.62057495]
[224.12611389 161.11889648]
[218.70912170 166.72952271]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 46]
[6 45]
[7 44]
[8 43]
[9 42]
[10 41]
[11 40]
[13 39]
[14 38]
[17 35]
[18 34]
[19 33]
[20 32]
[21 30]
[22 29]
[23 28]
[48 78]
[49 77]
[50 76]
[51 75]
[52 74]
[56 71]
[57 70]
[58 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
