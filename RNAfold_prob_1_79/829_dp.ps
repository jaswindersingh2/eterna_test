%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:12 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (829)
} def

/sequence { (\
GGAAAACGCAGCGCGACGGGCAGCCCGCGCAGCGCGAAAAGACGCGCGACGGGCGCCCGCGACGCGCAGGGCGCGUUCG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 7 0.014563634 ubox
1 9 0.007240785 ubox
1 12 0.004215206 ubox
1 74 0.009796548 ubox
1 77 0.005128309 ubox
1 78 0.168473904 ubox
2 7 0.005366231 ubox
2 9 0.004226487 ubox
2 72 0.003812010 ubox
2 74 0.011915577 ubox
2 76 0.007576891 ubox
2 77 0.158952721 ubox
2 78 0.959793247 ubox
3 76 0.147407402 ubox
3 77 0.960441679 ubox
4 76 0.947478658 ubox
4 77 0.021237937 ubox
5 76 0.023327883 ubox
5 77 0.144851780 ubox
6 76 0.176385699 ubox
6 77 0.004378276 ubox
7 13 0.008531390 ubox
7 15 0.064222708 ubox
7 69 0.008601211 ubox
7 70 0.011137021 ubox
7 71 0.059918896 ubox
7 73 0.972767682 ubox
7 75 0.183774393 ubox
7 79 0.004993500 ubox
8 12 0.008149805 ubox
8 14 0.066209139 ubox
8 67 0.015741598 ubox
8 72 0.977381127 ubox
8 74 0.183382968 ubox
8 78 0.005142133 ubox
9 13 0.065739163 ubox
9 66 0.015764780 ubox
9 69 0.065392655 ubox
9 70 0.120417309 ubox
9 71 0.969688976 ubox
9 73 0.182353834 ubox
10 77 0.004568332 ubox
11 65 0.063656720 ubox
11 67 0.993128293 ubox
11 72 0.014090348 ubox
11 76 0.004659616 ubox
12 61 0.008024636 ubox
12 64 0.063845363 ubox
12 66 0.994781767 ubox
12 70 0.004253145 ubox
12 71 0.013152230 ubox
12 75 0.004663310 ubox
13 60 0.008891541 ubox
13 63 0.064000666 ubox
13 65 0.994870051 ubox
13 67 0.006217333 ubox
13 74 0.004309278 ubox
14 59 0.008256289 ubox
14 61 0.073842551 ubox
14 64 0.994623483 ubox
14 66 0.006210547 ubox
14 69 0.004814035 ubox
14 73 0.003945980 ubox
15 58 0.003598472 ubox
15 60 0.090325128 ubox
15 63 0.991072201 ubox
15 65 0.006101526 ubox
15 72 0.003473050 ubox
17 59 0.995774551 ubox
17 61 0.058634660 ubox
18 58 0.999448117 ubox
18 60 0.031554879 ubox
19 57 0.999773328 ubox
19 58 0.019993228 ubox
20 56 0.999794402 ubox
20 57 0.018687004 ubox
20 58 0.005541538 ubox
21 55 0.996572731 ubox
23 54 0.999520843 ubox
24 53 0.999958753 ubox
25 52 0.999934731 ubox
25 53 0.007957402 ubox
26 51 0.999653726 ubox
26 52 0.010341009 ubox
27 47 0.005456518 ubox
27 50 0.997254268 ubox
28 46 0.005869037 ubox
28 48 0.917878037 ubox
28 51 0.024562556 ubox
29 45 0.005853934 ubox
29 47 0.910365789 ubox
29 50 0.052324096 ubox
30 44 0.005846028 ubox
30 46 0.905903158 ubox
30 48 0.111738457 ubox
32 43 0.007743237 ubox
32 45 0.900418858 ubox
32 47 0.413318037 ubox
33 41 0.009382865 ubox
33 44 0.900811815 ubox
33 46 0.416863218 ubox
33 48 0.004414102 ubox
34 43 0.899549841 ubox
34 45 0.433841755 ubox
34 47 0.004490076 ubox
35 41 0.766785035 ubox
35 44 0.433876719 ubox
35 46 0.004498312 ubox
36 43 0.426938401 ubox
36 45 0.004526666 ubox
59 67 0.005222340 ubox
59 78 0.003855958 ubox
60 66 0.005322359 ubox
60 79 0.048494023 ubox
61 65 0.004985967 ubox
61 77 0.043831515 ubox
61 78 0.052476662 ubox
62 76 0.066453381 ubox
62 77 0.037117995 ubox
63 75 0.077252722 ubox
64 72 0.005123816 ubox
64 74 0.077359496 ubox
65 71 0.005162299 ubox
65 73 0.077363270 ubox
66 72 0.089179481 ubox
66 74 0.004871867 ubox
67 71 0.088555949 ubox
67 73 0.004880183 ubox
69 74 0.003528289 ubox
69 78 0.004607261 ubox
70 77 0.004220985 ubox
72 79 0.003883630 ubox
73 78 0.004166351 ubox
74 79 0.005460604 ubox
2 78 0.9500000 lbox
3 77 0.9500000 lbox
4 76 0.9500000 lbox
7 73 0.9500000 lbox
8 72 0.9500000 lbox
9 71 0.9500000 lbox
11 67 0.9500000 lbox
12 66 0.9500000 lbox
13 65 0.9500000 lbox
14 64 0.9500000 lbox
15 63 0.9500000 lbox
17 59 0.9500000 lbox
18 58 0.9500000 lbox
19 57 0.9500000 lbox
20 56 0.9500000 lbox
21 55 0.9500000 lbox
23 54 0.9500000 lbox
24 53 0.9500000 lbox
25 52 0.9500000 lbox
26 51 0.9500000 lbox
27 50 0.9500000 lbox
28 48 0.9500000 lbox
29 47 0.9500000 lbox
30 46 0.9500000 lbox
32 45 0.9500000 lbox
33 44 0.9500000 lbox
34 43 0.9500000 lbox
35 41 0.9500000 lbox
showpage
end
%%EOF
