%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGAGCACUCCCAAGGCAAGCCAGGUACACCAACGGCGAGACAGCUCAAGGGAUCCCACGCUGCGAAUUUCG\
) } def
/len { sequence length } bind def

/coor [
[18.42726326 230.28535461]
[8.24525166 241.30018616]
[-1.93675983 252.31503296]
[-1.49381769 267.88555908]
[-11.97673512 278.91113281]
[-26.82359123 279.23745728]
[-37.00559998 290.25228882]
[-40.09513855 306.35778809]
[-55.67428207 311.47854614]
[-67.71654510 300.34680176]
[-63.83387756 284.41390991]
[-48.02043915 280.07028198]
[-37.83842850 269.05545044]
[-38.67798233 254.22874451]
[-28.50888634 242.91308594]
[-12.95159721 242.13301086]
[-2.76958632 231.11817932]
[7.41242504 220.10333252]
[0.33243099 202.27229309]
[2.87252331 183.18119812]
[14.45737076 167.70303345]
[32.19370270 159.82421875]
[51.59260559 161.61802673]
[59.43008423 148.82843018]
[67.26756287 136.03881836]
[68.09858704 128.49113464]
[75.67219543 122.90948486]
[84.00575256 110.43744659]
[81.28199768 96.20623016]
[89.33194733 84.15863037]
[103.52220917 81.22900391]
[111.85575867 68.75695801]
[113.08939362 52.98392105]
[126.59362030 46.70019531]
[123.72035980 31.39064980]
[132.34944153 18.86093903]
[146.96244812 16.21607590]
[155.29600525 3.74403071]
[150.08769226 -10.75354195]
[154.36468506 -25.36725807]
[166.28565979 -34.55172348]
[181.15101624 -34.95072556]
[189.48457336 -47.42277145]
[197.81813049 -59.89481354]
[194.48942566 -75.34458160]
[203.13040161 -88.57746887]
[218.61450195 -91.74263000]
[231.75527954 -82.96223450]
[234.75656128 -67.44554138]
[225.83773804 -54.39831924]
[210.29017639 -51.56126022]
[201.95661926 -39.08921432]
[193.62306213 -26.61717224]
[198.94316101 -12.73068237]
[195.01977539 1.79760242]
[183.15519714 11.34146023]
[167.76805115 12.07758427]
[159.43449402 24.54962921]
[162.58312988 39.06244278]
[154.30938721 51.82958221]
[139.06565857 55.03374863]
[138.42810059 69.91470337]
[124.32780457 77.09051514]
[115.99424744 89.56255341]
[118.71800232 103.79376984]
[110.66805267 115.84136963]
[96.47779083 118.77099609]
[88.14424133 131.24304199]
[80.05716705 143.87629700]
[72.21968842 156.66590881]
[64.38220978 169.45550537]
[71.43971252 178.32258606]
[75.61282349 188.83595276]
[76.55409241 200.08642578]
[74.19498444 211.10494995]
[68.75070190 220.94610596]
[60.70061493 228.76918030]
[50.74606705 233.91004944]
[39.74929810 235.93746948]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[3 16]
[6 13]
[7 12]
[23 71]
[24 70]
[25 69]
[27 68]
[28 67]
[31 64]
[32 63]
[34 61]
[37 58]
[38 57]
[42 53]
[43 52]
[44 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
