%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGGCCAAGCCACGGAGAAACUCCAAGGAUCAAAGAUCCAAGCUCAAAGAGCAACGCAAAGCGGCCAGUUUUUCG\
) } def
/len { sequence length } bind def

/coor [
[123.79643250 280.58999634]
[123.20753479 265.60156250]
[122.61863708 250.61312866]
[122.02974701 235.62469482]
[121.44084930 220.63626099]
[120.85195160 205.64782715]
[119.67506409 190.69406128]
[117.91200256 175.79803467]
[116.14894104 160.90200806]
[114.38587952 146.00598145]
[102.89736938 147.58247375]
[91.49449158 146.36477661]
[80.83941650 142.48558044]
[71.53599548 136.23030090]
[64.09553528 128.01699829]
[58.90885162 118.36885071]
[56.22595978 107.88109589]
[56.14458084 97.18435669]
[41.55903244 93.68267822]
[26.97348404 90.18099976]
[12.38793564 86.67932129]
[-4.42505074 88.86102295]
[-11.17579269 73.30905151]
[1.89960980 62.51691818]
[15.88961601 72.09377289]
[30.47516441 75.59545135]
[45.06071472 79.09712982]
[59.64626312 82.59880829]
[65.26455688 73.08021545]
[73.08021545 65.26455688]
[82.59880829 59.64626312]
[79.09712982 45.06071472]
[75.59545135 30.47516441]
[72.09377289 15.88961601]
[68.59208679 1.30406690]
[59.01523972 -12.68593884]
[69.80737305 -25.76134109]
[85.35934448 -19.01059914]
[83.17763519 -2.19761348]
[86.67932129 12.38793564]
[90.18099976 26.97348404]
[93.68267822 41.55903244]
[97.18435669 56.14458084]
[108.21614075 56.82917023]
[118.72817993 60.24473572]
[128.05546570 66.17521667]
[139.46156311 56.43349075]
[150.86764526 46.69177246]
[162.27374268 36.95005035]
[170.39112854 22.06568527]
[186.94091797 25.74543953]
[187.98641968 42.66711807]
[172.01545715 48.35614014]
[160.60937500 58.09786224]
[149.20327759 67.83958435]
[137.79719543 77.58130646]
[143.04862976 86.85796356]
[145.99876404 97.36413574]
[146.36149597 108.52340698]
[143.99621582 119.69358826]
[158.58175659 123.19526672]
[175.39474487 121.01355743]
[182.14549255 136.56553650]
[169.07008362 147.35766602]
[155.08007812 137.78082275]
[140.49453735 134.27912903]
[129.28190613 144.24291992]
[131.04496765 159.13894653]
[132.80802917 174.03497314]
[134.57109070 188.93099976]
[138.45697021 194.81190491]
[138.55740356 200.83506775]
[135.84037781 205.05892944]
[136.42927551 220.04736328]
[137.01817322 235.03579712]
[137.60707092 250.02423096]
[138.19596863 265.01266479]
[138.78486633 280.00109863]
[141.73007202 299.15771484]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[4 75]
[5 74]
[6 73]
[7 70]
[8 69]
[9 68]
[10 67]
[18 28]
[19 27]
[20 26]
[21 25]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[46 56]
[47 55]
[48 54]
[49 53]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
