%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAGCAUCGAAAAAGAUGGACAAAGUCACUGCAGGCACUGGAAAACAGGAUCGAAAGAUCGCCGUCUGUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[59.42168427 253.95390320]
[65.46802521 238.11476135]
[65.46802521 223.11476135]
[65.46802521 208.11476135]
[57.73072433 195.38749695]
[65.46802521 181.58732605]
[65.46802521 166.58732605]
[65.46802521 151.58732605]
[65.46802521 136.58732605]
[53.50821304 127.53398895]
[39.07138443 131.60559082]
[24.63455582 135.67720032]
[10.19772816 139.74880981]
[2.69506407 153.65872192]
[-12.46965027 158.10922241]
[-26.29945946 150.45991516]
[-30.58938408 135.24899292]
[-22.79428482 121.50082397]
[-7.53885889 117.37196350]
[6.12612152 125.31197357]
[20.56295013 121.24037170]
[34.99977875 117.16876221]
[49.43660736 113.09716034]
[52.07355118 98.33075714]
[39.93829727 89.51397705]
[27.80304146 80.69719696]
[11.43496513 76.27878571]
[11.14957428 59.32723999]
[27.35964203 54.36034775]
[36.61981964 68.56194305]
[48.75507355 77.37872314]
[60.89033127 86.19550323]
[67.69878387 76.33374023]
[76.77190399 69.15614319]
[87.16452026 65.10498047]
[97.87528229 64.31361389]
[107.94186401 66.61322784]
[116.52718353 71.56733704]
[122.98898315 78.52951813]
[136.07643127 71.20020294]
[149.16386414 63.87088394]
[145.04092407 51.40646362]
[151.13491821 35.85268402]
[159.95169067 23.71742821]
[168.76846313 11.58217430]
[167.68905640 -4.42452526]
[179.62731934 -15.14167309]
[195.42526245 -12.34799004]
[202.96403503 1.81344759]
[196.46055603 16.47919846]
[180.90371704 20.39895248]
[172.08694458 32.53420639]
[163.27017212 44.66946411]
[170.34111023 57.89828110]
[185.32955933 57.30938339]
[200.31799316 56.72048569]
[215.30642700 56.13158798]
[228.87936401 46.92792130]
[243.51640320 54.32310104]
[244.16023254 70.70960999]
[230.14852905 79.23040009]
[215.89532471 71.12002563]
[200.90689087 71.70892334]
[185.91845703 72.29782104]
[170.93000793 72.88671875]
[156.49317932 76.95832062]
[143.40574646 84.28764343]
[130.31829834 91.61695862]
[130.41479492 116.90155029]
[110.78102112 136.57928467]
[80.46802521 136.58732605]
[80.46802521 151.58732605]
[80.46802521 166.58732605]
[80.46802521 181.58732605]
[88.20532227 195.38749695]
[80.46802521 208.11476135]
[80.46802521 223.11476135]
[80.46802521 238.11476135]
[86.51436615 253.95390320]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[6 74]
[7 73]
[8 72]
[9 71]
[10 23]
[11 22]
[12 21]
[13 20]
[24 32]
[25 31]
[26 30]
[39 68]
[40 67]
[41 66]
[43 53]
[44 52]
[45 51]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
