%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGUAGGUACGAAAAAGUACGCGAAACGCACUACACGCACACGAAAAGUGCAGCAAAAGCUGGCGUCGGUCCUUCG\
) } def
/len { sequence length } bind def

/coor [
[99.79557800 146.65270996]
[97.44905853 131.83738708]
[95.10253906 117.02205658]
[84.37412262 110.74786377]
[79.85595703 98.27074432]
[84.64236450 84.99523163]
[69.74633789 83.23217010]
[54.85031509 81.46910858]
[39.95428848 79.70604706]
[25.00052643 80.88293457]
[10.56369781 84.95454407]
[-3.87313032 89.02614594]
[-18.30995941 93.09775543]
[-25.81262207 107.00766754]
[-40.97733688 111.45816803]
[-54.80714798 103.80886078]
[-59.09706879 88.59793854]
[-51.30197144 74.84977722]
[-36.04654694 70.72090912]
[-22.38156509 78.66092682]
[-7.94473696 74.58931732]
[6.49209118 70.51771545]
[20.92892075 66.44610596]
[23.56586456 51.67970657]
[11.43060875 42.86293030]
[-0.70464569 34.04615021]
[-17.07272148 29.62773323]
[-17.35811234 12.67618752]
[-1.14804494 7.70929480]
[8.11213303 21.91089439]
[20.24738884 30.72767448]
[32.38264465 39.54445267]
[41.90409088 52.24707413]
[41.71734619 64.81002045]
[56.61337280 66.57308197]
[71.50939941 68.33614349]
[86.40542603 70.09920502]
[101.11721039 67.17285156]
[114.20465088 59.84352875]
[127.29209137 52.51421356]
[140.37953186 45.18489456]
[136.25657654 32.72047424]
[142.35057068 17.16669273]
[151.16734314 5.03143835]
[159.98413086 -7.10381651]
[158.90470886 -23.11051559]
[170.84298706 -33.82766342]
[186.64091492 -31.03398132]
[194.17970276 -16.87254333]
[187.67622375 -2.20679212]
[172.11938477 1.71296239]
[163.30261230 13.84821701]
[154.48582458 25.98347282]
[161.55677795 39.21229172]
[176.54521179 38.62339401]
[191.53364563 38.03449631]
[206.52207947 37.44559860]
[220.09501648 28.24193001]
[234.73207092 35.63711166]
[235.37590027 52.02361679]
[221.36418152 60.54441071]
[207.11097717 52.43403625]
[192.12254333 53.02293396]
[177.13410950 53.61182785]
[162.14567566 54.20072556]
[147.70884705 58.27233505]
[134.62139893 65.60165405]
[121.53396606 72.93096924]
[108.44652557 80.26029205]
[116.58099365 87.89189911]
[119.50341797 98.14173126]
[116.86962128 107.95733643]
[109.91786957 114.67554474]
[112.26438141 129.49085999]
[114.61090088 144.30619812]
[126.69261169 154.86137390]
[125.82914734 170.88117981]
[112.68288422 180.07656860]
[97.33850861 175.39364624]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[3 73]
[6 37]
[7 36]
[8 35]
[9 34]
[10 23]
[11 22]
[12 21]
[13 20]
[24 32]
[25 31]
[26 30]
[38 69]
[39 68]
[40 67]
[41 66]
[43 53]
[44 52]
[45 51]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
