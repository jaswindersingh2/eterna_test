%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:06 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (669)
} def

/sequence { (\
GGAAAGGCGAAGAGCAAAAAAAAAAAGCUCAAGACCAAAAAAAAAAAGGUCAACGCCAUAUAUAUAUAGCUAAAAUUCG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 8 0.011120696 ubox
1 57 0.012847323 ubox
1 59 0.008618218 ubox
1 61 0.049629502 ubox
1 63 0.040955337 ubox
1 65 0.013713085 ubox
1 67 0.004702295 ubox
1 70 0.016004207 ubox
1 71 0.036618255 ubox
1 78 0.078632669 ubox
2 8 0.003993495 ubox
2 56 0.012453721 ubox
2 57 0.003399158 ubox
2 59 0.039918219 ubox
2 61 0.063074799 ubox
2 63 0.020699698 ubox
2 65 0.006534243 ubox
2 67 0.003217688 ubox
2 70 0.038707540 ubox
2 77 0.076861918 ubox
2 78 0.110542975 ubox
3 59 0.040843658 ubox
3 61 0.043841695 ubox
3 63 0.015186601 ubox
3 65 0.005662897 ubox
3 67 0.004228685 ubox
3 71 0.003487585 ubox
3 76 0.072182856 ubox
3 77 0.109455828 ubox
4 59 0.167189192 ubox
4 61 0.040149646 ubox
4 63 0.008264154 ubox
4 65 0.004222359 ubox
4 67 0.005022004 ubox
4 71 0.003679022 ubox
4 76 0.096064130 ubox
4 77 0.009608909 ubox
5 59 0.112808705 ubox
5 61 0.022234958 ubox
5 63 0.011745818 ubox
5 65 0.007815093 ubox
5 67 0.015817776 ubox
5 71 0.008275650 ubox
5 76 0.011591573 ubox
5 77 0.003243544 ubox
6 36 0.010268415 ubox
6 57 0.995420041 ubox
6 70 0.005101016 ubox
6 71 0.041324483 ubox
6 78 0.004739975 ubox
7 15 0.004961417 ubox
7 35 0.010272810 ubox
7 56 0.996495095 ubox
7 70 0.042860719 ubox
7 77 0.003591153 ubox
8 14 0.004972960 ubox
8 33 0.008391046 ubox
8 55 0.996458189 ubox
8 69 0.042858315 ubox
8 79 0.049841468 ubox
9 54 0.977607687 ubox
9 78 0.054225531 ubox
10 67 0.006132436 ubox
10 77 0.053532586 ubox
11 67 0.003450367 ubox
11 76 0.046575301 ubox
12 30 0.998565032 ubox
12 51 0.004293222 ubox
13 29 0.999649195 ubox
13 50 0.004060020 ubox
14 28 0.999935565 ubox
14 70 0.003392131 ubox
15 27 0.999187915 ubox
15 48 0.003916986 ubox
15 69 0.003387884 ubox
27 56 0.003936055 ubox
28 55 0.003948904 ubox
33 51 0.998511070 ubox
34 50 0.999617593 ubox
35 49 0.999880247 ubox
36 48 0.999133211 ubox
48 57 0.011627123 ubox
49 56 0.011634720 ubox
50 55 0.010982133 ubox
53 71 0.007861736 ubox
55 70 0.065312886 ubox
56 69 0.065276871 ubox
57 69 0.005128331 ubox
58 63 0.015312255 ubox
58 65 0.047634919 ubox
58 67 0.133430495 ubox
58 71 0.014471368 ubox
58 76 0.017896752 ubox
58 77 0.010228267 ubox
59 64 0.046679668 ubox
59 66 0.139328249 ubox
59 68 0.137646071 ubox
59 69 0.010841732 ubox
59 72 0.029670706 ubox
59 73 0.010214598 ubox
59 74 0.014779318 ubox
59 75 0.018757766 ubox
59 79 0.004946319 ubox
60 65 0.126553552 ubox
60 67 0.144658336 ubox
60 71 0.030278555 ubox
60 76 0.018042274 ubox
60 77 0.010065694 ubox
61 66 0.134831986 ubox
61 68 0.051165330 ubox
61 69 0.014879393 ubox
61 72 0.059480431 ubox
61 73 0.013047553 ubox
61 74 0.017270061 ubox
61 75 0.019114382 ubox
61 79 0.005524690 ubox
62 67 0.048763908 ubox
62 71 0.062210457 ubox
62 76 0.020499289 ubox
62 77 0.010490326 ubox
63 68 0.022156647 ubox
63 69 0.019355374 ubox
63 72 0.067269949 ubox
63 73 0.014059872 ubox
63 74 0.016602181 ubox
63 75 0.021825216 ubox
63 79 0.006616725 ubox
64 71 0.067758680 ubox
64 76 0.023148234 ubox
64 77 0.011990888 ubox
65 69 0.011097723 ubox
65 72 0.058833369 ubox
65 73 0.017397894 ubox
65 74 0.024368711 ubox
65 75 0.024665875 ubox
65 79 0.005909610 ubox
66 71 0.057588962 ubox
66 76 0.028986276 ubox
66 77 0.013357868 ubox
67 72 0.019028655 ubox
67 73 0.021870621 ubox
67 74 0.026053939 ubox
67 75 0.031238547 ubox
67 79 0.006135720 ubox
68 76 0.020620664 ubox
68 77 0.027409730 ubox
69 76 0.026931003 ubox
69 77 0.010755483 ubox
69 78 0.052937991 ubox
70 79 0.041831430 ubox
71 75 0.012244460 ubox
71 79 0.007135838 ubox
72 76 0.009573899 ubox
72 77 0.017497067 ubox
73 77 0.009884797 ubox
6 57 0.9500000 lbox
7 56 0.9500000 lbox
8 55 0.9500000 lbox
9 54 0.9500000 lbox
12 30 0.9500000 lbox
13 29 0.9500000 lbox
14 28 0.9500000 lbox
15 27 0.9500000 lbox
33 51 0.9500000 lbox
34 50 0.9500000 lbox
35 49 0.9500000 lbox
36 48 0.9500000 lbox
showpage
end
%%EOF
