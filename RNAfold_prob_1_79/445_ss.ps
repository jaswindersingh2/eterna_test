%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACACGACCUGACACAAAAGUGAAGAAAACUUCAGAAAAGUAUGCAAAAGCAUACGUCGUGAAAAAUCGGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[94.87729645 266.34466553]
[89.24919891 252.33654785]
[87.61029816 237.32933044]
[90.08221436 222.43663025]
[96.48149872 208.76361084]
[106.33329773 197.32487488]
[118.90653992 188.96926880]
[114.27128601 174.70341492]
[109.63603210 160.43756104]
[105.00077820 146.17172241]
[100.36551666 131.90586853]
[95.73026276 117.64002228]
[83.09700775 109.55294800]
[68.20098114 111.31600952]
[60.73678589 124.91989136]
[46.68764496 131.50784302]
[31.45573235 128.54667664]
[20.89803314 117.17502594]
[19.07419586 101.76551056]
[26.68552589 88.24340057]
[40.80530930 81.80824280]
[56.00419998 84.93446350]
[66.43791962 96.41998291]
[81.33394623 94.65692139]
[87.07419586 80.79872894]
[77.78778839 69.01897430]
[68.50138092 57.23922348]
[59.21496964 45.45946884]
[49.92855835 33.67971420]
[34.50466537 28.10876274]
[31.88405037 11.92035866]
[44.76257706 1.76774585]
[59.89192581 8.09506130]
[61.70831299 24.39330482]
[70.99472046 36.17306137]
[80.28113556 47.95281219]
[89.56754303 59.73256683]
[98.85395050 71.51232147]
[106.30196381 72.39385223]
[103.37579346 57.68203735]
[116.46341705 50.35304260]
[127.47787476 60.53546906]
[121.19799042 74.15691376]
[128.64601135 75.03844452]
[140.42576599 65.75203705]
[152.20550537 56.46562576]
[163.98526001 47.17921448]
[175.76501465 37.89280701]
[187.54476929 28.60639763]
[193.11572266 13.18250275]
[209.30413818 10.56188679]
[219.45674133 23.44041443]
[213.12942505 38.56975937]
[196.83117676 40.38615036]
[185.05143738 49.67256165]
[173.27168274 58.95896912]
[161.49192810 68.24537659]
[149.71217346 77.53179169]
[137.93241882 86.81819916]
[109.99611664 113.00476837]
[114.63137054 127.27061462]
[119.26662445 141.53646851]
[123.90187836 155.80230713]
[128.53713989 170.06816101]
[133.17239380 184.33401489]
[148.25566101 183.70347595]
[162.94944763 187.16687012]
[176.16339111 194.46716309]
[186.91691589 205.06265259]
[194.41203308 218.16706848]
[198.09257507 232.80798340]
[197.68539429 247.89892578]
[193.22073364 262.32006836]
[185.02989197 275.00125122]
[173.72067261 285.00146484]
[160.13230896 291.57861328]
[145.27313232 294.24462891]
[130.24581909 292.80169678]
[116.16545868 287.35684204]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[13 24]
[14 23]
[25 38]
[26 37]
[27 36]
[28 35]
[29 34]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
