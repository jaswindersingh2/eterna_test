%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAACUUUGGAUGACAUAGAUAAAGUCAUGUGAAAACUGUAGUUAAAGACAUAGACAUUGGAGGCUUAGGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[97.65499878 148.13517761]
[88.76251221 146.86378479]
[80.26045990 143.96414185]
[72.44423676 139.53700256]
[65.58541870 133.73620605]
[59.92229462 126.76326752]
[55.65163040 118.86046600]
[52.92181015 110.30237579]
[51.82767487 101.38634491]
[52.40723801 92.42214203]
[38.14138794 87.78688812]
[23.87554169 83.15163422]
[9.60969448 78.51637268]
[-5.90600681 81.61049652]
[-15.61940479 70.31894684]
[-29.88525200 65.68369293]
[-44.15110016 61.04843521]
[-58.41694641 56.41318130]
[-72.68279266 51.77792358]
[-84.56040192 61.62302399]
[-99.87788391 63.46104431]
[-113.74748993 56.70547867]
[-121.74346924 43.51200485]
[-121.31434631 28.09061050]
[-112.59704590 15.36220741]
[-98.37322998 9.38838291]
[-83.18166351 12.07536316]
[-71.86991882 22.56574249]
[-68.04753876 37.51207733]
[-53.78169250 42.14733124]
[-39.51584625 46.78258896]
[-25.24999809 51.41784286]
[-10.98414993 56.05309677]
[3.51116252 52.62742996]
[14.24494934 64.25052643]
[28.51079750 68.88578033]
[42.77664566 73.52103424]
[57.04249191 78.15629578]
[75.34833527 58.58997345]
[101.27465820 51.82458878]
[126.80695343 59.95150375]
[136.98896790 48.93666458]
[147.17097473 37.92182541]
[157.35298157 26.90698814]
[161.01239014 18.23962784]
[168.15753174 15.66959476]
[178.76412964 5.06299305]
[189.37074280 -5.54360867]
[196.29528809 -21.01897430]
[213.08277893 -18.64904594]
[215.45271301 -1.86155725]
[199.97734070 5.06299305]
[189.37074280 15.66959476]
[178.76412964 26.27619553]
[168.36782837 37.08900070]
[158.18582153 48.10383606]
[148.00379944 59.11867523]
[137.82179260 70.13351440]
[143.04904175 78.33724976]
[146.52235413 87.42359161]
[148.10018921 97.02233124]
[147.71829224 106.74238586]
[145.39219666 116.18774414]
[141.21670532 124.97356415]
[135.36190796 132.74188232]
[144.64831543 144.52163696]
[153.93472290 156.30139160]
[163.22113037 168.08114624]
[172.50753784 179.86090088]
[187.93142700 185.43185425]
[190.55204773 201.62025452]
[177.67352295 211.77287292]
[162.54417419 205.44555664]
[160.72778320 189.14730835]
[151.44137573 177.36755371]
[142.15496826 165.58779907]
[132.86856079 153.80804443]
[123.58214569 142.02828979]
[115.37261200 145.67469788]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 38]
[11 37]
[12 36]
[13 35]
[15 33]
[16 32]
[17 31]
[18 30]
[19 29]
[41 58]
[42 57]
[43 56]
[44 55]
[46 54]
[47 53]
[48 52]
[65 78]
[66 77]
[67 76]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
