%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAACACGAGAAACACGAGUUAACACAGGACAAAAAGACCAGUGACUGACCAGAAAACAGGACAGCUAGUGAUUCG\
) } def
/len { sequence length } bind def

/coor [
[43.05788803 219.71008301]
[42.56166077 234.81787109]
[37.63280869 249.10765076]
[28.70960045 261.30880737]
[16.58548355 270.33636475]
[2.33852363 275.38766479]
[-12.76444721 276.01351929]
[-27.38048363 272.15826416]
[-40.20993805 264.16473389]
[-50.11202240 252.74369812]
[-56.20625305 238.91070557]
[-57.95073318 223.89578247]
[-55.19034195 209.03402710]
[-48.17053986 195.64695740]
[-37.51551437 184.92492676]
[-24.17270660 177.82133484]
[-9.32855129 174.96784973]
[5.69702196 176.61816406]
[19.56794739 182.62556458]
[29.30966949 171.21948242]
[39.05138779 159.81338501]
[48.79310989 148.40730286]
[58.53483200 137.00120544]
[68.27655029 125.59511566]
[78.01827240 114.18902588]
[74.55947113 93.89227295]
[86.85581970 77.37799072]
[83.35414124 62.79243851]
[79.85246277 48.20689011]
[69.10735321 36.59425354]
[73.65975189 22.41240120]
[70.15807343 7.82685232]
[59.41296768 -3.78578329]
[63.96536255 -17.96763611]
[51.09274673 -27.54236031]
[50.69665146 -43.58052444]
[63.08092499 -53.77901840]
[78.74541473 -50.31443405]
[85.67366028 -35.84450150]
[78.55091095 -21.46931648]
[89.04555511 -10.89993763]
[84.74362183 4.32517195]
[88.24530029 18.91072083]
[98.73994446 29.48010063]
[94.43801117 44.70520782]
[97.93968964 59.29076004]
[101.44136810 73.87630463]
[114.95993042 78.53548431]
[124.01013947 89.60586548]
[138.90617371 87.84280396]
[153.80220032 86.07974243]
[166.59729004 76.77403259]
[180.14576721 82.96177673]
[195.04179382 81.19871521]
[202.50598145 67.59483337]
[216.55513000 61.00687790]
[231.78703308 63.96804047]
[242.34474182 75.33969879]
[244.16856384 90.74921417]
[236.55723572 104.27132416]
[222.43745422 110.70648956]
[207.23857117 107.58026123]
[196.80485535 96.09474182]
[181.90882874 97.85780334]
[170.17919922 107.03739929]
[155.56526184 100.97576904]
[140.66921997 102.73883057]
[125.77320099 104.50189209]
[122.49787903 113.35552979]
[116.29368591 120.47048187]
[107.96829987 124.92049408]
[98.60556030 126.12624359]
[89.42436218 123.93074799]
[79.68264008 135.33683777]
[69.94091797 146.74293518]
[60.19919968 158.14901733]
[50.45747757 169.55511475]
[40.71575928 180.96119690]
[30.97403717 192.36727905]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 79]
[20 78]
[21 77]
[22 76]
[23 75]
[24 74]
[25 73]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[34 40]
[49 68]
[50 67]
[51 66]
[53 64]
[54 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
