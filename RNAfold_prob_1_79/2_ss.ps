%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGGCAUGCGUACAGACUCCGUGUAUGACUCUGAGUUCAGAGUCAUACACUCUGUACGCAUGCCACGUUUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[103.00365448 183.84834290]
[101.24059296 168.95231628]
[99.47753906 154.05628967]
[97.71447754 139.16026306]
[95.95141602 124.26424408]
[93.89622498 109.40570068]
[91.25928497 94.63930511]
[88.33293152 79.92752075]
[85.40657806 65.21574402]
[82.48021698 50.50396729]
[79.55386353 35.79218674]
[76.62751007 21.08040810]
[73.70115662 6.36862850]
[70.77480316 -8.34315109]
[67.84844208 -23.05492973]
[64.92208862 -37.76670837]
[61.99573517 -52.47848892]
[59.06938171 -67.19026947]
[56.14302444 -81.90204620]
[53.21667099 -96.61382294]
[49.76140976 -100.19661713]
[47.99619293 -104.31735992]
[47.86484909 -108.31153870]
[49.07840729 -111.61690521]
[51.17695236 -113.84731293]
[50.58805847 -128.83573914]
[49.99916077 -143.82418823]
[49.41026306 -158.81262207]
[48.82136536 -173.80105591]
[48.23246765 -188.78948975]
[47.64356995 -203.77792358]
[47.05467224 -218.76635742]
[46.46577454 -233.75479126]
[45.87688065 -248.74322510]
[45.28798294 -263.73165894]
[44.69908524 -278.72009277]
[44.11018753 -293.70852661]
[34.90651703 -307.28146362]
[42.30170059 -321.91851807]
[58.68820572 -322.56234741]
[67.20899963 -308.55062866]
[59.09862137 -294.29742432]
[59.68751907 -279.30899048]
[60.27641678 -264.32055664]
[60.86531448 -249.33212280]
[61.45421219 -234.34368896]
[62.04310989 -219.35525513]
[62.63200760 -204.36682129]
[63.22090530 -189.37838745]
[63.80979919 -174.38995361]
[64.39869690 -159.40151978]
[64.98759460 -144.41308594]
[65.57649231 -129.42463684]
[66.16539001 -114.43621063]
[67.92845154 -99.54018402]
[70.85480499 -84.82839966]
[73.78115845 -70.11662292]
[76.70751190 -55.40484238]
[79.63387299 -40.69306564]
[82.56022644 -25.98128510]
[85.48657990 -11.26950550]
[88.41293335 3.44227338]
[91.33928680 18.15405273]
[94.26564789 32.86583328]
[97.19200134 47.57761002]
[100.11835480 62.28939056]
[103.04470825 77.00116730]
[105.97106171 91.71295166]
[110.61918640 98.58239746]
[108.71155548 107.05918884]
[113.25267029 115.29888153]
[110.84744263 122.50118256]
[112.61050415 137.39720154]
[114.37356567 152.29322815]
[116.13661957 167.18925476]
[117.89968109 182.08528137]
[128.13990784 194.89427185]
[121.91592407 210.06642151]
[105.63044739 211.99392700]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[4 73]
[5 72]
[6 70]
[7 68]
[8 67]
[9 66]
[10 65]
[11 64]
[12 63]
[13 62]
[14 61]
[15 60]
[16 59]
[17 58]
[18 57]
[19 56]
[20 55]
[25 54]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
