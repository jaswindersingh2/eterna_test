%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGUGCGCUGGUAAUCCAGUGAGGCAUGGACGUUCACCAUGCCUCUGGCCUAAUGGCCUGCACCUGAGAAGUUCG\
) } def
/len { sequence length } bind def

/coor [
[62.55280304 249.70909119]
[60.40389252 234.68421936]
[63.83151627 219.89855957]
[72.37210846 207.35174561]
[84.87062836 198.74061584]
[81.36894989 184.15507507]
[77.86726379 169.56951904]
[74.36558533 154.98396301]
[70.86390686 140.39842224]
[67.36222839 125.81287384]
[54.72896576 117.72579956]
[40.01718903 120.65215302]
[25.30540848 123.57850647]
[10.59362888 126.50485992]
[-4.11814976 129.43121338]
[-16.08420563 140.64485168]
[-31.69791412 135.63044739]
[-34.89722824 119.54640961]
[-22.39097023 108.93860626]
[-7.04450464 114.71943665]
[7.66727448 111.79308319]
[22.37905312 108.86672974]
[37.09083176 105.94037628]
[51.80261230 103.01401520]
[59.88968658 90.38076019]
[56.38800812 75.79521179]
[52.88632584 61.20966339]
[49.38464737 46.62411499]
[45.88296509 32.03856659]
[42.38128281 17.45301628]
[38.87960434 2.86746716]
[35.37792206 -11.71808147]
[31.87624359 -26.30363083]
[17.80183792 -33.11869812]
[11.44806004 -47.40727615]
[15.81496906 -62.42274094]
[28.84064484 -71.07524109]
[44.37475967 -69.27934265]
[55.08258057 -57.88299942]
[55.90820312 -42.26722717]
[46.46179199 -29.80531120]
[49.96347427 -15.21976185]
[53.46515274 -0.63421333]
[56.96683502 13.95133591]
[60.46851349 28.53688431]
[63.97019577 43.12243271]
[67.47187805 57.70798111]
[70.97355652 72.29353333]
[74.47523499 86.87908173]
[98.17191315 74.58192444]
[118.14373779 87.09037018]
[132.58056641 83.01876068]
[147.01739502 78.94715118]
[161.45422363 74.87554932]
[172.50358582 62.75763702]
[188.46258545 66.53153992]
[192.91397095 82.31498718]
[181.27854919 93.87131500]
[165.52583313 89.31237793]
[151.08900452 93.38397980]
[136.65217590 97.45558929]
[122.21533966 101.52719879]
[110.18010712 123.36206055]
[81.94777679 122.31119537]
[85.44945526 136.89674377]
[88.95113373 151.48228455]
[92.45281219 166.06784058]
[95.95449829 180.65338135]
[99.45617676 195.23893738]
[114.50180817 197.23728943]
[127.80767059 204.53924561]
[137.57424927 216.15725708]
[142.48071289 230.52009583]
[141.86347961 245.68530273]
[135.80604553 259.60189819]
[125.12760925 270.38778687]
[111.27235413 276.58428955]
[96.11408997 277.35333252]
[81.70284271 272.59094238]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 69]
[6 68]
[7 67]
[8 66]
[9 65]
[10 64]
[11 24]
[12 23]
[13 22]
[14 21]
[15 20]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[51 62]
[52 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
