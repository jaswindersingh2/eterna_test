%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGUGUCAUAAAAAAAUAUGCCGAAACGGAGCACACGCACUCAAAAAGAGGUUCAAAAGAACGCGUAAUACAUUCG\
) } def
/len { sequence length } bind def

/coor [
[62.88389969 252.60879517]
[68.93024445 236.76966858]
[68.93024445 221.76966858]
[68.93024445 206.76966858]
[61.19293976 194.04238892]
[68.93024445 180.24221802]
[68.93024445 165.24221802]
[68.93024445 150.24221802]
[68.93024445 135.24221802]
[56.97043228 126.18888092]
[42.53360367 130.26048279]
[28.09677315 134.33209229]
[13.65994549 138.40370178]
[6.15728140 152.31361389]
[-9.00743389 156.76411438]
[-22.83724213 149.11480713]
[-27.12716675 133.90388489]
[-19.33206749 120.15572357]
[-4.07664204 116.02685547]
[9.58833885 123.96687317]
[24.02516747 119.89526367]
[38.46199417 115.82366180]
[52.89882278 111.75205231]
[55.53576660 96.98565674]
[43.40051270 88.16887665]
[31.26525879 79.35209656]
[14.89718151 74.93367767]
[14.61179066 57.98213577]
[30.82185936 53.01524353]
[40.08203888 67.21684265]
[52.21729279 76.03362274]
[64.35254669 84.85040283]
[72.44734955 75.45315552]
[82.66261292 69.51611328]
[93.68350220 67.36838531]
[104.21772003 68.87908936]
[113.14546204 73.50869751]
[119.63842773 80.40592194]
[132.72587585 73.07660675]
[145.81330872 65.74728394]
[158.90075684 58.41796494]
[154.77780151 45.95354462]
[160.87179565 30.39976692]
[169.68856812 18.26451111]
[178.50535583 6.12925673]
[177.42593384 -9.87744236]
[189.36421204 -20.59458923]
[205.16213989 -17.80090714]
[212.70092773 -3.63946962]
[206.19744873 11.02628136]
[190.64060974 14.94603539]
[181.82382202 27.08129120]
[173.00704956 39.21654510]
[180.07800293 52.44536591]
[195.06643677 51.85646820]
[210.05487061 51.26757050]
[225.04330444 50.67867279]
[238.61624146 41.47500229]
[253.25329590 48.87018585]
[253.89712524 65.25669098]
[239.88540649 73.77748871]
[225.63220215 65.66710663]
[210.64376831 66.25600433]
[195.65533447 66.84490204]
[180.66690063 67.43379974]
[166.23007202 71.50540924]
[153.14262390 78.83472443]
[140.05519104 86.16404724]
[126.96775055 93.49336243]
[121.15334320 125.63701630]
[83.93024445 135.24221802]
[83.93024445 150.24221802]
[83.93024445 165.24221802]
[83.93024445 180.24221802]
[91.66754150 194.04238892]
[83.93024445 206.76966858]
[83.93024445 221.76966858]
[83.93024445 236.76966858]
[89.97657776 252.60879517]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[6 74]
[7 73]
[8 72]
[9 71]
[10 23]
[11 22]
[12 21]
[13 20]
[24 32]
[25 31]
[26 30]
[38 69]
[39 68]
[40 67]
[41 66]
[43 53]
[44 52]
[45 51]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
