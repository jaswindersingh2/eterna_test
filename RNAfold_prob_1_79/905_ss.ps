%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGUUUACUGCCAAGCAAAAGUACUAAAAGGAAAGGAUAGAAAGAACAACCAAAAGGAAGCCAUUGAGUUCG\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 227.62605286]
[92.50000000 211.78691101]
[92.50000000 196.78691101]
[92.50000000 181.78691101]
[81.81912994 171.46923828]
[81.60544586 156.25711060]
[92.50000000 145.12397766]
[92.50000000 130.12397766]
[92.50000000 115.12397766]
[87.86474609 100.85813141]
[79.04796600 88.72287750]
[70.23118591 76.58762360]
[61.41440964 64.45236969]
[42.72137451 57.40576553]
[40.89506531 38.31829834]
[31.15334511 26.91221046]
[21.41162491 15.50612068]
[11.44783783 4.29349566]
[1.26582670 -6.72134209]
[-12.08232021 0.31352663]
[-26.79661369 3.65298653]
[-41.87380600 3.06934738]
[-56.28591537 -1.39759696]
[-69.05029297 -9.44328308]
[-79.29664612 -20.51914215]
[-86.32636261 -33.87000656]
[-89.66014099 -48.58558655]
[-89.07067871 -63.66255569]
[-84.59816742 -78.07293701]
[-76.54755402 -90.83420563]
[-65.46774292 -101.07627869]
[-52.11416245 -108.10083771]
[-37.39729691 -111.42893982]
[-22.32055664 -110.83365631]
[-7.91190481 -106.35558319]
[4.84625673 -98.30004120]
[15.08405304 -87.21627045]
[22.10345650 -73.85998535]
[25.42586899 -59.14183426]
[24.82476616 -44.06532669]
[20.34113121 -29.65840340]
[12.28066444 -16.90335274]
[22.46267509 -5.88851547]
[29.50141716 -3.03994608]
[32.81771469 5.76439953]
[42.55943298 17.17048836]
[52.30115509 28.57657814]
[62.84385300 28.50182343]
[71.79161835 34.48862839]
[75.91232300 44.67558670]
[73.54966736 55.63558578]
[82.36643982 67.77084351]
[91.18321991 79.90609741]
[100.00000000 92.04135132]
[105.48184967 83.51889038]
[116.03970337 78.55593872]
[129.71450806 79.34291840]
[144.70294189 79.93181610]
[158.95614624 71.82144165]
[172.96784973 80.34223938]
[172.32403564 96.72874451]
[157.68698120 104.12392426]
[144.11404419 94.92025757]
[129.12561035 94.33135986]
[123.71920776 99.52951050]
[138.12904358 103.69562531]
[141.72590637 118.25799561]
[130.91287231 128.65406799]
[116.50312042 124.48764801]
[112.90640259 109.92582703]
[107.50000000 115.12397766]
[107.50000000 130.12397766]
[107.50000000 145.12397766]
[118.39455414 156.25711060]
[118.18087006 171.46923828]
[107.50000000 181.78691101]
[107.50000000 196.78691101]
[107.50000000 211.78691101]
[113.54634094 227.62605286]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[7 73]
[8 72]
[9 71]
[10 54]
[11 53]
[12 52]
[13 51]
[15 47]
[16 46]
[17 45]
[18 43]
[19 42]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
