%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGUCGGAGCAAAGGUCGGACAAACGGAGAGGAAAACACUGCGUAGCAGUCUGGAAACUGAGUGCGACACGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[45.47808075 347.15454102]
[36.91332245 360.09381104]
[22.36702347 365.49612427]
[7.43253231 361.28414917]
[-2.14753318 349.07751465]
[-2.68944359 333.56991577]
[6.01517677 320.72430420]
[20.61922455 315.48013306]
[24.69083023 301.04330444]
[28.76243782 286.60647583]
[32.83404541 272.16964722]
[36.90565109 257.73281860]
[40.97725677 243.29598999]
[33.20425034 234.52684021]
[30.72530174 222.94943237]
[34.29874420 211.53425598]
[43.11411667 203.27059937]
[54.97237015 200.38375854]
[60.16412735 186.31089783]
[65.35588074 172.23802185]
[70.54763794 158.16514587]
[67.69369507 143.54652405]
[79.72924042 133.27732849]
[84.92099762 119.20446014]
[76.41913605 106.33488464]
[77.32717896 90.93738556]
[87.28276062 79.15630341]
[83.78107452 64.57075500]
[80.27939606 49.98521042]
[69.53429413 38.37257385]
[74.08668518 24.19071960]
[70.58500671 9.60517120]
[59.83990479 -2.00746441]
[64.39229584 -16.18931770]
[51.51968384 -25.76404190]
[51.12358856 -41.80220413]
[63.50786209 -52.00069809]
[79.17234802 -48.53611755]
[86.10060120 -34.06618500]
[78.97784424 -19.69099808]
[89.47248840 -9.12161827]
[85.17055511 6.10349083]
[88.67223358 20.68903923]
[99.16687775 31.25841904]
[94.86494446 46.48352814]
[98.36662292 61.06907654]
[101.86830902 75.65462494]
[109.03315735 77.31542206]
[115.37841034 81.03443909]
[120.32834625 86.47424316]
[134.76518250 82.40263367]
[149.20201111 78.33103180]
[163.63883972 74.25942230]
[171.14149475 60.34951401]
[186.30621338 55.89900970]
[200.13601685 63.54832077]
[204.42594910 78.75923920]
[196.63084412 92.50740051]
[181.37542725 96.63626862]
[167.71043396 88.69625092]
[153.27360535 92.76786041]
[138.83677673 96.83946228]
[124.39995575 100.91107178]
[116.57424927 117.92992401]
[98.99386597 124.39621735]
[93.80210876 138.46908569]
[96.28469849 154.09429932]
[84.62050629 163.35690308]
[79.42874908 177.42977905]
[74.23699951 191.50265503]
[69.04524231 205.57551575]
[77.68357086 222.19592285]
[71.79318237 239.64785767]
[55.41408539 247.36759949]
[51.34247971 261.80441284]
[47.27087402 276.24124146]
[43.19926453 290.67807007]
[39.12765884 305.11489868]
[35.05605316 319.55172729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 79]
[9 78]
[10 77]
[11 76]
[12 75]
[13 74]
[18 71]
[19 70]
[20 69]
[21 68]
[23 66]
[24 65]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[34 40]
[50 63]
[51 62]
[52 61]
[53 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
