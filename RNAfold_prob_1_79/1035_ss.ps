%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGCGAAACGCAAGGUCAAAGACCAAGUGACAAAGUCACAACCUGAAACAGGAAGCCAAAGGCAGCUUGACUUCG\
) } def
/len { sequence length } bind def

/coor [
[108.10787201 262.88195801]
[107.51897430 247.89352417]
[106.93007660 232.90509033]
[95.31459045 217.64903259]
[104.25806427 199.78570557]
[102.49501038 184.88967896]
[100.73194885 169.99365234]
[98.96888733 155.09762573]
[89.92657471 154.17875671]
[81.15827942 151.78611755]
[72.90251923 147.98477173]
[65.38386536 142.87814331]
[58.80685043 136.60514832]
[53.35037231 129.33639526]
[49.16286469 121.26964569]
[46.35823441 112.62431335]
[45.01277542 103.63557434]
[45.16308594 94.54793549]
[30.57753754 91.04625702]
[15.99198818 87.54457092]
[1.40643919 84.04289246]
[-15.40654659 86.22460175]
[-22.15728951 70.67263031]
[-9.08188629 59.88049316]
[4.90811968 69.45734406]
[19.49366760 72.95902252]
[34.07921600 76.46070862]
[48.66476440 79.96238708]
[56.05159760 66.75318909]
[66.75318909 56.05159760]
[79.96238708 48.66476440]
[76.46070862 34.07921600]
[72.95902252 19.49366760]
[69.45734406 4.90811968]
[65.95566559 -9.67742920]
[56.37881470 -23.66743469]
[67.17095184 -36.74283981]
[82.72292328 -29.99209595]
[80.54121399 -13.17910957]
[84.04289246 1.40643919]
[87.54457092 15.99198818]
[91.04625702 30.57753754]
[94.54793549 45.16308594]
[109.67096710 45.74795151]
[124.06457520 50.42472076]
[136.64314270 58.84064865]
[148.04922485 49.09892654]
[159.45532227 39.35720444]
[170.86140442 29.61548615]
[178.97880554 14.73111916]
[195.52859497 18.41087341]
[196.57408142 35.33255386]
[180.60313416 41.02157593]
[169.19703674 50.76329422]
[157.79095459 60.50501633]
[146.38485718 70.24673462]
[151.81913757 81.24928284]
[154.68383789 93.18161774]
[154.83691406 105.45206451]
[169.42247009 108.95374298]
[184.00801086 112.45542908]
[200.82099915 110.27371979]
[207.57174683 125.82569122]
[194.49633789 136.61782837]
[180.50633240 127.04097748]
[165.92077637 123.53929138]
[151.33523560 120.03761292]
[136.60514832 141.19314575]
[113.86491394 153.33456421]
[115.62797546 168.23059082]
[117.39103699 183.12661743]
[119.15409851 198.02264404]
[128.32870483 204.46705627]
[132.21769714 214.74470520]
[129.71099854 225.21469116]
[121.91851044 232.31619263]
[122.50740814 247.30462646]
[123.09630585 262.29306030]
[126.04151154 281.44967651]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[5 72]
[6 71]
[7 70]
[8 69]
[18 28]
[19 27]
[20 26]
[21 25]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[46 56]
[47 55]
[48 54]
[49 53]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
