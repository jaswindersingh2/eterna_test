%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAAGAUUUUAGGGAUUUUUUAGGUAAAAAAAAAAAAAAUUUAGAAGAUUUUUAAGAUUUUAAUUUUGAAUUCG\
) } def
/len { sequence length } bind def

/coor [
[96.56592560 173.65509033]
[107.31258392 162.58653259]
[103.81090546 148.00097656]
[100.30921936 133.41543579]
[96.80754089 118.82987976]
[84.50835419 111.16983795]
[81.12584686 97.08065796]
[88.60691071 84.67179871]
[85.10523224 70.08625031]
[81.60354614 55.50070190]
[78.10186768 40.91515350]
[74.60018921 26.32960320]
[71.09851074 11.74405384]
[67.59682465 -2.84149456]
[64.09514618 -17.42704391]
[60.59346771 -32.01259232]
[57.09178543 -46.59814072]
[53.59010696 -61.18368912]
[50.08842468 -75.76924133]
[46.58674622 -90.35478973]
[43.08506393 -104.94033813]
[39.58338547 -119.52588654]
[36.08170319 -134.11143494]
[32.58002472 -148.69697571]
[29.07834244 -163.28253174]
[25.57666206 -177.86808777]
[22.07498169 -192.45362854]
[18.57330132 -207.03918457]
[15.07162094 -221.62472534]
[11.56994057 -236.21028137]
[-3.41159916 -238.94401550]
[-15.98233795 -247.54032898]
[-23.96432114 -260.50982666]
[-25.97461891 -275.60546875]
[-21.66493797 -290.21185303]
[-11.78195572 -301.79833984]
[1.96204221 -308.35748291]
[17.18582535 -308.75289917]
[31.25177956 -302.91604614]
[41.72289276 -291.85821533]
[46.78498459 -277.49523926]
[45.56101608 -262.31558228]
[38.26304245 -248.94921875]
[26.15548897 -239.71195984]
[29.65716934 -225.12640381]
[33.15885162 -210.54086304]
[36.66053009 -195.95530701]
[40.16221237 -181.36976624]
[43.66389084 -166.78421021]
[47.16557312 -152.19866943]
[50.66725159 -137.61311340]
[54.16893387 -123.02756500]
[57.67061234 -108.44201660]
[61.17229462 -93.85646820]
[64.67397308 -79.27091980]
[68.17565155 -64.68537140]
[71.67733765 -50.09982300]
[75.17901611 -35.51427460]
[78.68069458 -20.92872429]
[82.18237305 -6.34317493]
[85.68405914 8.24237347]
[89.18573761 22.82792282]
[92.68741608 37.41347122]
[96.18909454 51.99901962]
[99.69078064 66.58457184]
[103.19245911 81.17012024]
[115.49164581 88.83016205]
[118.87415314 102.91934204]
[111.39308929 115.32820129]
[114.89476776 129.91375732]
[118.39645386 144.49929810]
[121.89813232 159.08485413]
[136.49848938 164.06811523]
[146.06901550 176.16806030]
[147.55580139 191.52362061]
[140.48440552 205.23487854]
[127.11128998 212.92665100]
[111.70376587 212.14450073]
[99.17832184 203.13801575]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 72]
[3 71]
[4 70]
[5 69]
[8 66]
[9 65]
[10 64]
[11 63]
[12 62]
[13 61]
[14 60]
[15 59]
[16 58]
[17 57]
[18 56]
[19 55]
[20 54]
[21 53]
[22 52]
[23 51]
[24 50]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
