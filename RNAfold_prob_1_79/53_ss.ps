%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAACACUAGAAACAAAAGUUUCCCAAGUCUCGAAAACGAGACGUCAAAAGACGACAAGGUAGUGCCUUUCGUUCG\
) } def
/len { sequence length } bind def

/coor [
[129.47776794 166.12458801]
[118.99119568 169.86224365]
[108.05556488 171.94795227]
[96.92945099 172.33236694]
[85.87594604 171.00640869]
[75.15641785 168.00143433]
[65.02433777 163.38850403]
[55.71929550 157.27668762]
[47.46131134 149.81050110]
[40.44566345 141.16650391]
[34.83823395 131.54907227]
[30.77161980 121.18563080]
[28.34198189 110.32123566]
[13.35354519 110.91013336]
[-1.63488996 111.49903107]
[-16.62332535 112.08792877]
[-31.61176109 112.67682648]
[-45.18469238 121.88049316]
[-59.82174683 114.48531342]
[-60.46557617 98.09880829]
[-46.45386124 89.57801056]
[-32.20065689 97.68839264]
[-17.21222305 97.09949493]
[-2.22378731 96.51059723]
[12.76464844 95.92169952]
[27.75308418 95.33280182]
[31.31081200 77.12654114]
[39.37834167 60.42204666]
[51.42600250 46.31605148]
[66.66279602 35.73468399]
[84.08835602 29.37267303]
[82.32529449 14.47664738]
[80.56223297 -0.41937989]
[78.79917145 -15.31540680]
[77.03610992 -30.21143341]
[75.27304840 -45.10746002]
[65.03283691 -57.91644287]
[71.25680542 -73.08859253]
[87.54228210 -75.01610565]
[97.13616180 -61.71612167]
[90.16907501 -46.87052155]
[91.93213654 -31.97449493]
[93.69519806 -17.07846832]
[95.45825958 -2.18244076]
[97.22132111 12.71358585]
[98.98438263 27.60961342]
[116.15924835 29.42891312]
[132.41450500 35.26438522]
[146.82505798 44.78393555]
[158.57081604 57.44581223]
[166.98333740 72.52942657]
[171.58386230 89.17638397]
[172.11058044 106.43930817]
[168.53350830 123.33576965]
[182.15565491 129.61566162]
[195.77780151 135.89556885]
[209.39994812 142.17546082]
[223.02209473 148.45535278]
[232.39605713 149.25727844]
[237.04827881 155.25854492]
[250.41337585 162.06840515]
[263.77847290 168.87825012]
[277.14358521 175.68811035]
[290.50866699 182.49797058]
[307.36642456 184.30145264]
[310.30010986 200.99966431]
[295.06661987 208.44120789]
[283.69882202 195.86306763]
[270.33370972 189.05320740]
[256.96862793 182.24336243]
[243.60351562 175.43350220]
[230.23841858 168.62364197]
[216.74220276 162.07749939]
[203.12005615 155.79760742]
[189.49790955 149.51771545]
[175.87576294 143.23780823]
[162.25361633 136.95791626]
[155.85128784 146.06552124]
[148.12831116 154.08386230]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[31 46]
[32 45]
[33 44]
[34 43]
[35 42]
[36 41]
[54 77]
[55 76]
[56 75]
[57 74]
[58 73]
[60 72]
[61 71]
[62 70]
[63 69]
[64 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
