%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGUAUAAGUAUGAAAAUACAGUAGAUAGAAAAUAGUGAAAAGUAUGCUAGAUACAAAUACAAAACAUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[147.21354675 376.38516235]
[139.27758789 363.58535767]
[134.27919006 349.37866211]
[132.45211792 334.42956543]
[133.88182068 319.43722534]
[138.50143433 305.10287476]
[146.09490967 292.09698486]
[156.30705261 281.02783203]
[168.66024780 272.41317749]
[162.91999817 258.55496216]
[157.17974854 244.69677734]
[151.43949890 230.83859253]
[136.98640442 221.08924866]
[139.19444275 202.93363953]
[132.91455078 189.31149292]
[126.63465881 175.68934631]
[120.35475922 162.06719971]
[114.07486725 148.44505310]
[107.79496765 134.82290649]
[93.83296967 135.14775085]
[80.81555176 130.08909607]
[70.73657990 120.42176056]
[65.13980865 107.62648010]
[64.88248444 93.66307068]
[70.00403595 80.67027283]
[79.71998596 70.63816071]
[73.97973633 56.77997208]
[61.55030441 46.99121094]
[63.82812119 32.27180862]
[58.08787155 18.41361427]
[42.88771057 15.77569199]
[31.54216003 5.32188654]
[27.67154694 -9.61203098]
[32.51096725 -24.26070213]
[44.51618195 -33.94978714]
[59.85636902 -35.58753586]
[73.63652802 -28.65135002]
[81.45946503 -15.35453892]
[80.82891083 0.05993297]
[71.94606781 12.67336273]
[77.68631744 26.53155708]
[89.70516205 35.32908630]
[87.83792877 51.03971863]
[93.57817841 64.89791107]
[109.36417389 65.56587982]
[123.31436157 72.98451233]
[132.69387817 85.69940948]
[135.66389465 101.21787262]
[131.64215088 116.49758148]
[121.41711426 128.54301453]
[127.69701385 142.16516113]
[133.97691345 155.78730774]
[140.25680542 169.40945435]
[146.53669739 183.03160095]
[152.81660461 196.65374756]
[164.76933289 201.94529724]
[169.65084839 213.63417053]
[165.29768372 225.09832764]
[171.03793335 238.95652771]
[176.77818298 252.81472778]
[182.51843262 266.67291260]
[197.34497070 264.02938843]
[212.39311218 264.63537598]
[226.95906067 268.46255493]
[240.36152649 275.33187866]
[251.97366333 284.92211914]
[261.25234985 296.78466797]
[267.76358032 310.36471558]
[271.20285034 325.02709961]
[271.40927124 340.08602905]
[268.37319946 354.83718872]
[262.23663330 368.59060669]
[253.28659058 380.70303345]
[241.94168091 390.60794067]
[228.73254395 397.84207153]
[214.27696228 402.06704712]
[199.25108337 403.08526611]
[184.35766602 400.84912109]
[170.29331970 395.46319580]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 61]
[10 60]
[11 59]
[12 58]
[14 55]
[15 54]
[16 53]
[17 52]
[18 51]
[19 50]
[26 44]
[27 43]
[29 41]
[30 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
