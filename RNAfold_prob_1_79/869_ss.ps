%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGGACGAAAAAGCCAAAAGUCGAUCGAAAGCAUCAAGACAGACGAAAGCUCAAGCAAAAACAGUGUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[101.99762726 132.48008728]
[91.70420837 131.46627808]
[82.24888611 127.27350616]
[74.58690643 120.32537842]
[69.49234009 111.32383728]
[67.47988129 101.17828369]
[52.76810074 98.25192261]
[40.63519669 109.85205841]
[24.15452385 112.01137543]
[9.73108578 104.08682251]
[2.85465527 89.31652069]
[-11.96066952 86.97000122]
[-26.81921005 84.91481781]
[-41.71523666 83.15175629]
[-56.61126328 81.38869476]
[-64.76058960 94.29417419]
[-77.70690155 102.37845612]
[-92.87970734 104.03641510]
[-107.26642609 98.93886566]
[-118.01056671 88.09791565]
[-122.97887421 73.66605377]
[-121.18489075 58.50872803]
[-112.98480225 45.63544846]
[-100.00675201 37.60220718]
[-84.82753754 36.00400925]
[-70.46100616 41.15818024]
[-59.75963974 52.04135513]
[-54.84820175 66.49266815]
[-39.95217514 68.25572968]
[-25.05614853 70.01879120]
[-17.85384941 67.61356354]
[-9.61415291 72.15467834]
[5.20117235 74.50119781]
[13.84205151 64.13258362]
[26.60376930 59.41355515]
[40.12684250 61.70235443]
[50.79327011 70.49694824]
[55.69445801 83.54014587]
[70.40623474 86.46649933]
[83.77849579 71.78990936]
[103.18962097 67.61524200]
[121.41333008 75.49662018]
[131.66537476 92.50000000]
[146.66537476 92.50000000]
[161.66537476 92.50000000]
[176.66537476 92.50000000]
[191.66537476 92.50000000]
[206.66537476 92.50000000]
[211.96980286 77.60910797]
[221.99880981 65.42492676]
[235.54656982 57.38404846]
[250.99368286 54.42660141]
[266.50091553 56.88633728]
[280.22805786 64.45308685]
[290.55239868 76.21173096]
[296.26043701 90.75286102]
[311.24887085 90.16396332]
[324.82180786 80.96029663]
[339.45886230 88.35547638]
[340.10269165 104.74198151]
[326.09097290 113.26277924]
[311.83776855 105.15240479]
[296.84933472 105.74129486]
[292.88986206 119.47129059]
[284.83911133 131.30319214]
[273.48675537 140.05256653]
[259.95370483 144.83847046]
[245.58160400 145.17218018]
[231.79963684 141.00703430]
[219.98254395 132.74444580]
[211.31343079 121.19520569]
[206.66537476 107.50000000]
[191.66537476 107.50000000]
[176.66537476 107.50000000]
[161.66537476 107.50000000]
[146.66537476 107.50000000]
[131.66537476 107.50000000]
[127.71228790 117.05800629]
[120.95950317 124.89268494]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 39]
[7 38]
[11 33]
[12 32]
[13 30]
[14 29]
[15 28]
[43 77]
[44 76]
[45 75]
[46 74]
[47 73]
[48 72]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
