%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAUCGCAGUACAGAGGAUAGCGAAGCGCGAAAGCAGCAGCAGUACCACGAGUAUGAGCACAGACGUAGAUGUUCG\
) } def
/len { sequence length } bind def

/coor [
[121.18728638 144.54119873]
[108.48628235 148.58808899]
[95.16543579 149.08612061]
[82.19770813 145.99890137]
[70.53025818 139.55192566]
[61.01527786 130.21607971]
[54.34773254 118.67325592]
[39.76218414 122.17493439]
[25.17663574 125.67661285]
[10.59108639 129.17829895]
[7.85734129 144.15983582]
[-0.73896080 156.73057556]
[-13.70845795 164.71255493]
[-28.80410576 166.72285461]
[-43.41049194 162.41317749]
[-54.99697495 152.53019714]
[-61.55612183 138.78619385]
[-61.95152283 123.56240845]
[-56.11467361 109.49645996]
[-45.05683899 99.02534485]
[-30.69386292 93.96324921]
[-15.51421261 95.18721771]
[-2.14785552 102.48519135]
[7.08940649 114.59274292]
[21.67495537 111.09106445]
[36.26050568 107.58938599]
[50.84605408 104.08770752]
[56.05233002 77.60754395]
[74.41505432 57.83092880]
[68.67480469 43.97273636]
[62.66357422 30.22991562]
[56.38367844 16.60776901]
[42.68645859 7.59010553]
[43.91735840 -8.76278210]
[58.81013107 -15.62844467]
[72.04437256 -5.94407749]
[70.00582123 10.32787323]
[76.28572083 23.95001984]
[82.09970856 28.83426285]
[82.53299713 38.23248291]
[88.27324677 52.09067917]
[97.53312683 50.73810577]
[106.88180542 51.15882111]
[115.98275757 53.33768845]
[124.50837708 57.19626999]
[132.15176392 62.59566498]
[138.63777161 69.34151459]
[143.73292542 77.19098663]
[147.25381470 85.86151886]
[149.07369995 95.04099274]
[149.12707520 104.39897919]
[147.41200256 113.59861755]
[161.03414917 119.87851715]
[174.65629578 126.15840912]
[188.27844238 132.43830872]
[201.90058899 138.71820068]
[215.52273560 144.99810791]
[229.14488220 151.27799988]
[243.81646729 146.04516602]
[257.54180908 152.60794067]
[262.44009399 166.62728882]
[276.06222534 172.90719604]
[290.80105591 167.20260620]
[305.22277832 173.66711426]
[310.77120972 188.46542358]
[304.15460205 202.81799316]
[289.29843140 208.20965576]
[275.01663208 201.44166565]
[269.78231812 186.52934265]
[256.16018677 180.24943542]
[242.31860352 185.62960815]
[228.41435242 179.45495605]
[222.86499023 164.90014648]
[209.24284363 158.62025452]
[195.62069702 152.34034729]
[181.99855042 146.06045532]
[168.37638855 139.78056335]
[154.75424194 133.50065613]
[141.13209534 127.22076416]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 27]
[8 26]
[9 25]
[10 24]
[29 41]
[30 40]
[31 38]
[32 37]
[52 79]
[53 78]
[54 77]
[55 76]
[56 75]
[57 74]
[58 73]
[61 70]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
