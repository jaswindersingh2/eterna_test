%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGAGAAACUCAAGUUGAAACAACAAGAAAGAAACUUUCAACAACAAAGUUGAAGACAAAGUCACCAAAAUUUCG\
) } def
/len { sequence length } bind def

/coor [
[115.49900055 163.68084717]
[110.30724335 149.60798645]
[101.05450439 150.65647888]
[91.76614380 149.99394226]
[82.75590515 147.64276123]
[74.32811737 143.68232727]
[66.76745605 138.24642944]
[55.36136627 147.98814392]
[43.95528030 157.72987366]
[35.83789062 172.61422729]
[19.28809547 168.93447876]
[18.24260330 152.01280212]
[34.21355820 146.32377625]
[45.61964798 136.58206177]
[57.02573776 126.84033203]
[52.28692245 117.04855347]
[49.74745560 106.47090912]
[49.52439499 95.59499359]
[34.93884659 92.09331512]
[20.35329628 88.59162903]
[5.76774740 85.08995056]
[-11.04523849 87.27165985]
[-17.79598045 71.71968842]
[-4.72057819 60.92755127]
[9.26942730 70.50440216]
[23.85497665 74.00608063]
[38.44052505 77.50776672]
[53.02607346 81.00944519]
[56.38927841 73.61214447]
[60.91624451 66.80536652]
[66.50400543 60.77197647]
[73.02088928 55.67698669]
[80.30963898 51.66305923]
[88.19114685 48.84654236]
[96.46888733 47.31416321]
[104.93379211 47.12040710]
[113.36954498 48.28575897]
[121.55808258 50.79576492]
[129.28527832 54.60103226]
[136.34649658 59.61808777]
[142.55201721 65.73117828]
[152.73402405 54.71634293]
[162.91604614 43.70150757]
[173.09805298 32.68666840]
[183.28005981 21.67183113]
[193.46206665 10.65699387]
[192.59123230 -5.12328482]
[203.19590759 -16.84150314]
[218.98451233 -17.54545212]
[230.58995056 -6.81748867]
[231.12693787 8.97767544]
[220.27687073 20.46904945]
[204.47691345 20.83900452]
[194.29490662 31.85384178]
[184.11288452 42.86867905]
[173.93087769 53.88351822]
[163.74887085 64.89835358]
[153.56684875 75.91319275]
[157.92112732 90.26729584]
[172.50666809 93.76898193]
[187.09222412 97.27066040]
[203.90521240 95.08895111]
[210.65594482 110.64092255]
[197.58055115 121.43305969]
[183.59054565 111.85620880]
[169.00498962 108.35453033]
[154.41944885 104.85284424]
[144.07357788 128.80438232]
[124.38011169 144.41622925]
[129.57186890 158.48908997]
[144.72230530 161.01100159]
[156.57180786 170.78263855]
[161.93292236 185.17547607]
[159.36354065 200.31793213]
[149.55480957 212.13674927]
[135.14521790 217.45272827]
[120.01090240 214.83589172]
[108.22289276 204.99015808]
[102.95211029 190.56398010]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[7 15]
[8 14]
[9 13]
[18 28]
[19 27]
[20 26]
[21 25]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
