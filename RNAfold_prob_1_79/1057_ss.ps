%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAUCGAACUGACCUGCGCCGCCCUGCGAGCGCCUAAGACGCGUCAAUGACCGUCGGGUCCGUUCAUGAUGUUUCG\
) } def
/len { sequence length } bind def

/coor [
[113.93130493 359.12088013]
[113.34240723 344.13244629]
[112.75350952 329.14401245]
[112.16461182 314.15557861]
[103.93360901 301.74188232]
[111.12315369 287.64859009]
[110.53425598 272.66015625]
[109.94535828 257.67172241]
[108.76847076 242.71795654]
[107.00540924 227.82192993]
[105.24234772 212.92590332]
[103.47928619 198.02987671]
[94.29969025 186.30024719]
[100.36132050 171.68630981]
[98.59825897 156.79028320]
[96.83519745 141.89425659]
[95.07213593 126.99823761]
[93.30907440 112.10221100]
[85.47159576 99.31260681]
[72.99954987 90.97904968]
[60.52750778 82.64550018]
[48.05546570 74.31194305]
[35.42220688 66.22486877]
[22.63260460 58.38739014]
[9.84300137 50.54991150]
[-6.82128286 47.42934036]
[-8.43579674 30.55244255]
[7.33460331 24.32903481]
[17.68047905 37.76031113]
[30.47008133 45.59778976]
[43.25968552 53.43526840]
[50.80737686 54.26628876]
[56.38901901 61.83990097]
[68.86106110 70.17345428]
[81.33310699 78.50700378]
[93.80515289 86.84056091]
[87.23720551 73.35493469]
[94.42702484 60.19034958]
[109.32305145 58.42724991]
[119.38748932 69.54962158]
[116.14919281 84.19596863]
[126.33119965 73.18112946]
[136.51321411 62.16629410]
[146.69522095 51.15145493]
[150.35461426 42.48409653]
[157.49977112 39.91406250]
[168.10636902 29.30746078]
[178.71296692 18.70085907]
[185.63752747 3.22549295]
[202.42501831 5.59542131]
[204.79493713 22.38290977]
[189.31958008 29.30746078]
[178.71296692 39.91406250]
[168.10636902 50.52066422]
[157.71006775 61.33346939]
[147.52804565 72.34830475]
[137.34603882 83.36314392]
[127.16403198 94.37798309]
[108.20510101 110.33914948]
[109.96816254 125.23517609]
[111.73122406 140.13119507]
[113.49428558 155.02722168]
[115.25734711 169.92324829]
[124.56304932 182.71835327]
[118.37531281 196.26681519]
[120.13837433 211.16284180]
[121.90143585 226.05886841]
[123.66449738 240.95489502]
[127.55036926 246.83580017]
[127.65081024 252.85896301]
[124.93379211 257.08282471]
[125.52268982 272.07125854]
[126.11158752 287.05969238]
[134.38471985 300.54547119]
[127.15304565 313.56668091]
[127.74194336 328.55511475]
[128.33084106 343.54354858]
[128.91973877 358.53198242]
[131.86494446 377.68859863]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[4 75]
[6 73]
[7 72]
[8 71]
[9 68]
[10 67]
[11 66]
[12 65]
[14 63]
[15 62]
[16 61]
[17 60]
[18 59]
[19 36]
[20 35]
[21 34]
[22 33]
[23 31]
[24 30]
[25 29]
[41 58]
[42 57]
[43 56]
[44 55]
[46 54]
[47 53]
[48 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
