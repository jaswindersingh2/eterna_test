%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAGGUCCGGAAGGAAACUUCCCCAGCAAGUGGAAGCACUAGAUGAAAGCAUCUGAAGGGGACCUUGGACUUUCG\
) } def
/len { sequence length } bind def

/coor [
[95.80014801 282.68896484]
[101.84648895 266.84982300]
[101.84648895 251.84983826]
[101.84648895 236.84983826]
[101.84648895 221.84983826]
[100.66960144 206.89607239]
[98.32308197 192.08074951]
[95.97657013 177.26542664]
[93.63005066 162.45010376]
[91.28353119 147.63476562]
[88.93701935 132.81944275]
[86.59049988 118.00411987]
[74.99534607 108.48822021]
[60.00690842 109.07711792]
[45.01847458 109.66601562]
[30.03003693 110.25491333]
[15.04160118 110.84381104]
[1.46866870 120.04747772]
[-13.16838455 112.65229797]
[-13.81221199 96.26579285]
[0.19950068 87.74499512]
[14.45270443 95.85537720]
[29.44113922 95.26647949]
[44.42957687 94.67758179]
[59.41801071 94.08868408]
[74.40644836 93.49978638]
[79.27730560 87.79674530]
[64.52846527 85.06330109]
[59.52119064 70.92373657]
[69.26270294 59.51747131]
[84.01158905 62.25064087]
[89.01902771 76.39065552]
[93.88988495 70.68760681]
[92.12682343 55.79158020]
[90.36376953 40.89555359]
[88.60070801 25.99952698]
[78.36048889 13.19054699]
[84.58446503 -1.98160434]
[100.86994171 -3.90911746]
[110.46381378 9.39086723]
[103.49673462 24.23646545]
[105.25979614 39.13249207]
[107.02285767 54.02851868]
[108.78591156 68.92454529]
[122.64411163 74.66479492]
[134.42385864 65.37838745]
[146.20361328 56.09197998]
[157.98336792 46.80556870]
[169.76312256 37.51916122]
[175.33407593 22.09526634]
[191.52247620 19.47465134]
[201.67509460 32.35317993]
[195.34777832 47.48252487]
[179.04953003 49.29891586]
[167.26977539 58.58532333]
[155.49002075 67.87173462]
[143.71026611 77.15814209]
[131.93051147 86.44454956]
[131.40625000 97.23906708]
[127.64403534 106.35911560]
[121.61968994 112.95623016]
[114.48722076 116.61407471]
[107.41089630 117.36682129]
[101.40582275 115.65760803]
[103.75234222 130.47293091]
[106.09886169 145.28825378]
[108.44537354 160.10357666]
[110.79189301 174.91889954]
[113.13841248 189.73423767]
[115.48492432 204.54956055]
[118.79686737 208.26524353]
[120.39894104 212.45210266]
[120.37337494 216.44836426]
[119.03098297 219.70353699]
[116.84648895 221.84983826]
[116.84648895 236.84983826]
[116.84648895 251.84983826]
[116.84648895 266.84982300]
[122.89282990 282.68896484]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[5 75]
[6 70]
[7 69]
[8 68]
[9 67]
[10 66]
[11 65]
[12 64]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[33 44]
[34 43]
[35 42]
[36 41]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
