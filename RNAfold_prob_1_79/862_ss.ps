%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGGACGAAAAAGCCAAAAGCAAAAGGAAACAUUUAAUGCAGACGAAAGAUCAAGCAAAAAGUAUAUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[24.73289299 170.97718811]
[14.79131413 174.35917664]
[4.32075024 174.44302368]
[-5.61624479 171.23919678]
[-14.01723576 165.09083557]
[-20.04102325 156.63713074]
[-34.62657166 160.13880920]
[-43.64673615 176.55513000]
[-61.43001175 181.35321045]
[-76.94847870 172.02336121]
[-91.21432495 176.65861511]
[-98.64218903 182.43278503]
[-106.13208008 181.18386841]
[-113.63474274 195.09376526]
[-128.79945374 199.54428101]
[-142.62927246 191.89495850]
[-146.91918945 176.68405151]
[-139.12409973 162.93588257]
[-123.86866760 158.80702209]
[-110.20368958 166.74703979]
[-95.84957886 162.39276123]
[-81.58373260 157.75750732]
[-78.61090851 146.42260742]
[-70.36186981 137.92938232]
[-58.88520432 134.55865479]
[-47.11666107 137.29731750]
[-38.12825394 145.55326843]
[-23.54270363 142.05157471]
[-17.68855286 122.96095276]
[-1.70849597 110.77133179]
[18.51128960 110.16375732]
[35.41095734 121.51734924]
[49.03310394 115.23744965]
[62.65525055 108.95755768]
[76.27739716 102.67765808]
[79.20233154 88.27870941]
[90.00523376 78.31967926]
[104.59406281 76.57295990]
[117.44270325 83.70019531]
[131.06484985 77.42029572]
[144.68699646 71.14040375]
[158.30914307 64.86050415]
[163.85850525 50.30569839]
[177.76275635 44.13104630]
[191.60433960 49.51120758]
[205.22648621 43.23131180]
[218.84864807 36.95141602]
[228.96073914 21.71177483]
[246.28265381 23.68485069]
[259.64776611 16.87499428]
[272.87655640 9.80404186]
[280.79177856 -4.55846977]
[297.19082642 -4.61439657]
[305.20379639 9.69379425]
[296.58761597 23.64706230]
[280.20590210 22.89148331]
[275.79287720 29.07075882]
[266.45761108 30.24009132]
[253.09251404 37.04994965]
[248.95730591 48.59450912]
[237.65406799 54.31251907]
[225.12854004 50.57356262]
[211.50639343 56.85345840]
[197.88424683 63.13335419]
[192.98596191 77.15271759]
[179.26062012 83.71547699]
[164.58905029 78.48265076]
[150.96690369 84.76255035]
[137.34474182 91.04244232]
[123.72260284 97.32234192]
[120.79766846 111.72129059]
[109.99476624 121.68032074]
[95.40593719 123.42704010]
[82.55729675 116.29980469]
[68.93515015 122.57970428]
[55.31299973 128.85960388]
[41.69085312 135.13949585]
[42.08061600 145.75419617]
[39.12103653 155.92395020]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 28]
[7 27]
[10 22]
[11 21]
[13 20]
[32 77]
[33 76]
[34 75]
[35 74]
[39 70]
[40 69]
[41 68]
[42 67]
[45 64]
[46 63]
[47 62]
[49 59]
[50 58]
[51 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
