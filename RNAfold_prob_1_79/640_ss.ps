%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCCGACCACCACUCCCACCCUUACUUUCCAUUUCCCUCCCAUAUCAACCAAAAUCAUCCCGGCGGUACCUUUCG\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 195.67753601]
[92.50000000 179.83840942]
[92.50000000 164.83840942]
[92.50000000 149.83840942]
[92.50000000 134.83840942]
[92.50000000 119.83840179]
[82.43428802 111.88520813]
[78.79531097 99.58359528]
[82.91444397 87.43433380]
[93.28463745 79.88244629]
[93.87353516 64.89400482]
[94.46242523 49.90557098]
[87.27288818 35.81227493]
[95.50389099 23.39858055]
[96.09278870 8.41014481]
[81.26612091 6.01699114]
[66.83602142 1.85408700]
[53.01294327 -4.01785994]
[39.99845123 -11.51321983]
[27.98234558 -20.52268791]
[17.13984871 -30.91487885]
[7.62908173 -42.53824615]
[-0.41126335 -55.22328568]
[-6.86393356 -68.78501129]
[-11.63483047 -83.02565765]
[-14.65437984 -97.73754120]
[-15.87854767 -112.70613861]
[-15.28948307 -127.71315002]
[-12.89577484 -142.53973389]
[-8.73233128 -156.96966553]
[-2.85986757 -170.79252625]
[4.63597870 -183.80673218]
[13.64589596 -195.82250977]
[24.03849411 -206.66461182]
[35.66221619 -216.17494202]
[48.34755707 -224.21481323]
[61.90952301 -230.66697693]
[76.15034485 -235.43734741]
[90.86234283 -238.45634460]
[105.83098602 -239.67994690]
[120.83797455 -239.09033203]
[135.66445923 -236.69606018]
[150.09425354 -232.53208923]
[163.91688538 -226.65910339]
[176.93081665 -219.16276550]
[188.94625854 -210.15240479]
[199.78796387 -199.75939941]
[209.29786682 -188.13531494]
[217.33726501 -175.44967651]
[223.78892517 -161.88746643]
[228.55874634 -147.64646912]
[231.57720947 -132.93435669]
[232.80024719 -117.96567535]
[232.21006775 -102.95870972]
[229.81524658 -88.13230896]
[225.65072632 -73.70268250]
[219.77722168 -59.88025665]
[212.28041077 -46.86660767]
[203.26959229 -34.85150909]
[192.87619019 -24.01017952]
[181.25175476 -14.50071621]
[168.56581116 -6.46179438]
[155.00335693 -0.01064560]
[140.76217651 4.75865364]
[126.04995728 7.77655268]
[111.08122253 8.99904156]
[110.49232483 23.98747826]
[117.72399139 37.00870132]
[109.45086670 50.49446869]
[108.86196899 65.48290253]
[108.27307129 80.47134399]
[119.71984863 92.19359589]
[119.39816284 108.57457733]
[107.50000000 119.83840179]
[107.50000000 134.83840942]
[107.50000000 149.83840942]
[107.50000000 164.83840942]
[107.50000000 179.83840942]
[113.54634094 195.67753601]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[5 75]
[6 74]
[10 71]
[11 70]
[12 69]
[14 67]
[15 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
