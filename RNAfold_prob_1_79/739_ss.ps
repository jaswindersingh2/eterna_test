%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCCGUGGCAAAGGCAGGGCAAGAGAGCAGGAAUACAGCACUCAGUGAUCGCGUGAGAGAGCACCAUCUACUUCG\
) } def
/len { sequence length } bind def

/coor [
[108.95227814 164.08274841]
[94.13170624 161.76962280]
[82.65917969 152.10623169]
[77.86100769 137.89434814]
[81.12834930 123.25452423]
[91.51179504 112.43262482]
[77.65359497 118.17288208]
[63.79540634 123.91313171]
[54.00664520 136.34255981]
[39.28724289 134.06474304]
[25.42905045 139.80499268]
[15.64028931 152.23442078]
[0.92088675 149.95660400]
[-11.39872932 161.60406494]
[-26.00141335 152.99024963]
[-21.76664925 136.57369995]
[-4.81936455 136.09841919]
[3.97816467 124.07956696]
[19.68879890 125.94680023]
[33.54698944 120.20655060]
[42.34452057 108.18769836]
[58.05515289 110.05493927]
[71.91334534 104.31468964]
[85.77153778 98.57443237]
[86.41865540 94.81488800]
[88.05725098 91.30062103]
[90.60195923 88.29238129]
[87.10028076 73.70683289]
[83.59860229 59.12128448]
[72.85350037 47.50864792]
[77.40589142 33.32679367]
[73.90421295 18.74124527]
[63.15910721 7.12860966]
[67.71150208 -7.05324316]
[54.83888626 -16.62796593]
[54.44279099 -32.66613007]
[66.82706451 -42.86462402]
[82.49155426 -39.40004349]
[89.41979980 -24.93010902]
[82.29705048 -10.55492401]
[92.79169464 0.01445566]
[88.48976135 15.23956490]
[91.99143982 29.82511330]
[102.48608398 40.39449310]
[98.18415070 55.61960220]
[101.68582916 70.20515442]
[105.18750763 84.79070282]
[116.20234680 94.97270966]
[131.01766968 97.31922913]
[145.83299255 99.66574860]
[160.69154358 101.72093201]
[175.58757019 103.48399353]
[190.48359680 105.24705505]
[199.64657593 103.11302185]
[205.92558289 107.38294220]
[215.16528320 105.61029053]
[221.27182007 110.12342834]
[235.98359680 113.04978180]
[250.69538879 115.97614288]
[263.69528198 106.98845673]
[279.22763062 109.90766907]
[288.07736206 123.00185394]
[284.99407959 138.50247192]
[271.80706787 147.21327209]
[256.33993530 143.96629333]
[247.76902771 130.68791199]
[233.05725098 127.76156616]
[218.34547424 124.83520508]
[203.57907104 122.19826508]
[188.72053528 120.14308167]
[173.82450867 118.38002014]
[158.92848206 116.61695862]
[151.72618103 119.02218628]
[143.48648071 114.48107147]
[128.67115784 112.13455200]
[113.85583496 109.78804016]
[126.48032379 117.88878632]
[133.07380676 131.36193848]
[131.72459412 146.30114746]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 24]
[7 23]
[8 22]
[10 20]
[11 19]
[13 17]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[34 40]
[48 76]
[49 75]
[50 74]
[51 72]
[52 71]
[53 70]
[55 69]
[57 68]
[58 67]
[59 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
