%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCGCUUCUCUCAUCAAUACACUACCUUACUAAUCUCACUCACCCACCUAUCUAAACUCUGCGCGCUCGUUUUCG\
) } def
/len { sequence length } bind def

/coor [
[89.56256104 144.48399353]
[100.30921936 133.41543579]
[96.80754089 118.82987976]
[84.50835419 111.16983795]
[81.12584686 97.08065796]
[88.60691071 84.67179871]
[85.10523224 70.08625031]
[81.60354614 55.50070190]
[78.10186768 40.91515350]
[63.20442200 42.79379272]
[48.19072723 43.02216339]
[33.24303818 41.59748459]
[18.54279900 38.53705978]
[4.26846409 33.87802887]
[-9.40669155 27.67695618]
[-22.31666374 20.00911331]
[-34.30473709 10.96758366]
[-45.22538757 0.66212088]
[-54.94605255 -10.78217506]
[-63.34872437 -23.22638321]
[-70.33140564 -36.51943970]
[-75.80933380 -50.49997711]
[-79.71601868 -64.99829102]
[-82.00402069 -79.83837891]
[-82.64557648 -94.84009552]
[-81.63289642 -109.82134247]
[-78.97827148 -124.60025024]
[-74.71393585 -138.99742126]
[-68.89163971 -152.83808899]
[-61.58206940 -165.95423889]
[-52.87395477 -178.18666077]
[-42.87300491 -189.38684082]
[-31.70062065 -199.41883850]
[-19.49242592 -208.16087341]
[-6.39661598 -215.50682068]
[7.42783785 -221.36750793]
[21.81311798 -225.67179871]
[36.58460236 -228.36743164]
[51.56297684 -229.42169189]
[66.56642151 -228.82177734]
[81.41280365 -226.57496643]
[95.92190552 -222.70855713]
[109.91759491 -217.26945496]
[123.22998047 -210.32368469]
[135.69746399 -201.95559692]
[147.16870117 -192.26672363]
[157.50442505 -181.37472534]
[166.57920837 -169.41178894]
[174.28285217 -156.52314758]
[180.52185059 -142.86526489]
[185.22048950 -128.60391235]
[188.32170105 -113.91223145]
[189.78787231 -98.96855164]
[189.60116577 -83.95427704]
[187.76388550 -69.05167389]
[184.29830933 -54.44164658]
[179.24652100 -40.30154037]
[172.66984558 -26.80300522]
[164.64810181 -14.10990238]
[155.27867126 -2.37631512]
[144.67530823 8.25532246]
[132.96670532 17.65595245]
[120.29500580 25.71145821]
[106.81402588 32.32405472]
[92.68741608 37.41347122]
[96.18909454 51.99901962]
[99.69078064 66.58457184]
[103.19245911 81.17012024]
[115.49164581 88.83016205]
[118.87415314 102.91934204]
[111.39308929 115.32820129]
[114.89476776 129.91375732]
[129.49513245 134.89701843]
[139.06565857 146.99696350]
[140.55244446 162.35250854]
[133.48104858 176.06378174]
[120.10792542 183.75555420]
[104.70040894 182.97340393]
[92.17495728 173.96691895]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 72]
[3 71]
[6 68]
[7 67]
[8 66]
[9 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
