%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGUCAAUUUCAGUACCAGAAAAUUGAGUAUAAAAUAACAUUGAAAACAGGUUGAGAAGAAGACGAAGUUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[96.65853119 142.35961914]
[86.07859802 140.14595032]
[76.39952850 135.33439636]
[68.24766541 128.23634338]
[62.15051651 119.31110382]
[58.50263214 109.13622284]
[45.01686478 117.40934753]
[31.99563789 110.17768860]
[17.00720406 110.76658630]
[2.01876783 111.35547638]
[-12.96966743 111.94437408]
[-27.95810318 112.53327179]
[-42.94653702 113.12216949]
[-57.93497467 113.71106720]
[-72.90895844 114.59413147]
[-81.84184265 127.42914581]
[-96.94845581 131.46946716]
[-111.09591675 124.80738831]
[-117.60423279 110.58853149]
[-113.40036774 95.52661133]
[-100.46926117 86.73339844]
[-84.91658783 88.36078644]
[-74.08584595 99.64037323]
[-67.49117279 95.87625885]
[-58.52387238 98.72263336]
[-43.53543472 98.13373566]
[-28.54700089 97.54483795]
[-13.55856514 96.95594025]
[1.42987049 96.36704254]
[16.41830635 95.77814484]
[31.40674210 95.18924713]
[43.82043457 86.95824432]
[57.91373444 94.14778900]
[61.17511368 82.73354340]
[67.46681976 72.66696930]
[76.29778290 64.73376465]
[86.97872925 59.55313873]
[98.67600250 57.52943039]
[110.47660828 58.82060242]
[121.45951080 63.32587433]
[131.20123291 51.91978455]
[140.94294739 40.51369476]
[150.68467712 29.10760498]
[154.00097656 20.30325890]
[161.03971863 17.45468903]
[171.22172546 6.43985176]
[181.40373230 -4.57498598]
[184.49327087 -20.68047523]
[200.07241821 -25.80125046]
[212.11466980 -14.66949749]
[208.23200989 1.26339126]
[192.41856384 5.60702562]
[182.23655701 16.62186241]
[172.05455017 27.63670158]
[162.09075928 38.84932709]
[152.34904480 50.25541687]
[142.60731506 61.66150284]
[132.86560059 73.06759644]
[142.36021423 96.66617584]
[136.67413330 121.45951080]
[148.08021545 131.20123291]
[159.48631287 140.94294739]
[170.89239502 150.68467712]
[182.29847717 160.42639160]
[193.70457458 170.16812134]
[209.09680176 167.40888977]
[222.63572693 175.23393250]
[227.92869568 189.94850159]
[222.47651672 204.60482788]
[208.85354614 212.28263855]
[193.49214172 209.35670471]
[183.64547729 197.20857239]
[183.96286011 181.57420349]
[172.55676270 171.83248901]
[161.15068054 162.09075928]
[149.74458313 152.34904480]
[138.33850098 142.60731506]
[126.93240356 132.86560059]
[117.76845551 138.59771729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 33]
[8 31]
[9 30]
[10 29]
[11 28]
[12 27]
[13 26]
[14 25]
[15 23]
[40 58]
[41 57]
[42 56]
[43 55]
[45 54]
[46 53]
[47 52]
[60 78]
[61 77]
[62 76]
[63 75]
[64 74]
[65 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
