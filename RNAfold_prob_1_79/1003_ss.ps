%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACUCAAAGAGAACAACAAAGUUGAAGAAUCAAAGAUUCAACUCCAAAGGAGAAGACAAAGUCAGAUACGUUUCG\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 222.38844299]
[92.50000000 206.54931641]
[92.50000000 191.54931641]
[92.50000000 176.54931641]
[92.50000000 161.54931641]
[74.04117584 156.30903625]
[58.06839371 145.67613220]
[46.66230392 155.41784668]
[35.25621414 165.15957642]
[27.13882637 180.04393005]
[10.58903027 176.36418152]
[9.54353905 159.44250488]
[25.51449394 153.75347900]
[36.92058182 144.01176453]
[48.32667160 134.27003479]
[41.80322266 121.39401245]
[38.43361664 107.35858154]
[38.40045547 92.92436981]
[23.81490707 89.42269135]
[9.22935867 85.92101288]
[-5.35619068 82.41932678]
[-22.16917610 84.60103607]
[-28.91991806 69.04906464]
[-15.84451580 58.25693130]
[-1.85451007 67.83377838]
[12.73103905 71.33546448]
[27.31658745 74.83714294]
[41.90213776 78.33882141]
[50.36123657 62.84408951]
[62.84408951 50.36123657]
[78.33882141 41.90213776]
[74.83714294 27.31658745]
[71.33546448 12.73103905]
[67.83377838 -1.85451007]
[64.33209991 -16.44005966]
[54.75524902 -30.43006516]
[65.54738617 -43.50546646]
[81.09935760 -36.75472641]
[78.91764832 -19.94174004]
[82.41932678 -5.35619068]
[85.92101288 9.22935867]
[89.42269135 23.81490707]
[92.92436981 38.40045547]
[110.57063293 38.90311050]
[127.36003113 44.35831451]
[141.93161011 54.32387161]
[153.33769226 44.58214951]
[164.74378967 34.84043121]
[176.14987183 25.09870911]
[184.26725769 10.21434307]
[200.81706238 13.89409733]
[201.86254883 30.81577873]
[185.89160156 36.50479889]
[174.48550415 46.24652100]
[163.07942200 55.98823929]
[151.67332458 65.72995758]
[158.19677734 78.60598755]
[161.56639099 92.64141846]
[161.59954834 107.07563019]
[176.18508911 110.57730865]
[190.77064514 114.07898712]
[207.58363342 111.89728546]
[214.33436584 127.44925690]
[201.25897217 138.24139404]
[187.26896667 128.66453552]
[172.68341064 125.16285706]
[158.09786987 121.66117859]
[154.60743713 129.36999512]
[150.09989929 136.53175354]
[144.65919495 143.01307678]
[138.38665771 148.69325256]
[131.39915466 153.46646118]
[123.82678986 157.24378967]
[115.81063843 159.95491028]
[107.50000000 161.54931641]
[107.50000000 176.54931641]
[107.50000000 191.54931641]
[107.50000000 206.54931641]
[113.54634094 222.38844299]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[5 75]
[7 15]
[8 14]
[9 13]
[18 28]
[19 27]
[20 26]
[21 25]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[46 56]
[47 55]
[48 54]
[49 53]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
