%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAGCAAAGCUAAUGUGAAACACAAAUCGUUAAAGAUGAAAUCAGAAACUGAAAGACAAAGUCAGAGAUAUUUCG\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 223.27847290]
[92.50000000 207.43934631]
[92.50000000 192.43934631]
[92.50000000 177.43934631]
[92.50000000 162.43934631]
[73.67125702 157.11146545]
[57.39160919 146.25415039]
[45.98551941 155.99588013]
[34.57942963 165.73759460]
[26.46204376 180.62196350]
[9.91224766 176.94221497]
[8.86675644 160.02052307]
[24.83771133 154.33151245]
[36.24380112 144.58978271]
[47.64989090 134.84806824]
[40.98629379 121.73255920]
[37.55202484 107.42781067]
[37.53501892 92.71659851]
[22.94947052 89.21492004]
[8.36392117 85.71324158]
[-6.22162724 82.21155548]
[-23.03461266 84.39326477]
[-29.78535652 68.84129333]
[-16.70995331 58.04915619]
[-2.71994686 67.62600708]
[11.86560154 71.12768555]
[26.45115089 74.62937164]
[41.03670120 78.13105011]
[52.99057007 58.22637939]
[71.35224152 44.01582718]
[66.16048431 29.94295502]
[60.96873093 15.87008572]
[46.51305008 9.48190880]
[40.88645554 -5.28687572]
[47.42710876 -19.67420959]
[62.25455856 -25.14434433]
[76.57193756 -18.45194435]
[81.88500214 -3.56749249]
[75.04160309 10.67832947]
[80.23336029 24.75119972]
[85.42510986 38.82406998]
[97.59640503 37.15777969]
[109.85942078 37.88950348]
[121.74620056 40.99131775]
[132.80316162 46.34486008]
[142.60838318 53.74584579]
[154.01448059 44.00412369]
[165.42056274 34.26240158]
[176.82666016 24.52068329]
[184.94404602 9.63631630]
[201.49383545 13.31607056]
[202.53933716 30.23775101]
[186.56837463 35.92677307]
[175.16229248 45.66849136]
[163.75619507 55.41021347]
[152.35011292 65.15193176]
[159.01370239 78.26744080]
[162.44796753 92.57218933]
[162.46498108 107.28340149]
[177.05053711 110.78507996]
[191.63607788 114.28675842]
[208.44906616 112.10505676]
[215.19981384 127.65702820]
[202.12440491 138.44915771]
[188.13439941 128.87231445]
[173.54884338 125.37062836]
[158.96330261 121.86894989]
[155.42381287 129.71739197]
[150.84552002 137.00883484]
[145.31425476 143.60664368]
[138.93368530 149.38714600]
[131.82337952 154.24198914]
[124.11663055 158.08020020]
[115.95786285 160.82983398]
[107.50000000 162.43934631]
[107.50000000 177.43934631]
[107.50000000 192.43934631]
[107.50000000 207.43934631]
[113.54634094 223.27847290]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[5 75]
[7 15]
[8 14]
[9 13]
[18 28]
[19 27]
[20 26]
[21 25]
[30 41]
[31 40]
[32 39]
[46 56]
[47 55]
[48 54]
[49 53]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
