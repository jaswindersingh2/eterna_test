%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACUCAAAGAGAAGAUCAAAGAUCAACAAAGAAACUUUGAACUUCAAAGAAGAAGUCAAAGACAUCGCAUUUUCG\
) } def
/len { sequence length } bind def

/coor [
[73.91307068 237.22483826]
[79.95941162 221.38569641]
[79.95941162 206.38569641]
[79.95941162 191.38569641]
[79.95941162 176.38569641]
[79.95941162 161.38569641]
[66.33726501 155.10580444]
[54.93117523 164.84753418]
[43.52508545 174.58924866]
[35.40769958 189.47361755]
[18.85790253 185.79385376]
[17.81241226 168.87217712]
[33.78336716 163.18316650]
[45.18945694 153.44143677]
[56.59554291 143.69972229]
[46.77207947 128.43563843]
[41.98952484 111.30781555]
[42.46514511 93.90021515]
[27.87959480 90.39853668]
[13.29404736 86.89685822]
[-1.29150188 83.39517212]
[-18.10448837 85.57688141]
[-24.85523033 70.02490997]
[-11.77982712 59.23277664]
[2.21017861 68.80962372]
[16.79572678 72.31130981]
[31.38127708 75.81298828]
[45.96682358 79.31466675]
[50.64618301 69.80616760]
[56.98136902 61.31066895]
[64.75983429 54.11320496]
[73.72061920 48.45524979]
[83.56307983 44.52663040]
[93.95700073 42.45915222]
[104.55365753 42.32217789]
[114.99755096 44.12030411]
[124.93826294 47.79320145]
[134.04229736 53.21764374]
[142.00421143 60.21164322]
[154.13946533 51.39486694]
[166.27471924 42.57808685]
[178.40997314 33.76130676]
[190.54522705 24.94453049]
[202.68048096 16.12775040]
[207.96047974 8.34084320]
[215.46972656 7.21414185]
[227.94177246 -1.11941147]
[240.41381836 -9.45296478]
[252.88586426 -17.78651810]
[255.72293091 -33.33407974]
[268.77014160 -42.25291443]
[284.28683472 -39.25163269]
[293.06723022 -26.11084938]
[289.90206909 -10.62675095]
[276.66918945 -1.98578107]
[261.21942139 -5.31447411]
[248.74737549 3.01907921]
[236.27532959 11.35263252]
[223.80328369 19.68618584]
[211.49726868 28.26300621]
[199.36201477 37.07978439]
[187.22676086 45.89656448]
[175.09150696 54.71334076]
[162.95623779 63.53012085]
[150.82098389 72.34690094]
[156.32397461 85.05773926]
[158.67518616 98.80799866]
[157.69459534 112.82247925]
[153.39129639 126.29978180]
[145.96575928 138.45816040]
[135.80088806 148.58079529]
[123.44246674 156.05807495]
[109.57001495 160.42414856]
[94.95941162 161.38569641]
[94.95941162 176.38569641]
[94.95941162 191.38569641]
[94.95941162 206.38569641]
[94.95941162 221.38569641]
[101.00575256 237.22483826]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[5 75]
[6 74]
[7 15]
[8 14]
[9 13]
[18 28]
[19 27]
[20 26]
[21 25]
[39 65]
[40 64]
[41 63]
[42 62]
[43 61]
[44 60]
[46 59]
[47 58]
[48 57]
[49 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
