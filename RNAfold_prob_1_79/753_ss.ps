%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGAGGCGGCAAAGGCGGCUCAAGCGGGUGCAAAAAGGACGCGCACUGGACGCAAAAGGGUGCAGUCAGCUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[81.17724609 230.75952148]
[70.51078796 219.09751892]
[71.29818726 203.31286621]
[83.07230377 192.77029419]
[83.66120148 177.78186035]
[84.25009918 162.79342651]
[84.83899689 147.80497742]
[85.42789459 132.81654358]
[73.29263306 123.99977112]
[59.21976471 129.19152832]
[48.95057678 141.22706604]
[34.33194733 138.37312317]
[20.25907898 143.56488037]
[10.19454193 156.51235962]
[-6.01135969 154.00222778]
[-11.68738461 138.61668396]
[-0.99452454 126.18306732]
[15.06732178 129.49201965]
[29.14019203 124.30025482]
[38.40279770 112.63606262]
[54.02801132 115.11865234]
[68.10088348 109.92690277]
[66.98241425 97.38722229]
[70.57407379 85.43437958]
[78.28379822 75.75811005]
[88.94353485 69.69483948]
[100.98565674 68.04335785]
[97.48397827 53.45780945]
[93.98229980 38.87226105]
[83.23719025 27.25962448]
[87.78958893 13.07777214]
[84.28791046 -1.50777674]
[73.54280090 -13.12041187]
[78.09519958 -27.30226517]
[65.22258759 -36.87698746]
[64.82648468 -52.91515350]
[77.21076202 -63.11364746]
[92.87525177 -59.64906311]
[99.80349731 -45.17913055]
[92.68074799 -30.80394554]
[103.17539215 -20.23456573]
[98.87345886 -5.00945711]
[102.37513733 9.57609177]
[112.86978149 20.14547157]
[108.56784821 35.37057877]
[112.06952667 49.95613098]
[115.57120514 64.54167938]
[127.87722778 73.11849976]
[142.77325439 71.35543823]
[157.66928101 69.59237671]
[172.56530762 67.82931519]
[185.36039734 58.52360916]
[198.90887451 64.71134949]
[213.80490112 62.94828796]
[226.60000610 53.64258194]
[240.14846802 59.83031845]
[252.95745850 49.59010315]
[268.12960815 55.81407928]
[270.05712891 72.09955597]
[256.75714111 81.69342804]
[241.91152954 74.72634888]
[230.18190002 83.90594482]
[215.56796265 77.84431458]
[200.67193604 79.60737610]
[188.94230652 88.78697205]
[174.32836914 82.72534180]
[159.43234253 84.48840332]
[144.53631592 86.25146484]
[129.64028931 88.01452637]
[132.16487122 103.27229309]
[127.21719360 118.10680389]
[115.78972626 129.03308105]
[100.41632843 133.40544128]
[99.82743073 148.39387512]
[99.23853302 163.38232422]
[98.64963531 178.37075806]
[98.06073761 193.35919189]
[108.97139740 204.79304504]
[108.51792145 220.59082031]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 77]
[5 76]
[6 75]
[7 74]
[8 73]
[9 22]
[10 21]
[12 19]
[13 18]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[34 40]
[48 69]
[49 68]
[50 67]
[51 66]
[53 64]
[54 63]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
