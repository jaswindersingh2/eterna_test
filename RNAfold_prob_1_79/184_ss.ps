%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAGGCAGAGCAUGUCCGGUGGAGUCCCGAAAGGAGAACAGCGAGAGAGGGCUCGGGCAAAAAGGUCUGUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[85.07587433 380.15051270]
[69.66635132 378.32669067]
[58.29469681 367.76898193]
[55.33353424 352.53707886]
[61.92149353 338.48794556]
[75.52536774 331.02374268]
[77.28842926 316.12771606]
[79.05149078 301.23168945]
[80.81455231 286.33566284]
[82.57761383 271.43963623]
[84.34067535 256.54360962]
[86.10373688 241.64758301]
[87.86679840 226.75155640]
[81.67905426 213.20307922]
[90.98476410 200.40798950]
[80.89086151 182.58665466]
[92.97457123 165.11712646]
[92.97457123 150.11712646]
[92.97457123 135.11712646]
[92.97457123 120.11713409]
[92.97457123 105.11713409]
[90.72588348 102.63157654]
[89.44198608 99.19029236]
[89.51046753 95.19474792]
[91.14597321 91.19542694]
[94.33612823 87.81685638]
[96.68264771 73.00153351]
[99.02916718 58.18620682]
[101.37568665 43.37088013]
[103.72219849 28.55555534]
[106.06871796 13.74023056]
[108.12390137 -1.11830986]
[95.93016815 -10.35194969]
[90.03435516 -24.35681152]
[91.92755890 -39.33286667]
[101.00199127 -51.27064896]
[114.74085999 -57.02469635]
[103.25534058 -67.45841217]
[100.12911224 -82.65730286]
[106.56427765 -96.77709198]
[120.08638000 -104.38842010]
[135.49589539 -102.56458282]
[146.86755371 -92.00688171]
[149.82872009 -76.77497101]
[143.24076843 -62.72582626]
[129.63688660 -55.26163483]
[141.65289307 -46.45929718]
[147.68977356 -32.73297119]
[146.03457642 -17.72874832]
[137.03230286 -5.48719215]
[123.01992798 0.64475107]
[125.42515564 7.84705067]
[120.88404083 16.08674812]
[118.53752136 30.90207291]
[116.19100952 45.71739578]
[113.84449005 60.53272247]
[111.49797058 75.34804535]
[109.15145874 90.16337585]
[107.97457123 105.11713409]
[107.97457123 120.11713409]
[107.97457123 135.11712646]
[107.97457123 150.11712646]
[107.97457123 165.11712646]
[115.84178925 171.13352966]
[119.84653473 180.03822327]
[119.14778137 189.63635254]
[114.04634857 197.63059998]
[105.88079071 202.17105103]
[111.94242096 216.78498840]
[102.76282501 228.51461792]
[100.99976349 243.41064453]
[99.23670197 258.30667114]
[97.47364044 273.20269775]
[95.71057892 288.09872437]
[93.94751740 302.99475098]
[92.18445587 317.89077759]
[90.42139435 332.78680420]
[101.90691376 343.22052002]
[105.03314209 358.41940308]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 77]
[7 76]
[8 75]
[9 74]
[10 73]
[11 72]
[12 71]
[13 70]
[15 68]
[17 63]
[18 62]
[19 61]
[20 60]
[21 59]
[26 58]
[27 57]
[28 56]
[29 55]
[30 54]
[31 53]
[32 51]
[37 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
