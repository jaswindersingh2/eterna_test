%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAUAUAGUAUAAGAUAAGCAAAGUUAUGUCAAAACAUUAUGCAAAGUAAAUGAUAUAGUAUAGUUUUUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[122.00911713 349.76358032]
[120.24605560 334.86755371]
[118.48299408 319.97152710]
[116.71993256 305.07550049]
[114.95687866 290.17947388]
[113.19381714 275.28344727]
[111.43075562 260.38742065]
[102.25115204 248.65779114]
[108.31278992 234.04385376]
[106.54972839 219.14782715]
[104.78666687 204.25180054]
[103.02360535 189.35577393]
[93.84400177 177.62614441]
[99.90563965 163.01220703]
[98.14257812 148.11618042]
[96.37951660 133.22015381]
[94.61645508 118.32412720]
[83.30286407 109.27156830]
[81.59980011 94.88247681]
[90.48751831 83.43893433]
[88.72445679 68.54290771]
[76.59686279 58.76746750]
[75.02106476 43.63566208]
[84.41519165 32.13409805]
[82.65213013 17.23806953]
[69.27627563 9.59655952]
[63.03768158 -4.29348469]
[66.13762665 -19.01945877]
[77.18219757 -28.97713852]
[75.41913605 -43.87316513]
[62.55265808 -59.15511322]
[70.28575134 -76.70122528]
[67.35939789 -91.41300201]
[64.43304443 -106.12477875]
[61.50669098 -120.83656311]
[50.29306030 -132.80261230]
[55.30745316 -148.41632080]
[71.39149475 -151.61564636]
[81.99930573 -139.10937500]
[76.21846771 -123.76291656]
[79.14482117 -109.05113220]
[82.07118225 -94.33935547]
[84.99753571 -79.62757874]
[94.23252106 -74.54141235]
[99.11413574 -64.94587708]
[97.73186493 -54.04433441]
[90.31516266 -45.63622665]
[92.07822418 -30.74020004]
[105.14221191 -23.63595581]
[111.59421539 -10.04052925]
[108.77056122 4.92210293]
[97.54815674 15.47500896]
[99.31121826 30.37103653]
[111.13076782 39.36179733]
[113.13096619 54.44337082]
[103.62048340 66.77984619]
[105.38354492 81.67587280]
[116.69713593 90.72843170]
[118.40019989 105.11752319]
[109.51248169 116.56106567]
[111.27554321 131.45709229]
[113.03860474 146.35311890]
[114.80166626 161.24914551]
[124.10736847 174.04423523]
[117.91963196 187.59271240]
[119.68269348 202.48873901]
[121.44575500 217.38476562]
[123.20881653 232.28079224]
[132.51451111 245.07589722]
[126.32678223 258.62435913]
[128.08984375 273.52038574]
[129.85290527 288.41641235]
[131.61596680 303.31243896]
[133.37902832 318.20846558]
[135.14208984 333.10449219]
[136.90515137 348.00051880]
[147.14537048 360.80950928]
[140.92138672 375.98165894]
[124.63591003 377.90917969]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[4 73]
[5 72]
[6 71]
[7 70]
[9 68]
[10 67]
[11 66]
[12 65]
[14 63]
[15 62]
[16 61]
[17 60]
[20 57]
[21 56]
[24 53]
[25 52]
[29 48]
[30 47]
[32 43]
[33 42]
[34 41]
[35 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
