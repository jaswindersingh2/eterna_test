%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGCGGAACGCGGAAACGCGGCCGUGCCGAGACGGGCGAAAGGCCGGCGGUGCGGAACCGCGGCCCGCGUUCG\
) } def
/len { sequence length } bind def

/coor [
[35.60705566 341.20837402]
[28.36042213 354.60263062]
[16.28839874 363.88629150]
[1.48253536 367.45086670]
[-13.49196243 364.67883301]
[-26.04067230 356.05038452]
[-33.98945236 343.06051636]
[-35.96113205 327.95977783]
[-31.61410522 313.36447144]
[-21.70151711 301.80328369]
[-7.94078779 295.27932739]
[7.28395605 294.92288208]
[13.02420807 281.06466675]
[18.76445961 267.20648193]
[24.50471115 253.34829712]
[30.24496269 239.49009705]
[35.98521423 225.63189697]
[41.72546387 211.77371216]
[47.46571732 197.91551208]
[40.87158585 186.66668701]
[42.06131744 173.48492432]
[50.81879807 163.30093384]
[64.05482483 160.05679321]
[70.33472443 146.43464661]
[76.61462402 132.81250000]
[82.89451599 119.19035339]
[89.17441559 105.56820679]
[94.91466522 91.71001434]
[100.10642242 77.63714600]
[105.29817200 63.56427383]
[110.48992920 49.49140167]
[115.68168640 35.41853333]
[120.87344360 21.34566307]
[126.06520081 7.27279234]
[131.25695801 -6.80007744]
[126.00801086 -16.70726395]
[127.20885468 -27.63028145]
[134.19561768 -35.82110214]
[144.36277771 -38.61086655]
[150.64268494 -52.23301315]
[156.92257690 -65.85516357]
[155.67356873 -81.62699127]
[168.02854919 -89.94587708]
[165.99000549 -106.21782684]
[179.22424316 -115.90219879]
[194.11701965 -109.03653717]
[195.34791565 -92.68364716]
[181.65069580 -83.66598511]
[183.34887695 -68.86849976]
[170.54472351 -59.57526779]
[164.26483154 -45.95311737]
[157.98492432 -32.33097076]
[161.40830994 -13.46440601]
[145.32981873 -1.60832179]
[140.13806152 12.46454811]
[134.94631958 26.53741837]
[129.75456238 40.61028671]
[124.56280518 54.68315887]
[119.37104797 68.75602722]
[114.17929077 82.82889557]
[108.98753357 96.90177155]
[110.13351440 102.31955719]
[108.00640106 107.95239258]
[102.79656219 111.84809875]
[96.51666260 125.47025299]
[90.23677063 139.09239197]
[83.95687103 152.71453857]
[77.67697906 166.33668518]
[84.05342865 182.48823547]
[77.03504181 198.00532532]
[61.32390976 203.65577698]
[55.58365631 217.51396179]
[49.84340668 231.37216187]
[44.10315704 245.23034668]
[38.36290359 259.08853149]
[32.62265396 272.94674683]
[26.88240051 286.80493164]
[21.14214897 300.66311646]
[31.65561295 311.68069458]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 78]
[13 77]
[14 76]
[15 75]
[16 74]
[17 73]
[18 72]
[19 71]
[23 68]
[24 67]
[25 66]
[26 65]
[27 64]
[28 61]
[29 60]
[30 59]
[31 58]
[32 57]
[33 56]
[34 55]
[35 54]
[39 52]
[40 51]
[41 50]
[43 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
