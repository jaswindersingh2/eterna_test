%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGUGUUUGUGAGUCAAAAGACCUGAAAACAGCACAAAAGAUUCGAAAACGAAUCAAACACAAAGCGGCUUUUCG\
) } def
/len { sequence length } bind def

/coor [
[96.04208374 343.76144409]
[102.08841705 327.92230225]
[102.08841705 312.92230225]
[102.08841705 297.92230225]
[102.08841705 282.92230225]
[102.08841705 267.92230225]
[102.08841705 252.92231750]
[102.08841705 237.92231750]
[91.08084106 222.22200012]
[100.71873474 204.72357178]
[99.54184723 189.76980591]
[98.36495972 174.81605530]
[97.18807220 159.86228943]
[96.01118469 144.90852356]
[94.83429718 129.95477295]
[67.23376465 117.69454956]
[59.56792831 82.44029999]
[44.67190170 80.67723846]
[29.77587318 78.91417694]
[14.93027496 85.88126373]
[1.63028979 76.28738403]
[3.55780292 60.00191116]
[18.72995377 53.77793503]
[31.53893471 64.01815033]
[46.43496323 65.78121185]
[61.33098984 67.54427338]
[68.66030884 54.45683670]
[59.37389755 42.67708206]
[50.08749008 30.89732742]
[34.66359329 25.32637405]
[32.04297638 9.13797092]
[44.92150497 -1.01464200]
[60.05085373 5.31267357]
[61.86724091 21.61091805]
[71.15364838 33.39067078]
[80.44006348 45.17042542]
[87.88807678 46.05195618]
[79.97882080 33.30661392]
[85.01202393 19.17626381]
[99.19767761 14.30108643]
[111.85394287 22.35210228]
[113.45063782 37.26688004]
[102.78410339 47.81501770]
[110.23211670 48.69654846]
[122.01187134 39.41013718]
[133.79162598 30.12372971]
[145.57138062 20.83732033]
[157.35113525 11.55091095]
[169.13088989 2.26450133]
[174.70184326 -13.15939331]
[190.89024353 -15.78000832]
[201.04284668 -2.90148067]
[194.71553040 12.22786522]
[178.41729736 14.04425526]
[166.63754272 23.33066368]
[154.85778809 32.61707306]
[143.07803345 41.90348434]
[131.29827881 51.18989182]
[119.51852417 60.47630310]
[135.21778870 79.67971802]
[137.15905762 102.43479919]
[126.83586884 120.57866669]
[109.78806305 128.77787781]
[110.96494293 143.73164368]
[112.14183044 158.68540955]
[113.31871796 173.63916016]
[114.49560547 188.59292603]
[115.67249298 203.54667664]
[124.58702087 210.34631348]
[128.06951904 220.76870728]
[125.15370178 231.13223267]
[117.08841705 237.92231750]
[117.08841705 252.92231750]
[117.08841705 267.92230225]
[117.08841705 282.92230225]
[117.08841705 297.92230225]
[117.08841705 312.92230225]
[117.08841705 327.92230225]
[123.13475800 343.76144409]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[5 75]
[6 74]
[7 73]
[8 72]
[10 68]
[11 67]
[12 66]
[13 65]
[14 64]
[15 63]
[17 26]
[18 25]
[19 24]
[27 36]
[28 35]
[29 34]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
