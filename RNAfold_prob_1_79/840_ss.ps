%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACCGCGGACAAAAAAGCCAAAACACGAUCGAAAGAAUCAAGUGACUGAAAACAAGAAGGAAAAACAGGGUAUUCG\
) } def
/len { sequence length } bind def

/coor [
[110.87842560 219.05827332]
[110.28953552 204.06983948]
[109.70063782 189.08140564]
[101.46962738 176.66770935]
[108.65917206 162.57440186]
[108.07027435 147.58596802]
[107.48137665 132.59753418]
[94.39904022 131.12541199]
[83.62379456 124.90371704]
[76.67502594 115.46471405]
[62.40917969 120.09996796]
[54.98131180 125.87414551]
[47.49142456 124.62521362]
[39.98876190 138.53512573]
[24.82404518 142.98562622]
[10.99423695 135.33631897]
[6.70431328 120.12539673]
[14.49941158 106.37723541]
[29.75483704 102.24837494]
[43.41981888 110.18838501]
[57.77392197 105.83411407]
[72.03977203 101.19886017]
[72.45870972 95.03119659]
[74.22148132 89.10597992]
[77.24208069 83.71231079]
[81.37311554 79.11338043]
[86.41301727 75.53358459]
[82.91133881 60.94803238]
[79.40966034 46.36248398]
[75.33805084 31.92565536]
[70.70279694 17.65980721]
[66.06754303 3.39396000]
[61.15308762 -10.77813053]
[48.20561218 -20.84266663]
[50.71575165 -37.04856873]
[66.10128784 -42.72459412]
[78.53490448 -32.03173447]
[75.22595978 -15.96988678]
[80.63880920 -10.64454174]
[80.33338928 -1.24129498]
[84.96864319 13.02455235]
[89.60389709 27.29039955]
[93.61493683 30.31278038]
[95.60542297 35.99842834]
[93.99520874 42.86080170]
[97.49688721 57.44635391]
[100.99856567 72.03189850]
[123.99151611 80.82064819]
[132.86611938 106.19583893]
[147.86611938 106.19583893]
[162.86611938 106.19583893]
[167.76264954 91.86744690]
[177.04826355 79.90683746]
[189.71571350 71.61140442]
[204.39096069 67.88098145]
[219.48211670 69.12020111]
[233.35221863 75.19466400]
[244.49673462 85.44543457]
[251.70680237 98.76060486]
[254.20031738 113.69583893]
[251.70680237 128.63107300]
[244.49673462 141.94622803]
[233.35221863 152.19700623]
[219.48211670 158.27146912]
[204.39096069 159.51069641]
[189.71571350 155.78027344]
[177.04826355 147.48483276]
[167.76264954 135.52423096]
[162.86611938 121.19583893]
[147.86611938 121.19583893]
[132.86611938 121.19583893]
[122.46981049 132.00863647]
[123.05870819 146.99707031]
[123.64760590 161.98550415]
[131.92073059 175.47128296]
[124.68907166 188.49250793]
[125.27796936 203.48094177]
[125.86686707 218.46937561]
[128.81207275 237.62599182]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[5 74]
[6 73]
[7 72]
[10 22]
[11 21]
[13 20]
[27 47]
[28 46]
[29 45]
[30 42]
[31 41]
[32 40]
[33 38]
[49 71]
[50 70]
[51 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
