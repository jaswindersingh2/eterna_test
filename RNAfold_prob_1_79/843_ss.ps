%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGGACAAAAAAGCCAAAACGAGAUGAAAACAAUCAGUCGACUGAAAACAAGAAGCAAAAACUAUGUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[122.30929565 169.25927734]
[110.79024506 171.95916748]
[98.98592377 172.75660706]
[87.20841980 171.63049316]
[75.76908875 168.61061096]
[64.97038269 163.77677917]
[55.09779358 157.25682068]
[46.41233444 149.22311401]
[39.14362717 139.88801575]
[33.48385239 129.49836731]
[19.21800232 134.13362122]
[11.79013729 139.90780640]
[4.30024958 138.65887451]
[-3.20241427 152.56878662]
[-18.36712837 157.01928711]
[-32.19693756 149.36997986]
[-36.48686218 134.15905762]
[-28.69176292 120.41089630]
[-13.43633747 116.28203583]
[0.22864285 124.22205353]
[14.58274746 119.86778259]
[28.84859657 115.23252869]
[27.45564842 94.35470581]
[32.06163025 73.94371033]
[42.28565979 55.68739319]
[57.28227234 41.09543228]
[75.81135559 31.37448120]
[72.30967712 16.78893280]
[68.80799866 2.20338440]
[58.11725235 -5.31835747]
[55.60993576 -17.73496819]
[62.11599350 -28.12958717]
[59.18963623 -42.84136581]
[56.26328278 -57.55314636]
[42.98490524 -66.12403870]
[39.73793030 -81.59118652]
[48.44873428 -94.77820587]
[63.94934845 -97.86147308]
[77.04353333 -89.01173401]
[79.96274567 -73.47939301]
[70.97505951 -60.47949982]
[73.90141296 -45.76771927]
[76.82777405 -31.05594254]
[89.10115051 -18.67427254]
[83.39354706 -1.29829621]
[86.89522552 13.28725243]
[90.39690399 27.87280083]
[104.11585236 27.35282516]
[117.68828583 29.41900635]
[130.63102722 33.99778748]
[142.48335266 40.92617035]
[152.82330322 49.95751572]
[161.28282166 60.77031326]
[167.56072998 72.97964478]
[171.43356323 86.15087128]
[172.76344299 99.81510925]
[171.50302124 113.48592377]
[167.69717407 126.67665863]
[161.48139954 138.91773987]
[173.26115417 148.20414734]
[185.04090881 157.49055481]
[196.82066345 166.77696228]
[208.78047180 175.83030701]
[220.91572571 184.64707947]
[236.04402161 180.68870544]
[250.15515137 187.42738342]
[256.58630371 201.68130493]
[252.30084229 216.72021484]
[239.32226562 225.44320679]
[223.77864075 223.73153687]
[213.00920105 212.39340210]
[212.09893799 196.78233337]
[199.96368408 187.96556091]
[192.50447083 186.54492188]
[187.53424072 178.55671692]
[175.75448608 169.27030945]
[163.97473145 159.98390198]
[152.19499207 150.69749451]
[143.28900146 158.48602295]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 22]
[11 21]
[13 20]
[27 47]
[28 46]
[29 45]
[32 43]
[33 42]
[34 41]
[59 78]
[60 77]
[61 76]
[62 75]
[63 73]
[64 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
