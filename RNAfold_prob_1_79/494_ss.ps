%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGUAUACGAGAGACGAAAGUCCUAGAAAUAGCUCAAAAGUAUACGAAAGUAUACGUAUACAAAGAUCUAAUUCG\
) } def
/len { sequence length } bind def

/coor [
[101.04812622 150.62857056]
[104.61742401 165.19772339]
[102.84300995 180.09240723]
[95.95092010 193.41528320]
[84.81909180 203.46925354]
[70.86552429 208.97361755]
[55.86766815 209.22720337]
[41.73599243 204.19770813]
[30.27063370 194.52581787]
[22.93208313 181.44354248]
[20.65514374 166.61737061]
[23.72986412 151.93588257]
[31.76457214 139.26925659]
[43.73366547 130.23207092]
[28.77990723 129.05517578]
[19.70777130 131.54730225]
[13.26596165 127.52719116]
[-1.63006568 125.76412964]
[-16.52609253 124.00106812]
[-31.37169075 130.96815491]
[-44.67167664 121.37427521]
[-42.74416351 105.08879852]
[-27.57201195 98.86482239]
[-14.76303196 109.10504150]
[0.13299534 110.86810303]
[15.02902222 112.63116455]
[29.95679283 114.10142517]
[44.91055298 115.27831268]
[51.12451935 111.78205109]
[58.99147797 112.47743988]
[72.35657501 105.66757965]
[85.72167206 98.85772705]
[93.49706268 87.23727417]
[107.46846771 87.77717590]
[120.83356476 80.96732330]
[134.19866943 74.15746307]
[142.98204041 60.99833298]
[157.83479309 62.11425400]
[171.19989014 55.30439758]
[172.37660217 41.42052078]
[180.25535583 30.06082153]
[192.64944458 24.18724442]
[206.21295166 25.26505089]
[217.34387207 32.89889526]
[230.96601868 26.61899757]
[244.58818054 20.33910179]
[258.21032715 14.05920601]
[271.83245850 7.77930975]
[285.45462036 1.49941385]
[299.07675171 -4.78048229]
[301.97180176 -20.02510071]
[313.29754639 -30.63204575]
[328.69900513 -32.52273178]
[342.25399780 -24.97014999]
[348.75036621 -10.87842464]
[345.69012451 4.33389044]
[334.25000000 14.81734848]
[318.82894897 16.54084778]
[305.35665894 8.84166527]
[291.73452759 15.12156105]
[278.11236572 21.40145683]
[264.49020386 27.68135262]
[250.86807251 33.96125031]
[237.24592590 40.24114609]
[223.62377930 46.52104187]
[221.01477051 62.60333633]
[209.28390503 74.14546204]
[192.83587646 76.54074860]
[178.00975037 68.66949463]
[164.64465332 75.47935486]
[156.81723022 88.15139771]
[141.00851440 87.52256012]
[127.64342499 94.33242035]
[114.27832794 101.14227295]
[106.50293732 112.76272583]
[92.53153229 112.22282410]
[79.16643524 119.03267670]
[65.80133820 125.84253693]
[80.31987000 129.61242676]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 28]
[15 27]
[17 26]
[18 25]
[19 24]
[30 78]
[31 77]
[32 76]
[34 74]
[35 73]
[36 72]
[38 70]
[39 69]
[44 65]
[45 64]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
