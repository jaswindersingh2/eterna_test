%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGUGAAACACAAGUGGAAACCACAAGAAGGAAACCUUCAAGAGGAAACCUCAAGAGAAACUCAGAUAACCUUCG\
) } def
/len { sequence length } bind def

/coor [
[105.29505920 181.37507629]
[102.94853973 166.55975342]
[92.36760712 166.18640137]
[81.97940826 164.14166260]
[72.04628754 160.47714233]
[62.81908798 155.28538513]
[54.53081512 148.69750977]
[43.12472534 158.43922424]
[31.71863556 168.18093872]
[23.60124969 183.06530762]
[7.05145311 179.38555908]
[6.00596142 162.46388245]
[21.97691536 156.77485657]
[33.38300705 147.03314209]
[44.78909302 137.29141235]
[37.53150177 123.16420746]
[33.82382965 107.72064209]
[33.87677383 91.83833313]
[19.29122543 88.33665466]
[4.70567703 84.83496857]
[-9.87987137 81.33329010]
[-26.69285774 83.51499939]
[-33.44359970 67.96302795]
[-20.36819649 57.17089081]
[-6.37819099 66.74774170]
[8.20735741 70.24942017]
[22.79290581 73.75110626]
[37.37845612 77.25278473]
[46.55007553 60.22564316]
[60.22564316 46.55007553]
[77.25278473 37.37845612]
[73.75110626 22.79290581]
[70.24942017 8.20735741]
[66.74774170 -6.37819099]
[63.24606323 -20.96373940]
[53.66921234 -34.95374680]
[64.46134186 -48.02914810]
[80.01331329 -41.27840805]
[77.83161163 -24.46541977]
[81.33329010 -9.87987137]
[84.83496857 4.70567703]
[88.33665466 19.29122543]
[91.83833313 33.87677383]
[111.17345428 34.31858826]
[129.56704712 40.29503250]
[145.46917725 51.30249405]
[156.87527466 41.56077576]
[168.28135681 31.81905365]
[179.68745422 22.07733345]
[187.80484009 7.19296646]
[204.35462952 10.87272072]
[205.40013123 27.79440117]
[189.42916870 33.48342133]
[178.02308655 43.22514343]
[166.61698914 52.96686554]
[155.21090698 62.70858383]
[162.46849060 76.83579254]
[166.17616272 92.27935791]
[166.12322998 108.16166687]
[180.70877075 111.66334534]
[195.29432678 115.16503143]
[212.10731506 112.98332214]
[218.85804749 128.53529358]
[205.78265381 139.32742310]
[191.79264832 129.75057983]
[177.20709229 126.24889374]
[162.62155151 122.74721527]
[158.95709229 131.03150940]
[154.20277405 138.74214172]
[148.44644165 145.73658752]
[141.79454041 151.88555908]
[134.37001038 157.07534790]
[126.31012726 161.21005249]
[117.76386261 164.21322632]
[120.11038208 179.02854919]
[132.19209290 189.58374023]
[131.32862854 205.60353088]
[118.18236542 214.79893494]
[102.83798981 210.11601257]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[7 15]
[8 14]
[9 13]
[18 28]
[19 27]
[20 26]
[21 25]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[46 56]
[47 55]
[48 54]
[49 53]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
