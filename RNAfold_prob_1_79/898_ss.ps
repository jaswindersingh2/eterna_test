%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGUACAUACCUAAGUGAAAACAGUGAAAACAAAAGAGUAAAAGUACAACCAAAAGGAAGCACAGACUUUCG\
) } def
/len { sequence length } bind def

/coor [
[160.35340881 247.38017273]
[147.28477478 243.91163635]
[135.46243286 237.32830811]
[125.61618042 228.03060913]
[118.35531616 216.58665466]
[114.13089752 203.69761658]
[113.20778656 190.15473938]
[115.64797974 176.79074097]
[121.30652618 164.42866516]
[129.84010315 153.83114624]
[121.02333069 141.69589233]
[112.20655060 129.56063843]
[103.38977051 117.42538452]
[86.05903625 110.99017334]
[83.84741211 92.63601685]
[74.10569000 81.22992706]
[64.36396790 69.82383728]
[54.40018082 58.61120987]
[44.21817017 47.59637451]
[26.85592079 47.30651855]
[15.20582104 34.88424301]
[15.99788570 18.20671654]
[5.39128447 7.60011530]
[-8.81095600 13.09704685]
[-24.02082825 12.33568764]
[-37.60313034 5.44794846]
[-47.20464706 -6.37282944]
[-51.16185379 -21.07862282]
[-48.78914642 -36.12156677]
[-40.49760818 -48.89537811]
[-27.72379684 -57.18691635]
[-12.68085289 -59.55962753]
[2.02494144 -55.60241699]
[13.84571934 -46.00090027]
[20.73345757 -32.41859818]
[21.49481773 -17.20872688]
[15.99788570 -3.00648618]
[26.60448837 7.60011530]
[39.52051926 5.81267357]
[51.24359131 11.95628643]
[57.30102921 23.94438934]
[55.23300934 37.41436005]
[65.41501617 48.42919922]
[72.45375824 51.27776718]
[75.77005768 60.08211517]
[85.51177979 71.48820496]
[95.25350189 82.89429474]
[105.52127838 83.12842560]
[113.94096375 89.00982666]
[117.69432831 98.56987000]
[115.52502441 108.60860443]
[124.34180450 120.74385834]
[133.15858459 132.87911987]
[141.97535706 145.01437378]
[157.73205566 139.52635193]
[174.39233398 139.02993774]
[190.41432190 143.56060791]
[204.31840515 152.68907166]
[214.82379150 165.56193542]
[220.96652222 180.98147583]
[222.18797302 197.51707458]
[218.38552856 213.63796997]
[209.92123413 227.85488892]
[220.10324097 238.86973572]
[230.28526306 249.88456726]
[240.46726990 260.89941406]
[250.64927673 271.91424561]
[266.44924927 272.28421021]
[277.29928589 283.77557373]
[276.76232910 299.57073975]
[265.15686035 310.29870605]
[249.36827087 309.59475708]
[238.76361084 297.87652588]
[239.63444519 282.09625244]
[229.45242310 271.08142090]
[219.27041626 260.06658936]
[209.08840942 249.05174255]
[198.90640259 238.03689575]
[186.98268127 244.34425354]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 54]
[11 53]
[12 52]
[13 51]
[15 47]
[16 46]
[17 45]
[18 43]
[19 42]
[22 38]
[23 37]
[63 78]
[64 77]
[65 76]
[66 75]
[67 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
