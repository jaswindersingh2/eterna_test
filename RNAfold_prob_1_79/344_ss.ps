%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACUAGGCAGGAAAAACUGCGCCAAAGGCACUAGAGGCAGUCGAAAAGACGUUCGAAAGAACGCCGACGUACUUCG\
) } def
/len { sequence length } bind def

/coor [
[134.87605286 129.32749939]
[127.06586456 137.14625549]
[117.52716827 142.91244507]
[106.79337311 146.25053406]
[95.47764587 146.92228699]
[84.23790741 144.84317017]
[73.73856354 140.08987427]
[64.61122894 132.89854431]
[57.41679764 123.65325928]
[52.61105347 112.86579132]
[38.17422485 116.93739319]
[23.73739815 121.00900269]
[9.30056858 125.08061218]
[1.79790497 138.99052429]
[-13.36680984 143.44102478]
[-27.19661903 135.79171753]
[-31.48654175 120.58079529]
[-23.69144440 106.83262634]
[-8.43601799 102.70376587]
[5.22896242 110.64378357]
[19.66579056 106.57217407]
[34.10261917 102.50056458]
[48.53944778 98.42896271]
[51.17639160 83.66255951]
[39.04113770 74.84577942]
[26.90588188 66.02900696]
[10.53780556 61.61058807]
[10.25241470 44.65904236]
[26.46248245 39.69215012]
[35.72266006 53.89374924]
[47.85791779 62.71052933]
[59.99317169 71.52730560]
[76.03295135 58.22565460]
[95.78009796 52.97064209]
[115.51496887 56.40314865]
[131.66409302 67.55935669]
[141.44714355 84.10871887]
[156.15893555 81.18235779]
[170.87071228 78.25600433]
[185.58248901 75.32965088]
[194.90138245 60.67734909]
[211.58027649 57.23462677]
[225.38635254 66.62395477]
[239.97189331 63.12227631]
[254.55744934 59.62059402]
[269.14300537 56.11891556]
[272.58737183 52.52565765]
[276.63562012 50.60002518]
[280.62158203 50.31196594]
[283.97204590 51.39482117]
[286.28311157 53.40418625]
[294.85369873 49.52354813]
[301.84509277 52.48645020]
[316.83352661 51.89755249]
[331.82196045 51.30865479]
[346.81039429 50.71975708]
[361.79882812 50.13085938]
[375.37176514 40.92718887]
[390.00881958 48.32237244]
[390.65264893 64.70887756]
[376.64093018 73.22967529]
[362.38772583 65.11929321]
[347.39929199 65.70819092]
[332.41085815 66.29708862]
[317.42242432 66.88598633]
[302.43399048 67.47488403]
[287.45999146 68.35794830]
[272.64468384 70.70446014]
[258.05911255 74.20614624]
[243.47357178 77.70782471]
[228.88803101 81.20950317]
[223.66346741 93.15616608]
[212.29988098 99.94170380]
[198.91334534 98.84275055]
[188.50885010 90.04142761]
[173.79705811 92.96778870]
[159.08528137 95.89414215]
[144.37350464 98.82049561]
[143.74775696 109.56932831]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 23]
[11 22]
[12 21]
[13 20]
[24 32]
[25 31]
[26 30]
[37 78]
[38 77]
[39 76]
[40 75]
[43 71]
[44 70]
[45 69]
[46 68]
[51 67]
[53 66]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
