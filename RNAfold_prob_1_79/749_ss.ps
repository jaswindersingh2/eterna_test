%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGUCGUGGCAAAGGCAGGACAAGCAGCUGGGAAAACGAGGUGCAGACGAGGCGAAAGGCUGGUCGCUAAGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[115.85708618 135.37059021]
[105.42758179 138.38056946]
[94.57241821 138.38056946]
[84.14291382 135.37059021]
[74.95699310 129.58671570]
[67.73504639 121.48252106]
[53.87685013 127.22277832]
[40.01865768 132.96302795]
[30.22989845 145.39245605]
[15.51049519 143.11463928]
[1.65230250 148.85488892]
[-8.13645744 161.28431702]
[-22.85585976 159.00650024]
[-35.17547607 170.65396118]
[-49.77816010 162.04014587]
[-45.54339600 145.62359619]
[-28.59611130 145.14831543]
[-19.79858208 133.12945557]
[-4.08794880 134.99670410]
[9.77024364 129.25645447]
[18.56777382 117.23759460]
[34.27840805 119.10483551]
[48.13660049 113.36458588]
[61.99479294 107.62432861]
[62.42505646 90.47898102]
[70.21133423 75.19754791]
[83.82931519 64.77167511]
[80.32762909 50.18612289]
[76.82595062 35.60057449]
[66.08084869 23.98793983]
[70.63323975 9.80608559]
[67.13156128 -4.77946281]
[56.38645935 -16.39209938]
[60.93885422 -30.57395172]
[48.06623840 -40.14867401]
[47.67014313 -56.18683624]
[60.05441666 -66.38533783]
[75.71890259 -62.92074966]
[82.64715576 -48.45081711]
[75.52439880 -34.07563400]
[86.01904297 -23.50625229]
[81.71710968 -8.28114319]
[85.21878815 6.30440521]
[95.71343231 16.87378502]
[91.41149902 32.09889603]
[94.91317749 46.68444443]
[98.41486359 61.26999283]
[115.50495911 64.47364044]
[129.47518921 74.82581329]
[137.51448059 90.24347687]
[138.00520325 107.62432861]
[151.86340332 113.36458588]
[165.72158813 119.10483551]
[179.57978821 124.84508514]
[193.43797302 130.58534241]
[207.29617310 136.32559204]
[217.46542358 129.57739258]
[229.51750183 128.71345520]
[240.32557678 133.83801270]
[247.14442444 143.51712036]
[248.30747986 155.17752075]
[261.67257690 161.98736572]
[275.03768921 168.79722595]
[290.67843628 165.22709656]
[303.13119507 175.34185791]
[302.84326172 191.38232422]
[290.03549194 201.04364014]
[274.53292847 196.91444397]
[268.22781372 182.16232300]
[254.86271667 175.35247803]
[241.49761963 168.54261780]
[224.71069336 175.32998657]
[207.89695740 167.80905151]
[201.55592346 150.18377686]
[187.69772339 144.44352722]
[173.83953857 138.70327759]
[159.98133850 132.96302795]
[146.12315369 127.22277832]
[132.26495361 121.48252106]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 24]
[7 23]
[8 22]
[10 20]
[11 19]
[13 17]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[34 40]
[51 79]
[52 78]
[53 77]
[54 76]
[55 75]
[56 74]
[61 71]
[62 70]
[63 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
