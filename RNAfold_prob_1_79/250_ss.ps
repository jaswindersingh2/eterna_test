%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAUUGCCCUUGCUCUACGGAGCUGCGGAGCCAAAGCAAGAACUCAUGCAGGCGACGCGUGGGCGCAUGCUGUUCG\
) } def
/len { sequence length } bind def

/coor [
[113.16222382 280.96582031]
[112.57332611 265.97738647]
[111.98442841 250.98895264]
[97.86003113 239.65888977]
[96.20645905 221.31407166]
[108.48607635 207.16946411]
[106.72301483 192.27343750]
[104.66782379 177.41490173]
[102.32131195 162.59957886]
[99.97479248 147.78425598]
[97.62827301 132.96891785]
[95.28176117 118.15360260]
[85.35244751 114.75568390]
[77.95079803 105.90419769]
[76.01241302 93.46946716]
[61.02397919 92.88056946]
[46.03554153 92.29167175]
[31.04710579 91.70277405]
[16.79390335 99.81314850]
[2.78219032 91.29235840]
[3.42601776 74.90585327]
[18.06307030 67.51066589]
[31.63600349 76.71434021]
[46.62443924 77.30323792]
[61.61287308 77.89213562]
[76.60131073 78.48102570]
[89.07335663 70.14747620]
[94.26511383 56.07460403]
[99.45686340 42.00173569]
[104.64862061 27.92886543]
[98.28080750 13.71307373]
[103.74645996 -0.48485896]
[117.33828735 -6.46798658]
[122.53004456 -20.54085732]
[127.72180176 -34.61372757]
[122.47286224 -44.52091217]
[123.67369843 -55.44393158]
[130.66046143 -63.63475037]
[140.82763672 -66.42451477]
[147.10752869 -80.04666138]
[153.38742065 -93.66880798]
[145.68824768 -107.14109039]
[147.41174316 -122.56214905]
[157.89520264 -134.00228882]
[173.10751343 -137.06253052]
[187.19923401 -130.56616211]
[194.75181580 -117.01115417]
[192.86112976 -101.60969543]
[182.25418091 -90.28395081]
[167.00956726 -87.38891602]
[160.72967529 -73.76676941]
[154.44978333 -60.14461899]
[157.87315369 -41.27805328]
[141.79467773 -29.42197037]
[136.60292053 -15.34910011]
[131.41116333 -1.27623045]
[137.86073303 12.10056114]
[132.79603577 26.44641113]
[118.72148895 33.12062073]
[113.52973938 47.19349289]
[108.33798218 61.26636124]
[103.14622498 75.33923340]
[121.27936554 95.22425842]
[110.09708405 115.80708313]
[112.44360352 130.62240601]
[114.79011536 145.43772888]
[117.13663483 160.25305176]
[119.48315430 175.06838989]
[124.02426910 183.30807495]
[121.61904144 190.51037598]
[123.38210297 205.40640259]
[134.23878479 210.98173523]
[140.88148499 221.07498169]
[141.69137573 233.00895691]
[136.57821655 243.68777466]
[126.97286224 250.40005493]
[127.56175995 265.38848877]
[128.15066528 280.37692261]
[131.09585571 299.53353882]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[6 71]
[7 70]
[8 68]
[9 67]
[10 66]
[11 65]
[12 64]
[15 26]
[16 25]
[17 24]
[18 23]
[27 62]
[28 61]
[29 60]
[30 59]
[33 56]
[34 55]
[35 54]
[39 52]
[40 51]
[41 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
