%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGCGAAACGCAACUUCAAAGAAGAAUUCUCAAAGAGAAAAAUCGAAACGAUAACCCAAAGGGACGUCUUUUUCG\
) } def
/len { sequence length } bind def

/coor [
[102.27937317 273.34176636]
[101.69047546 258.35333252]
[101.10157776 243.36489868]
[100.51268768 228.37646484]
[99.92378998 213.38803101]
[99.33489227 198.39958191]
[98.74599457 183.41114807]
[97.86293030 168.43716431]
[96.68604279 153.48341370]
[87.25634766 152.04859924]
[78.23042297 148.96470642]
[69.89422607 144.32945251]
[62.51189041 138.28967285]
[56.31730652 131.03674316]
[51.50674438 122.80046844]
[48.23261642 113.84178925]
[46.59865952 104.44455719]
[46.65664291 94.90650940]
[32.07109451 91.40482330]
[17.48554611 87.90314484]
[2.89999723 84.40146637]
[-13.91298866 86.58317566]
[-20.66373062 71.03120422]
[-7.58832836 60.23906708]
[6.40167761 69.81591797]
[20.98722649 73.31759644]
[35.57277679 76.81927490]
[50.15832520 80.32096100]
[57.30691910 67.61546326]
[67.61546326 57.30691910]
[80.32096100 50.15832520]
[76.81927490 35.57277679]
[73.31759644 20.98722649]
[69.81591797 6.40167761]
[66.31423950 -8.18387127]
[56.73738480 -22.17387772]
[67.52951813 -35.24927902]
[83.08148956 -28.49853706]
[80.89978790 -11.68555164]
[84.40146637 2.89999723]
[87.90314484 17.48554611]
[91.40482330 32.07109451]
[94.90650940 46.65664291]
[109.47257996 47.25791550]
[123.33753967 51.76291275]
[135.47515869 59.83819962]
[146.88125610 50.09647751]
[158.28733826 40.35475540]
[169.69343567 30.61303520]
[177.81082153 15.72866917]
[194.36061096 19.40842438]
[195.40609741 36.33010483]
[179.43515015 42.01912689]
[168.02905273 51.76084518]
[156.62297058 61.50256729]
[145.21688843 71.24428558]
[150.41227722 81.83245087]
[153.16555786 93.30070496]
[153.34335327 105.09349060]
[167.92890930 108.59517670]
[182.51445007 112.09685516]
[199.32743835 109.91514587]
[206.07818604 125.46711731]
[193.00277710 136.25924683]
[179.01277161 126.68240356]
[164.42723083 123.18072510]
[149.84167480 119.67903900]
[134.80131531 140.74710083]
[111.63980103 152.30651855]
[112.81668854 167.26028442]
[116.69732666 175.83087158]
[113.73442841 182.82225037]
[114.32332611 197.81068420]
[114.91222382 212.79913330]
[115.50112152 227.78756714]
[116.09001923 242.77600098]
[116.67891693 257.76443481]
[117.26781464 272.75286865]
[120.21301270 291.90948486]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[4 75]
[5 74]
[6 73]
[7 72]
[8 70]
[9 69]
[18 28]
[19 27]
[20 26]
[21 25]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[46 56]
[47 55]
[48 54]
[49 53]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
