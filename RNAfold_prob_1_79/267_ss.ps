%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAGACUUAGUAUAGAAAUAUAAUAUAAUAUGAGAUAGUGAAAAGUAUAAUAGGAUAGGAAGUGAUAUUUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[198.44660950 248.85148621]
[181.98739624 247.37144470]
[166.20149231 242.46284485]
[151.79505920 234.34266663]
[139.41308594 223.37165833]
[129.61054993 210.03825378]
[122.82746887 194.93684387]
[119.36920929 178.74125671]
[119.39272308 162.17474365]
[122.89940643 145.97761536]
[129.73495483 130.87422180]
[117.59970093 122.05744171]
[105.46444702 113.24066162]
[91.58059692 111.58831787]
[85.71877289 98.89459229]
[73.58351898 90.07781219]
[61.44826126 81.26103210]
[48.54341888 86.51571655]
[34.84497452 84.65289307]
[23.98478317 76.27622986]
[18.78740692 63.70173645]
[20.53587914 50.31832123]
[8.75612450 41.03191376]
[-3.02362895 31.74550438]
[-14.80338287 22.45909500]
[-30.46669197 24.56535149]
[-42.98081970 14.91277981]
[-44.92135620 -0.77192199]
[-35.13701630 -13.18329716]
[-19.43267632 -14.95789814]
[-7.12543964 -5.04288483]
[-5.51697350 10.67934036]
[6.26278019 19.96574974]
[18.04253387 29.25215912]
[29.82228851 38.53857040]
[45.33617783 33.56199646]
[60.94599533 38.77426147]
[70.54745483 52.34213257]
[70.26503754 69.12577820]
[82.40029907 77.94255829]
[94.53555298 86.75933838]
[108.41940308 88.41168213]
[114.28122711 101.10540771]
[126.41648102 109.92218781]
[138.55174255 118.73896790]
[148.49458313 109.32895660]
[159.91934204 101.79317474]
[172.47721863 96.36019897]
[185.78512573 93.19447327]
[199.43730164 92.39126587]
[213.01770020 93.97383881]
[226.11267090 97.89276886]
[238.32357788 104.02749634]
[249.27890015 112.19001007]
[258.64556885 122.13063049]
[266.13909912 133.54565430]
[271.53213501 146.08660889]
[274.66146851 159.37089539]
[275.43298340 172.99348450]
[273.82434082 186.53923035]
[269.88577271 199.59555054]
[263.73843384 211.76496887]
[255.57070923 222.67727661]
[265.75271606 233.69210815]
[275.93472290 244.70693970]
[286.11672974 255.72178650]
[301.50985718 253.76428223]
[315.09750366 261.25796509]
[321.65496826 275.32138062]
[318.66076660 290.54681396]
[307.26623535 301.07983398]
[291.85278320 302.87023926]
[278.34722900 295.22958374]
[271.94271851 281.09585571]
[275.10189819 265.90380859]
[264.91989136 254.88896179]
[254.73788452 243.87411499]
[244.55586243 232.85928345]
[230.44526672 241.42713928]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 45]
[12 44]
[13 43]
[15 41]
[16 40]
[17 39]
[22 35]
[23 34]
[24 33]
[25 32]
[63 78]
[64 77]
[65 76]
[66 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
