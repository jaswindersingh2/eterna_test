%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACUGAAACAGAACAUGAAACAUGAACUAUGAAACAUAGAAGAUCAAAGAUCAACGCAAAGCGAGAUACGGUUCG\
) } def
/len { sequence length } bind def

/coor [
[86.68748474 269.15148926]
[72.46862793 262.64318848]
[65.80654907 248.49572754]
[69.84687805 233.38911438]
[82.68189240 224.45622253]
[83.85877991 209.50247192]
[85.03566742 194.54870605]
[86.21254730 179.59495544]
[87.38943481 164.64118958]
[76.84303284 161.65438843]
[66.93806458 156.95979309]
[57.94890213 150.68742371]
[50.12454224 143.01103210]
[43.68171692 134.14323425]
[38.79889297 124.32969666]
[35.61131668 113.84222412]
[34.20729065 102.97132874]
[34.62569809 92.01813507]
[20.04014969 88.51644897]
[5.45459986 85.01477051]
[-9.13094902 81.51309204]
[-25.94393539 83.69480133]
[-32.69467545 68.14282990]
[-19.61927414 57.35069275]
[-5.62926817 66.92754364]
[8.95628071 70.42922211]
[23.54183006 73.93090057]
[38.12737656 77.43258667]
[47.18125916 60.65930557]
[60.65930557 47.18125916]
[77.43258667 38.12737656]
[73.93090057 23.54183006]
[70.42922211 8.95628071]
[66.92754364 -5.62926817]
[63.42586136 -20.21481705]
[53.84901047 -34.20482254]
[64.64114380 -47.28022766]
[80.19311523 -40.52948380]
[78.01141357 -23.71649742]
[81.51309204 -9.13094902]
[85.01477051 5.45459986]
[88.51644897 20.04014969]
[92.01813507 34.62569809]
[111.07360840 35.07785416]
[129.20153809 40.96797943]
[144.88351440 51.80270386]
[156.28961182 42.06098175]
[167.69569397 32.31925964]
[179.10179138 22.57753944]
[187.21917725 7.69317389]
[203.76896667 11.37292767]
[204.81445312 28.29460907]
[188.84350586 33.98363113]
[177.43742371 43.72534943]
[166.03132629 53.46707153]
[154.62524414 63.20879364]
[161.76103210 77.12895203]
[165.41271973 92.33933258]
[165.37429810 107.98186493]
[179.95985413 111.48355103]
[194.54539490 114.98522949]
[211.35838318 112.80352020]
[218.10913086 128.35549927]
[205.03372192 139.14762878]
[191.04371643 129.57077026]
[176.45817566 126.06909943]
[161.87261963 122.56741333]
[156.23902893 134.27362061]
[148.41717529 144.64624023]
[138.71141052 153.28167725]
[127.49937439 159.84391785]
[115.21733856 164.07762146]
[102.34319305 165.81806946]
[101.16631317 180.77183533]
[99.98942566 195.72560120]
[98.81253815 210.67935181]
[97.63565063 225.63311768]
[108.91523743 236.46385193]
[110.54262543 252.01652527]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 77]
[6 76]
[7 75]
[8 74]
[9 73]
[18 28]
[19 27]
[20 26]
[21 25]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[46 56]
[47 55]
[48 54]
[49 53]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
