%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACGAGCGCAAAGGGCAUGUAACUAAGGAGAAAAACACCAUGGACUGAGAGGAAAACGUCACAGUAUGUAUUUCG\
) } def
/len { sequence length } bind def

/coor [
[86.28412628 182.57386780]
[92.33046722 166.73472595]
[92.33046722 151.73472595]
[92.33046722 136.73472595]
[92.33046722 121.73473358]
[79.85842133 113.40117645]
[66.00022888 119.14142609]
[52.14203262 124.88168335]
[42.35327530 137.31111145]
[27.63387108 135.03329468]
[13.77567863 140.77354431]
[3.98691821 153.20297241]
[-10.73248482 150.92515564]
[-23.05210114 162.57261658]
[-37.65478516 153.95880127]
[-33.42002106 137.54225159]
[-16.47273636 137.06697083]
[-7.67520666 125.04811859]
[8.03542709 126.91535187]
[21.89361954 121.17510223]
[30.69114876 109.15625000]
[46.40178299 111.02349091]
[60.25997543 105.28323364]
[74.11817169 99.54298401]
[79.10083771 91.11988068]
[86.19802094 86.18357086]
[93.62151337 84.94462585]
[90.11983490 70.35907745]
[86.61814880 55.77352905]
[75.87304688 44.16089630]
[80.42544556 29.97904205]
[76.92375946 15.39349270]
[62.32340240 10.41021824]
[52.75287247 -1.68971848]
[51.26609039 -17.04527283]
[58.33748627 -30.75654030]
[71.71060181 -38.44831085]
[87.11812592 -37.66616058]
[99.64356995 -28.65967751]
[105.29011536 -14.30279541]
[102.25596619 0.82325757]
[91.50930786 11.89181232]
[95.01099396 26.47736168]
[105.50563049 37.04674149]
[101.20369720 52.27185059]
[104.70538330 66.85739899]
[108.20706177 81.44294739]
[120.51308441 90.01976776]
[135.40910339 88.25670624]
[150.30513000 86.49364471]
[165.20115662 84.73058319]
[177.99626160 75.42488098]
[191.54473877 81.61261749]
[206.44076538 79.84955597]
[219.23585510 70.54385376]
[232.78433228 76.73159027]
[245.59330750 66.49137115]
[260.76547241 72.71534729]
[262.69296265 89.00082397]
[249.39299011 98.59469604]
[234.54739380 91.62761688]
[222.81776428 100.80721283]
[208.20382690 94.74558258]
[193.30780029 96.50864410]
[181.57815552 105.68824005]
[166.96421814 99.62660980]
[152.06819153 101.38967133]
[137.17216492 103.15273285]
[122.27614594 104.91579437]
[136.91152954 108.20294189]
[144.35580444 121.22534180]
[139.76232910 135.50469971]
[126.12170410 141.74436951]
[112.31472778 135.88198853]
[107.33046722 121.73473358]
[107.33046722 136.73472595]
[107.33046722 151.73472595]
[107.33046722 166.73472595]
[113.37680054 182.57386780]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[5 75]
[6 24]
[7 23]
[8 22]
[10 20]
[11 19]
[13 17]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[48 69]
[49 68]
[50 67]
[51 66]
[53 64]
[54 63]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
