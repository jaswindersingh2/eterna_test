%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGGAGAUGAGGCGCGGGCAAAGGCCGAAAGGACCGGCGCGACGGCGGCAUCGGCCAAAAAAGCUACUGUUCG\
) } def
/len { sequence length } bind def

/coor [
[60.88884735 289.48776245]
[53.64221573 302.88201904]
[41.57019043 312.16564941]
[26.76432800 315.73025513]
[11.78982925 312.95819092]
[-0.75888050 304.32977295]
[-8.70766258 291.33990479]
[-10.67934132 276.23913574]
[-6.33231354 261.64382935]
[3.58027363 250.08267212]
[17.34100342 243.55870056]
[32.56574631 243.20223999]
[38.30599976 229.34405518]
[32.38656616 215.72436523]
[38.01058197 201.58840942]
[52.33629990 195.47190857]
[58.07654953 181.61370850]
[52.15711594 167.99403381]
[57.78113174 153.85807800]
[72.10684967 147.74157715]
[77.84709930 133.88337708]
[67.54687500 124.19977570]
[61.20452499 111.56484985]
[59.59354401 97.51950836]
[62.91040039 83.77667999]
[70.75058746 72.01239014]
[82.15792847 63.66138077]
[95.74123383 59.74211121]
[109.84392548 60.73256302]
[116.12382507 47.11041260]
[122.40371704 33.48826599]
[128.68360901 19.86611938]
[134.96351624 6.24397135]
[141.24340820 -7.37817621]
[136.78794861 -17.66664886]
[138.84210205 -28.46177864]
[146.44998169 -36.07917404]
[156.80468750 -38.06263351]
[158.33961487 -47.34478378]
[164.68737793 -51.51180649]
[172.52485657 -64.30140686]
[180.36233521 -77.09101105]
[180.97576904 -92.90032196]
[194.22288513 -99.70937347]
[202.06036377 -112.49897766]
[205.18093872 -129.16326904]
[222.05783081 -130.77777100]
[228.28125000 -115.00737762]
[214.84997559 -104.66149902]
[207.01249695 -91.87189484]
[206.95964050 -76.97738647]
[193.15193176 -69.25353241]
[185.31445312 -56.46393204]
[177.47697449 -43.67432785]
[169.89212036 -30.73331261]
[171.82469177 -11.65631294]
[154.86555481 -1.09828007]
[148.58566284 12.52386761]
[142.30575562 26.14601517]
[136.02586365 39.76816177]
[129.74597168 53.39031219]
[123.46607208 67.01245880]
[134.24435425 78.40928650]
[139.88108826 93.04780579]
[139.52998352 108.73014832]
[133.24372864 123.10172272]
[121.96616364 134.00473022]
[107.39054871 139.80218506]
[91.70529175 139.62364197]
[85.96504211 153.48182678]
[91.76983643 167.93666077]
[85.75099182 181.90907288]
[71.93474579 187.35397339]
[66.19448853 201.21215820]
[71.99928284 215.66699219]
[65.98043823 229.63940430]
[52.16419220 235.08430481]
[46.42394257 248.94248962]
[56.93740463 259.96005249]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 78]
[13 77]
[16 74]
[17 73]
[20 70]
[21 69]
[29 62]
[30 61]
[31 60]
[32 59]
[33 58]
[34 57]
[38 55]
[40 54]
[41 53]
[42 52]
[44 50]
[45 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
