%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGGCAAAGCCAAGCUCAAAGAGCAAGGAUCAAAGAUCCACGAGCAAAGCUCAACCGUAACGGAAAGGAUGUUCG\
) } def
/len { sequence length } bind def

/coor [
[125.53159332 127.72987366]
[118.38533020 132.90573120]
[110.23156738 136.27841187]
[101.51712799 137.66305542]
[92.71955872 136.98382568]
[84.32094574 134.27790833]
[76.78152466 129.69360352]
[65.37543488 139.43533325]
[53.96934509 149.17704773]
[45.85195541 164.06141663]
[29.30216026 160.38165283]
[28.25666809 143.45997620]
[44.22762299 137.77095032]
[55.63371277 128.02923584]
[67.03980255 118.28751373]
[64.29082489 112.06908417]
[62.70364380 105.45799255]
[62.32989120 98.66931915]
[47.74434280 95.16764069]
[33.15879059 91.66596222]
[18.57324409 88.16427612]
[1.76025748 90.34598541]
[-4.99048519 74.79401398]
[8.08491802 64.00187683]
[22.07492447 73.57872772]
[36.66047287 77.08041382]
[51.24602127 80.58209229]
[65.83157349 84.08377075]
[70.42940521 76.62506104]
[76.62506104 70.42940521]
[84.08377075 65.83157349]
[80.58209229 51.24602127]
[77.08041382 36.66047287]
[73.57872772 22.07492447]
[70.07704926 7.48937511]
[60.50019836 -6.50063086]
[71.29233551 -19.57603455]
[86.84430695 -12.82529163]
[84.66259766 3.98769450]
[88.16427612 18.57324409]
[91.66596222 33.15879059]
[95.16764069 47.74434280]
[98.66931915 62.32989120]
[125.58644867 72.32073975]
[137.65838623 98.37101746]
[152.47370911 100.71752930]
[167.28904724 103.06404877]
[182.10437012 105.41056824]
[196.91969299 107.75708008]
[211.73501587 110.10359955]
[220.42782593 103.02272034]
[231.37522888 102.06951141]
[240.77171326 107.32407379]
[245.49139404 116.75162506]
[260.07693481 120.25330353]
[271.87576294 110.34905243]
[287.06655884 109.30363464]
[299.80938721 117.30889130]
[305.32888794 131.11734009]
[319.91442871 134.61901855]
[334.49996948 138.12069702]
[351.31295776 135.93899536]
[358.06372070 151.49096680]
[344.98831177 162.28309631]
[330.99829102 152.70625305]
[316.41275024 149.20455933]
[301.82720947 145.70288086]
[290.64038086 155.50050354]
[275.65213013 156.84811401]
[262.59164429 149.02015686]
[256.57525635 134.83885193]
[241.98971558 131.33717346]
[224.15353394 138.37545776]
[209.38850403 124.91892242]
[194.57316589 122.57241058]
[179.75784302 120.22589111]
[164.94252014 117.87937164]
[150.12719727 115.53285980]
[135.31187439 113.18634033]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 15]
[8 14]
[9 13]
[18 28]
[19 27]
[20 26]
[21 25]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[45 79]
[46 78]
[47 77]
[48 76]
[49 75]
[50 74]
[54 72]
[55 71]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
