%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACGGAGCCCGAGGCCCAGGGCCCGGAGCCCGAAAAGAGGCCCGAGGCCCGGGCCCGAGGCCCAGCCAGGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[72.45330048 226.01002502]
[61.74547577 237.40637207]
[46.21136093 239.20227051]
[33.18568802 230.54977417]
[28.81877708 215.53430176]
[35.17255402 201.24572754]
[49.24695969 194.43066406]
[52.74864197 179.84510803]
[56.25032043 165.25956726]
[59.75200272 150.67401123]
[63.25368118 136.08847046]
[66.75536346 121.50291443]
[70.25704193 106.91736603]
[70.55155182 91.92025757]
[67.62519073 77.20848083]
[62.76409149 69.15341949]
[64.88470459 61.86224365]
[62.53818512 47.04692078]
[60.19166946 32.23159409]
[57.84515381 17.41626930]
[55.49863434 2.60094476]
[50.95751953 -5.63875198]
[53.36274719 -12.84105110]
[51.59968948 -27.73707771]
[49.83662796 -42.63310623]
[48.07356644 -57.52913284]
[46.31050491 -72.42515564]
[44.25532150 -87.28369904]
[41.90880203 -102.09902191]
[39.56228638 -116.91435242]
[35.02117157 -125.15404510]
[37.42639923 -132.35633850]
[35.66333771 -147.25236511]
[33.90027618 -162.14839172]
[31.84509277 -177.00694275]
[19.76338196 -187.56211853]
[20.62684631 -203.58192444]
[33.77310944 -212.77731323]
[49.11748123 -208.09439087]
[54.88907623 -193.12548828]
[46.66041565 -179.35345459]
[50.93033600 -173.07444763]
[48.79630280 -163.91145325]
[50.55936432 -149.01542664]
[52.32242584 -134.11940002]
[54.37760925 -119.26086426]
[56.72412872 -104.44554138]
[59.07064438 -89.63021851]
[63.34056473 -83.35120392]
[61.20653152 -74.18821716]
[62.96959305 -59.29219437]
[64.73265076 -44.39616776]
[66.49571228 -29.50013924]
[68.25877380 -14.60411263]
[70.31395721 0.25442773]
[72.66047668 15.06975269]
[75.00699615 29.88507843]
[77.35351562 44.70040131]
[79.70002747 59.51572800]
[82.33697510 74.28212738]
[85.26332855 88.99390411]
[105.44741821 84.24361420]
[114.94552612 100.36242676]
[127.73513031 108.19990540]
[140.52473450 116.03738403]
[157.18901062 119.15795135]
[158.80352783 136.03485107]
[143.03312683 142.25825500]
[132.68725586 128.82698059]
[119.89765167 120.98950195]
[107.10804749 113.15202332]
[96.09304047 116.20721436]
[84.84259033 110.41905212]
[81.34091187 125.00460052]
[77.83923340 139.59014893]
[74.33754730 154.17568970]
[70.83586884 168.76124573]
[67.33419037 183.34678650]
[63.83250809 197.93234253]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 79]
[8 78]
[9 77]
[10 76]
[11 75]
[12 74]
[13 73]
[14 61]
[15 60]
[17 59]
[18 58]
[19 57]
[20 56]
[21 55]
[23 54]
[24 53]
[25 52]
[26 51]
[27 50]
[28 48]
[29 47]
[30 46]
[32 45]
[33 44]
[34 43]
[35 41]
[63 71]
[64 70]
[65 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
