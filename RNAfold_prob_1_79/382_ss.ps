%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGGUGAACUCAGGCCCAAAGGGCCUGUGUCCAAAGGACAGUAAAGAAACUUUACAGUUCACCAUCAUGACUUCG\
) } def
/len { sequence length } bind def

/coor [
[109.72428131 296.49420166]
[103.02004242 282.94631958]
[100.60861206 268.02398682]
[102.70439148 253.05404663]
[109.12104797 239.36763000]
[119.28799438 228.18171692]
[132.30120850 220.49096680]
[128.79953003 205.90541077]
[125.29784393 191.31987000]
[121.79616547 176.73431396]
[118.29448700 162.14875793]
[114.79280090 147.56321716]
[111.29112244 132.97766113]
[107.78944397 118.39212036]
[75.55993652 110.05613708]
[60.97438431 106.55445862]
[46.38883591 103.05278015]
[31.80328751 99.55109406]
[17.21773720 96.04941559]
[2.63218927 92.54773712]
[-11.95335960 89.04605865]
[-28.76634598 91.22776031]
[-35.51708603 75.67578888]
[-22.44168472 64.88365936]
[-8.45167923 74.46051025]
[6.13386965 77.96218872]
[20.71941757 81.46386719]
[35.30496597 84.96554565]
[49.89051437 88.46723175]
[64.47606659 91.96891022]
[79.06161499 95.47058868]
[90.07645416 85.28858185]
[87.72993469 70.47325134]
[85.38341522 55.65792847]
[83.03690338 40.84260178]
[80.69038391 26.02727890]
[72.24069977 11.32900810]
[84.02545166 -0.85934669]
[98.99982452 7.09077930]
[95.50570679 23.68076134]
[97.85222626 38.49608612]
[100.19874573 53.31141281]
[102.54525757 68.12673950]
[104.89177704 82.94206238]
[118.74996948 88.68231201]
[130.88522339 79.86553192]
[143.02047729 71.04875946]
[155.15573120 62.23197556]
[167.29098511 53.41519928]
[179.42623901 44.59841919]
[188.68641663 30.39682007]
[204.89648438 35.36371231]
[204.61109924 52.31525803]
[188.24302673 56.73367310]
[176.10777283 65.55045319]
[163.97251892 74.36723328]
[151.83726501 83.18401337]
[139.70199585 92.00078583]
[127.56674957 100.81756592]
[122.37499237 114.89044189]
[125.87667084 129.47598267]
[129.37835693 144.06153870]
[132.88003540 158.64707947]
[136.38171387 173.23263550]
[139.88339233 187.81817627]
[143.38507080 202.40373230]
[146.88674927 216.98927307]
[161.97314453 217.93391418]
[176.11026001 223.28494263]
[188.04103088 232.56652832]
[196.70460510 244.95336914]
[201.33059692 259.34405518]
[201.50769043 274.45895386]
[197.22012329 288.95404053]
[188.84913635 301.54046631]
[177.13909912 311.09906006]
[163.13122559 316.77981567]
[148.07112122 318.07763672]
[133.29788208 314.87716675]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 67]
[8 66]
[9 65]
[10 64]
[11 63]
[12 62]
[13 61]
[14 60]
[15 31]
[16 30]
[17 29]
[18 28]
[19 27]
[20 26]
[21 25]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[45 59]
[46 58]
[47 57]
[48 56]
[49 55]
[50 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
