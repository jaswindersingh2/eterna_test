%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACCCGCAGCGCAGUCCGCACCAAAGCCGGAAACGAGCAGGAGCAGGUCGAGCGCGAGCAUCCCUAACGCUGUUCG\
) } def
/len { sequence length } bind def

/coor [
[78.14051056 123.22302246]
[72.94875336 137.29589844]
[76.25769806 153.35774231]
[63.82408524 164.05059814]
[48.43854904 158.37457275]
[45.92840958 142.16867065]
[58.87588501 132.10414124]
[64.06764221 118.03126526]
[68.99447632 107.74736786]
[76.29235840 100.58374786]
[84.82420349 96.99283600]
[93.38904572 97.08049774]
[87.64879608 83.22230530]
[81.90854645 69.36411285]
[76.16828918 55.50591660]
[61.33739853 44.80330276]
[63.98900986 27.57221222]
[51.18485641 18.27897644]
[52.88303757 3.48149490]
[46.60313797 -10.14065266]
[40.05700302 -23.63687706]
[33.24714279 -37.00197601]
[20.08801079 -45.78535843]
[21.20393562 -60.63809967]
[14.39407825 -74.00319672]
[3.55602193 -76.87378693]
[-3.64986372 -85.17014313]
[-4.92194557 -95.86061859]
[-0.06905396 -105.22029114]
[-5.80930567 -119.07848358]
[-11.82053757 -132.82130432]
[-18.10043335 -146.44345093]
[-31.79765129 -155.46112061]
[-30.56675148 -171.81399536]
[-15.67397881 -178.67965698]
[-2.43973970 -168.99530029]
[-4.47828627 -152.72334290]
[1.80160964 -139.10119629]
[7.61559486 -134.21696472]
[8.04888725 -124.81873322]
[13.78913879 -110.96054077]
[29.96706963 -100.66776276]
[27.75917625 -80.81305695]
[34.56903458 -67.44795990]
[47.24108124 -59.62053680]
[46.61223984 -43.81183243]
[53.42210007 -30.44673347]
[59.42335510 -25.79451370]
[60.22528839 -16.42054939]
[66.50518036 -2.79840112]
[78.86015320 5.52048779]
[77.61115265 21.29231644]
[88.98446655 25.87757492]
[94.25431061 37.39658737]
[90.02648163 49.76566696]
[95.76673889 63.62385941]
[101.50698853 77.48205566]
[107.24723816 91.34024811]
[116.30057526 103.30005646]
[128.08033752 112.58646393]
[139.86009216 121.87287140]
[151.63984680 131.15928650]
[163.41960144 140.44569397]
[179.04722595 142.91305542]
[184.25204468 156.86866760]
[199.91535950 154.76242065]
[212.42947388 164.41499329]
[214.37002563 180.09968567]
[204.58567810 192.51106262]
[188.88133240 194.28565979]
[176.57409668 184.37065125]
[174.96563721 168.64842224]
[160.18057251 166.84527588]
[154.13317871 152.22544861]
[142.35342407 142.93904114]
[130.57366943 133.65263367]
[118.79392242 124.36621857]
[107.01416779 115.07981110]
[99.79575348 117.11561584]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 8]
[2 7]
[12 58]
[13 57]
[14 56]
[15 55]
[17 52]
[19 50]
[20 49]
[21 47]
[22 46]
[24 44]
[25 43]
[29 41]
[30 40]
[31 38]
[32 37]
[59 78]
[60 77]
[61 76]
[62 75]
[63 74]
[65 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
