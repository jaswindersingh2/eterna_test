%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGUUGGUGGAAAAAACCACGUCAAAGACACAACAGGGAGAGAAAAACUCGUUGAAAACAACCCCAACUGACUUCG\
) } def
/len { sequence length } bind def

/coor [
[72.90232086 262.20468140]
[72.31342316 247.21624756]
[71.72452545 232.22781372]
[60.10903931 216.97175598]
[69.05252075 199.10842896]
[67.28945923 184.21240234]
[65.52639771 169.31637573]
[63.76333618 154.42034912]
[62.00027466 139.52432251]
[49.52823257 131.19078064]
[35.09140396 135.26237488]
[20.65457344 139.33398438]
[6.21774530 143.40559387]
[-1.28491855 157.31550598]
[-16.44963264 161.76600647]
[-30.27944183 154.11669922]
[-34.56936646 138.90577698]
[-26.77426720 125.15761566]
[-11.51884174 121.02874756]
[2.14613867 128.96876526]
[16.58296776 124.89715576]
[31.01979637 120.82555389]
[45.45662308 116.75394440]
[48.09356689 101.98754883]
[35.95831299 93.17076874]
[23.82305908 84.35398865]
[7.45498228 79.93556976]
[7.16959095 62.98402786]
[23.37965965 58.01713562]
[32.63983917 72.21873474]
[44.77509308 81.03551483]
[56.91034698 89.85229492]
[64.07735443 77.12615967]
[74.66012573 67.88847351]
[87.20242310 62.92243195]
[100.12631226 62.45766068]
[111.92819977 66.18084717]
[119.76567841 53.39124298]
[127.60315704 40.60164261]
[128.21659851 24.79233170]
[141.46369934 17.98327637]
[149.30117798 5.19367361]
[157.13865662 -7.59592867]
[152.00553894 -22.36701584]
[157.61628723 -36.96336746]
[171.32170105 -44.49303055]
[186.65048218 -41.40073395]
[196.36486816 -29.14655876]
[195.87800598 -13.51655579]
[185.41978455 -1.89073348]
[169.92826843 0.24154982]
[162.09078979 13.03115273]
[154.25331116 25.82075500]
[154.20045471 40.71526718]
[140.39276123 48.43911743]
[132.55528259 61.22872162]
[124.71779633 74.01832581]
[131.33946228 81.04593658]
[135.95867920 89.75489044]
[138.15161133 99.57353210]
[137.65780640 109.82463074]
[134.40602112 119.77205658]
[128.52673340 128.67364502]
[120.34989166 135.83638000]
[110.38764191 140.66990662]
[99.30276489 142.73413086]
[87.86473083 141.77731323]
[76.89630127 137.76126099]
[78.65936279 152.65728760]
[80.42242432 167.55331421]
[82.18548584 182.44934082]
[83.94854736 197.34536743]
[93.12315369 203.78977966]
[97.01214600 214.06742859]
[94.50544739 224.53741455]
[86.71296692 231.63891602]
[87.30185699 246.62734985]
[87.89075470 261.61578369]
[90.83596039 280.77239990]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[5 72]
[6 71]
[7 70]
[8 69]
[9 68]
[10 23]
[11 22]
[12 21]
[13 20]
[24 32]
[25 31]
[26 30]
[37 57]
[38 56]
[39 55]
[41 53]
[42 52]
[43 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
