%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAACCAGGAAAAACGGAAAAGUCGACGGAAACAGUCAAGACAGCGGAAACAGCAAGCGAAAAGCUUGUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[84.41374969 147.10990906]
[77.60389709 160.47500610]
[83.88012695 174.79780579]
[79.43188477 189.78938293]
[66.35949707 198.37115479]
[50.83534622 196.49105835]
[40.18945694 185.03684998]
[39.44849777 169.41682434]
[48.96232224 157.00630188]
[64.23880005 153.66514587]
[71.04865265 140.30004883]
[65.95281219 136.09796143]
[61.46020126 131.25633240]
[57.65041351 125.86090851]
[54.59094620 120.00730133]
[52.33601379 113.79921722]
[50.92555618 107.34664154]
[50.38457489 100.76390839]
[50.72264481 94.16764069]
[51.93378448 87.67470551]
[53.99652863 81.40014648]
[56.87433624 75.45512390]
[60.51621628 69.94496918]
[64.85764313 64.96731567]
[69.82170105 60.61035156]
[75.32044220 56.95126724]
[81.25643921 54.05488968]
[77.75476074 39.46934128]
[74.25308228 24.88379288]
[70.18147278 10.44696522]
[65.54621887 -3.81888294]
[60.91096497 -18.08473015]
[46.34524155 -23.77452278]
[38.88998032 -37.52054596]
[42.06532669 -52.83234406]
[54.37198257 -62.48015594]
[69.99911499 -61.90858078]
[81.56807709 -51.38749695]
[83.61634827 -35.88463974]
[75.17681122 -22.71998596]
[79.81206512 -8.45413780]
[84.44731903 5.81170988]
[88.45835876 8.83409023]
[90.44884491 14.51973724]
[88.83863068 21.38211250]
[92.34030914 35.96766281]
[95.84198761 50.55321121]
[114.43824768 52.52568054]
[130.98387146 61.24082947]
[143.12892151 75.46085358]
[149.14846802 93.16613007]
[148.18756104 111.84200287]
[162.04576111 117.58225250]
[175.90394592 123.32250214]
[186.00956726 118.46656036]
[196.87701416 120.09531403]
[204.78723145 127.39826202]
[207.17567444 137.66711426]
[220.54077148 144.47697449]
[233.90586853 151.28683472]
[247.27096558 158.09667969]
[260.63607788 164.90653992]
[274.00115967 171.71640015]
[289.64193726 168.14627075]
[302.09469604 178.26103210]
[301.80676270 194.30149841]
[288.99899292 203.96279907]
[273.49642944 199.83361816]
[267.19131470 185.08149719]
[253.82621765 178.27163696]
[240.46112061 171.46177673]
[227.09602356 164.65193176]
[213.73092651 157.84207153]
[200.36581421 151.03221130]
[181.37939453 153.71224976]
[170.16369629 137.18069458]
[156.30549622 131.44044495]
[142.44731140 125.70019531]
[127.09992218 141.56764221]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[27 47]
[28 46]
[29 45]
[30 42]
[31 41]
[32 40]
[52 78]
[53 77]
[54 76]
[58 74]
[59 73]
[60 72]
[61 71]
[62 70]
[63 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
