%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACUGCUGGUGGAAAGAAGUUUUCGGAAGCGACACAAAACACAUGAAAACAUGUGCAGCAGAAAUUUGUCGUUCG\
) } def
/len { sequence length } bind def

/coor [
[90.65644073 124.32415009]
[79.81536865 116.47869110]
[65.95717621 122.21894073]
[52.09898376 127.95919037]
[38.24079132 133.69944763]
[24.38259888 139.43969727]
[10.52440548 145.17994690]
[-3.33378768 150.92019653]
[-13.12254810 163.34962463]
[-27.84195137 161.07180786]
[-41.70014191 166.81205750]
[-46.22958374 181.77929688]
[-59.34829712 190.29008484]
[-74.86203003 188.32586670]
[-85.44567108 176.81411743]
[-86.10195160 161.19030762]
[-76.52098846 148.83152771]
[-61.22662735 145.57322693]
[-47.44039536 152.95387268]
[-33.58220291 147.21362305]
[-24.78467178 135.19476318]
[-9.07403946 137.06201172]
[4.78415394 131.32174683]
[18.64234734 125.58150482]
[32.50053787 119.84124756]
[46.35873413 114.10099792]
[60.21692657 108.36074829]
[74.07511902 102.62049866]
[77.50287628 86.85292053]
[89.55769348 76.12690735]
[105.61686707 74.55560303]
[119.52211761 82.74156952]
[133.14427185 76.46167755]
[146.76641846 70.18177795]
[160.38856506 63.90188217]
[174.01071167 57.62198639]
[187.63285828 51.34209061]
[201.25500488 45.06219482]
[200.35406494 25.76291084]
[207.54092407 7.87664795]
[221.48072815 -5.37291002]
[239.62509155 -11.61423397]
[258.67797852 -9.75237560]
[275.19442749 -0.16087221]
[286.97418213 -9.44728184]
[298.75393677 -18.73369026]
[310.53369141 -28.02009964]
[322.31344604 -37.30651093]
[334.09320068 -46.59291840]
[339.66415405 -62.01681137]
[355.85256958 -64.63742828]
[366.00515747 -51.75889969]
[359.67785645 -36.62955475]
[343.37960815 -34.81316376]
[331.59985352 -25.52675438]
[319.82009888 -16.24034691]
[308.04034424 -6.95393658]
[296.26058960 2.33247256]
[284.48083496 11.61888218]
[288.66171265 22.16990852]
[290.06304932 33.44547272]
[288.58862305 44.72495651]
[284.32626343 55.28581619]
[277.54257202 64.44988251]
[268.66625977 71.62689972]
[258.26113892 76.35253906]
[246.99021912 78.31844330]
[235.57351685 77.39234924]
[224.74200439 73.62693787]
[215.19087219 67.25690460]
[207.53489685 58.68434143]
[193.91275024 64.96424103]
[180.29060364 71.24413300]
[166.66845703 77.52403259]
[153.04631042 83.80392456]
[139.42416382 90.08382416]
[125.80201721 96.36371613]
[124.20418549 109.65006256]
[116.22241211 120.39116669]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 28]
[3 27]
[4 26]
[5 25]
[6 24]
[7 23]
[8 22]
[10 20]
[11 19]
[32 77]
[33 76]
[34 75]
[35 74]
[36 73]
[37 72]
[38 71]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
