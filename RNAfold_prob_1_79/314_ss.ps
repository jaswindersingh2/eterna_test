%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGGCGCUCUAAUUUGAGCGGCUUUGCCAGCCCAGCCACCGAAAACCGGGCAGUGAACUGCGGCAUUUCGGUUCG\
) } def
/len { sequence length } bind def

/coor [
[66.24205780 117.31329346]
[51.80523300 121.38490295]
[40.62340164 132.57763672]
[26.27375412 128.58552551]
[11.83692646 132.65713501]
[-2.59990239 136.72872925]
[-17.03673172 140.80033875]
[-28.21856308 151.99307251]
[-42.56820679 148.00096130]
[-57.00503540 152.07257080]
[-71.44186401 156.14418030]
[-85.87869263 160.21578979]
[-100.31552124 164.28738403]
[-107.81818390 178.19729614]
[-122.98290253 182.64779663]
[-136.81271362 174.99848938]
[-141.10263062 159.78756714]
[-133.30754089 146.03941345]
[-118.05210876 141.91055298]
[-104.38713074 149.85055542]
[-89.95030212 145.77896118]
[-75.51347351 141.70735168]
[-61.07664490 137.63574219]
[-46.63981628 133.56413269]
[-36.49060059 122.66263580]
[-21.10833740 126.36351013]
[-6.67150927 122.29190826]
[7.76531935 118.22029877]
[22.20214844 114.14869690]
[32.35136032 103.24719238]
[47.73362732 106.94807434]
[62.17045593 102.87646484]
[62.96003342 91.79088593]
[66.92809296 81.40974426]
[73.73411560 72.62387848]
[82.79407501 66.18721008]
[93.33051300 62.65208817]
[104.43926239 62.32186890]
[115.16707611 65.22489166]
[124.59337616 71.11203766]
[131.90925598 79.47811890]
[136.48693848 89.60522461]
[151.44070435 88.42833710]
[166.39447021 87.25144958]
[181.34822083 86.07456207]
[196.30198669 84.89767456]
[211.25575256 83.72079468]
[226.20950317 82.54390717]
[240.97129822 71.74617767]
[256.53964233 79.59270477]
[271.43566895 77.82965088]
[277.31655884 73.94377136]
[283.33972168 73.84333038]
[287.56359863 76.56034851]
[302.55203247 75.97145844]
[317.54046631 75.38256073]
[332.52890015 74.79366302]
[346.10183716 65.58998871]
[360.73889160 72.98517609]
[361.38272095 89.37168121]
[347.37100220 97.89247131]
[333.11779785 89.78209686]
[318.12936401 90.37099457]
[303.14093018 90.95989227]
[288.15249634 91.54878998]
[273.19873047 92.72567749]
[258.30270386 94.48873138]
[250.42732239 103.88847351]
[237.84361267 105.34082031]
[227.38639832 97.49766541]
[212.43263245 98.67455292]
[197.47886658 99.85144043]
[182.52511597 101.02832794]
[167.57135010 102.20520782]
[152.61759949 103.38209534]
[137.66383362 104.55898285]
[130.65762329 122.34857941]
[115.86517334 134.46221924]
[97.04339600 137.82336426]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[4 29]
[5 28]
[6 27]
[7 26]
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[42 76]
[43 75]
[44 74]
[45 73]
[46 72]
[47 71]
[48 70]
[50 67]
[51 66]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
