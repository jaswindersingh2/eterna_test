%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGAAGAAGUUCAAAAGAACACUCAAGUCAAACACAGAAAACAGUGAGACAAGAGAACUUCAGCUAACUUUCG\
) } def
/len { sequence length } bind def

/coor [
[101.52470398 343.78964233]
[100.93580627 328.80120850]
[100.34690857 313.81277466]
[99.75801086 298.82434082]
[87.29169464 290.71701050]
[81.92626190 276.65725708]
[85.91516876 261.96231079]
[97.93094635 252.32241821]
[97.34204865 237.33398438]
[86.26434326 227.44358826]
[85.45359802 212.25157166]
[95.90267181 200.69931030]
[95.31377411 185.71087646]
[94.72487640 170.72244263]
[94.13597870 155.73400879]
[93.54708099 140.74557495]
[92.95818329 125.75714111]
[92.36928558 110.76869965]
[81.96926880 121.57794189]
[67.63119507 125.98471069]
[52.95550156 122.88244629]
[41.62740326 113.05014038]
[36.49149704 98.95679474]
[38.83746338 84.14138031]
[48.07620239 72.32420349]
[61.88777542 66.47267151]
[76.80396271 68.05615997]
[89.07915497 76.67704773]
[95.63137054 90.17272186]
[100.82312775 76.09985352]
[94.45531464 61.88406372]
[99.92096710 47.68613052]
[113.51279449 41.70300293]
[118.70455170 27.63013268]
[123.89630127 13.55726147]
[118.64736176 3.65007496]
[119.84820557 -7.27294254]
[126.83496857 -15.46376228]
[137.00213623 -18.25352669]
[143.28202820 -31.87567520]
[149.56192017 -45.49782181]
[141.86274719 -58.97010040]
[143.58624268 -74.39115906]
[154.06970215 -85.83129883]
[169.28201294 -88.89154053]
[183.37374878 -82.39516449]
[190.92631531 -68.84016418]
[189.03562927 -53.43870544]
[178.42869568 -42.11296463]
[163.18406677 -39.21792603]
[156.90417480 -25.59577942]
[150.62428284 -11.97363186]
[154.04765320 6.89293337]
[137.96917725 18.74901772]
[132.77742004 32.82188797]
[127.58566284 46.89475632]
[134.03523254 60.27154922]
[128.97053528 74.61740112]
[114.89599609 81.29161072]
[109.70423889 95.36447906]
[107.35771942 110.17980194]
[107.94661713 125.16824341]
[108.53551483 140.15667725]
[109.12441254 155.14511108]
[109.71331024 170.13354492]
[110.30220795 185.12197876]
[110.89110565 200.11041260]
[122.21434021 210.80723572]
[122.59805298 226.01603699]
[112.33048248 236.74508667]
[112.91938019 251.73352051]
[125.65445709 260.40093994]
[130.78402710 274.73764038]
[126.53824615 289.17498779]
[114.74644470 298.23544312]
[115.33534241 313.22387695]
[115.92424011 328.21231079]
[116.51313782 343.20074463]
[119.45834351 362.35736084]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[4 75]
[8 71]
[9 70]
[12 67]
[13 66]
[14 65]
[15 64]
[16 63]
[17 62]
[18 61]
[29 60]
[30 59]
[33 56]
[34 55]
[35 54]
[39 52]
[40 51]
[41 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
