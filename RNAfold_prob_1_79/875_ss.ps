%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGAAGACGCCCACGGUCUACCAGCACAUGCAUAGGAGCGACCCUUCAAGGGAAACCACGCUGACUGUUUCG\
) } def
/len { sequence length } bind def

/coor [
[101.01665497 146.47709656]
[88.56410217 145.05967712]
[76.94272614 140.36726379]
[66.99716949 132.74092102]
[59.45030594 122.73491669]
[54.85063934 111.07652283]
[39.89687729 112.25341034]
[29.65284920 123.98787689]
[14.47084522 124.96838379]
[3.34695816 115.12995148]
[-9.80361080 123.92614746]
[-23.09871101 117.21127319]
[-38.05247116 118.38815308]
[-53.00622940 119.56504059]
[-67.95999146 120.74192810]
[-76.89287567 133.57695007]
[-91.99948883 137.61726379]
[-106.14694977 130.95518494]
[-112.65526581 116.73633575]
[-108.45140076 101.67440796]
[-95.52029419 92.88119507]
[-79.96762085 94.50858307]
[-69.13687897 105.78816986]
[-54.18311691 104.61128235]
[-39.22935867 103.43439484]
[-24.27559662 102.25750732]
[-12.19462109 93.54549408]
[2.17007184 100.17619324]
[11.61793613 88.71872711]
[26.76640892 87.31217957]
[38.71998978 97.29965210]
[53.67375183 96.12276459]
[58.41788864 79.21341705]
[69.09648895 65.27066040]
[84.18553925 56.28436279]
[101.53157043 53.53701782]
[118.65902710 57.42072296]
[133.12353516 67.38120270]
[142.86074829 81.99693298]
[157.44630432 78.49524689]
[172.03184509 74.99356842]
[186.61740112 71.49188995]
[199.50830078 58.51784515]
[216.11245728 63.83234787]
[230.54928589 59.76074219]
[244.98611450 55.68913269]
[259.42294312 51.61752701]
[273.44839478 33.26728821]
[295.41351318 37.67815018]
[308.77859497 30.86829376]
[322.14370728 24.05843544]
[335.50881958 17.24857903]
[346.87658691 4.67043495]
[362.11010742 12.11198997]
[359.17642212 28.81018829]
[342.31866455 30.61367607]
[328.95355225 37.42353439]
[315.58847046 44.23339081]
[302.22335815 51.04324722]
[301.74807739 58.82765579]
[298.42474365 65.95997620]
[292.66915894 71.42708588]
[285.24636841 74.43193054]
[277.16909790 74.50946808]
[269.55981445 71.59791565]
[263.49453735 66.05435944]
[249.05770874 70.12596130]
[234.62088013 74.19757080]
[220.18405151 78.26917267]
[213.87606812 88.78517151]
[201.67448425 92.18816376]
[190.11907959 86.07743835]
[175.53352356 89.57911682]
[160.94798279 93.08080292]
[146.36242676 96.58248138]
[145.59053040 109.09165192]
[141.50505066 120.94002533]
[134.40293884 131.26646423]
[124.80039215 139.32041931]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 32]
[7 31]
[10 28]
[12 26]
[13 25]
[14 24]
[15 23]
[39 75]
[40 74]
[41 73]
[42 72]
[44 69]
[45 68]
[46 67]
[47 66]
[49 59]
[50 58]
[51 57]
[52 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
