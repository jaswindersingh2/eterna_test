%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGAAGAUGACUGGCAAGCAAAAGCAGCAAAAGCAAAGCACAGAAACAUCAAGCAAAAGCAACCUAGCGUUUUCG\
) } def
/len { sequence length } bind def

/coor [
[74.50363159 315.95779419]
[60.42603302 322.48474121]
[45.20711517 319.45751953]
[34.69886017 308.04013062]
[32.94190598 292.62286377]
[40.61183929 279.13391113]
[54.75941467 272.76007080]
[57.68576813 258.04830933]
[60.61212158 243.33651733]
[63.53847885 228.62474060]
[66.46483612 213.91296387]
[69.39118958 199.20117188]
[72.31754303 184.48939514]
[70.48481750 177.12059021]
[75.65840912 169.26258850]
[79.16008759 154.67703247]
[82.66177368 140.09149170]
[86.16345215 125.50593567]
[79.02073669 120.04678345]
[73.89174652 112.66341400]
[71.26878357 104.06452942]
[71.40363312 95.07550049]
[57.78148270 88.79560852]
[41.50953293 90.83415222]
[31.82516670 77.59991455]
[38.69083023 62.70714188]
[55.04371643 61.47624207]
[64.06137848 75.17346191]
[77.68352509 81.45335388]
[86.56501007 71.09490204]
[100.25048065 65.26856995]
[93.97058868 51.64642334]
[80.27336884 42.62876129]
[81.50427246 26.27587318]
[96.39704132 19.41021156]
[109.63127899 29.09457779]
[107.59273529 45.36652756]
[113.87262726 58.98867416]
[114.89231110 44.02337265]
[108.90646362 30.26947975]
[107.57028198 15.32910919]
[111.02053070 0.73130763]
[118.90408325 -12.02994442]
[130.41412354 -21.64862442]
[144.37268066 -27.14032555]
[159.35118103 -27.94301224]
[173.81669617 -23.97453499]
[186.28878784 -15.64103985]
[195.49099731 -3.79540062]
[200.48158264 10.35006428]
[200.74975586 25.34766769]
[196.26809692 39.66250992]
[187.49525452 51.82956314]
[175.32907104 60.60362625]
[161.01467896 65.08672333]
[146.01661682 64.81997681]
[132.58070374 71.48900604]
[147.56913757 72.07790375]
[161.82234192 63.96752548]
[175.83404541 72.48831940]
[175.19021606 88.87482452]
[160.55316162 96.27000427]
[146.98023987 87.06633759]
[131.99180603 86.47743988]
[133.17959595 102.87093353]
[126.79174042 117.26864624]
[114.91719055 126.54127502]
[100.74900055 129.00761414]
[97.24732208 143.59317017]
[93.74563599 158.17871094]
[90.24395752 172.76426697]
[87.02931976 187.41575623]
[84.10296631 202.12753296]
[81.17661285 216.83930969]
[78.25025940 231.55108643]
[75.32390594 246.26287842]
[72.39754486 260.97463989]
[69.47119141 275.68643188]
[80.10268402 286.98913574]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 78]
[8 77]
[9 76]
[10 75]
[11 74]
[12 73]
[13 72]
[15 71]
[16 70]
[17 69]
[18 68]
[22 29]
[23 28]
[31 38]
[32 37]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
