%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCGUGGCCGGAAAGAAAGAAACCGGGAGUGCUUAAUACCACCGCACAAACGCAUCUUUGUCAUCGUUGAUUUCG\
) } def
/len { sequence length } bind def

/coor [
[134.97229004 219.85615540]
[129.15036011 208.63941956]
[126.53575134 196.26013184]
[127.32644653 183.61770630]
[131.47279358 171.63281250]
[138.68041992 161.18035889]
[129.39401245 149.40060425]
[120.10759735 137.62084961]
[110.82118988 125.84109497]
[94.56995392 127.48408508]
[80.16458893 119.78425598]
[72.50198364 105.35905457]
[57.54822540 104.18216705]
[42.59446716 103.00527954]
[27.64070702 101.82839203]
[19.54055023 114.81477356]
[6.32729006 122.53929901]
[-8.96276379 123.22693634]
[-22.81606865 116.71966553]
[-32.04923630 104.51281738]
[-34.54055023 89.41143036]
[-29.71753120 74.88568878]
[-18.68846703 64.27351379]
[-3.98775792 60.01349258]
[11.00647926 63.08455658]
[22.84868050 72.78099060]
[28.81759262 86.87463379]
[43.77135468 88.05152130]
[58.72511292 89.22840118]
[73.67887115 90.40528870]
[78.91310883 81.55540466]
[86.98766327 75.18993378]
[96.81494141 72.16629028]
[99.16145325 57.35096359]
[101.50797272 42.53563690]
[103.85449219 27.72031212]
[91.54367065 18.62622643]
[84.87966156 4.84763861]
[85.39378357 -10.44923210]
[92.96791077 -23.74927711]
[105.86155701 -31.99624443]
[121.11186218 -33.29504013]
[135.21441650 -27.34720802]
[144.92854309 -15.51952171]
[148.02201843 -0.52989328]
[143.78399658 14.17716885]
[133.18832397 25.22209167]
[118.66981506 30.06682968]
[116.32329559 44.88215637]
[113.97678375 59.69747925]
[111.63026428 74.51280212]
[123.86809540 85.33118439]
[127.99230957 101.13602448]
[122.60094452 116.55467987]
[131.88735962 128.33444214]
[141.17376709 140.11419678]
[150.46017456 151.89395142]
[167.38462830 146.42187500]
[185.09863281 147.62213135]
[201.07171631 155.29908752]
[213.03103638 168.33366394]
[219.28485107 184.84631348]
[218.96176147 202.46810913]
[212.13203430 218.68057251]
[223.14686584 228.86257935]
[234.16169739 239.04460144]
[245.17654419 249.22660828]
[261.28204346 252.31614685]
[266.40280151 267.89529419]
[255.27105713 279.93756104]
[239.33816528 276.05487061]
[234.99453735 260.24145508]
[223.97969055 250.05943298]
[212.96485901 239.87742615]
[201.95001221 229.69540405]
[191.13290405 236.05718994]
[178.99456787 239.29960632]
[166.41647339 239.17904663]
[154.31419373 235.69639587]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 57]
[7 56]
[8 55]
[9 54]
[12 30]
[13 29]
[14 28]
[15 27]
[33 51]
[34 50]
[35 49]
[36 48]
[64 75]
[65 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
