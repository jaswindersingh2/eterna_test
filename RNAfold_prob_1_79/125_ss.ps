%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGCGCCCGAGAGCCCACCAAAGCCGAAUUCGAGCAGGAGGAGCACGCCGGGAAGCAGAAACAGAUGCAUUCG\
) } def
/len { sequence length } bind def

/coor [
[146.19303894 282.36154175]
[140.45153809 278.41586304]
[135.52862549 273.47576904]
[131.59442139 267.70788574]
[128.78555298 261.30761719]
[127.20050812 254.49237061]
[126.89614868 247.49418640]
[127.88568878 240.55191040]
[130.13812256 233.90299988]
[133.57919312 227.77536011]
[138.09387207 222.37959290]
[143.53015137 217.90176392]
[137.78990173 204.04356384]
[132.04963684 190.18537903]
[126.30939484 176.32717896]
[111.85630035 166.57785034]
[114.06434631 148.42224121]
[101.70937347 140.10334778]
[102.95837402 124.33152771]
[96.67848206 110.70938110]
[90.13233948 97.21315002]
[83.32248688 83.84805298]
[70.16335297 75.06467438]
[71.27927399 60.21192932]
[64.46942139 46.84683228]
[53.63136292 43.97624207]
[46.42547607 35.67988586]
[45.15339661 24.98941231]
[50.00628662 15.62973976]
[44.26603699 1.77154648]
[38.25480270 -11.97127247]
[31.97490692 -25.59342003]
[18.27768898 -34.61108398]
[19.50858879 -50.96397018]
[34.40136337 -57.82963562]
[47.63560104 -48.14526749]
[45.59705353 -31.87331581]
[51.87694931 -18.25116920]
[57.69093704 -13.36692715]
[58.12422943 -3.96870494]
[63.86447906 9.88948822]
[80.04241180 20.18226814]
[77.83451843 40.03697586]
[84.64437866 53.40207291]
[97.31642151 61.22949219]
[96.68758392 77.03820038]
[103.49743652 90.40329742]
[109.83570099 95.75314331]
[110.30062866 104.42948151]
[116.58052826 118.05162811]
[129.38467407 127.34486389]
[127.68650055 142.14234924]
[139.63923645 147.43389893]
[144.52073669 159.12277222]
[140.16758728 170.58692932]
[145.90783691 184.44512939]
[151.64808655 198.30331421]
[157.38833618 212.16151428]
[183.68623352 216.74980164]
[200.37178040 237.36405945]
[199.39328003 263.69238281]
[211.86532593 272.02593994]
[224.33737183 280.35949707]
[238.84819031 274.86264038]
[253.80978394 278.97729492]
[263.46911621 291.12133789]
[264.11193848 306.62509155]
[255.49111938 319.52703857]
[240.92150879 324.86618042]
[226.00543213 320.58944702]
[216.47842407 308.34136963]
[216.00381470 292.83154297]
[203.53176880 284.49798584]
[191.05972290 276.16442871]
[185.74234009 280.58209229]
[179.69622803 283.94967651]
[173.12648010 286.14974976]
[166.25651550 287.10452271]
[159.32054138 286.77862549]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 58]
[13 57]
[14 56]
[15 55]
[17 52]
[19 50]
[20 49]
[21 47]
[22 46]
[24 44]
[25 43]
[29 41]
[30 40]
[31 38]
[32 37]
[61 74]
[62 73]
[63 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
