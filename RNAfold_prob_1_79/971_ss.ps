%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCUGGACUCCGAAAGGAGAGCUUCGAUCGAAAAAAGAUCGAAGCAGCCGAAAACGGCACCAGCGCUUUAUUUCG\
) } def
/len { sequence length } bind def

/coor [
[90.32959747 250.66661072]
[85.60164642 236.28170776]
[85.80313873 221.14109802]
[90.91220856 206.88711548]
[100.37465668 195.06591797]
[113.16408539 186.95979309]
[109.66240692 172.37423706]
[106.16072083 157.78869629]
[102.65904236 143.20314026]
[99.15736389 128.61759949]
[84.56446838 124.11267853]
[74.36390686 112.74626923]
[59.65212631 115.67262268]
[44.94034958 118.59897614]
[30.22856903 121.52533722]
[18.26251221 132.73896790]
[2.64880466 127.72457123]
[-0.55051023 111.64052582]
[11.95574856 101.03272247]
[27.30221367 106.81355286]
[42.01399231 103.88719940]
[56.72577286 100.96084595]
[71.43755341 98.03449249]
[75.88732147 84.56446838]
[86.25708771 74.88408661]
[82.75540924 60.29853821]
[79.25373077 45.71298981]
[75.75204468 31.12744141]
[72.25036621 16.54189301]
[68.74868774 1.95634341]
[65.24700928 -12.62920570]
[61.74532700 -27.21475410]
[58.24364471 -41.80030441]
[44.16923904 -48.61537170]
[37.81546402 -62.90394974]
[42.18237305 -77.91941071]
[55.20804596 -86.57191467]
[70.74216461 -84.77600861]
[81.44998169 -73.37966919]
[82.27560425 -57.76389694]
[72.82919312 -45.30198288]
[76.33087158 -30.71643448]
[79.83255768 -16.13088608]
[83.33423615 -1.54533708]
[86.83591461 13.04021168]
[90.33759308 27.62576103]
[93.83927917 42.21130753]
[97.34095764 56.79685974]
[100.84263611 71.38240814]
[114.47696686 75.29991913]
[124.55700684 85.28163910]
[138.99383545 81.21002960]
[153.43066406 77.13842773]
[167.86749268 73.06681824]
[178.91685486 60.94890976]
[194.87585449 64.72280884]
[199.32723999 80.50625610]
[187.69181824 92.06259155]
[171.93910217 87.50364685]
[157.50227356 91.57525635]
[143.06544495 95.64685822]
[128.62861633 99.71846771]
[124.70008087 114.47696686]
[113.74291229 125.11591339]
[117.24459076 139.70146179]
[120.74626923 154.28701782]
[124.24795532 168.87255859]
[127.74963379 183.45811462]
[142.82519531 184.87445068]
[156.62301636 191.11134338]
[167.64640808 201.49226379]
[174.69963074 214.89117432]
[177.01760864 229.85466003]
[174.34889221 244.75958252]
[166.98298645 257.98916626]
[155.71887207 268.10839844]
[141.77839661 274.01956177]
[126.67373657 275.08151245]
[112.04330444 271.17901611]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 68]
[7 67]
[8 66]
[9 65]
[10 64]
[12 23]
[13 22]
[14 21]
[15 20]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[51 62]
[52 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
