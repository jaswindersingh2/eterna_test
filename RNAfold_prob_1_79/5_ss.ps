%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGAUGGCAUCAGAUCCUGAAACAGAGAUCAAACGAUCACAGAAACUGGAUCAGAUGGCAUCGAUUACCUUCG\
) } def
/len { sequence length } bind def

/coor [
[111.31431580 242.69100952]
[108.96779633 227.87568665]
[95.37235260 224.48863220]
[84.08867645 216.10935974]
[76.87097931 203.99873352]
[74.85736847 190.00083923]
[78.39055634 176.26223755]
[86.96002960 164.90278625]
[99.27553558 157.68852234]
[97.51247406 142.79249573]
[95.74941254 127.89646912]
[93.98635101 113.00044250]
[85.77534485 101.68360138]
[91.11762238 88.76261902]
[89.35456085 73.86659241]
[87.59149933 58.97056580]
[85.82843781 44.07453918]
[76.52272797 31.27944565]
[82.71047211 17.73097229]
[80.94741058 2.83494473]
[79.18434906 -12.06108189]
[77.42128754 -26.95710945]
[75.65822601 -41.85313416]
[60.78102875 -44.41223145]
[47.24139404 -51.05306244]
[36.13285065 -61.22976685]
[28.34987831 -74.11128998]
[24.51592064 -88.64926147]
[24.93342018 -103.66331482]
[29.56000137 -117.93691254]
[38.01258087 -130.31591797]
[49.59908676 -139.80191040]
[63.37509537 -145.63276672]
[61.61203384 -160.52879333]
[59.84897614 -175.42481995]
[58.08591461 -190.32084656]
[47.84569550 -203.12982178]
[54.06967163 -218.30198669]
[70.35514832 -220.22949219]
[79.94902039 -206.92950439]
[72.98194122 -192.08390808]
[74.74500275 -177.18788147]
[76.50806427 -162.29185486]
[78.27112579 -147.39582825]
[93.02768707 -144.94203186]
[106.50851440 -138.42294312]
[117.61737061 -128.35919189]
[125.44822693 -115.56002808]
[129.35914612 -101.05828094]
[129.02494812 -86.02696991]
[124.46415710 -71.68446350]
[116.03824615 -59.19570923]
[104.42298126 -49.57759857]
[90.55425262 -43.61619568]
[92.31731415 -28.72017097]
[94.08037567 -13.82414341]
[95.84343719 1.07188368]
[97.60649872 15.96791077]
[106.78609467 27.69754028]
[100.72446442 42.31147766]
[102.48752594 57.20750427]
[104.25058746 72.10353088]
[106.01364899 86.99955750]
[114.22465515 98.31639862]
[108.88237762 111.23738098]
[110.64543915 126.13340759]
[112.40850067 141.02943420]
[114.17156219 155.92546082]
[129.49209595 161.01638794]
[141.06233215 172.19262695]
[146.64068604 187.21960449]
[145.17642212 203.12367249]
[137.00726318 216.78059387]
[123.78312683 225.52915955]
[126.12963867 240.34448242]
[138.21134949 250.89967346]
[137.34788513 266.91946411]
[124.20162201 276.11486816]
[108.85725403 271.43194580]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[9 68]
[10 67]
[11 66]
[12 65]
[14 63]
[15 62]
[16 61]
[17 60]
[19 58]
[20 57]
[21 56]
[22 55]
[23 54]
[33 44]
[34 43]
[35 42]
[36 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
