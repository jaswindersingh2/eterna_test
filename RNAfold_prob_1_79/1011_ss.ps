%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACUGAAACAGAAGUCGAAACGACAAGUAUGAAACAUACAACAUCAAAGAUGAAGCCAAAGGCACCUUAUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[143.04606628 161.43231201]
[134.29808044 166.71234131]
[124.91370392 170.75451660]
[115.06705475 173.48385620]
[104.94083405 174.84973145]
[94.72293854 174.82678223]
[84.60296631 173.41543579]
[74.76867676 170.64187622]
[65.40254974 166.55757141]
[56.67836761 161.23831177]
[48.75801468 154.78277588]
[41.78844452 147.31077576]
[35.89897537 138.96092224]
[31.19889069 129.88815308]
[27.77539635 120.26081848]
[25.69201279 110.25754547]
[24.98740005 100.06395721]
[25.67463112 89.86917114]
[11.08908272 86.36749268]
[-3.49646640 82.86581421]
[-18.08201599 79.36412811]
[-34.89500046 81.54583740]
[-41.64574432 65.99386597]
[-28.57034111 55.20172882]
[-14.58033466 64.77857971]
[0.00521402 68.28025818]
[14.59076309 71.78194427]
[29.17631149 75.28362274]
[39.63269806 55.47267151]
[55.47267151 39.63269806]
[75.28362274 29.17631149]
[71.78194427 14.59076309]
[68.28025818 0.00521402]
[64.77857971 -14.58033466]
[61.27690125 -29.16588402]
[51.70005035 -43.15589142]
[62.49218369 -56.23129272]
[78.04415894 -49.48054886]
[75.86244965 -32.66756439]
[79.36412811 -18.08201599]
[82.86581421 -3.49646640]
[86.36749268 11.08908272]
[89.86917114 25.67463112]
[107.82942963 25.39709091]
[125.34075165 29.39730644]
[141.39901733 37.44590378]
[155.08346558 49.08137131]
[165.60939026 63.63653564]
[172.37326050 80.27678680]
[174.98722839 98.04798126]
[173.30139160 115.93109894]
[187.56724548 120.56635284]
[201.83308411 125.20160675]
[216.09893799 129.83686829]
[230.36477661 134.47212219]
[244.63063049 139.10737610]
[258.89648438 143.74263000]
[278.16134644 138.45596313]
[290.85818481 152.82456970]
[305.44375610 156.32624817]
[320.02929688 159.82792664]
[336.84228516 157.64622498]
[343.59301758 173.19819641]
[330.51760864 183.99032593]
[316.52761841 174.41348267]
[301.94207764 170.91178894]
[287.35650635 167.41011047]
[278.87124634 173.66743469]
[268.11337280 174.08337402]
[258.79193115 168.26403809]
[254.26123047 158.00848389]
[239.99537659 153.37321472]
[225.72952271 148.73796082]
[211.46368408 144.10270691]
[197.19783020 139.46745300]
[182.93199158 134.83219910]
[168.66613770 130.19694519]
[163.92533875 139.24850464]
[157.99841309 147.57180786]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 28]
[19 27]
[20 26]
[21 25]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[51 77]
[52 76]
[53 75]
[54 74]
[55 73]
[56 72]
[57 71]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
