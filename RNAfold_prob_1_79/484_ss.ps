%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGCGCGCGGCACGCAAAAGCGCCGAAAACGGGCCAAAACGCGCCAAAAGGCGCGGCGCGCAAAGCGGGCGUUCG\
) } def
/len { sequence length } bind def

/coor [
[90.76157379 362.11987305]
[96.80791473 346.28073120]
[96.80791473 331.28073120]
[96.80791473 316.28073120]
[88.39897919 307.35513306]
[88.43576050 294.68792725]
[97.45366669 285.22506714]
[98.04256439 270.23663330]
[90.81089783 257.21539307]
[99.08402252 243.72962952]
[99.67292023 228.74119568]
[100.26181793 213.75276184]
[89.87911224 197.63240051]
[100.19656372 180.52583313]
[99.60766602 165.53739929]
[91.37666321 153.12370300]
[98.56620789 139.03041077]
[97.97731018 124.04197693]
[97.38841248 109.05354309]
[92.65869141 110.45242310]
[86.94380188 109.46008301]
[81.37091827 105.67206573]
[77.19101715 99.18054199]
[75.57258606 90.59907532]
[65.83086395 79.19298553]
[57.65369797 74.54021454]
[55.94130325 67.14251709]
[46.65489197 55.36276245]
[37.36848450 43.58301163]
[21.94458961 38.01205826]
[19.32397461 21.82365417]
[32.20250320 11.67104149]
[47.33184814 17.99835587]
[49.14823914 34.29660034]
[58.43464661 46.07635498]
[67.72105408 57.85610962]
[77.23695374 69.45126343]
[86.97867584 80.85735321]
[81.03556824 67.08493805]
[87.19528198 53.40802383]
[101.44750214 48.73103333]
[114.51325226 56.09893799]
[117.88602448 70.71483612]
[109.37033081 83.06274414]
[121.15008545 73.77632904]
[132.92984009 64.48992157]
[144.70959473 55.20351410]
[156.48934937 45.91710281]
[168.26910400 36.63069534]
[173.84005737 21.20680046]
[190.02845764 18.58618355]
[200.18107605 31.46471214]
[193.85375977 46.59405899]
[177.55551147 48.41044998]
[165.77575684 57.69685745]
[153.99600220 66.98326874]
[142.21624756 76.26967621]
[130.43649292 85.55608368]
[118.65674591 94.84249115]
[112.37684631 108.46464539]
[112.96574402 123.45307922]
[113.55464172 138.44151306]
[121.82776642 151.92727661]
[114.59609985 164.94850159]
[115.18499756 179.93693542]
[123.82570648 187.08129883]
[126.89633179 197.63240051]
[123.57589722 207.87344360]
[115.25025940 214.34165955]
[114.66136169 229.33009338]
[114.07246399 244.31852722]
[121.26200104 258.41183472]
[113.03099823 270.82553101]
[112.44210052 285.81396484]
[121.42992401 301.74255371]
[111.80791473 316.28073120]
[111.80791473 331.28073120]
[111.80791473 346.28073120]
[117.85425568 362.11987305]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[7 74]
[8 73]
[10 71]
[11 70]
[12 69]
[14 65]
[15 64]
[17 62]
[18 61]
[19 60]
[24 38]
[25 37]
[27 36]
[28 35]
[29 34]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
