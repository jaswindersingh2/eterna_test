%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACGGAAGUACACGCCCGCCUUGGCGCGGCGAAAACAACGCAGGAUGCUGGUUGGGUACAACCGCACCCACUUCG\
) } def
/len { sequence length } bind def

/coor [
[97.91048431 214.91174316]
[86.93130493 225.65199280]
[72.04895020 229.44819641]
[57.26670074 225.27915955]
[46.56091309 214.26637268]
[42.81138992 199.37219238]
[47.02672958 184.60308838]
[58.07302856 173.93186951]
[72.97888947 170.22904968]
[77.05049133 155.79222107]
[81.12210083 141.35539246]
[85.19371033 126.91856384]
[89.26531219 112.48173523]
[87.64289856 109.53366852]
[86.74096680 106.46627045]
[86.53707886 103.44296265]
[86.97377014 100.61257935]
[73.60867310 93.80271912]
[60.24357605 86.99285889]
[46.87847900 80.18300629]
[33.38225555 73.63686371]
[19.76010704 67.35697174]
[6.13795948 61.07707214]
[-10.13399029 63.11561966]
[-19.81835747 49.88138199]
[-12.95269489 34.98860931]
[3.40019250 33.75770950]
[12.41785526 47.45492554]
[26.04000282 53.73482132]
[39.66215134 60.01471710]
[47.25519943 59.95284271]
[53.68833542 66.81790924]
[67.05343628 73.62776184]
[80.41853333 80.43762207]
[93.78363037 87.24748230]
[83.55876160 76.27241516]
[79.33825684 61.87841034]
[82.01765442 47.11965561]
[91.02841949 35.12773514]
[104.45860291 28.44715309]
[119.45851898 28.49542809]
[132.84542847 35.26231766]
[141.77880859 47.31198883]
[144.36315918 62.08768463]
[140.05009460 76.45422363]
[129.75479126 87.36325073]
[115.66195679 92.50000000]
[130.66195679 92.50000000]
[144.46212769 84.76270294]
[157.18939209 92.50000000]
[172.18939209 92.50000000]
[187.18939209 92.50000000]
[196.03804016 89.30376434]
[202.77540588 92.80606842]
[217.76383972 93.39496613]
[232.75227356 93.98386383]
[247.74070740 94.57276154]
[262.72915649 95.16165924]
[276.98236084 87.05128479]
[290.99404907 95.57207489]
[290.35021973 111.95858002]
[275.71319580 119.35375977]
[262.14025879 110.15009308]
[247.15180969 109.56119537]
[232.16337585 108.97229767]
[217.17494202 108.38339996]
[202.18650818 107.79450226]
[187.18939209 107.50000000]
[172.18939209 107.50000000]
[157.18939209 107.50000000]
[144.46212769 115.23729706]
[130.66195679 107.50000000]
[115.66195679 107.50000000]
[103.70214081 116.55333710]
[99.63053894 130.99017334]
[95.55892944 145.42700195]
[91.48731995 159.86383057]
[87.41571808 174.30065918]
[98.19033051 185.24612427]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 78]
[10 77]
[11 76]
[12 75]
[13 74]
[17 35]
[18 34]
[19 33]
[20 32]
[21 30]
[22 29]
[23 28]
[47 73]
[48 72]
[50 70]
[51 69]
[52 68]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
