%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGCAUCACAUGAGCUGAGAAAAGACGAAAGUACUGCUGAGACUGAGGGUGAGGGCAAAAAAGGAUGUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[117.81700897 153.98574829]
[106.53555298 163.87153625]
[91.76302338 166.47390747]
[77.78251648 161.03833008]
[68.64749908 149.14079285]
[67.00654602 134.23081970]
[73.33542633 120.63136292]
[85.79684448 112.28617096]
[71.93865204 118.02642059]
[58.08045959 123.76667023]
[51.12852859 130.10583496]
[43.56373978 129.44841003]
[29.49087143 134.64016724]
[19.42633438 147.58764648]
[3.22043324 145.07749939]
[-2.45559144 129.69197083]
[8.23726845 117.25834656]
[24.29911423 120.56729126]
[38.37198639 115.37554169]
[52.34020996 109.90847778]
[66.19840240 104.16822815]
[80.05659485 98.42797852]
[65.06748199 97.85657501]
[52.99829102 88.94958496]
[48.03343964 74.79506683]
[51.89426422 60.30044556]
[63.24219894 50.49104309]
[78.14288330 48.76780701]
[91.43021393 55.72818756]
[98.49742889 68.95900726]
[96.89347076 83.87503815]
[100.96508026 69.43820953]
[90.35263824 56.43256760]
[89.49304199 39.83327866]
[98.52481842 26.07605743]
[113.78910065 20.37969017]
[117.29077911 5.79414034]
[120.79246521 -8.79140854]
[119.75021362 -18.14170456]
[124.72855377 -23.87532043]
[128.80015564 -38.31214905]
[124.24121857 -54.06486511]
[135.79756165 -65.70029449]
[151.58099365 -61.24890137]
[155.35490417 -45.28990173]
[143.23698425 -34.24054337]
[139.16539001 -19.80371475]
[135.37800598 -5.28972769]
[131.87632751 9.29582119]
[128.37464905 23.88137054]
[138.03334045 33.30912399]
[141.73655701 46.40175247]
[138.39379883 59.70356369]
[128.78944397 69.64709473]
[115.40190887 73.50981140]
[111.33029938 87.94664001]
[116.52205658 102.01950836]
[128.99409485 110.35306549]
[141.46614075 118.68662262]
[153.93818665 127.02017212]
[166.41023254 135.35372925]
[178.88227844 143.68728638]
[191.35432434 152.02082825]
[205.86514282 146.52397156]
[220.82673645 150.63864136]
[230.48605347 162.78265381]
[231.12889099 178.28640747]
[222.50807190 191.18838501]
[207.93846130 196.52751160]
[193.02238464 192.25077820]
[183.49537659 180.00268555]
[183.02076721 164.49287415]
[170.54872131 156.15931702]
[158.07667542 147.82577515]
[145.60462952 139.49221802]
[133.13259888 131.15866089]
[120.66054535 122.82511139]
[108.18849945 114.49155426]
[118.78361511 125.10963440]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 22]
[9 21]
[10 20]
[12 19]
[13 18]
[31 56]
[32 55]
[36 50]
[37 49]
[38 48]
[40 47]
[41 46]
[57 78]
[58 77]
[59 76]
[60 75]
[61 74]
[62 73]
[63 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
