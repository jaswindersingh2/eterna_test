%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGUGCACGCCCAAGCGAAAGCACGGAAACGAAAGGAGCGAAAGCACAACCGAAAGGAAGCGCACGACUUCG\
) } def
/len { sequence length } bind def

/coor [
[26.28129196 145.36184692]
[14.13490772 153.46890259]
[0.39804494 158.39630127]
[-14.11303043 159.85614014]
[-28.53723145 157.76643372]
[-42.01974487 152.25567627]
[-53.76269150 143.65496826]
[-63.07233810 132.47811890]
[-69.40008545 119.39094543]
[-72.37480164 105.17166138]
[-87.36324310 104.58276367]
[-102.35167694 103.99386597]
[-117.34011078 103.40496826]
[-134.44667053 113.72241974]
[-150.56703186 103.33971405]
[-165.55546570 103.92861176]
[-180.54391479 104.51750946]
[-194.11683655 113.72117615]
[-208.75389099 106.32599640]
[-209.39772034 89.93949127]
[-195.38601685 81.41869354]
[-181.13281250 89.52906799]
[-166.14436340 88.94017029]
[-151.15592957 88.35127258]
[-144.68772888 80.02563477]
[-134.44667053 76.70520020]
[-123.89557648 79.77582550]
[-116.75121307 88.41653442]
[-101.76277924 89.00543213]
[-86.77434540 89.59432220]
[-71.78590393 90.18321991]
[-67.34410858 75.41838074]
[-59.26065826 62.27576447]
[-48.07075500 51.63634109]
[-34.51804733 44.21498108]
[-19.50522804 40.51244354]
[-4.03387785 40.78157043]
[10.86232471 45.01004410]
[24.18668175 52.92081451]
[35.04616165 63.99026871]
[42.71124268 77.48285675]
[46.66493988 92.50000000]
[61.66493988 92.50000000]
[76.66493988 92.50000000]
[91.66493988 92.50000000]
[106.66204834 92.20549774]
[121.65048218 91.61660004]
[128.79484558 82.97589111]
[139.34594727 79.90526581]
[149.58699036 83.22570038]
[156.05520630 91.55134583]
[171.04364014 92.14023590]
[185.13693237 84.95069885]
[197.55062866 93.18170166]
[209.10289001 82.73263550]
[224.29490662 83.54337311]
[234.18530273 94.62107849]
[249.17373657 95.20997620]
[263.42694092 87.09960175]
[277.43865967 95.62039948]
[276.79483032 112.00690460]
[262.15777588 119.40208435]
[248.58483887 110.19841766]
[233.59640503 109.60951996]
[222.86735535 119.87708282]
[207.65855408 119.49337769]
[196.96173096 108.17013550]
[183.94050598 115.40180206]
[170.45474243 107.12867737]
[155.46630859 106.53977966]
[139.34594727 116.92248535]
[122.23937988 106.60503387]
[107.25094604 107.19393158]
[99.73894501 110.71021271]
[91.66493988 107.50000000]
[76.66493988 107.50000000]
[61.66493988 107.50000000]
[46.66493988 107.50000000]
[43.04721832 121.67770386]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 31]
[11 30]
[12 29]
[13 28]
[15 24]
[16 23]
[17 22]
[42 78]
[43 77]
[44 76]
[45 75]
[46 73]
[47 72]
[51 70]
[52 69]
[54 67]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
