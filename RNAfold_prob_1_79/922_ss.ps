%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACCAAGGCCGGUCCCAAGGUAAUCCAGCUAAUGCAAAGGUGACAAAGGCCAAGCAAAAGCAAGGGCGUCGUUUCG\
) } def
/len { sequence length } bind def

/coor [
[95.14996338 214.32658386]
[101.19630432 198.48745728]
[101.19630432 183.48745728]
[101.19630432 168.48745728]
[101.19630432 153.48745728]
[101.19630432 138.48745728]
[81.52222443 130.92266846]
[69.98408508 114.96472168]
[69.12202454 96.67736816]
[77.72650146 82.10292053]
[68.90972137 69.96766663]
[60.09294510 57.83241272]
[51.27616501 45.69715881]
[32.58312988 38.65055847]
[30.75682259 19.56309128]
[21.01510239 8.15700150]
[11.27338123 -3.24908781]
[1.30959511 -14.46171284]
[-8.87241650 -25.47655106]
[-27.86668587 -23.85225868]
[-42.95652771 -35.08708954]
[-46.74428558 -53.25870895]
[-60.36643219 -59.53860474]
[-76.63838196 -57.50005722]
[-86.32274628 -70.73429871]
[-79.45708466 -85.62706757]
[-63.10419846 -86.85797119]
[-54.08653641 -73.16075134]
[-40.46438980 -66.88085175]
[-39.38368607 -68.02921295]
[-38.23532867 -69.10991669]
[-44.51522446 -82.73206329]
[-58.21244049 -91.74972534]
[-56.98154068 -108.10261536]
[-42.08876801 -114.96827698]
[-28.85452843 -105.28391266]
[-30.89307594 -89.01196289]
[-24.61318016 -75.38980865]
[-10.20017242 -73.57933807]
[1.13017154 -64.25518036]
[5.77292824 -50.18007278]
[2.14242148 -35.65856171]
[12.32443237 -24.64372444]
[19.36317444 -21.79515457]
[22.67947197 -12.99080849]
[32.42119217 -1.58471918]
[42.16291428 9.82137012]
[52.70560837 9.74661446]
[61.65337753 15.73342133]
[65.77408600 25.92037964]
[63.41142273 36.88037872]
[72.22820282 49.01563263]
[81.04497528 61.15089035]
[89.86175537 73.28614044]
[109.58161163 69.58978271]
[129.09509277 80.19686890]
[138.41081238 102.70639038]
[153.39924622 103.29528809]
[167.65245056 95.18491364]
[181.66416931 103.70571136]
[181.02033997 120.09221649]
[166.38328552 127.48739624]
[152.81034851 118.28372955]
[137.82191467 117.69483185]
[132.41551208 122.89298248]
[145.28677368 130.59562683]
[159.58200073 135.13946533]
[165.91423035 148.73736572]
[160.19183350 162.60295105]
[146.11239624 167.77685547]
[132.77343750 160.91592407]
[128.79409790 146.45303345]
[121.60270691 133.28929138]
[116.19630432 138.48745728]
[116.19630432 153.48745728]
[116.19630432 168.48745728]
[116.19630432 183.48745728]
[116.19630432 198.48745728]
[122.24264526 214.32658386]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[5 75]
[6 74]
[10 54]
[11 53]
[12 52]
[13 51]
[15 47]
[16 46]
[17 45]
[18 43]
[19 42]
[22 29]
[23 28]
[31 38]
[32 37]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
