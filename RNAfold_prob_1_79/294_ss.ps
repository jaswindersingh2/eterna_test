%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGAUAAAUAUGGAAACAUAAGAUUGAUAAAAUAUGGGAAACGGUGGUGUUGGUCAAUGUCAGAUUUACUUCG\
) } def
/len { sequence length } bind def

/coor [
[78.95021820 300.61090088]
[63.65155792 302.59948730]
[49.71617508 295.98068237]
[41.59080505 282.86648560]
[41.86821747 267.44161987]
[50.45989609 254.62808228]
[64.62426758 248.51464844]
[66.97078705 233.69932556]
[69.31729889 218.88400269]
[67.19668579 211.59281921]
[72.05779266 203.53776550]
[74.98414612 188.82597351]
[77.91049957 174.11419678]
[80.83685303 159.40242004]
[83.76320648 144.69064331]
[78.65754700 130.69845581]
[88.93846130 118.67291260]
[91.86481476 103.96113586]
[89.99978638 100.24169922]
[89.92762756 95.68443298]
[91.99340820 91.17906952]
[96.09811401 87.73825073]
[100.73337555 73.47240448]
[105.36862946 59.20655441]
[110.00388336 44.94070816]
[104.81862640 32.94147110]
[109.16844940 21.04449844]
[120.14694214 15.58103466]
[125.33869934 1.50816453]
[130.53045654 -12.56470585]
[135.72221375 -26.63757515]
[140.91397095 -40.71044540]
[146.10572815 -54.78331375]
[151.29748535 -68.85618591]
[156.48924255 -82.92905426]
[151.24029541 -92.83624268]
[152.44113159 -103.75926208]
[159.42790222 -111.95008087]
[169.59506226 -114.73984528]
[175.87495422 -128.36199951]
[182.15486145 -141.98414612]
[180.90585327 -157.75596619]
[193.26083374 -166.07485962]
[191.22229004 -182.34680176]
[204.45652771 -192.03117371]
[219.34928894 -185.16551208]
[220.58020020 -168.81262207]
[206.88298035 -159.79496765]
[208.58116150 -144.99748230]
[195.77700806 -135.70423889]
[189.49710083 -122.08209991]
[183.21720886 -108.45994568]
[186.64057922 -89.59338379]
[170.56210327 -77.73729706]
[165.37034607 -63.66442871]
[160.17858887 -49.59156036]
[154.98683167 -35.51868820]
[149.79508972 -21.44581985]
[144.60333252 -7.37294960]
[139.41157532 6.69992018]
[134.21981812 20.77279091]
[138.21519470 37.74272156]
[124.26972961 49.57596207]
[119.63447571 63.84180832]
[114.99922180 78.10765839]
[110.36396790 92.37350464]
[106.57659149 106.88748932]
[103.65023804 121.59927368]
[108.54658508 136.64375305]
[98.47499084 147.61700439]
[95.54863739 162.32878113]
[92.62227631 177.04055786]
[89.69592285 191.75233459]
[86.76956940 206.46411133]
[84.13262939 221.23051453]
[81.78610992 236.04583740]
[79.43959045 250.86116028]
[91.02154541 261.05242920]
[95.23312378 275.89379883]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 77]
[8 76]
[9 75]
[11 74]
[12 73]
[13 72]
[14 71]
[15 70]
[17 68]
[18 67]
[22 66]
[23 65]
[24 64]
[25 63]
[28 61]
[29 60]
[30 59]
[31 58]
[32 57]
[33 56]
[34 55]
[35 54]
[39 52]
[40 51]
[41 50]
[43 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
