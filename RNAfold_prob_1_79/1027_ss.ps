%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGUCAAAGACAAGUACAAAGUACAAGGAACAAAGUUCCAAGACCAAAGGUCAAGUGAAACACAGCUGAGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[153.72946167 130.37341309]
[139.87126160 124.63316345]
[129.22328186 136.64027405]
[115.14874268 144.35116577]
[99.29795074 146.86167908]
[83.52947235 143.87747192]
[69.69223785 135.74842834]
[58.28614807 145.49014282]
[46.88006210 155.23187256]
[38.76267242 170.11622620]
[22.21287727 166.43647766]
[21.16738510 149.51480103]
[37.13834000 143.82577515]
[48.54442978 134.08406067]
[59.95051956 124.34233856]
[55.80233002 115.59091187]
[53.54146576 106.17372131]
[53.26446152 96.49290466]
[38.67891312 92.99122620]
[24.09336281 89.48954010]
[9.50781536 85.98786163]
[-7.30517101 88.16957092]
[-14.05591297 72.61759949]
[-0.98051053 61.82546234]
[13.00949574 71.40231323]
[27.59504509 74.90399170]
[42.18059158 78.40567780]
[56.76613998 81.90735626]
[62.85258865 71.42413330]
[71.42413330 62.85258865]
[81.90735626 56.76613998]
[78.40567780 42.18059158]
[74.90399170 27.59504509]
[71.40231323 13.00949574]
[67.90063477 -1.57605338]
[58.32378387 -15.56605911]
[69.11592102 -28.64146233]
[84.66789246 -21.89072037]
[82.48618317 -5.07773399]
[85.98786163 9.50781536]
[89.48954010 24.09336281]
[92.99122620 38.67891312]
[96.49290466 53.26446152]
[113.87854004 55.23509979]
[129.32981873 63.44495010]
[140.69319153 76.74974823]
[146.38485718 93.29509735]
[145.61151123 110.77496338]
[159.46971130 116.51522064]
[179.08998108 112.75634766]
[190.62033081 128.07684326]
[204.88618469 132.71209717]
[219.15203857 137.34735107]
[234.66773987 134.25323486]
[244.38113403 145.54478455]
[258.64697266 150.18003845]
[272.91284180 154.81529236]
[286.86764526 147.89428711]
[301.26922607 152.79830933]
[307.78134155 166.14477539]
[322.04721069 170.78002930]
[336.93692017 164.80709839]
[350.81866455 172.84928894]
[353.04354858 188.73730469]
[341.90481567 200.28324890]
[325.94717407 198.63003540]
[317.41195679 185.04586792]
[303.14608765 180.41061401]
[290.03283691 187.38038635]
[275.49920654 182.88281250]
[268.27755737 169.08114624]
[254.01171875 164.44589233]
[239.74588013 159.81063843]
[225.25056458 163.23629761]
[214.51678467 151.61320496]
[200.25093079 146.97795105]
[185.98507690 142.34269714]
[177.03501892 147.91497803]
[166.27769470 147.48558044]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 49]
[2 48]
[7 15]
[8 14]
[9 13]
[18 28]
[19 27]
[20 26]
[21 25]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[51 77]
[52 76]
[53 75]
[55 73]
[56 72]
[57 71]
[60 68]
[61 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
