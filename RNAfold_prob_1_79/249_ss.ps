%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACAGCGGGAAGGUCCCAGGACCAGCGUCGGCAACCGGUCUCCAGUCCGAGCCUUCGCAACCCGAAUUAGGGUUCG\
) } def
/len { sequence length } bind def

/coor [
[117.80698395 280.34283447]
[102.90425110 278.63735962]
[90.09948730 270.82467651]
[81.76583099 258.35272217]
[79.44777679 243.53291321]
[83.57492828 229.11186218]
[93.38240051 217.76225281]
[107.05254364 211.58753967]
[122.05184937 211.73208618]
[135.60092163 218.16947937]
[123.93672180 208.90687561]
[126.41931915 193.28166199]
[121.22756195 179.20878601]
[116.03580475 165.13592529]
[110.84404755 151.06304932]
[105.65229034 136.99017334]
[100.46053314 122.91731262]
[89.20022583 120.21830750]
[80.69588470 112.35986328]
[77.11769867 101.34733582]
[79.37877655 89.99098969]
[86.90212250 81.18881226]
[82.83052063 66.75198364]
[78.75891113 52.31515503]
[74.68730927 37.87832642]
[61.17980576 30.12041283]
[57.25627518 15.42141438]
[64.73550415 2.59188724]
[53.54277039 -8.58994484]
[57.53487778 -22.93959045]
[53.18061066 -37.29369354]
[48.54535294 -51.55954361]
[43.91009903 -65.82539368]
[39.27484512 -80.09123993]
[28.62987328 -93.28672791]
[38.36285400 -107.16856384]
[54.39654160 -101.65882874]
[53.54069138 -84.72649384]
[58.17594528 -70.46064758]
[62.81120300 -56.19479752]
[67.44645691 -41.92895126]
[72.64606476 -36.39520264]
[71.97171021 -27.01119804]
[82.87320709 -16.86198425]
[79.17233276 -1.47971952]
[92.25283051 5.55136633]
[96.58767700 20.13436127]
[89.12413788 33.80671692]
[93.19573975 48.24354553]
[97.26734924 62.68037415]
[101.33895111 77.11720276]
[117.32987976 84.99698639]
[122.83871460 101.95143890]
[114.53340912 117.72555542]
[119.72516632 131.79841614]
[124.91691589 145.87129211]
[130.10867310 159.94416809]
[135.30043030 174.01702881]
[140.49218750 188.08990479]
[152.52772522 198.35910034]
[149.67378235 212.97772217]
[158.00733948 225.44976807]
[169.02217102 235.63177490]
[180.03701782 245.81378174]
[191.05184937 255.99580383]
[202.06669617 266.17779541]
[217.84696960 265.30697632]
[229.56518555 275.91165161]
[230.26913452 291.70025635]
[219.54116821 303.30569458]
[203.74600220 303.84268188]
[192.25463867 292.99261475]
[191.88467407 277.19265747]
[180.86984253 267.01065063]
[169.85501099 256.82861328]
[158.84016418 246.64662170]
[147.82533264 236.46459961]
[148.58778381 251.44520569]
[142.98158264 265.35818481]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 61]
[12 59]
[13 58]
[14 57]
[15 56]
[16 55]
[17 54]
[22 51]
[23 50]
[24 49]
[25 48]
[28 45]
[30 43]
[31 41]
[32 40]
[33 39]
[34 38]
[62 77]
[63 76]
[64 75]
[65 74]
[66 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
