%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAACUACAACAUCUUCGGAUGAGUCAAGAGAAAGACGCUUCGGAGUCGCUCGAGACAAGUAGAGGUCUACUUCG\
) } def
/len { sequence length } bind def

/coor [
[122.16924286 169.62066650]
[114.79230499 182.68132019]
[103.66049194 192.73530579]
[89.91860199 198.74867249]
[74.97986603 200.10299683]
[60.38059235 196.65898132]
[47.62217712 188.77084351]
[38.01670456 177.24977112]
[32.55200577 163.28062439]
[31.79007721 148.29998779]
[35.80927277 133.84848022]
[44.19625854 121.41231537]
[56.08851242 112.27040863]
[70.26302338 107.36294556]
[85.26143646 107.19450378]
[70.27300262 106.60560608]
[55.28456497 106.01670837]
[40.29612732 105.42781067]
[26.04292488 113.53818512]
[12.03121281 105.01739502]
[12.67504025 88.63088989]
[27.31209373 81.23570251]
[40.88502502 90.43937683]
[55.87346268 91.02827454]
[70.86190033 91.61717224]
[85.85033417 92.20606995]
[91.47161865 86.93663025]
[98.65618896 85.01274109]
[103.84793854 70.93986511]
[109.03969574 56.86699677]
[102.67188263 42.65120697]
[108.13753510 28.45327187]
[121.72936249 22.47014618]
[126.92111969 8.39727497]
[132.11288452 -5.67559481]
[126.86393738 -15.58278179]
[128.06477356 -26.50579834]
[135.05154419 -34.69662094]
[145.21870422 -37.48638535]
[151.49859619 -51.10853195]
[157.77850342 -64.73068237]
[150.07931519 -78.20295715]
[151.80281067 -93.62401581]
[162.28627014 -105.06415558]
[177.49859619 -108.12439728]
[191.59031677 -101.62802124]
[199.14289856 -88.07302094]
[197.25221252 -72.67156219]
[186.64526367 -61.34582138]
[171.40065002 -58.45078278]
[165.12074280 -44.82863617]
[158.84085083 -31.20648766]
[162.26422119 -12.33992290]
[146.18574524 -0.48383901]
[140.99398804 13.58903122]
[135.80223083 27.66190147]
[142.25181580 41.03869247]
[137.18710327 55.38454437]
[123.11256409 62.05875397]
[117.92081451 76.13162231]
[112.72905731 90.20449066]
[116.23073578 104.79003906]
[127.24557495 114.97205353]
[138.26040649 125.15406799]
[149.27525330 135.33607483]
[160.29008484 145.51808167]
[171.30493164 155.70010376]
[187.41041565 158.78962708]
[192.53118896 174.36877441]
[181.39942932 186.41104126]
[165.46655273 182.52838135]
[161.12290955 166.71493530]
[150.10807800 156.53292847]
[139.09323120 146.35090637]
[128.07839966 136.16889954]
[117.06356049 125.98689270]
[106.04872131 115.80487823]
[116.53546906 126.52999878]
[123.08807373 140.02308655]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 26]
[16 25]
[17 24]
[18 23]
[28 61]
[29 60]
[30 59]
[33 56]
[34 55]
[35 54]
[39 52]
[40 51]
[41 50]
[62 77]
[63 76]
[64 75]
[65 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
