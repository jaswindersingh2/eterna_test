%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGAGUACGGGACGCGAAAGCGGAAGAAAUUCCCCAAAACAAUUGAAAACAAUUGGUACUCAAAAUGGUAAUUCG\
) } def
/len { sequence length } bind def

/coor [
[95.41179657 265.50997925]
[89.78370667 251.50186157]
[88.14480591 236.49464417]
[90.61671448 221.60195923]
[97.01600647 207.92892456]
[106.86780548 196.49018860]
[119.44104767 188.13458252]
[114.80579376 173.86872864]
[110.17053986 159.60289001]
[105.53527832 145.33703613]
[100.90002441 131.07119751]
[96.26477051 116.80534363]
[76.97454071 102.30297089]
[63.35239792 96.02307129]
[49.73024750 89.74317932]
[36.10810089 83.46327972]
[21.67127228 79.39167023]
[6.77524567 77.62861633]
[-8.12078094 75.86555481]
[-22.96637917 82.83263397]
[-36.26636505 73.23876190]
[-34.33885193 56.95328140]
[-19.16670036 50.72930908]
[-6.35771990 60.96952438]
[8.53830719 62.73258591]
[23.43433380 64.49564362]
[15.11838245 52.01185989]
[15.42867756 37.01506805]
[24.25388718 24.88594437]
[38.42763519 19.97626877]
[52.86454773 24.04757500]
[62.38483429 35.63912582]
[63.57273483 50.59201813]
[56.00204468 63.54132462]
[42.38799667 69.84113312]
[56.01014328 76.12103271]
[69.63229370 82.40092468]
[83.25444031 88.68082428]
[74.49786377 76.50205231]
[77.58336639 61.82283020]
[90.50212860 54.20012283]
[104.84332275 58.59673309]
[111.27005005 72.15022278]
[105.59848022 86.03623199]
[117.37823486 76.74981689]
[129.15798950 67.46340942]
[140.93774414 58.17700195]
[152.71749878 48.89059448]
[164.49725342 39.60418320]
[170.06820679 24.18028831]
[186.25660706 21.55967331]
[196.40922546 34.43820190]
[190.08190918 49.56754684]
[173.78366089 51.38393784]
[162.00390625 60.67034531]
[150.22415161 69.95675659]
[138.44439697 79.24316406]
[126.66464233 88.52957153]
[114.88488770 97.81598663]
[110.53061676 112.17008972]
[115.16587067 126.43593597]
[119.80113220 140.70178223]
[124.43638611 154.96763611]
[129.07164001 169.23347473]
[133.70689392 183.49932861]
[148.79016113 182.86878967]
[163.48394775 186.33218384]
[176.69789124 193.63247681]
[187.45141602 204.22796631]
[194.94653320 217.33238220]
[198.62707520 231.97329712]
[198.21990967 247.06423950]
[193.75524902 261.48538208]
[185.56439209 274.16659546]
[174.25518799 284.16677856]
[160.66680908 290.74392700]
[145.80764771 293.40994263]
[130.78031921 291.96701050]
[116.69996643 286.52215576]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[13 38]
[14 37]
[15 36]
[16 35]
[17 26]
[18 25]
[19 24]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
