%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAGUAUAUCUUAGAUAUCUAGAAUCGAAAAAAAAAAAAGAUUCUAGAUAUCUAAGAUAUACAAGUCCAUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[107.69840240 154.92684937]
[103.62679291 140.49002075]
[99.55519104 126.05318451]
[86.68237305 122.39659119]
[77.32213593 112.83280182]
[73.94327545 99.88431549]
[77.43697357 86.96633911]
[86.88175964 77.48603821]
[83.38008118 62.90049362]
[79.87840271 48.31494522]
[76.37672424 33.72939682]
[72.87503815 19.14384651]
[69.37335968 4.55829763]
[65.87168121 -10.02725124]
[62.36999893 -24.61280060]
[58.86832047 -39.19834900]
[55.36663818 -53.78389740]
[51.86495972 -68.36944580]
[48.36327744 -82.95499420]
[44.86159897 -97.54054260]
[41.35991669 -112.12609100]
[37.85823822 -126.71163940]
[34.35655594 -141.29719543]
[30.85487556 -155.88273621]
[27.35319519 -170.46829224]
[23.85151482 -185.05383301]
[20.34983444 -199.63938904]
[16.84815407 -214.22492981]
[13.34647369 -228.81048584]
[9.84479237 -243.39602661]
[-5.13674641 -246.12977600]
[-17.70748520 -254.72607422]
[-25.68946838 -267.69558716]
[-27.69976616 -282.79122925]
[-23.39008522 -297.39761353]
[-13.50710297 -308.98410034]
[0.23689471 -315.54324341]
[15.46067715 -315.93862915]
[29.52663231 -310.10177612]
[39.99774551 -299.04394531]
[45.05983734 -284.68096924]
[43.83586884 -269.50134277]
[36.53789520 -256.13497925]
[24.43034172 -246.89770508]
[27.93202209 -232.31216431]
[31.43370247 -217.72660828]
[34.93538284 -203.14106750]
[38.43706512 -188.55551147]
[41.93874359 -173.96997070]
[45.44042587 -159.38441467]
[48.94210434 -144.79887390]
[52.44378662 -130.21331787]
[55.94546509 -115.62777710]
[59.44714737 -101.04222107]
[62.94882584 -86.45667267]
[66.45050812 -71.87112427]
[69.95218658 -57.28557968]
[73.45386505 -42.70002747]
[76.95555115 -28.11448097]
[80.45722961 -13.52893162]
[83.95890808 1.05661714]
[87.46058655 15.64216614]
[90.96227264 30.22771454]
[94.46395111 44.81326294]
[97.96562958 59.39881134]
[101.46730804 73.98435974]
[116.50454712 79.83650970]
[125.21271515 93.42082977]
[124.25246429 109.52809143]
[113.99201965 121.98158264]
[118.06362152 136.41841125]
[122.13523102 150.85523987]
[136.73927307 156.09942627]
[145.44389343 168.94500732]
[144.90199280 184.45262146]
[135.32192993 196.65925598]
[120.38743591 200.87121582]
[105.84113312 195.46891785]
[97.27637482 182.52966309]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 70]
[8 66]
[9 65]
[10 64]
[11 63]
[12 62]
[13 61]
[14 60]
[15 59]
[16 58]
[17 57]
[18 56]
[19 55]
[20 54]
[21 53]
[22 52]
[23 51]
[24 50]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
