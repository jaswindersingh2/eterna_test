%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGAAGCACGAAAAAGGCAAAAGCCGAGGGAAACACUCAAGGCAAGGGAAACACUAACCAAAAACAUCUAGUUCG\
) } def
/len { sequence length } bind def

/coor [
[98.10694122 242.85354614]
[97.51804352 227.86511230]
[96.92915344 212.87667847]
[85.85144043 202.98628235]
[85.04070282 187.79426575]
[95.48976898 176.24200439]
[94.90087128 161.25357056]
[94.31197357 146.26513672]
[73.34697723 138.24176025]
[58.56317520 121.34960938]
[44.29732895 125.98486328]
[36.86946106 131.75904846]
[29.37957382 130.51011658]
[21.87690926 144.42002869]
[6.71219492 148.87052917]
[-7.11761427 141.22122192]
[-11.40753746 126.01029968]
[-3.61243939 112.26213074]
[11.64298725 108.13327026]
[25.30796623 116.07328796]
[39.66207123 111.71901703]
[53.92792130 107.08376312]
[53.68206787 94.75925446]
[56.67541885 82.80126190]
[62.69863129 72.04603577]
[71.33047485 63.24575424]
[81.96730042 57.01583862]
[78.46562195 42.43029022]
[74.96394348 27.84474182]
[61.77143097 19.56250954]
[58.42800522 4.72080612]
[66.40515137 -7.80519724]
[62.90346909 -22.39074516]
[59.40178680 -36.97629547]
[46.52917099 -46.55101776]
[46.13307571 -62.58917999]
[58.51734924 -72.78767395]
[74.18183899 -69.32308960]
[81.11008453 -54.85316086]
[73.98733521 -40.47797394]
[77.48901367 -25.89242744]
[80.99069977 -11.30687809]
[93.78507233 -3.76767468]
[97.54405212 10.97426319]
[89.54949188 24.34306145]
[93.05117035 38.92861176]
[96.55284882 53.51416016]
[115.04990387 55.88292313]
[131.13827515 65.31247711]
[142.24305725 80.29365540]
[156.67988586 76.22204590]
[160.38270569 61.31618881]
[171.05392456 50.26988602]
[185.82302856 46.05454636]
[200.71720886 49.80407333]
[211.73001099 60.50986099]
[215.89903259 75.29210663]
[212.10284424 90.17446136]
[201.36257935 101.15364838]
[186.56733704 105.27631378]
[171.69696045 101.43349457]
[160.75149536 90.65887451]
[146.31466675 94.73048401]
[146.49232483 103.35851288]
[145.07644653 111.87142181]
[142.11553955 119.97743988]
[137.71109009 127.39871216]
[132.01408386 133.88088989]
[125.21977997 139.20176697]
[117.56105042 143.17900085]
[109.30040741 145.67623901]
[109.88930511 160.66467285]
[110.47820282 175.65310669]
[121.80144501 186.34992981]
[122.18515015 201.55873108]
[111.91758728 212.28778076]
[112.50648499 227.27621460]
[113.09538269 242.26464844]
[116.04058075 261.42126465]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[6 73]
[7 72]
[8 71]
[10 22]
[11 21]
[13 20]
[27 47]
[28 46]
[29 45]
[32 42]
[33 41]
[34 40]
[50 63]
[51 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
