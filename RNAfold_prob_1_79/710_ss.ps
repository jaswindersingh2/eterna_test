%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGUCGACGCAAAGGGUGGACAAGUGACGGCGAAAAGGCGACACAGACACAGCGAAAGGUGAGUCGUCGAUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 261.81805420]
[92.50000000 245.97891235]
[92.50000000 230.97891235]
[92.50000000 215.97891235]
[84.76270294 203.25164795]
[92.50000000 189.45147705]
[92.50000000 174.45147705]
[92.50000000 159.45147705]
[92.50000000 144.45147705]
[92.50000000 129.45147705]
[92.50000000 114.45147705]
[87.60261536 128.62947083]
[78.03814697 140.18460083]
[65.02494049 147.64492798]
[50.22065735 150.06013489]
[35.51111221 147.12257385]
[22.77005196 139.20642090]
[13.62046623 127.32008362]
[9.22785854 112.97766113]
[10.15177250 98.00614166]
[16.27451706 84.31264496]
[26.81615829 73.64147186]
[40.43387222 67.35196686]
[55.39299011 66.24530029]
[69.78797913 70.46243286]
[81.78516388 79.46618652]
[89.85540771 92.10743713]
[86.35372925 77.52188873]
[82.85205078 62.93633652]
[72.10694122 51.32370377]
[76.65933990 37.14184952]
[73.15766144 22.55629921]
[62.41255569 10.94366455]
[66.96495056 -3.23818898]
[54.09233475 -12.81291199]
[53.69623947 -28.85107422]
[66.08051300 -39.04957199]
[81.74500275 -35.58498764]
[88.67324829 -21.11505508]
[81.55049896 -6.73986912]
[92.04513550 3.82951021]
[87.74320984 19.05461884]
[91.24488831 33.64016724]
[101.73952484 44.20954895]
[97.43759918 59.43465805]
[100.93927765 74.02020264]
[104.44095612 88.60575104]
[109.64158630 87.36675262]
[115.70072937 88.34282684]
[130.59675598 86.57976532]
[145.49278259 84.81670380]
[158.28787231 75.51099396]
[171.83634949 81.69873810]
[186.73237610 79.93567657]
[199.52746582 70.62996674]
[213.07594299 76.81771088]
[225.88491821 66.57749176]
[241.05706787 72.80146790]
[242.98458862 89.08694458]
[229.68460083 98.68081665]
[214.83900452 91.71373749]
[203.10937500 100.89333344]
[188.49543762 94.83170319]
[173.59941101 96.59476471]
[161.86978149 105.77436066]
[147.25584412 99.71273041]
[132.35981750 101.47579193]
[117.46378326 103.23885345]
[107.50000000 114.45147705]
[107.50000000 129.45147705]
[107.50000000 144.45147705]
[107.50000000 159.45147705]
[107.50000000 174.45147705]
[107.50000000 189.45147705]
[115.23729706 203.25164795]
[107.50000000 215.97891235]
[107.50000000 230.97891235]
[107.50000000 245.97891235]
[113.54634094 261.81805420]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[6 74]
[7 73]
[8 72]
[9 71]
[10 70]
[11 69]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[34 40]
[49 68]
[50 67]
[51 66]
[53 64]
[54 63]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
