%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGCAGAUGACGCAGAGCCGAGCAGCGAAAGCAUGAGGAUCAUGAGGGCAUCGGGCAAAAAAGCUGAUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[89.23303986 243.72914124]
[78.25385284 254.46940613]
[63.37149811 258.26559448]
[48.58925247 254.09657288]
[37.88346481 243.08377075]
[34.13393784 228.18959045]
[38.34927750 213.42048645]
[49.39557648 202.74926758]
[64.30143738 199.04644775]
[60.30932999 184.69680786]
[71.50205994 173.51496887]
[75.57366943 159.07814026]
[79.64527130 144.64131165]
[83.71688080 130.20448303]
[79.72476959 115.85484314]
[90.91750336 104.67301178]
[89.89465332 96.44208527]
[95.44274902 89.75525665]
[100.07801056 75.48941040]
[86.71336365 62.19358444]
[81.64597321 44.11648941]
[86.11486816 25.96247101]
[98.88768768 12.41676521]
[116.59925842 6.93633175]
[118.94577789 -7.87899303]
[121.29228973 -22.69431877]
[123.63880920 -37.50964355]
[116.55792999 -46.20244980]
[115.60472107 -57.14985657]
[120.85928345 -66.54634094]
[130.28683472 -71.26601410]
[133.78851318 -85.85157013]
[124.28518677 -94.43080902]
[119.46044922 -106.21086121]
[120.20678711 -118.84542847]
[126.31381989 -129.84751892]
[136.52220154 -137.07896423]
[148.78286743 -139.16587830]
[153.41812134 -153.43173218]
[158.05337524 -167.69757080]
[162.68862915 -181.96342468]
[167.32388306 -196.22927856]
[166.46803284 -213.16160583]
[182.50172424 -218.67134094]
[192.23471069 -204.78950500]
[181.58973694 -191.59402466]
[176.95448303 -177.32817078]
[172.31922913 -163.06231689]
[167.68395996 -148.79647827]
[163.04870605 -134.53062439]
[174.04669189 -120.99006653]
[174.92300415 -103.41386414]
[165.15725708 -88.58965302]
[148.37406921 -82.34988403]
[144.87239075 -67.76433563]
[151.91065979 -49.92815399]
[138.45413208 -35.16312790]
[136.10762024 -20.34780121]
[133.76109314 -5.53247643]
[131.41458130 9.28284931]
[141.51406860 15.03990078]
[149.30084229 23.70836639]
[153.96743774 34.41503906]
[155.02192688 46.07409668]
[152.33961487 57.49722290]
[146.17755127 67.51471710]
[137.15000916 75.09526062]
[126.16727448 79.45209503]
[114.34385681 80.12466431]
[109.70860291 94.39051056]
[105.35433197 108.74462128]
[109.05520630 124.12688446]
[98.15370941 134.27609253]
[94.08209991 148.71292114]
[90.01049805 163.14974976]
[85.93888855 177.58657837]
[89.63977051 192.96884155]
[78.73826599 203.11805725]
[89.51288605 214.06352234]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 78]
[11 76]
[12 75]
[13 74]
[14 73]
[16 71]
[18 70]
[19 69]
[24 60]
[25 59]
[26 58]
[27 57]
[31 55]
[32 54]
[38 50]
[39 49]
[40 48]
[41 47]
[42 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
