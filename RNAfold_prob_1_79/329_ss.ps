%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGUAGGUAGAAAAAACUACGCGAAACGCACUACAGCCACUCAAAAAGAGCAGCAAAAGCUGGGCUAUGUGUUUCG\
) } def
/len { sequence length } bind def

/coor [
[-69.75972748 238.55526733]
[-74.82119751 244.85044861]
[-81.77636719 248.81942749]
[-89.63301849 249.95472717]
[-97.29161072 248.14901733]
[-103.69908905 243.70300293]
[-117.32124329 249.98289490]
[-130.94338989 256.26278687]
[-144.56553650 262.54269409]
[-145.89097595 277.84426880]
[-154.70278931 290.42391968]
[-168.63064575 296.89776611]
[-183.92800903 295.52435303]
[-196.47996521 286.67315674]
[-202.91012573 272.72509766]
[-201.48876953 257.43209839]
[-192.59828186 244.90794373]
[-178.63011169 238.52154541]
[-163.34165955 239.99082947]
[-150.84542847 248.92054749]
[-137.22328186 242.64064026]
[-123.60113525 236.36074829]
[-109.97898865 230.08085632]
[-99.84442902 210.10052490]
[-76.75061035 210.44662476]
[-64.61535645 201.62985229]
[-52.48010254 192.81306458]
[-40.34484863 183.99629211]
[-28.20959282 175.17950439]
[-16.07433701 166.36273193]
[-3.93908215 157.54595947]
[8.19617271 148.72917175]
[20.33142853 139.91239929]
[20.30308151 130.56941223]
[24.78536034 122.21228790]
[32.81826401 116.91277313]
[42.54437637 116.05587769]
[51.63775253 119.98025513]
[64.72518921 112.65093231]
[77.81262970 105.32161713]
[90.90007019 97.99229431]
[85.68155670 85.90824890]
[92.87111664 69.97409821]
[101.68789673 57.83884048]
[110.50466919 45.70358658]
[109.42525482 29.69688797]
[121.36352539 18.97974014]
[137.16146851 21.77342224]
[144.70024109 35.93486023]
[138.19676208 50.60061264]
[122.63993073 54.52036667]
[113.82315063 66.65561676]
[105.00637054 78.79087830]
[112.07732391 92.01969147]
[127.06575775 91.43079376]
[142.05419922 90.84189606]
[157.04263306 90.25300598]
[170.61555481 81.04933167]
[185.25260925 88.44451904]
[185.89643860 104.83101654]
[171.88473511 113.35181427]
[157.63153076 105.24143982]
[142.64309692 105.83033752]
[127.65465546 106.41923523]
[112.66622162 107.00813293]
[98.22939301 111.07973480]
[85.14195251 118.40905762]
[72.05451202 125.73837280]
[58.96706772 133.06768799]
[49.62934113 152.14665222]
[29.14820671 152.04765320]
[17.01295090 160.86442566]
[4.87769651 169.68121338]
[-7.25755835 178.49798584]
[-19.39281273 187.31477356]
[-31.52806854 196.13154602]
[-43.66332245 204.94831848]
[-55.79857635 213.76510620]
[-67.93383026 222.58187866]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 23]
[7 22]
[8 21]
[9 20]
[25 79]
[26 78]
[27 77]
[28 76]
[29 75]
[30 74]
[31 73]
[32 72]
[33 71]
[38 69]
[39 68]
[40 67]
[41 66]
[43 53]
[44 52]
[45 51]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
