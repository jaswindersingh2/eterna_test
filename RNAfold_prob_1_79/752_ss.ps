%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGUGGUCGCAAAGGGAGUACAACUUGUAGCGAAAAGGUAGGAGAGGUGAUGUGAAAGGAUGAUCGUUGGUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[100.90313721 156.70155334]
[88.93666840 155.61911011]
[77.46686554 152.03979492]
[67.00861359 146.12429810]
[58.03142548 138.13818359]
[50.93829727 128.43997192]
[37.08010483 134.18022156]
[23.22191048 139.92047119]
[13.43315029 152.34989929]
[-1.28625262 150.07208252]
[-15.14444542 155.81233215]
[-24.93320656 168.24176025]
[-39.65260696 165.96394348]
[-51.97222519 177.61140442]
[-66.57491302 168.99758911]
[-62.34014511 152.58103943]
[-45.39286041 152.10575867]
[-36.59532928 140.08689880]
[-20.88469696 141.95413208]
[-7.02650404 136.21388245]
[1.77102530 124.19503784]
[17.48165894 126.06227112]
[31.33985138 120.32202148]
[45.19804382 114.58177185]
[44.75211334 87.21119690]
[57.17974472 62.82059479]
[79.58512115 47.09333801]
[76.08344269 32.50778961]
[72.58175659 17.92223930]
[61.83665466 6.30960321]
[66.38905334 -7.87225008]
[62.88737106 -22.45779800]
[52.14226532 -34.07043457]
[56.69466019 -48.25228882]
[43.82204437 -57.82701111]
[43.42594910 -73.86517334]
[55.81022263 -84.06366730]
[71.47470856 -80.59908295]
[78.40296173 -66.12915039]
[71.28021240 -51.75396729]
[81.77484894 -41.18458939]
[77.47291565 -25.95947838]
[80.97460175 -11.37392998]
[91.46923828 -0.80455089]
[87.16730499 14.42055893]
[90.66899109 29.00610733]
[94.17066956 43.59165573]
[102.95464325 43.36827469]
[111.66768646 44.50452805]
[120.10060120 46.97313690]
[128.05093384 50.71483612]
[135.32781982 55.63979340]
[141.75653076 61.62976837]
[147.18273926 68.54094696]
[151.47616577 76.20741272]
[154.53372192 84.44509888]
[156.28202820 93.05622864]
[156.67907715 101.83406830]
[155.71536255 110.56787872]
[153.41401672 119.04796600]
[149.83027649 127.07074738]
[145.05020142 134.44360352]
[155.65679932 145.05020142]
[170.88609314 149.33729553]
[174.41453552 163.80793762]
[185.02114868 174.41453552]
[195.62774658 185.02114868]
[206.23434448 195.62774658]
[221.70971680 202.55229187]
[219.33978271 219.33978271]
[202.55229187 221.70971680]
[195.62774658 206.23434448]
[185.02114868 195.62774658]
[174.41453552 185.02114868]
[163.80793762 174.41453552]
[149.33729553 170.88609314]
[145.05020142 155.65679932]
[134.44360352 145.05020142]
[124.17905426 151.29576111]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 24]
[7 23]
[8 22]
[10 20]
[11 19]
[13 17]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[34 40]
[62 78]
[63 77]
[65 75]
[66 74]
[67 73]
[68 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
