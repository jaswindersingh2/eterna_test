%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCGCCCGGAAAAAACCGGCCCUAAGGGAGCGCACCCACGCAAAAAGCGGCGCAAAAGCGCGGGCGCGGGUUUCG\
) } def
/len { sequence length } bind def

/coor [
[157.39660645 171.25596619]
[143.74919128 165.03115845]
[134.83508301 152.96722412]
[132.89271545 138.09350586]
[138.40982056 124.14497375]
[150.00302124 114.62329102]
[135.10699463 112.86022949]
[120.21096802 111.09717560]
[105.31494141 109.33411407]
[90.36118317 110.51099396]
[75.92435455 114.58260345]
[61.48752594 118.65421295]
[47.05069733 122.72581482]
[39.54803467 136.63572693]
[24.38331985 141.08622742]
[10.55350971 133.43692017]
[6.26358652 118.22599792]
[14.05868530 104.47783661]
[29.31411171 100.34897614]
[42.97909164 108.28898621]
[57.41592026 104.21738434]
[71.85274506 100.14577484]
[86.28957367 96.07416534]
[88.92652130 81.30776978]
[76.79126740 72.49098969]
[64.65601349 63.67421341]
[48.28793335 59.25579453]
[48.00254440 42.30424881]
[64.21260834 37.33735657]
[73.47279358 51.53895950]
[85.60804749 60.35573578]
[97.74330139 69.17251587]
[108.06152344 81.74486542]
[107.07800293 94.43808746]
[121.97402954 96.20114899]
[136.87005615 97.96420288]
[151.76608276 99.72726440]
[166.71984863 98.55038452]
[181.15667725 94.47877502]
[195.59350586 90.40716553]
[210.03033447 86.33556366]
[221.21215820 75.14282990]
[235.56181335 79.13494110]
[249.99864197 75.06333160]
[264.43545532 70.99172211]
[252.96643066 61.32418442]
[251.33401489 46.41327667]
[260.43966675 34.49324799]
[275.25497437 32.14669418]
[287.59851074 40.66945267]
[290.65377808 55.35499954]
[282.73348999 68.09360504]
[296.21926880 59.82047272]
[309.24047852 67.05213928]
[324.22894287 66.46324158]
[339.21737671 65.87434387]
[354.20581055 65.28544617]
[367.77874756 56.08177948]
[382.41577148 63.47695923]
[383.05960083 79.86346436]
[369.04791260 88.38426208]
[354.79470825 80.27388000]
[339.80627441 80.86277771]
[324.81784058 81.45167542]
[309.82937622 82.04057312]
[297.41571045 90.27158356]
[283.32238770 83.08203888]
[268.50708008 85.42855072]
[254.07023621 89.50016022]
[239.63342285 93.57176971]
[229.48420715 104.47326660]
[214.10194397 100.77239227]
[199.66511536 104.84399414]
[185.22828674 108.91560364]
[170.79145813 112.98720551]
[183.72985840 120.57650757]
[191.36203003 133.48968506]
[191.77145386 148.48408508]
[184.85531616 161.79449463]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 37]
[7 36]
[8 35]
[9 34]
[10 23]
[11 22]
[12 21]
[13 20]
[24 32]
[25 31]
[26 30]
[38 75]
[39 74]
[40 73]
[41 72]
[43 70]
[44 69]
[45 68]
[52 67]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
