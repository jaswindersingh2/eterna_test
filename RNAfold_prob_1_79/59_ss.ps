%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGAUAUGAUAGAAAAGCAAAAAAUAUAUGAUGGAAACAUGAUAUAGGCCUAUGAUAUCAAAAAGGUGGGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[114.29934692 191.03353882]
[106.98004150 204.12658691]
[97.45155334 215.71139526]
[86.01689911 225.41957092]
[73.03971100 232.94238281]
[58.93267822 238.04058838]
[44.14442062 240.55204773]
[29.14522362 240.39692688]
[14.41207504 237.58013916]
[0.41350472 232.19125366]
[-12.40531731 224.40165710]
[-23.63673782 214.45906067]
[-32.92358780 202.67965698]
[-39.97053146 189.43803406]
[-44.55347061 175.15528870]
[-46.52666092 160.28564453]
[-45.82735825 145.30195618]
[-42.47779465 130.68072510]
[-36.58449554 116.88691711]
[-28.33486938 104.35919952]
[-17.99126434 93.49596405]
[-5.88262033 84.64267731]
[7.60599566 78.08087921]
[22.04563141 74.01923370]
[36.97709274 72.58692169]
[51.92553711 73.82948303]
[66.41559601 77.70740509]
[79.98645782 84.09736633]
[92.21133423 92.80023193]
[91.62243652 77.81179810]
[91.03353882 62.82336044]
[90.44464111 47.83492279]
[89.85574341 32.84648895]
[81.58261871 19.36071968]
[88.81428528 6.33949566]
[88.22538757 -8.64894009]
[87.63648987 -23.63737488]
[78.43281555 -37.21030807]
[85.82800293 -51.84736252]
[102.21450806 -52.49118805]
[110.73529816 -38.47947693]
[102.62492371 -24.22627258]
[103.21382141 -9.23783684]
[103.80271912 5.75059843]
[112.03372192 18.16429329]
[104.84417725 32.25759125]
[105.43307495 47.24602509]
[106.02197266 62.23446274]
[106.61087036 77.22290039]
[107.19976807 92.21133423]
[116.48617554 103.99108887]
[130.92300415 108.06269073]
[145.35983276 112.13430023]
[159.79666138 116.20590973]
[174.23348999 120.27751160]
[188.67031860 124.34912109]
[203.10714722 128.42073059]
[213.17500305 116.94897461]
[227.22659302 110.98947144]
[242.47195435 111.72547150]
[255.88410950 119.01084900]
[264.80007935 131.39907837]
[267.44958496 146.43048096]
[263.30654907 161.12054443]
[253.19360352 172.55256653]
[239.11865234 178.45668030]
[223.87631226 177.66065979]
[210.49293518 170.32252502]
[201.62582397 157.89927673]
[199.03553772 142.85755920]
[184.59870911 138.78594971]
[170.16188049 134.71434021]
[155.72505188 130.64273071]
[141.28822327 126.57112885]
[126.85140228 122.49951935]
[112.41457367 118.42791748]
[118.02132416 132.34065247]
[121.06776428 147.02804565]
[121.45702362 162.02297974]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[35 44]
[36 43]
[37 42]
[51 76]
[52 75]
[53 74]
[54 73]
[55 72]
[56 71]
[57 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
