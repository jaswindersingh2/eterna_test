%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGAGAAAGAGAAACACAAAGGAGAUUCCGAAAAGAGAACUCACUUUGGUUUCCUAUUCCUACUUUUUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[122.87699890 301.64538574]
[121.11393738 286.74935913]
[119.35087585 271.85333252]
[117.58781433 256.95730591]
[115.82475281 242.06127930]
[114.06169128 227.16525269]
[112.29862976 212.26922607]
[109.95211792 197.45388794]
[107.02575684 182.74211121]
[102.51261902 176.63557434]
[104.28527069 167.39587402]
[101.93875122 152.58055115]
[99.59223938 137.76522827]
[96.95529175 122.99883270]
[94.02893829 108.28704834]
[89.38081360 101.41760254]
[91.28844452 92.94081116]
[88.94193268 78.12548828]
[86.59541321 63.31016541]
[84.24889374 48.49483871]
[81.90238190 33.67951584]
[77.36126709 25.43981743]
[79.76649475 18.23751831]
[78.00343323 3.34149146]
[76.24037170 -11.55453491]
[74.47731018 -26.45056152]
[72.71424866 -41.34658813]
[70.65906525 -56.20512772]
[68.31254578 -71.02045441]
[65.96602631 -85.83577728]
[61.42491531 -94.07547760]
[63.83014297 -101.27777863]
[62.06708145 -116.17380524]
[60.30401993 -131.06982422]
[58.24883652 -145.92837524]
[46.16712570 -156.48355103]
[47.03059006 -172.50335693]
[60.17685318 -181.69874573]
[75.52122498 -177.01582336]
[81.29281616 -162.04692078]
[73.06416321 -148.27488708]
[77.33408356 -141.99586487]
[75.20005035 -132.83288574]
[76.96310425 -117.93686676]
[78.72616577 -103.04084015]
[80.78135681 -88.18229675]
[83.12786865 -73.36697388]
[85.47438812 -58.55164719]
[89.74430847 -52.27263260]
[87.61027527 -43.10964966]
[89.37333679 -28.21362305]
[91.13639832 -13.31759644]
[92.89945984 1.57843053]
[94.66252136 16.47445679]
[96.71770477 31.33299828]
[99.06422424 46.14832306]
[101.41073608 60.96364594]
[103.75725555 75.77897644]
[106.10377502 90.59429932]
[108.74071503 105.36069489]
[111.66706848 120.07247925]
[116.52817535 128.12753296]
[114.40756226 135.41871643]
[116.75407410 150.23403931]
[119.10059357 165.04936218]
[121.73754120 179.81576538]
[124.66389465 194.52754211]
[128.99920654 200.08543396]
[129.57189941 206.08215332]
[127.19465637 210.50616455]
[128.95771790 225.40219116]
[130.72077942 240.29821777]
[132.48384094 255.19424438]
[134.24690247 270.09027100]
[136.00996399 284.98629761]
[137.77302551 299.88232422]
[148.01324463 312.69131470]
[141.78926086 327.86346436]
[125.50379181 329.79095459]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[4 73]
[5 72]
[6 71]
[7 70]
[8 67]
[9 66]
[11 65]
[12 64]
[13 63]
[14 61]
[15 60]
[17 59]
[18 58]
[19 57]
[20 56]
[21 55]
[23 54]
[24 53]
[25 52]
[26 51]
[27 50]
[28 48]
[29 47]
[30 46]
[32 45]
[33 44]
[34 43]
[35 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
