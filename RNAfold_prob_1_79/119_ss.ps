%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACGAGCUGUCCACACCCGAGCAAAGCCCGAAAGGAGCAGCACGAGGCGCCGGACCUGCAACUGAAAUGGCGUUCG\
) } def
/len { sequence length } bind def

/coor [
[110.85662079 120.54582214]
[104.75930023 122.74523926]
[98.29168701 123.17495728]
[91.95699310 121.80152893]
[86.24807739 118.73183441]
[81.60914612 114.20469666]
[78.40112305 108.57234955]
[76.87360382 102.27303314]
[77.14544678 95.79686737]
[64.05800629 88.46754456]
[50.97056961 81.13822937]
[37.88312912 73.80890656]
[24.65431023 66.73796082]
[11.28921223 59.92810059]
[-2.07588577 53.11824417]
[-12.63659096 60.35621262]
[-25.21747017 62.29764557]
[-37.32872009 58.62244034]
[-46.60116577 50.11576080]
[-51.24970245 38.50128174]
[-50.41675949 26.09220886]
[-63.20636368 18.25473022]
[-79.01567078 17.64129257]
[-85.82472992 4.39417887]
[-98.61433411 -3.44329977]
[-115.27861786 -6.56387186]
[-116.89312744 -23.44076920]
[-101.12272644 -29.66417885]
[-90.77685547 -16.23290253]
[-77.98725128 -8.39542389]
[-63.09273911 -8.34257507]
[-55.36888504 5.46512794]
[-42.57928467 13.30260658]
[-26.84542465 5.76948452]
[-9.55027962 9.02046967]
[2.58456922 21.97702789]
[4.73397160 39.75314331]
[18.09906960 46.56300354]
[31.46416664 53.37285995]
[39.05379486 53.60913467]
[45.21244812 60.72146988]
[58.29988861 68.05078888]
[71.38732910 75.38010406]
[84.47476959 82.70942688]
[108.04300690 78.19847107]
[123.03481293 96.93497467]
[137.74658203 99.86132812]
[152.45837402 102.78768158]
[167.17015076 105.71404266]
[176.47232056 104.30550385]
[182.39695740 109.05490875]
[196.98251343 112.55658722]
[211.56805420 116.05826569]
[226.15361023 119.55995178]
[240.73915100 123.06163025]
[252.53796387 113.15737152]
[267.72875977 112.11196136]
[280.47161865 120.11721039]
[285.99108887 133.92565918]
[298.45300293 124.47924805]
[314.06878662 125.30487061]
[325.46511841 136.01269531]
[327.26104736 151.54681396]
[318.60852051 164.57247925]
[303.59307861 168.93939209]
[289.30447388 162.58561707]
[282.48941040 148.51121521]
[271.30261230 158.30882263]
[256.31436157 159.65643311]
[243.25386047 151.82847595]
[237.23747253 137.64717102]
[222.65193176 134.14549255]
[208.06637573 130.64381409]
[193.48083496 127.14213562]
[178.89527893 123.64045715]
[164.24378967 120.42581940]
[149.53201294 117.49946594]
[134.82023621 114.57311249]
[120.10845184 111.64675140]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 44]
[10 43]
[11 42]
[12 41]
[13 39]
[14 38]
[15 37]
[21 33]
[22 32]
[24 30]
[25 29]
[46 79]
[47 78]
[48 77]
[49 76]
[51 75]
[52 74]
[53 73]
[54 72]
[55 71]
[59 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
