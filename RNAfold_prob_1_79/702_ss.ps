%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAUGAGGACAAAGACCACAUAACAGAGGAGAAAAACACCACUGAGUCACCAGAAAACAGGAGACGGCCGUAUUCG\
) } def
/len { sequence length } bind def

/coor [
[106.25193024 149.79804993]
[102.18032074 135.36122131]
[93.13476562 134.75683594]
[84.53873444 131.87661743]
[76.95509338 126.90913391]
[70.88041687 120.17967224]
[57.02222061 125.91992188]
[43.16402817 131.66017151]
[33.37526703 144.08959961]
[18.65586472 141.81178284]
[4.79767227 147.55203247]
[0.26823220 162.51927185]
[-12.85048199 171.03005981]
[-28.36421394 169.06584167]
[-38.94785690 157.55409241]
[-39.60413361 141.93028259]
[-30.02317238 129.57150269]
[-14.72881222 126.31320953]
[-0.94257927 133.69384766]
[12.91561413 127.95359039]
[21.71314240 115.93474579]
[37.42377472 117.80197906]
[51.28197098 112.06172943]
[65.14015961 106.32147217]
[65.71157837 91.08521271]
[72.63356018 77.50006104]
[84.62408447 68.08213043]
[81.12240601 53.49657822]
[77.62071991 38.91102982]
[66.87561798 27.29839516]
[71.42801666 13.11654186]
[67.92633057 -1.46900654]
[53.32597351 -6.45228100]
[43.75543976 -18.55221748]
[42.26866150 -33.90777206]
[49.34005737 -47.61904144]
[62.71317291 -55.31081009]
[78.12069702 -54.52865982]
[90.64614105 -45.52217865]
[96.29268646 -31.16529465]
[93.25853729 -16.03924179]
[82.51187897 -4.97068691]
[86.01356506 9.61486149]
[96.50820160 20.18424034]
[92.20626831 35.40935135]
[95.70795441 49.99489975]
[99.20963287 64.58045197]
[120.25751495 70.93451691]
[133.50387573 88.48220825]
[148.39990234 86.71914673]
[163.29592896 84.95608521]
[176.09101868 75.65037537]
[189.63949585 81.83811951]
[204.53552246 80.07505798]
[211.99971008 66.47117615]
[226.04885864 59.88322067]
[241.28077698 62.84438324]
[251.83847046 74.21604156]
[253.66230774 89.62555695]
[246.05097961 103.14765930]
[231.93119812 109.58282471]
[216.73229980 106.45660400]
[206.29858398 94.97108459]
[191.40255737 96.73414612]
[179.67292786 105.91374207]
[165.05899048 99.85211182]
[150.16296387 101.61517334]
[135.26693726 103.37823486]
[132.28344727 114.59275055]
[125.83628082 124.24161530]
[116.61714935 131.28961182]
[120.68875885 145.72644043]
[135.29280090 150.97061157]
[143.99742126 163.81620789]
[143.45552063 179.32382202]
[133.87545776 191.53045654]
[118.94096375 195.74241638]
[104.39466095 190.34011841]
[95.82990265 177.40084839]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[6 24]
[7 23]
[8 22]
[10 20]
[11 19]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[49 68]
[50 67]
[51 66]
[53 64]
[54 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
