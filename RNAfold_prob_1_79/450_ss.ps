%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACUAUGGGGGGCGGAAAACCGAUGAAAACAUCCCUAAAGAGAUCAAAAGAUCUCCCAUAGAAAUUUCGGAUUCG\
) } def
/len { sequence length } bind def

/coor [
[129.24876404 273.86816406]
[139.99542236 262.79962158]
[136.49374390 248.21406555]
[132.99206543 233.62852478]
[129.49038696 219.04296875]
[115.12178040 206.34613037]
[120.40844727 187.08125305]
[115.77319336 172.81539917]
[111.13793945 158.54956055]
[106.50268555 144.28370667]
[101.86743164 130.01786804]
[97.23217010 115.75201416]
[87.71627045 104.15686035]
[74.62883759 96.82753754]
[61.54139328 89.49822235]
[48.45395279 82.16889954]
[34.18810654 77.53364563]
[19.29207993 75.77058411]
[4.39605236 74.00752258]
[-10.44954586 80.97460938]
[-23.74953079 71.38072968]
[-21.82201767 55.09525681]
[-6.64986706 48.87128067]
[6.15911341 59.11149979]
[21.05513954 60.87456131]
[35.95116806 62.63762283]
[26.90193176 50.67470551]
[24.79237938 35.82378769]
[30.15223885 21.81407928]
[41.63559723 12.16355991]
[56.35886383 9.29557133]
[70.62488556 13.93029404]
[80.85131836 24.90390205]
[84.47019958 39.46081543]
[80.57279968 53.94564438]
[70.13778687 64.72109985]
[55.78327179 69.08145905]
[68.87071228 76.41078186]
[81.95815277 83.74009705]
[95.04559326 91.06941986]
[96.78673553 88.69057465]
[99.37297058 86.71350861]
[102.69446564 85.40105438]
[106.56587982 84.98290253]
[118.34563446 75.69649506]
[130.12539673 66.41007996]
[141.90515137 57.12367249]
[153.68489075 47.83726501]
[165.46464539 38.55085373]
[171.03559875 23.12696075]
[187.22401428 20.50634575]
[197.37661743 33.38487244]
[191.04930115 48.51422119]
[174.75106812 50.33060837]
[162.97131348 59.61701965]
[151.19155884 68.90342712]
[139.41180420 78.18983459]
[127.63204193 87.47624969]
[115.85229492 96.76265717]
[111.49802399 111.11676025]
[116.13327789 125.38260651]
[120.76853180 139.64845276]
[125.40378571 153.91430664]
[130.03904724 168.18014526]
[134.67430115 182.44599915]
[144.92985535 186.97668457]
[150.74919128 196.29815674]
[150.33325195 207.05601501]
[144.07592773 215.54129028]
[147.57762146 230.12684631]
[151.07929993 244.71238708]
[154.58097839 259.29794312]
[169.18133545 264.28121948]
[178.75186157 276.38113403]
[180.23864746 291.73669434]
[173.16725159 305.44796753]
[159.79412842 313.13973999]
[144.38661194 312.35760498]
[131.86116028 303.35110474]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 72]
[3 71]
[4 70]
[5 69]
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[13 40]
[14 39]
[15 38]
[16 37]
[17 26]
[18 25]
[19 24]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
