%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGAUCACGUACGAAAAAAAAAAGUACAACAUAGAAAAAAAAAAUAUGACGAUCAAAAAAAAAAAGUGCUAUUUCG\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 251.98605347]
[92.50000000 236.14691162]
[92.50000000 221.14691162]
[92.50000000 206.14691162]
[92.50000000 191.14691162]
[80.36157990 182.55641174]
[75.55226898 168.29687500]
[80.11502075 153.76983643]
[92.50000000 144.60913086]
[92.50000000 129.60913086]
[92.50000000 114.60913086]
[82.31798553 103.59429169]
[67.36422729 102.41740417]
[52.41046906 101.24051666]
[37.45670700 100.06362915]
[29.35655212 113.05001068]
[16.14329147 120.77453613]
[0.85323817 121.46217346]
[-13.00006676 114.95491028]
[-22.23323441 102.74805450]
[-24.72455025 87.64666748]
[-19.90152931 73.12093353]
[-8.87246418 62.50875473]
[5.82824373 58.24873352]
[20.82248116 61.31979752]
[32.66468048 71.01623535]
[38.63359451 85.10987091]
[53.58735657 86.28675842]
[68.54111481 87.46364594]
[83.49487305 88.64053345]
[87.50619507 88.15106201]
[91.21851349 88.58556366]
[94.45000458 89.83197021]
[96.79652405 75.01664734]
[99.14303589 60.20132065]
[101.48955536 45.38599777]
[89.17874146 36.29191208]
[82.51472473 22.51332283]
[83.02885437 7.21645164]
[90.60297394 -6.08359337]
[103.49662018 -14.33055973]
[118.74692535 -15.62935448]
[132.84947205 -9.68152523]
[142.56361389 2.14616227]
[145.65708923 17.13578987]
[141.41906738 31.84285355]
[130.82339478 42.88777542]
[116.30487823 47.73251343]
[113.95836639 62.54784012]
[111.61184692 77.36316681]
[109.26532745 92.17848969]
[116.22493744 78.89075470]
[127.03276062 68.48926544]
[140.57731628 62.04371643]
[155.46566772 60.21697235]
[170.16668701 63.19689178]
[183.16851807 70.67702484]
[193.13404846 81.88810730]
[199.03840637 95.67717743]
[200.27438354 110.62616730]
[196.71487427 125.19771576]
[188.72595215 137.89326477]
[177.12918091 147.40721130]
[163.11720276 152.76112366]
[148.13101196 153.40438843]
[133.71177673 149.27088928]
[121.34240723 140.78569031]
[112.29496002 128.82141113]
[107.50000000 114.60913086]
[107.50000000 129.60913086]
[107.50000000 144.60913086]
[119.88497925 153.76983643]
[124.44773102 168.29687500]
[119.63842010 182.55641174]
[107.50000000 191.14691162]
[107.50000000 206.14691162]
[107.50000000 221.14691162]
[107.50000000 236.14691162]
[113.54634094 251.98605347]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[5 75]
[9 71]
[10 70]
[11 69]
[12 30]
[13 29]
[14 28]
[15 27]
[33 51]
[34 50]
[35 49]
[36 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
