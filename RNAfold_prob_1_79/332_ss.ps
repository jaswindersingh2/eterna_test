%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGAUGGGAGAACACACUCCGCCAAAGGCACAUCACGCACUCAACAAGAGCAUCAACAGAUGGCGCAGUACUUUCG\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 223.52207947]
[92.50000000 207.68293762]
[92.50000000 192.68293762]
[92.50000000 177.68293762]
[92.50000000 162.68293762]
[92.50000000 147.68293762]
[78.47120667 144.41909790]
[65.73411560 137.03257751]
[55.49684143 126.00835419]
[48.79148483 112.18370056]
[34.35465622 116.25531006]
[19.91782570 120.32691193]
[5.48099804 124.39852142]
[-2.02166605 138.30842590]
[-17.18638039 142.75892639]
[-31.01618958 135.10961914]
[-35.30611420 119.89870453]
[-27.51101494 106.15054321]
[-12.25558949 102.02167511]
[1.40939116 109.96169281]
[15.84622002 105.89008331]
[30.28304863 101.81848145]
[44.71987534 97.74687195]
[47.35681915 82.98046875]
[35.22156525 74.16369629]
[23.08631134 65.34691620]
[6.71823454 60.92849731]
[6.43284369 43.97695160]
[22.64291191 39.01005936]
[31.90308952 53.21165848]
[44.03834534 62.02843857]
[56.17359924 70.84521484]
[65.93561554 60.69277191]
[77.90950012 53.60048676]
[91.18045807 50.00635910]
[104.76161194 50.08509064]
[117.66734314 53.74161911]
[128.98481750 60.62445068]
[137.93852234 70.15737915]
[151.02595520 62.82806015]
[164.11340332 55.49874115]
[159.99046326 43.03432083]
[166.08444214 27.48054314]
[174.90122986 15.34528828]
[183.71800232 3.21003318]
[182.63858032 -12.79666615]
[194.57685852 -23.51381302]
[210.37478638 -20.72013092]
[217.91357422 -6.55869341]
[211.41009521 8.10705757]
[195.85325623 12.02681160]
[187.03648376 24.16206741]
[178.21969604 36.29732132]
[185.29064941 49.52614212]
[200.27908325 48.93724442]
[215.26751709 48.34834671]
[230.25595093 47.75944901]
[243.82888794 38.55577850]
[258.46594238 45.95096207]
[259.10977173 62.33746719]
[245.09805298 70.85826111]
[230.84484863 62.74788284]
[215.85641479 63.33678055]
[200.86798096 63.92567825]
[185.87954712 64.51457977]
[171.44271851 68.58618164]
[158.35528564 75.91550446]
[145.26783752 83.24481964]
[148.18342590 97.12401581]
[146.93949890 111.25149536]
[141.64347839 124.40766144]
[132.75251770 135.45681763]
[121.03416443 143.44511414]
[107.50000000 147.68293762]
[107.50000000 162.68293762]
[107.50000000 177.68293762]
[107.50000000 192.68293762]
[107.50000000 207.68293762]
[113.54634094 223.52207947]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[5 75]
[6 74]
[10 23]
[11 22]
[12 21]
[13 20]
[24 32]
[25 31]
[26 30]
[39 68]
[40 67]
[41 66]
[43 53]
[44 52]
[45 51]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
