%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACAAAUUCUGAGAGAAAACUCCUGAAAACAGCAGAAAACACACCAAAAGGUGUGAAUUUGAAAAACCGCCUUCG\
) } def
/len { sequence length } bind def

/coor [
[164.38439941 271.01068115]
[160.31278992 256.57385254]
[144.66925049 253.05087280]
[132.81694031 242.11264038]
[127.99716949 226.62396240]
[131.59115601 210.71052551]
[142.72584534 198.66003418]
[138.09059143 184.39418030]
[133.45533752 170.12832642]
[128.82008362 155.86248779]
[124.18482971 141.59663391]
[119.54957581 127.33078766]
[114.91432190 113.06494141]
[107.72303009 121.14147949]
[96.21304321 124.90208435]
[83.08812714 122.15084839]
[72.07549286 112.38870239]
[57.17947006 110.62564087]
[42.28344345 108.86257935]
[27.43784332 115.82966614]
[14.13785744 106.23578644]
[16.06537056 89.95030975]
[31.23752213 83.72633362]
[44.04650116 93.96655273]
[58.94252777 95.72961426]
[73.83855438 97.49267578]
[81.92562866 84.85942078]
[74.08815002 72.06981659]
[66.25067139 59.28021240]
[50.75914764 57.14793015]
[40.30093384 45.52210617]
[39.81407547 29.89210320]
[49.52845764 17.63792992]
[64.85724640 14.54563046]
[78.56265259 22.07529449]
[84.17340088 36.67164612]
[79.04027557 51.44273376]
[86.87775421 64.23233795]
[94.71523285 77.02194214]
[102.09843445 78.34040833]
[100.04327393 63.48186874]
[113.53952026 56.93577194]
[123.93577576 67.74862671]
[116.86483002 80.97735596]
[124.24803162 82.29582977]
[136.02778625 73.00941467]
[147.80754089 63.72300720]
[159.58729553 54.43659973]
[171.36705017 45.15018845]
[176.93800354 29.72629547]
[193.12640381 27.10568047]
[203.27902222 39.98420715]
[196.95170593 55.11355591]
[180.65345764 56.92994308]
[168.87370300 66.21635437]
[157.09394836 75.50276184]
[145.31419373 84.78916931]
[133.53443909 94.07558441]
[129.18017578 108.42968750]
[133.81542969 122.69553375]
[138.45068359 136.96138000]
[143.08593750 151.22723389]
[147.72119141 165.49307251]
[152.35644531 179.75892639]
[156.99169922 194.02476501]
[170.94494629 196.26521301]
[182.48320007 204.30889893]
[189.34638977 216.50959778]
[190.22097778 230.41400146]
[184.99101257 243.25497437]
[174.74961853 252.50225830]
[178.82122803 266.93908691]
[193.42527771 272.18325806]
[202.12989807 285.02886963]
[201.58798218 300.53646851]
[192.00791931 312.74310303]
[177.07342529 316.95507812]
[162.52713013 311.55276489]
[153.96237183 298.61349487]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[13 59]
[17 26]
[18 25]
[19 24]
[27 39]
[28 38]
[29 37]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
