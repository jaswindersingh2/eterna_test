%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGAACCACGAAAAAGGGAAAAGAAAAGGGAAACUCUUAAUUCAUGCGAAAGACAGACCAAAAGAAUAUAUUUCG\
) } def
/len { sequence length } bind def

/coor [
[130.03294373 139.79745483]
[121.96227264 144.76017761]
[113.09854126 148.10658264]
[103.76181793 149.71583557]
[94.28924561 149.52981567]
[85.02289581 147.55525208]
[76.29737854 143.86343384]
[68.42777252 138.58769226]
[61.69826126 131.91851807]
[56.35184479 124.09675598]
[42.27897644 129.28851318]
[38.19678116 144.25900269]
[26.07374573 153.94464111]
[10.57142258 154.62110901]
[-2.34922767 146.02830505]
[-7.71995211 131.47030640]
[-3.47559738 116.54499817]
[8.75179577 106.99143982]
[24.26054382 106.48317719]
[37.08721924 115.21564484]
[51.16008759 110.02388763]
[50.16254044 98.57065582]
[51.81486893 87.19342804]
[56.02921295 76.49712372]
[62.58149719 67.05047607]
[71.12333679 59.35576630]
[81.20056152 53.82212448]
[77.69887543 39.23657608]
[74.19719696 24.65102577]
[70.12558746 10.21419716]
[65.49033356 -4.05165005]
[60.85507965 -18.31749725]
[56.21982574 -32.58334732]
[51.58457184 -46.84919357]
[40.93959808 -60.04468155]
[50.67258072 -73.92652130]
[66.70626831 -68.41677856]
[65.85041809 -51.48444748]
[70.48567200 -37.21860123]
[75.12092590 -22.95275307]
[79.75618744 -8.68690491]
[84.39144135 5.57894278]
[88.40247345 8.60132217]
[90.39295959 14.28697014]
[88.78274536 21.14934540]
[92.28442383 35.73489380]
[95.78610992 50.32044220]
[118.93971252 53.87947845]
[137.91227722 67.61985016]
[148.51551819 88.50830078]
[148.40872192 111.93360901]
[162.26690674 117.67385864]
[176.12510681 123.41410828]
[189.98330688 129.15435791]
[203.84149170 134.89460754]
[213.47328186 123.24471283]
[226.11192322 114.95279694]
[240.63363647 110.75617218]
[255.74711609 111.02800751]
[270.10852051 115.74412537]
[282.44079590 124.48516846]
[291.64743042 136.47389221]
[296.90972900 150.64427185]
[297.75976562 165.73628235]
[294.12197876 180.40795898]
[286.31985474 193.35470581]
[275.04711914 203.42529297]
[261.30612183 209.72425842]
[246.31875610 211.69149780]
[231.41766357 209.15209961]
[217.92782593 202.33186340]
[207.04875183 191.83723450]
[199.74781799 178.60137939]
[196.67422485 163.80122375]
[198.10124207 148.75280762]
[184.24304199 143.01255798]
[170.38485718 137.27230835]
[156.52665710 131.53205872]
[142.66847229 125.79180145]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 21]
[11 20]
[27 47]
[28 46]
[29 45]
[30 42]
[31 41]
[32 40]
[33 39]
[34 38]
[51 79]
[52 78]
[53 77]
[54 76]
[55 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
