%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACUACGGAUGCAAAAGCAAAAAACGUAGACACGAAAGUGACUACGAGCGCAUGCGUAGAAAAAGUAUACGUUCG\
) } def
/len { sequence length } bind def

/coor [
[121.54252625 307.64724731]
[116.66244507 293.37716675]
[115.48532104 278.34170532]
[118.08515930 263.48599243]
[124.29853058 249.74392700]
[133.73486328 237.97929382]
[145.80096436 228.93164062]
[140.06071472 215.07345581]
[134.32046509 201.21525574]
[128.58021545 187.35707092]
[122.83995819 173.49887085]
[110.82111359 164.70133972]
[112.68834686 148.99070740]
[106.94809723 135.13252258]
[101.20783997 121.27432251]
[95.46759033 107.41613007]
[92.43889618 105.98030853]
[89.93580627 103.29231262]
[88.47004700 99.57469177]
[88.45057678 95.25392151]
[90.10498047 90.91171265]
[86.60330200 76.32616425]
[78.80294800 73.74292755]
[72.54456329 68.52650452]
[68.66550446 61.44125366]
[67.66027832 53.49665833]
[69.61801147 45.80359268]
[74.21708679 39.41899490]
[80.77670288 35.20066833]
[80.18780518 20.21223450]
[79.59890747 5.22379827]
[79.01000977 -9.76463795]
[78.42111206 -24.75307274]
[70.14798737 -38.23884201]
[77.37965393 -51.26006699]
[76.79075623 -66.24850464]
[76.20185852 -81.23693848]
[66.99819183 -94.80986786]
[74.39337158 -109.44692230]
[90.77987671 -110.09075165]
[99.30067444 -96.07904053]
[91.19029236 -81.82583618]
[91.77919006 -66.83739471]
[92.36808777 -51.84896469]
[100.59909058 -39.43526840]
[93.40955353 -25.34197044]
[93.99845123 -10.35353470]
[94.58734131 4.63490105]
[95.17623901 19.62333679]
[95.76513672 34.61177063]
[110.34622955 51.62102127]
[101.18885040 72.82447815]
[104.69052887 87.41003418]
[109.32578278 101.67588043]
[115.06603241 115.53407288]
[120.80628967 129.39225769]
[126.54653931 143.25045776]
[138.97596741 153.03921509]
[136.69815063 167.75862122]
[142.43840027 181.61680603]
[148.17864990 195.47500610]
[153.91889954 209.33320618]
[159.65916443 223.19139099]
[174.58883667 221.05702209]
[189.58016968 222.70338440]
[203.69081116 228.02697754]
[216.03373718 236.69317627]
[225.83306885 248.15721130]
[232.47280884 261.69842529]
[235.53556824 276.46563721]
[234.82884216 291.53054810]
[230.39703369 305.94613647]
[222.51873779 318.80630493]
[211.68919373 329.30258179]
[198.58915710 336.77517700]
[184.04209900 340.75436401]
[168.96247864 340.99002075]
[154.29818726 337.46731567]
[140.97105408 330.40771484]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 63]
[8 62]
[9 61]
[10 60]
[11 59]
[13 57]
[14 56]
[15 55]
[16 54]
[21 53]
[22 52]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[35 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
