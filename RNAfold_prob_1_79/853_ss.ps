%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGGACGAAAAAGCCAAAAGUCGUACGAAAGAUACAAGACAGCCGAAAGAGCAAGCAAAAAGCCUGAAUUCG\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 238.93075562]
[92.50000000 223.09162903]
[92.50000000 208.09162903]
[92.50000000 193.09162903]
[81.81912994 182.77394104]
[81.60544586 167.56181335]
[92.50000000 156.42868042]
[92.50000000 141.42868042]
[75.25301361 134.06130981]
[62.91660690 119.93508911]
[48.65076065 124.57034302]
[41.22289276 130.34452820]
[33.73300552 129.09559631]
[26.23034286 143.00550842]
[11.06562710 147.45600891]
[-2.76418209 139.80670166]
[-7.05410528 124.59577942]
[0.74099284 110.84761810]
[15.99641895 106.71875000]
[29.66139984 114.65876770]
[44.01550293 110.30449677]
[58.28135300 105.66924286]
[58.21684265 94.82761383]
[60.92308807 84.32897949]
[66.22062683 74.86953735]
[73.75817871 67.07656097]
[83.03588867 61.46683502]
[79.53421021 46.88128281]
[76.03253174 32.29573441]
[71.96092224 17.85890770]
[67.32566833 3.59305954]
[62.69041443 -10.67278862]
[57.77596283 -24.84487915]
[44.82848358 -34.90941620]
[47.33862305 -51.11531830]
[62.72415924 -56.79133987]
[75.15777588 -46.09848022]
[71.84883118 -30.03663445]
[77.26168060 -24.71129036]
[76.95626068 -15.30804348]
[81.59151459 -1.04219532]
[86.22676849 13.22365284]
[90.23780823 16.24603271]
[92.22829437 21.93167877]
[90.61808014 28.79405594]
[94.11975861 43.37960434]
[97.62143707 57.96515274]
[117.62644958 61.76527405]
[133.50830078 74.50922394]
[146.87339783 67.69936371]
[160.10221863 60.62841415]
[168.01741028 46.26589966]
[184.41645813 46.20997238]
[192.42942810 60.51816559]
[183.81326294 74.47143555]
[167.43153381 73.71585083]
[163.01850891 79.89512634]
[153.68325806 81.06446075]
[140.31816101 87.87432098]
[141.90261841 95.90650940]
[141.90261841 104.09349060]
[140.31816101 112.12567902]
[153.68325806 118.93553925]
[169.32402039 115.36540985]
[181.77677917 125.48017120]
[181.48884583 141.52064514]
[168.68107605 151.18194580]
[153.17851257 147.05274963]
[146.87339783 132.30062866]
[133.50830078 125.49077606]
[121.99828339 135.89793396]
[107.50000000 141.42868042]
[107.50000000 156.42868042]
[118.39455414 167.56181335]
[118.18087006 182.77394104]
[107.50000000 193.09162903]
[107.50000000 208.09162903]
[107.50000000 223.09162903]
[113.54634094 238.93075562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[7 73]
[8 72]
[10 22]
[11 21]
[13 20]
[27 47]
[28 46]
[29 45]
[30 42]
[31 41]
[32 40]
[33 38]
[49 59]
[50 58]
[51 56]
[62 70]
[63 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
