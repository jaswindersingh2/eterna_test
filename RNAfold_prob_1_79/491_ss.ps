%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGUCCACGACAGAGGAAACUCGAGGAAACUCGUCAUUAGUGGAGGAAACUCCGCGUGGACAAAGAGUGUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[112.13906097 138.09663391]
[105.85916138 151.71878052]
[99.57926941 165.34092712]
[101.61781311 181.61286926]
[88.38357544 191.29724121]
[73.49079895 184.43157959]
[72.25990295 168.07868958]
[85.95712280 159.06101990]
[92.23701477 145.43887329]
[98.51691437 131.81672668]
[94.85224915 125.27301025]
[87.18293762 138.16415405]
[72.18421936 137.96798706]
[64.85466003 124.88069153]
[72.52373505 111.98940277]
[87.52293396 112.18556976]
[83.85827637 105.64185333]
[68.96224976 103.87879181]
[54.06621933 102.11573029]
[39.22062302 109.08280945]
[25.92063713 99.48893738]
[27.84815025 83.20346069]
[43.02030182 76.97948456]
[55.82928085 87.21970367]
[70.72531128 88.98276520]
[85.62133789 90.74582672]
[100.20688629 87.24414062]
[112.67893219 78.91059113]
[125.15097046 70.57703400]
[137.62301636 62.24348068]
[150.09506226 53.90992737]
[157.27087402 39.80963516]
[172.15182495 39.17206955]
[184.62387085 30.83851814]
[197.09591675 22.50496292]
[209.56796265 14.17141056]
[221.52777100 5.11807108]
[232.93385315 -4.62364960]
[244.33995056 -14.36537075]
[242.24302673 -28.14033318]
[247.25221252 -41.02542496]
[257.93267822 -49.63005447]
[271.37304688 -51.74836731]
[283.97851562 -46.92390823]
[295.75827026 -56.21031952]
[307.53802490 -65.49672699]
[319.31777954 -74.78313446]
[331.09753418 -84.06954956]
[342.87728882 -93.35595703]
[348.44824219 -108.77984619]
[364.63662720 -111.40046692]
[374.78924561 -98.52193451]
[368.46194458 -83.39259338]
[352.16369629 -81.57620239]
[340.38394165 -72.28979492]
[328.60418701 -63.00338364]
[316.82443237 -53.71697235]
[305.04467773 -44.43056488]
[293.26492310 -35.14415359]
[294.48236084 -18.89715767]
[285.77005005 -4.93542099]
[270.33566284 1.23339665]
[254.08166504 -2.95928097]
[242.67558289 6.78243971]
[231.26948547 16.52416039]
[230.70819092 20.26497841]
[228.13323975 23.86675262]
[223.66030884 26.29993439]
[217.90150452 26.64345360]
[205.42947388 34.97700882]
[192.95742798 43.31056213]
[180.48538208 51.64411545]
[174.20164490 65.14833832]
[158.42861938 66.38197327]
[145.95657349 74.71553040]
[133.48452759 83.04907990]
[121.01248169 91.38263702]
[108.54043579 99.71618652]
[117.53306580 107.38455963]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[17 26]
[18 25]
[19 24]
[27 78]
[28 77]
[29 76]
[30 75]
[31 74]
[33 72]
[34 71]
[35 70]
[36 69]
[37 65]
[38 64]
[39 63]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
