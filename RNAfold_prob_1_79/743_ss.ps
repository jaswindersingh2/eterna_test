%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGUGGCGGCGGAGGCGGCACAAGGGAGGCGGAAAACACCACCCAGGCGGCACCAAGGCGCGGCCGUGUGUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[55.70531082 290.19604492]
[53.35184479 305.24203491]
[45.07664871 318.02642822]
[32.31344986 326.33428955]
[17.27355385 328.72625732]
[2.56271100 324.78784180]
[-9.27033710 315.20144653]
[-16.17544174 301.62796021]
[-16.95625305 286.41909790]
[-11.47748947 272.20983887]
[-0.68838090 261.46203613]
[13.54179478 256.03784180]
[28.74757385 256.87698364]
[35.55743027 243.51188660]
[42.36728668 230.14678955]
[49.17714691 216.78169250]
[55.98700333 203.41659546]
[62.79685974 190.05149841]
[69.60671997 176.68640137]
[76.41657257 163.32130432]
[76.65284729 155.73167419]
[83.76518250 149.57302856]
[91.09450531 136.48558044]
[98.42382050 123.39814758]
[83.24686432 113.99135590]
[79.92322540 97.74362946]
[88.73909760 85.22239685]
[85.23741913 70.63684845]
[81.73573303 56.05129623]
[70.99063110 44.43866348]
[75.54302979 30.25680923]
[72.04134369 15.67126083]
[61.29624176 4.05862474]
[65.84864044 -10.12322807]
[52.97602081 -19.69795227]
[52.57992554 -35.73611450]
[64.96420288 -45.93461227]
[80.62868500 -42.47002792]
[87.55693817 -28.00009537]
[80.43418884 -13.62490940]
[90.92882538 -3.05552936]
[86.62689209 12.16957951]
[90.12857819 26.75512886]
[100.62321472 37.32450867]
[96.32128143 52.54961777]
[99.82296753 67.13516998]
[103.32464600 81.72071838]
[118.10305023 89.32680511]
[122.22024536 107.49788666]
[137.11627197 105.73482513]
[152.01229858 103.97176361]
[164.80738831 94.66605377]
[178.35586548 100.85379791]
[193.25189209 99.09073639]
[206.04698181 89.78502655]
[219.59545898 95.97277069]
[232.40444946 85.73255157]
[247.57659912 91.95652771]
[249.50410461 108.24200439]
[236.20411682 117.83587646]
[221.35852051 110.86879730]
[209.62889099 120.04839325]
[195.01495361 113.98676300]
[180.11892700 115.74982452]
[168.38929749 124.92942047]
[153.77536011 118.86779022]
[138.87933350 120.63085175]
[123.98330688 122.39391327]
[111.51126099 130.72746277]
[104.18194580 143.81491089]
[96.85262299 156.90234375]
[89.78167725 170.13116455]
[82.97181702 183.49626160]
[76.16195679 196.86135864]
[69.35210419 210.22645569]
[62.54224396 223.59155273]
[55.73238754 236.95664978]
[48.92252731 250.32174683]
[42.11267090 263.68685913]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 79]
[14 78]
[15 77]
[16 76]
[17 75]
[18 74]
[19 73]
[20 72]
[22 71]
[23 70]
[24 69]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[34 40]
[49 68]
[50 67]
[51 66]
[53 64]
[54 63]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
