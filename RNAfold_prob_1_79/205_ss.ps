%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAUUGAUAUAGAUGAUCGAAAGAUACAUCGAAGAUAUAUAUGAAAAUAAUAUAAUAUUGAUUCCUUGGUUUCG\
) } def
/len { sequence length } bind def

/coor [
[132.60095215 260.57272339]
[127.40919495 246.49984741]
[122.21743774 232.42697144]
[119.42509460 231.16943359]
[117.03900909 228.58007812]
[115.63184357 224.83966064]
[115.68575287 220.35708618]
[117.50692749 215.72474670]
[114.58056641 201.01296997]
[111.65421295 186.30117798]
[108.72785950 171.58940125]
[105.80150604 156.87762451]
[102.87515259 142.16584778]
[99.94879150 127.45407104]
[97.02243805 112.74228668]
[86.22034454 111.05630493]
[77.75305176 100.24744415]
[64.38795471 93.43758392]
[51.02285767 86.62773132]
[37.65776062 79.81787109]
[24.16153526 73.27172852]
[10.53938770 66.99183655]
[-3.08275962 60.71194077]
[-19.35470963 62.75048828]
[-29.03907776 49.51624680]
[-22.17341423 34.62347412]
[-5.82052708 33.39257431]
[3.19713640 47.08979416]
[16.81928444 53.36968994]
[30.44143105 59.64958572]
[38.03448105 59.58771133]
[44.46761703 66.45277405]
[57.83271408 73.26262665]
[71.19781494 80.07248688]
[84.56291199 86.88234711]
[73.26736450 77.01266479]
[70.37683105 62.29380798]
[77.10095215 48.88537216]
[90.62579346 42.39857101]
[105.29143524 45.54803085]
[114.96053314 57.01574707]
[115.58673096 72.00267029]
[106.90695190 84.23775482]
[118.31304169 74.49603271]
[129.71913147 64.75431061]
[141.12521362 55.01259232]
[152.53131104 45.27087021]
[152.21392822 29.63650894]
[162.06059265 17.48837090]
[177.42201233 14.56243801]
[191.04496765 22.24024582]
[196.49714661 36.89656830]
[191.20419312 51.61113739]
[177.66525269 59.43618393]
[162.27302551 56.67695999]
[150.86694336 66.41867828]
[139.46084595 76.16040039]
[128.05476379 85.90212250]
[116.64867401 95.64384460]
[111.73422241 109.81593323]
[114.66057587 124.52770996]
[117.58692932 139.23948669]
[120.51328278 153.95127869]
[123.43963623 168.66305542]
[126.36598969 183.37483215]
[129.29234314 198.08660889]
[132.21870422 212.79838562]
[136.29031372 227.23521423]
[141.48207092 241.30809021]
[146.67382812 255.38095093]
[161.82424927 257.90286255]
[173.67375183 267.67449951]
[179.03486633 282.06735229]
[176.46548462 297.20980835]
[166.65675354 309.02862549]
[152.24717712 314.34457397]
[137.11285400 311.72775269]
[125.32484436 301.88201904]
[120.05406189 287.45584106]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[3 68]
[8 67]
[9 66]
[10 65]
[11 64]
[12 63]
[13 62]
[14 61]
[15 60]
[17 35]
[18 34]
[19 33]
[20 32]
[21 30]
[22 29]
[23 28]
[43 59]
[44 58]
[45 57]
[46 56]
[47 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
