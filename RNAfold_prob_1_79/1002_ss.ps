%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGACAAAGUCAAGUACAAAGUACAAGGUACAAAGUACCAAGAGGAAACCUCAACACAAAGUGACCAUGCCUUCG\
) } def
/len { sequence length } bind def

/coor [
[81.21497345 338.68637085]
[66.99611664 332.17803955]
[60.33403778 318.03057861]
[64.37436676 302.92398071]
[77.20938110 293.99108887]
[78.38626862 279.03732300]
[79.56314850 264.08355713]
[72.84827423 250.78846741]
[81.64447021 237.63790894]
[82.82135773 222.68414307]
[72.98292542 211.56025696]
[73.96343231 196.37825012]
[85.69789886 186.13421631]
[86.87478638 171.18046570]
[88.05167389 156.22669983]
[89.22855377 141.27294922]
[65.49108887 125.07218933]
[57.41854095 97.49021149]
[42.83299255 93.98853302]
[28.24744415 90.48684692]
[13.66189480 86.98516846]
[-3.15109110 89.16687775]
[-9.90183353 73.61490631]
[3.17356920 62.82276917]
[17.16357422 72.39962006]
[31.74912453 75.90129852]
[46.33467102 79.40298462]
[60.92022324 82.90466309]
[66.33018494 73.81177521]
[73.81177521 66.33018494]
[82.90466309 60.92022324]
[79.40298462 46.33467102]
[75.90129852 31.74912453]
[72.39962006 17.16357422]
[68.89794159 2.57802629]
[59.32108688 -11.41197968]
[70.11322021 -24.48738289]
[85.66519165 -17.73663902]
[83.48348999 -0.92365408]
[86.98516846 13.66189480]
[90.48684692 28.24744415]
[93.98853302 42.83299255]
[97.49021149 57.41854095]
[108.04810333 58.11076736]
[118.11081696 61.38034439]
[127.05921936 67.02609253]
[138.46530151 57.28437424]
[149.87139893 47.54265213]
[161.27748108 37.80093002]
[169.39486694 22.91656494]
[185.94467163 26.59631920]
[186.99015808 43.51800156]
[171.01921082 49.20701981]
[159.61311340 58.94874191]
[148.20703125 68.69046021]
[136.80093384 78.43218231]
[140.35597229 86.18421936]
[142.29779053 94.48853302]
[142.54879761 103.01316833]
[141.09895325 111.41734314]
[138.00621033 119.36512756]
[133.39418030 126.53880310]
[127.44725800 132.65161133]
[120.40315247 137.45919800]
[112.54344177 140.76937866]
[104.18231964 142.44982910]
[103.00543213 157.40359497]
[101.82854462 172.35734558]
[100.65165710 187.31111145]
[110.63912964 199.26469421]
[109.23258209 214.41316223]
[97.77511597 223.86102295]
[96.59822845 238.81478882]
[103.22892761 253.17947388]
[94.51691437 265.26046753]
[93.34002686 280.21420288]
[92.16313934 295.16796875]
[103.44271851 305.99871826]
[105.07010651 321.55139160]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 77]
[6 76]
[7 75]
[9 73]
[10 72]
[13 69]
[14 68]
[15 67]
[16 66]
[18 28]
[19 27]
[20 26]
[21 25]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[46 56]
[47 55]
[48 54]
[49 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
