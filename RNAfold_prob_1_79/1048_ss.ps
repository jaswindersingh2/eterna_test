%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGGCAAAGCCAAGCUCAAAGAGCAAGCUACAAAGUAGCAACUCGAAACGAGAAGCGAAACGCACCAUAGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[117.97272491 170.38618469]
[112.78096771 156.31330872]
[101.83638763 157.71627808]
[90.82476044 157.01190186]
[80.14813995 154.22587585]
[70.19635773 149.45993042]
[61.33277512 142.88807678]
[49.92668533 152.62980652]
[38.52059555 162.37152100]
[30.40320969 177.25588989]
[13.85341263 173.57614136]
[12.80792141 156.65444946]
[28.77887535 150.96543884]
[40.18496323 141.22370911]
[51.59105301 131.48199463]
[45.74127579 119.76190186]
[42.68340683 107.02495575]
[42.57478714 93.92653656]
[27.98923874 90.42485809]
[13.40369034 86.92317963]
[-1.18185854 83.42150116]
[-17.99484444 85.60320282]
[-24.74558640 70.05123138]
[-11.67018414 59.25909805]
[2.31982183 68.83595276]
[16.90537071 72.33763123]
[31.49091911 75.83930969]
[46.07646942 79.34098816]
[53.87485504 65.25791168]
[65.25791168 53.87485504]
[79.34098816 46.07646942]
[75.83930969 31.49091911]
[72.33763123 16.90537071]
[68.83595276 2.31982183]
[65.33426666 -12.26572704]
[55.75741959 -26.25573349]
[66.54955292 -39.33113480]
[82.10152435 -32.58039474]
[79.91981506 -15.76740742]
[83.42150116 -1.18185854]
[86.92317963 13.40369034]
[90.42485809 27.98923874]
[93.92653656 42.57478714]
[110.01505280 43.12961578]
[125.32522583 48.10419464]
[138.66722107 57.11191940]
[150.07331848 47.37019730]
[161.47940063 37.62847519]
[172.88549805 27.88675499]
[181.00288391 13.00238895]
[197.55267334 16.68214226]
[198.59817505 33.60382462]
[182.62721252 39.29284668]
[171.22113037 49.03456497]
[159.81503296 58.77628708]
[148.40895081 68.51800537]
[154.25872803 80.23809814]
[157.31658936 92.97504425]
[157.42521667 106.07346344]
[172.01075745 109.57514191]
[186.59631348 113.07682037]
[203.40930176 110.89511108]
[210.16003418 126.44708252]
[197.08464050 137.23922729]
[183.09463501 127.66236877]
[168.50907898 124.16069031]
[153.92353821 120.65901184]
[143.16523743 138.35758972]
[126.85384369 151.12155151]
[132.04559326 165.19442749]
[147.19602966 167.71632385]
[159.04553223 177.48796082]
[164.40664673 191.88081360]
[161.83726501 207.02326965]
[152.02853394 218.84207153]
[137.61895752 224.15805054]
[122.48462677 221.54121399]
[110.69661713 211.69548035]
[105.42583466 197.26931763]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[7 15]
[8 14]
[9 13]
[18 28]
[19 27]
[20 26]
[21 25]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[46 56]
[47 55]
[48 54]
[49 53]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
