%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGAACAAUGAUGAAAAUCAACAUUGAUCGAGCAUAGGAAACAAUGAGAUUGAUGAAGUUCACUAUAAGUUCG\
) } def
/len { sequence length } bind def

/coor [
[131.62069702 141.67640686]
[124.18731689 154.70503235]
[111.36672974 162.49172974]
[96.37831879 163.08117676]
[82.98581696 156.32537842]
[74.55221558 143.92076111]
[73.19527435 128.98226929]
[79.25574493 115.26109314]
[91.21382904 106.20189667]
[76.39850616 103.85537720]
[61.55785370 109.33860016]
[50.19765854 99.70557404]
[35.38233185 97.35905457]
[20.56700706 95.01253510]
[5.75168228 92.66602325]
[-9.06364250 90.31950378]
[-23.90429306 95.80272675]
[-35.26449203 86.16970062]
[-50.07981491 83.82318115]
[-64.89514160 81.47666168]
[-81.48512268 84.97077942]
[-89.43524933 69.99640656]
[-77.24689484 58.21165466]
[-62.54862213 66.66133881]
[-47.73329926 69.00785828]
[-32.91797256 71.35437012]
[-19.13701439 65.70331573]
[-6.71712589 75.50418091]
[8.09819889 77.85069275]
[22.91352463 80.19721222]
[37.72885132 82.54373169]
[52.54417419 84.89024353]
[66.32513428 79.23918915]
[78.74502563 89.04005432]
[93.56034851 91.38657379]
[108.54878235 90.79767609]
[123.13433075 87.29598999]
[137.71987915 83.79431152]
[152.30543518 80.29263306]
[166.74226379 76.22102356]
[181.00810242 71.58576965]
[195.27395630 66.95051575]
[209.53979492 62.31526184]
[216.76142883 48.51359940]
[231.29505920 44.01601410]
[244.40832520 50.98579025]
[258.67416382 46.35053253]
[272.94003296 41.71527863]
[273.75173950 26.55924034]
[279.98724365 12.72149181]
[290.80316162 2.07347608]
[304.73675537 -3.94475031]
[319.90365601 -4.51927137]
[334.25259399 0.42761195]
[345.84307861 10.22687435]
[353.10751343 23.55324554]
[355.06350708 38.60444260]
[351.44647217 53.34491730]
[342.74563599 65.78114319]
[330.13766479 74.23121643]
[315.32772827 77.55233765]
[300.31869507 75.29534912]
[287.14047241 67.76549530]
[277.57528687 55.98112869]
[263.30941772 60.61638260]
[249.04357910 65.25164032]
[242.53144836 78.59809113]
[228.12988281 83.50212097]
[214.17504883 76.58110809]
[199.90921021 81.21636200]
[185.64335632 85.85161591]
[171.37751770 90.48686981]
[168.35513306 94.49790955]
[162.66947937 96.48839569]
[155.80711365 94.87818146]
[141.22155762 98.37985992]
[126.63600922 101.88153839]
[112.05046082 105.38322449]
[124.68094635 113.47463226]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 35]
[10 34]
[12 32]
[13 31]
[14 30]
[15 29]
[16 28]
[18 26]
[19 25]
[20 24]
[36 78]
[37 77]
[38 76]
[39 75]
[40 72]
[41 71]
[42 70]
[43 69]
[46 66]
[47 65]
[48 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
