%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAUAUAAUAUAUAUAUAAAAUAUAUAUAUAUAUGAAAAUAUAUAUAUAUAAUAUAUAUAUUAUAUAUAUAUUUCG\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 172.58544922]
[92.50000000 156.74632263]
[92.50000000 141.74632263]
[92.50000000 126.74631500]
[92.50000000 111.74631500]
[91.02973938 96.81854248]
[88.10338593 82.10676575]
[85.17703247 67.39498901]
[82.25067902 52.68320847]
[79.32432556 37.97142792]
[76.39797211 23.25964928]
[73.47161102 8.54786968]
[70.54525757 -6.16390991]
[67.61890411 -20.87568855]
[64.69255066 -35.58746719]
[61.76619339 -50.29924774]
[58.83983994 -65.01102448]
[55.91348648 -79.72280884]
[52.98712921 -94.43458557]
[50.06077576 -109.14636230]
[46.60551071 -112.72915649]
[44.84029770 -116.84989166]
[44.70895386 -120.84407806]
[45.92250824 -124.14944458]
[48.02105713 -126.37985229]
[47.43215942 -141.36828613]
[46.84326172 -156.35671997]
[46.25436783 -171.34515381]
[45.66547012 -186.33358765]
[45.07657242 -201.32202148]
[44.48767471 -216.31045532]
[43.89877701 -231.29890442]
[43.30987930 -246.28733826]
[42.72098160 -261.27575684]
[42.13208389 -276.26419067]
[41.54319000 -291.25262451]
[40.95429230 -306.24108887]
[31.75062180 -319.81399536]
[39.14580536 -334.45104980]
[55.53231049 -335.09487915]
[64.05310059 -321.08319092]
[55.94272614 -306.82998657]
[56.53162384 -291.84152222]
[57.12052155 -276.85308838]
[57.70941925 -261.86465454]
[58.29831696 -246.87623596]
[58.88721466 -231.88780212]
[59.47610855 -216.89935303]
[60.06500626 -201.91091919]
[60.65390396 -186.92248535]
[61.24280167 -171.93405151]
[61.83169937 -156.94561768]
[62.42059708 -141.95718384]
[63.00949478 -126.96874237]
[64.77255249 -112.07271576]
[67.69890594 -97.36093903]
[70.62526703 -82.64916229]
[73.55162048 -67.93737793]
[76.47797394 -53.22560120]
[79.40432739 -38.51382446]
[82.33068085 -23.80204391]
[85.25704193 -9.09026432]
[88.18339539 5.62151480]
[91.10974884 20.33329391]
[94.03610229 35.04507446]
[96.96245575 49.75685120]
[99.88880920 64.46862793]
[102.81517029 79.18041229]
[105.74152374 93.89218903]
[108.10943604 95.43022919]
[110.00912476 97.86644745]
[111.11126709 101.03773499]
[111.14874268 104.66461945]
[109.95622253 108.37593842]
[107.50000000 111.74631500]
[107.50000000 126.74631500]
[107.50000000 141.74632263]
[107.50000000 156.74632263]
[113.54634094 172.58544922]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[5 75]
[6 69]
[7 68]
[8 67]
[9 66]
[10 65]
[11 64]
[12 63]
[13 62]
[14 61]
[15 60]
[16 59]
[17 58]
[18 57]
[19 56]
[20 55]
[25 54]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
