%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCUGGUACGAAGAAGUACGACAAAGUCACAGCAGGCAGACGAAUAGUCGAUCUUCGGAUCGCCGGAGUACUUCG\
) } def
/len { sequence length } bind def

/coor [
[64.43852234 150.25065613]
[55.58300018 142.62484741]
[48.32816315 133.46293640]
[42.93545151 123.09510803]
[39.59920502 111.89498901]
[38.43965530 100.26620483]
[23.54362869 98.50314331]
[8.64760208 96.74008179]
[-6.24842453 94.97702026]
[-21.20218468 96.15390778]
[-35.63901138 100.22550964]
[-50.07584000 104.29711914]
[-64.51267242 108.36872864]
[-72.01533508 122.27863312]
[-87.18004608 126.72914124]
[-101.00985718 119.07982635]
[-105.29978180 103.86891174]
[-97.50468445 90.12074280]
[-82.24925995 85.99188232]
[-68.58427429 93.93190002]
[-54.14744949 89.86029053]
[-39.71062088 85.78868103]
[-25.27379227 81.71707916]
[-22.63684654 66.95067596]
[-34.77210236 58.13389969]
[-46.90735626 49.31711960]
[-63.27543259 44.89870453]
[-63.56082535 27.94715881]
[-47.35075760 22.98026657]
[-38.09057999 37.18186569]
[-25.95532417 45.99864578]
[-13.82006836 54.81542587]
[-4.29861975 67.51804352]
[-4.48536348 80.08099365]
[10.41066360 81.84405518]
[25.30669022 83.60711670]
[40.20271683 85.37017822]
[47.39324570 68.02694702]
[59.47682190 53.65759277]
[75.32953644 43.59862518]
[93.47689056 38.78565598]
[112.23097229 39.66634369]
[129.84742737 46.15877151]
[138.66421509 34.02351761]
[147.48098755 21.88826370]
[146.40156555 5.88156462]
[158.33984375 -4.83558321]
[174.13778687 -2.04190087]
[181.67655945 12.11953735]
[175.17308044 26.78528786]
[159.61624146 30.70504189]
[150.79946899 42.84029770]
[141.98268127 54.97555161]
[152.24153137 67.43363190]
[158.91012573 82.12980652]
[161.53015137 98.05410004]
[159.92156982 114.11212921]
[173.99444580 119.30388641]
[188.06730652 124.49564362]
[202.14018250 129.68739319]
[216.21304321 134.87915039]
[230.28591919 140.07090759]
[246.34776306 136.76196289]
[257.04061890 149.19557190]
[251.36460876 164.58111572]
[235.15870667 167.09126282]
[225.09416199 154.14378357]
[211.02130127 148.95202637]
[196.94842529 143.76026917]
[182.87554932 138.56851196]
[168.80268860 133.37675476]
[154.72981262 128.18499756]
[148.41729736 138.01989746]
[140.35992432 146.48464966]
[130.84808350 153.27421570]
[120.22456360 158.14390564]
[108.87219238 160.91822815]
[97.20008850 161.49720764]
[85.62889099 159.85998535]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 37]
[7 36]
[8 35]
[9 34]
[10 23]
[11 22]
[12 21]
[13 20]
[24 32]
[25 31]
[26 30]
[43 53]
[44 52]
[45 51]
[57 72]
[58 71]
[59 70]
[60 69]
[61 68]
[62 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
