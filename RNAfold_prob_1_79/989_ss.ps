%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGUCCAGUAUGAGAGUACAGUAUUAUAUGAAAAAAAUAUAAUAUAAAUUGAGAGAUUAGGACCGAUGUAUUUCG\
) } def
/len { sequence length } bind def

/coor [
[92.73792267 260.69799805]
[88.00997162 246.31311035]
[88.21146393 231.17250061]
[93.32053375 216.91851807]
[102.78298950 205.09732056]
[115.57241058 196.99119568]
[112.07073212 182.40563965]
[108.56904602 167.82009888]
[105.06736755 153.23454285]
[101.56568909 138.64900208]
[79.14575195 132.57754517]
[64.24568939 114.75891113]
[49.53390884 117.68526459]
[34.82212830 120.61161804]
[20.11035156 123.53797150]
[8.14429474 134.75160217]
[-7.46941328 129.73721313]
[-10.66872883 113.65316772]
[1.83753037 103.04536438]
[17.18399620 108.82619476]
[31.89577484 105.89984131]
[46.60755539 102.97348785]
[61.31933212 100.04712677]
[67.42245483 79.14575195]
[83.84876251 64.85268402]
[80.34708405 50.26713562]
[76.84539795 35.68158722]
[73.34371948 21.09603882]
[69.84204102 6.51049042]
[66.34036255 -8.07505798]
[62.83868027 -22.66060638]
[59.33699799 -37.24615479]
[55.83531952 -51.83170319]
[41.76091385 -58.64677048]
[35.40713501 -72.93534851]
[39.77404404 -87.95081329]
[52.79972076 -96.60331726]
[68.33383179 -94.80741119]
[79.04165649 -83.41107178]
[79.86727905 -67.79530334]
[70.42086792 -55.33338547]
[73.92254639 -40.74783707]
[77.42422485 -26.16228676]
[80.92591095 -11.57673836]
[84.42758942 3.00881004]
[87.92926788 17.59435844]
[91.43095398 32.17990875]
[94.93263245 46.76545715]
[98.43431091 61.35100555]
[105.50997162 61.71375656]
[112.40077209 63.36098862]
[118.87553406 66.23744202]
[124.71703339 70.24660492]
[129.72929382 75.25397491]
[133.74414062 81.09156799]
[136.62690735 87.56352234]
[138.28085327 94.45271301]
[138.65049744 101.52801514]
[137.72344971 108.55205536]
[135.53079224 115.28916931]
[132.14610291 121.51335144]
[127.68292999 127.01576233]
[122.29100800 131.61181641]
[116.15123749 135.14730835]
[119.65291595 149.73286438]
[123.15460205 164.31840515]
[126.65628052 178.90396118]
[130.15795898 193.48950195]
[145.23352051 194.90585327]
[159.03134155 201.14274597]
[170.05473328 211.52366638]
[177.10795593 224.92257690]
[179.42593384 239.88606262]
[176.75721741 254.79098511]
[169.39131165 268.02056885]
[158.12719727 278.13980103]
[144.18672180 284.05096436]
[129.08206177 285.11291504]
[114.45163727 281.21041870]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 68]
[7 67]
[8 66]
[9 65]
[10 64]
[12 23]
[13 22]
[14 21]
[15 20]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
