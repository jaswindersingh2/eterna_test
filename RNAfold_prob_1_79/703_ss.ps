%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAUACAGGACAAAGACCAGUAAAGUCACGACAAAAAGACGAGACACUGACCACAAAAGAGGACAGAAGGUGGUUCG\
) } def
/len { sequence length } bind def

/coor [
[62.37319565 255.97251892]
[55.46852493 269.41934204]
[44.90589905 280.23239136]
[31.62454033 287.45022583]
[16.80541611 290.43099976]
[1.76623559 288.90966797]
[-12.15573025 283.02151489]
[-23.72254753 273.29013062]
[-31.90570450 260.58078003]
[-35.97756195 246.02360535]
[-35.57604599 230.91299438]
[-30.73686790 216.59260559]
[-21.89031792 204.33576965]
[-9.82302856 195.23237610]
[4.39198589 190.09187317]
[19.49073601 189.37135315]
[34.13065338 193.13490295]
[41.96813202 180.34529114]
[49.80561066 167.55569458]
[57.64308929 154.76609802]
[65.48056793 141.97648621]
[65.53341675 127.08197784]
[79.34111786 119.35812378]
[72.93582916 108.31006622]
[72.03731537 95.57114410]
[76.82839966 83.73336792]
[86.33422852 75.20538330]
[82.83254242 60.61983490]
[79.33086395 46.03428650]
[68.58576202 34.42164993]
[73.13815308 20.23979568]
[69.63647461 5.65424776]
[58.89136887 -5.95838785]
[63.44376755 -20.14024162]
[50.57115173 -29.71496391]
[50.17505264 -45.75312805]
[62.55932617 -55.95162201]
[78.22381592 -52.48703766]
[85.15206909 -38.01710892]
[78.02931213 -23.64192200]
[88.52395630 -13.07254219]
[84.22202301 2.15256739]
[87.72370148 16.73811531]
[98.21834564 27.30749512]
[93.91641235 42.53260422]
[97.41809082 57.11815262]
[100.91977692 71.70370483]
[116.18802643 76.77341461]
[126.22898865 89.34324646]
[141.12501526 87.58018494]
[156.02104187 85.81712341]
[168.81613159 76.51142120]
[182.36460876 82.69915771]
[197.26063538 80.93609619]
[204.72483826 67.33222198]
[218.77397156 60.74425888]
[234.00588989 63.70542145]
[244.56358337 75.07707977]
[246.38742065 90.48659515]
[238.77609253 104.00870514]
[224.65631104 110.44387054]
[209.45741272 107.31764221]
[199.02369690 95.83212280]
[184.12767029 97.59518433]
[172.39804077 106.77478027]
[157.78410339 100.71315002]
[142.88807678 102.47621155]
[127.99205017 104.23927307]
[121.32762909 118.61877441]
[107.97949219 127.16346741]
[92.13072205 127.19560242]
[91.51728058 143.00491333]
[78.27017212 149.81396484]
[70.43269348 162.60357666]
[62.59521103 175.39317322]
[54.75773239 188.18276978]
[46.92025375 200.97238159]
[56.91997910 212.30802917]
[63.13269043 226.08821106]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 77]
[18 76]
[19 75]
[20 74]
[21 73]
[23 71]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[34 40]
[49 68]
[50 67]
[51 66]
[53 64]
[54 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
