%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAGAGUCGAUUCGAGAGAAUCGUUGACGGAUGAGAGUUCAUGAUGAGAGUUAGUUGACGACUCGUUAUAUUUCG\
) } def
/len { sequence length } bind def

/coor [
[92.46700287 190.04562378]
[98.51334381 174.20649719]
[98.51334381 159.20649719]
[98.51334381 144.20649719]
[98.51334381 129.20649719]
[93.10694122 124.00833893]
[89.50996399 138.57067871]
[75.10014343 142.73686218]
[64.28714752 132.34074402]
[67.88385773 117.77834320]
[82.29413605 113.61202240]
[76.88773346 108.41387177]
[61.89929962 109.00276947]
[46.91086578 109.59166718]
[31.92243004 110.18056488]
[16.93399429 110.76946259]
[1.94555879 111.35835266]
[-11.62737465 120.56202698]
[-26.26442719 113.16683960]
[-26.90825462 96.78034210]
[-12.89654255 88.25954437]
[1.35666156 96.36991882]
[16.34509659 95.78102112]
[31.33353233 95.19212341]
[46.32196808 94.60322571]
[61.31040192 94.01432800]
[76.29883575 93.42543793]
[81.16970062 87.72238922]
[67.31157684 81.98196411]
[68.48883820 67.02823639]
[83.07451630 63.52709961]
[90.91142273 76.31629944]
[95.78227997 70.61325836]
[94.01921844 55.71722794]
[92.25615692 40.82120132]
[90.49309540 25.92517471]
[80.25288391 13.11619473]
[86.47685242 -2.05595660]
[102.76232910 -3.98346972]
[112.35620880 9.31651497]
[105.38912201 24.16211319]
[107.15218353 39.05813980]
[108.91524506 53.95416641]
[110.67830658 68.85019684]
[122.27346802 78.36609650]
[137.22721863 77.18920898]
[152.18098450 76.01232147]
[167.13475037 74.83543396]
[182.08850098 73.65854645]
[197.04226685 72.48165894]
[211.99601746 71.30477142]
[226.94978333 70.12789154]
[241.71157837 59.33016205]
[257.27993774 67.17668915]
[272.17596436 65.41362762]
[287.07199097 63.65056992]
[299.88095093 53.41035080]
[315.05310059 59.63432693]
[316.98062134 75.91980743]
[303.68063354 85.51367950]
[288.83505249 78.54660034]
[273.93899536 80.30965424]
[259.04296875 82.07271576]
[251.16760254 91.47245789]
[238.58389282 92.92480469]
[228.12666321 85.08164978]
[213.17291260 86.25853729]
[198.21914673 87.43542480]
[183.26539612 88.61230469]
[168.31163025 89.78919220]
[153.35786438 90.96607971]
[138.40411377 92.14296722]
[123.45034790 93.31985474]
[125.70797729 111.78916931]
[113.51334381 129.20649719]
[113.51334381 144.20649719]
[113.51334381 159.20649719]
[113.51334381 174.20649719]
[119.55968475 190.04562378]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[5 75]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[33 44]
[34 43]
[35 42]
[36 41]
[45 73]
[46 72]
[47 71]
[48 70]
[49 69]
[50 68]
[51 67]
[52 66]
[54 63]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
