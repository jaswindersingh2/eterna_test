%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGACGCAGCAAAGGUGGGUCAAGACGGUACGAAAAGAACGGUCAGACGGUACGAAAGAACGGUCGCUAUCUUUCG\
) } def
/len { sequence length } bind def

/coor [
[114.24462128 146.35974121]
[101.64471436 148.47091675]
[88.93067932 147.21868896]
[76.98474884 142.68995667]
[66.63584137 135.19897461]
[58.60207748 125.26552582]
[44.74388123 131.00576782]
[30.88569069 136.74603271]
[21.09692955 149.17546082]
[6.37752676 146.89764404]
[-7.48066616 152.63789368]
[-17.26942635 165.06732178]
[-31.98882866 162.78950500]
[-44.30844498 174.43696594]
[-58.91112900 165.82315063]
[-54.67636490 149.40660095]
[-37.72908020 148.93130493]
[-28.93155098 136.91246033]
[-13.22091770 138.77969360]
[0.63727546 133.03944397]
[9.43480492 121.02059937]
[25.14543915 122.88783264]
[39.00363159 117.14758301]
[52.86182404 111.40733337]
[52.83437729 88.70668793]
[63.14026260 68.48025513]
[81.52159882 55.15935516]
[78.01992035 40.57380676]
[74.51824188 25.98825645]
[63.77313232 14.37562084]
[68.32553101 0.19376780]
[64.82385254 -14.39178085]
[54.07874298 -26.00441742]
[58.63114166 -40.18627167]
[45.75852585 -49.76099396]
[45.36242676 -65.79915619]
[57.74670029 -75.99765015]
[73.41119385 -72.53306580]
[80.33943939 -58.06313705]
[73.21669006 -43.68795013]
[83.71132660 -33.11857224]
[79.40940094 -17.89346123]
[82.91107941 -3.30791259]
[93.40571594 7.26146698]
[89.10379028 22.48657608]
[92.60546875 37.07212448]
[96.10714722 51.65767288]
[107.31018066 52.05528259]
[118.12265778 55.01440048]
[127.96691132 60.37694168]
[136.31698608 67.85639954]
[142.72677612 77.05316925]
[146.85383606 87.47590637]
[148.47766113 98.56776428]
[147.51150513 109.73613739]
[144.00697327 120.38434601]
[156.47901917 128.71789551]
[168.95106506 137.05145264]
[181.42309570 145.38500977]
[193.89514160 153.71855164]
[206.36718750 162.05210876]
[218.83923340 170.38566589]
[234.14877319 167.51240540]
[246.67849731 176.14147949]
[249.32334900 190.75450134]
[265.71386719 191.28654480]
[273.20870972 205.87281799]
[264.09783936 219.50820923]
[247.75372314 218.16580200]
[240.98980713 203.22654724]
[226.47698975 206.37516785]
[213.70983887 198.10142517]
[210.50567627 182.85771179]
[198.03363037 174.52415466]
[185.56159973 166.19059753]
[173.08955383 157.85705566]
[160.61750793 149.52349854]
[148.14546204 141.18994141]
[135.67341614 132.85638428]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 24]
[7 23]
[8 22]
[10 20]
[11 19]
[13 17]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[34 40]
[56 79]
[57 78]
[58 77]
[59 76]
[60 75]
[61 74]
[62 73]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
