%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGAUCACUGGCAAGCAAAAGCACCAAAAGGAAAGCACAGAAAGAUCAAGGAAAACCAAGCUUGUUGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[87.06285858 227.99401855]
[76.39640045 216.33201599]
[77.18379974 200.54736328]
[88.95791626 190.00479126]
[89.54681396 175.01635742]
[90.13571167 160.02792358]
[90.72460938 145.03948975]
[91.31350708 130.05105591]
[91.90240479 115.06261444]
[87.54813385 100.70851135]
[78.73135376 88.57324982]
[69.91457367 76.43799591]
[61.09779358 64.30274200]
[42.40475845 57.25614166]
[40.57845306 38.16867828]
[30.83673096 26.76258659]
[21.09501076 15.35649776]
[11.13122463 4.14387274]
[0.94921315 -6.87096500]
[-18.04505730 -5.24667215]
[-33.13489914 -16.48150635]
[-36.92265701 -34.65312195]
[-50.54480362 -40.93301773]
[-66.81674957 -38.89447021]
[-76.50112152 -52.12870789]
[-69.63545990 -67.02148438]
[-53.28256989 -68.25238037]
[-44.26490784 -54.55516434]
[-30.64275932 -48.27526855]
[-29.56205559 -49.42362595]
[-28.41369820 -50.50432968]
[-34.69359589 -64.12648010]
[-48.39081192 -73.14414215]
[-47.15991211 -89.49702454]
[-32.26713943 -96.36269379]
[-19.03289986 -86.67832184]
[-21.07144737 -70.40637207]
[-14.79155064 -56.78422546]
[-0.37854365 -54.97375107]
[10.95180035 -45.64959717]
[15.59455681 -31.57448578]
[11.96405125 -17.05297661]
[22.14606285 -6.03813839]
[29.18480492 -3.18956900]
[32.50109863 5.61477709]
[42.24282074 17.02086639]
[51.98454285 28.42695618]
[62.52723694 28.35219955]
[71.47500610 34.33900833]
[75.59571075 44.52596664]
[73.23304749 55.48596573]
[82.04982758 67.62121582]
[90.86660767 79.75647736]
[99.68338776 91.89173126]
[105.11621094 83.54001617]
[115.77848053 78.88502502]
[129.50941467 80.29904938]
[144.49784851 80.88794708]
[158.75105286 72.77757263]
[172.76275635 81.29837036]
[172.11892700 97.68487549]
[157.48188782 105.08005524]
[143.90895081 95.87638855]
[128.92051697 95.28749084]
[123.41309357 100.37849426]
[138.24137878 102.64170837]
[145.71733093 115.64594269]
[140.21154785 129.59893799]
[125.86988831 133.99404907]
[113.49169922 125.52171326]
[112.39825439 110.56050110]
[106.89083862 115.65151215]
[106.30194092 130.63993835]
[105.71304321 145.62838745]
[105.12414551 160.61682129]
[104.53524780 175.60525513]
[103.94635010 190.59368896]
[114.85700989 202.02754211]
[114.40353394 217.82533264]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 77]
[5 76]
[6 75]
[7 74]
[8 73]
[9 72]
[10 54]
[11 53]
[12 52]
[13 51]
[15 47]
[16 46]
[17 45]
[18 43]
[19 42]
[22 29]
[23 28]
[31 38]
[32 37]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
