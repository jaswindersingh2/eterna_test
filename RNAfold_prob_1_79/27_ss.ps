%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAUAAUGAUUAAUAAGAUAAAAUAUACUUAAAAAUAAUACUAAAAUAGAUUAAUAAUGAUUACAGUGAUUUCG\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 353.33898926]
[92.50000000 337.49984741]
[92.50000000 322.49984741]
[92.50000000 307.49984741]
[92.50000000 292.49984741]
[81.81912994 282.18215942]
[81.60544586 266.97003174]
[92.50000000 255.83691406]
[92.50000000 240.83691406]
[81.81912994 230.51922607]
[81.60544586 215.30709839]
[92.50000000 204.17398071]
[92.50000000 189.17398071]
[92.50000000 174.17398071]
[92.50000000 159.17398071]
[92.50000000 144.17398071]
[92.50000000 129.17398071]
[73.43424225 114.19969177]
[71.57595062 90.02783203]
[59.10390472 81.69427490]
[46.63186264 73.36072540]
[34.15981674 65.02716827]
[21.52655792 56.94009399]
[8.73695564 49.10261536]
[-4.05264664 41.26513672]
[-20.71693039 38.14456558]
[-22.33144569 21.26766777]
[-6.56104469 15.04425907]
[3.78483176 28.47553444]
[16.57443428 36.31301498]
[29.36403656 44.15049362]
[36.91172791 44.98151398]
[42.49337006 52.55512619]
[54.96541595 60.88867950]
[67.43746185 69.22222900]
[79.90950012 77.55578613]
[85.95140076 73.35402679]
[92.83184052 70.74272156]
[100.14012909 69.87773132]
[107.44005585 70.81067657]
[114.29589844 73.48588562]
[124.47790527 62.47105026]
[134.65991211 51.45621109]
[144.84193420 40.44137573]
[148.50132751 31.77401352]
[155.64648438 29.20397949]
[166.25308228 18.59737778]
[176.85968018 7.99077702]
[183.78422546 -7.48458862]
[200.57171631 -5.11466026]
[202.94165039 11.67282867]
[187.46627808 18.59737778]
[176.85968018 29.20397949]
[166.25308228 39.81058121]
[155.85676575 50.62338638]
[145.67475891 61.63822174]
[135.49275208 72.65306091]
[125.31073761 83.66790009]
[129.55404663 94.17514801]
[129.61497498 105.50670624]
[125.48490143 116.05897522]
[117.74829102 124.33863068]
[107.50000000 129.17398071]
[107.50000000 144.17398071]
[107.50000000 159.17398071]
[107.50000000 174.17398071]
[107.50000000 189.17398071]
[107.50000000 204.17398071]
[118.39455414 215.30709839]
[118.18087006 230.51922607]
[107.50000000 240.83691406]
[107.50000000 255.83691406]
[118.39455414 266.97003174]
[118.18087006 282.18215942]
[107.50000000 292.49984741]
[107.50000000 307.49984741]
[107.50000000 322.49984741]
[107.50000000 337.49984741]
[113.54634094 353.33898926]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[5 75]
[8 72]
[9 71]
[12 68]
[13 67]
[14 66]
[15 65]
[16 64]
[17 63]
[19 36]
[20 35]
[21 34]
[22 33]
[23 31]
[24 30]
[25 29]
[41 58]
[42 57]
[43 56]
[44 55]
[46 54]
[47 53]
[48 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
