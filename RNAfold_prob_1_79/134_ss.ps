%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAACGAGAACACACGAGACCAAAGGAGAAAACUACCAGGACUACGAGAAGUUCAACGAAAAAAGAGCUAUUUCG\
) } def
/len { sequence length } bind def

/coor [
[134.22875977 169.69447327]
[134.14523315 184.69424438]
[130.10270691 199.13923645]
[122.38831329 212.00346375]
[111.55001068 222.37318420]
[98.35761261 229.51185608]
[83.74816132 232.91242981]
[68.75934601 232.33337402]
[54.45579147 227.81581116]
[41.85346603 219.68060303]
[31.84749222 208.50561523]
[25.14857864 195.08456421]
[22.23254204 180.37074280]
[23.30649948 165.40924072]
[28.29417419 151.26274109]
[36.84129715 138.93608093]
[48.34077835 129.30477905]
[61.97582626 123.05294037]
[76.77796173 120.62462616]
[91.69581604 122.19231415]
[105.66757965 127.64342499]
[98.85772705 114.27832794]
[87.23727417 106.50293732]
[87.77717590 92.53153229]
[80.96732330 79.16643524]
[70.12926483 76.29584503]
[62.92337799 67.99948883]
[61.65129852 57.30901337]
[66.50418854 47.94934082]
[60.76393509 34.09114838]
[54.75270462 20.34832954]
[48.47280884 6.72618103]
[34.77558899 -2.29148221]
[36.00648880 -18.64436913]
[50.89926529 -25.51003265]
[64.13349915 -15.82566547]
[62.09495544 0.44628498]
[68.37485504 14.06843281]
[74.18883514 18.95267487]
[74.62213135 28.35089684]
[80.36238098 42.20909119]
[96.54031372 52.50186920]
[94.33242035 72.35657501]
[101.14227295 85.72167206]
[112.76272583 93.49706268]
[112.22282410 107.46846771]
[119.03267670 120.83356476]
[124.21044159 123.59280396]
[127.41197205 127.99015808]
[141.67781067 132.62541199]
[155.94366455 137.26066589]
[170.20951843 141.89591980]
[184.47535706 146.53117371]
[198.82946777 150.88545227]
[213.26629639 154.95704651]
[227.70312500 159.02865601]
[242.13995361 163.10026550]
[256.57678223 167.17187500]
[267.52224731 156.39726257]
[282.39263916 152.55442810]
[297.18786621 156.67710876]
[307.92813110 167.65628052]
[311.72430420 182.53863525]
[307.55529785 197.32089233]
[296.54251099 208.02667236]
[281.64831543 211.77619934]
[266.87921143 207.56086731]
[256.20800781 196.51455688]
[252.50517273 181.60870361]
[238.06834412 177.53709412]
[223.63151550 173.46548462]
[209.19468689 169.39387512]
[194.75785828 165.32228088]
[187.26797485 166.57119751]
[179.84010315 160.79702759]
[165.57426453 156.16177368]
[151.30841064 151.52651978]
[137.04255676 146.89126587]
[122.77671814 142.25601196]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[21 47]
[22 46]
[24 44]
[25 43]
[29 41]
[30 40]
[31 38]
[32 37]
[49 79]
[50 78]
[51 77]
[52 76]
[53 75]
[54 73]
[55 72]
[56 71]
[57 70]
[58 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
