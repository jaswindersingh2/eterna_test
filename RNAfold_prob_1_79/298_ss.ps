%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGUUAAAUAAUGAAAAUUAAUAUUGAUAAAAUAUGAGAAAUGAUAGUAUUGAUAAAUAACAGUUUUUAUUCG\
) } def
/len { sequence length } bind def

/coor [
[47.48080063 291.46548462]
[40.09780502 304.66952515]
[28.99450874 314.94433594]
[15.25870228 321.28332520]
[0.23607907 323.06546021]
[-14.60159683 320.11611938]
[-27.80068207 312.72427368]
[-38.06806564 301.61410522]
[-44.39785004 287.87405396]
[-46.16991043 272.85025024]
[-43.21063995 258.01455688]
[-35.80995178 244.82041931]
[-24.69289780 234.56048584]
[-10.94860840 228.23989868]
[4.07638931 226.47790527]
[18.91009903 229.44712830]
[26.23941803 216.35968018]
[33.56873703 203.27224731]
[40.89805603 190.18479919]
[48.22737503 177.09736633]
[55.55669403 164.00991821]
[62.88601303 150.92248535]
[70.21533203 137.83503723]
[77.54464722 124.74760437]
[84.87397003 111.66016388]
[81.04204559 97.68652344]
[88.12193298 85.04447174]
[102.03858948 81.01052094]
[109.36791229 67.92308044]
[116.69722748 54.83563995]
[124.02655029 41.74819946]
[116.20028687 29.98119926]
[114.27476501 16.04834557]
[118.57527161 2.72671223]
[128.19190979 -7.35384512]
[141.17143250 -12.22983074]
[154.91378784 -10.98640537]
[162.75126648 -23.77600861]
[170.58874512 -36.56560898]
[178.42622375 -49.35521317]
[186.26370239 -62.14481354]
[178.37014771 -75.25779724]
[177.48623657 -90.53776550]
[183.81509399 -104.47348022]
[195.90237427 -113.86263275]
[210.97053528 -116.54764557]
[225.55700684 -111.91153717]
[236.30992126 -101.01964569]
[240.75834656 -86.37485504]
[237.88008118 -71.34241486]
[228.33650208 -59.37668610]
[214.32066345 -53.22729874]
[199.05331421 -54.30733490]
[191.21583557 -41.51773453]
[183.37835693 -28.72813225]
[175.54087830 -15.93852901]
[167.70339966 -3.14892673]
[175.73522949 10.72989273]
[175.74838257 26.85818672]
[167.64637756 40.91118240]
[153.52117920 49.07409668]
[137.11398315 49.07751846]
[129.78466797 62.16495895]
[122.45535278 75.25239563]
[115.12602997 88.33983612]
[118.95795441 102.31347656]
[111.87806702 114.95552826]
[97.96141052 118.98947906]
[90.63208771 132.07691956]
[83.30277252 145.16436768]
[75.97344971 158.25180054]
[68.64413452 171.33924866]
[61.31481552 184.42668152]
[53.98549652 197.51411438]
[46.65617752 210.60156250]
[39.32685852 223.68899536]
[31.99753952 236.77644348]
[42.27980042 247.87284851]
[48.62799454 261.60440063]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 77]
[17 76]
[18 75]
[19 74]
[20 73]
[21 72]
[22 71]
[23 70]
[24 69]
[25 68]
[28 65]
[29 64]
[30 63]
[31 62]
[37 57]
[38 56]
[39 55]
[40 54]
[41 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
