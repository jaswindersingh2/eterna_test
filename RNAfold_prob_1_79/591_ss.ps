%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACGGAGCUCUCUCUCUGCACACGUGGAAAAAAAAAAAACACGUGUGCAGAGAGAGAGCUCCACGCCACACUUCG\
) } def
/len { sequence length } bind def

/coor [
[105.81648254 142.17179871]
[101.18122864 127.90595245]
[89.02635956 125.68494415]
[79.01904297 118.43737030]
[73.11772156 107.58158875]
[72.47728729 95.24207306]
[77.22308350 83.83369446]
[86.42633820 75.58907318]
[82.92465973 61.00352859]
[79.42298126 46.41798019]
[75.92130280 31.83242989]
[72.41961670 17.24688148]
[68.91793823 2.66133261]
[65.41625977 -11.92421627]
[61.91457748 -26.50976562]
[58.41289902 -41.09531403]
[54.91121674 -55.68086243]
[51.40953827 -70.26641083]
[47.90785599 -84.85195923]
[44.40617752 -99.43750763]
[40.90449524 -114.02305603]
[37.40281677 -128.60861206]
[33.90113449 -143.19415283]
[30.39945412 -157.77970886]
[26.89777374 -172.36524963]
[23.39609337 -186.95080566]
[19.89441299 -201.53634644]
[16.39273262 -216.12190247]
[12.89105225 -230.70744324]
[9.38937187 -245.29299927]
[-5.59216785 -248.02674866]
[-18.16290665 -256.62304688]
[-26.14488983 -269.59252930]
[-28.15518761 -284.68820190]
[-23.84550667 -299.29458618]
[-13.96252441 -310.88104248]
[-0.21852629 -317.44021606]
[15.00525570 -317.83560181]
[29.07121086 -311.99874878]
[39.54232407 -300.94091797]
[44.60441589 -286.57794189]
[43.38044739 -271.39828491]
[36.08247375 -258.03195190]
[23.97492027 -248.79467773]
[27.47660065 -234.20912170]
[30.97828102 -219.62358093]
[34.47996140 -205.03802490]
[37.98164368 -190.45248413]
[41.48332214 -175.86692810]
[44.98500443 -161.28138733]
[48.48668289 -146.69583130]
[51.98836517 -132.11029053]
[55.49004364 -117.52474213]
[58.99172592 -102.93918610]
[62.49340439 -88.35363770]
[65.99508667 -73.76808929]
[69.49676514 -59.18254471]
[72.99844360 -44.59699249]
[76.50012970 -30.01144600]
[80.00180817 -15.42589664]
[83.50348663 -0.84034789]
[87.00516510 13.74520111]
[90.50685120 28.33074951]
[94.00852966 42.91629791]
[97.51020813 57.50184631]
[101.01189423 72.08739471]
[117.25858307 78.03915405]
[126.88227844 92.41841125]
[126.18987274 109.70711517]
[115.44707489 123.27069855]
[120.08232880 137.53654480]
[135.02867126 141.35893250]
[145.51904297 152.67066956]
[148.20602417 167.86222839]
[142.23219299 182.08604431]
[129.50379944 190.80334473]
[114.08240509 191.23246765]
[100.88893127 183.23649597]
[94.13336182 169.36688232]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[8 66]
[9 65]
[10 64]
[11 63]
[12 62]
[13 61]
[14 60]
[15 59]
[16 58]
[17 57]
[18 56]
[19 55]
[20 54]
[21 53]
[22 52]
[23 51]
[24 50]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
