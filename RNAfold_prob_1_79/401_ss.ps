%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGAGAUCAUGAUAUCAAAACCUAUGAUACUGGGAAACCAGUAUCAUAGGGAUAUCAUGAUCUCGAGUACCUUCG\
) } def
/len { sequence length } bind def

/coor [
[99.62460327 145.57322693]
[97.27808380 130.75790405]
[82.29596710 125.29871368]
[72.03513336 113.09289551]
[69.23192596 97.39547729]
[74.63391113 82.39263153]
[86.80048370 72.08529663]
[83.87413025 57.37351990]
[80.94777679 42.66173935]
[78.02142334 27.94996071]
[75.09506989 13.23818016]
[72.16870880 -1.47359860]
[69.24235535 -16.18537712]
[66.31600189 -30.89715767]
[63.38964844 -45.60893631]
[60.46329498 -60.32071686]
[57.53693771 -75.03249359]
[54.61058426 -89.74427032]
[51.68422699 -104.45605469]
[48.75787354 -119.16783142]
[45.30261230 -122.75062561]
[43.53739548 -126.87136078]
[43.40605164 -130.86553955]
[44.61960983 -134.17091370]
[46.71815491 -136.40132141]
[46.12926102 -151.38975525]
[45.54036331 -166.37818909]
[44.95146561 -181.36662292]
[44.36256790 -196.35505676]
[43.77367020 -211.34349060]
[43.18477249 -226.33192444]
[42.59587479 -241.32035828]
[42.00697708 -256.30880737]
[41.41808319 -271.29724121]
[40.82918549 -286.28567505]
[40.24028778 -301.27410889]
[39.65139008 -316.26254272]
[30.44772148 -329.83547974]
[37.84290314 -344.47253418]
[54.22940826 -345.11636353]
[62.75020218 -331.10464478]
[54.63982391 -316.85144043]
[55.22872162 -301.86300659]
[55.81761932 -286.87457275]
[56.40651703 -271.88613892]
[56.99541473 -256.89770508]
[57.58431244 -241.90925598]
[58.17321014 -226.92082214]
[58.76210785 -211.93238831]
[59.35100174 -196.94395447]
[59.93989944 -181.95552063]
[60.52879715 -166.96708679]
[61.11769485 -151.97865295]
[61.70659256 -136.99021912]
[63.46965408 -122.09418488]
[66.39601135 -107.38240814]
[69.32236481 -92.67063141]
[72.24871826 -77.95884705]
[75.17507172 -63.24707031]
[78.10142517 -48.53528976]
[81.02777863 -33.82351303]
[83.95413971 -19.11173248]
[86.88049316 -4.39995337]
[89.80684662 10.31182575]
[92.73320007 25.02360535]
[95.65955353 39.73538589]
[98.58591461 54.44716263]
[101.51226807 69.15894318]
[114.73208618 72.86287689]
[125.03961945 81.93137360]
[130.39723206 94.57173920]
[129.74581909 108.28518677]
[123.21414185 120.36078644]
[112.09341431 128.41139221]
[114.43992615 143.22671509]
[126.52163696 153.78189087]
[125.65817261 169.80169678]
[112.51190948 178.99710083]
[97.16754150 174.31417847]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[7 68]
[8 67]
[9 66]
[10 65]
[11 64]
[12 63]
[13 62]
[14 61]
[15 60]
[16 59]
[17 58]
[18 57]
[19 56]
[20 55]
[25 54]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
