%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGCCCAAAAAACAAUCACCAUCACCUCCUCUCACACCCAAUCAAAACCACAUCAAACACGGCCAAUAGUGUUCG\
) } def
/len { sequence length } bind def

/coor [
[61.82906723 200.71347046]
[55.54917145 214.33561707]
[61.25375748 229.07444763]
[54.78925323 243.49615479]
[39.99092865 249.04460144]
[25.63837242 242.42797852]
[20.24669838 227.57182312]
[27.01469231 213.29002380]
[41.92702484 208.05570984]
[48.20692062 194.43356323]
[39.37833786 189.02378845]
[31.11001968 182.79125977]
[23.47838593 175.79356384]
[16.55396843 168.09538269]
[10.40075970 159.76786804]
[5.07562923 150.88796997]
[0.62779284 141.53776550]
[-2.90164328 131.80368042]
[-5.48006010 121.77565002]
[-7.08362722 111.54637146]
[-7.69752502 101.21038055]
[-7.31607962 90.86320496]
[-5.94281626 80.60047150]
[-3.59042692 70.51702881]
[-0.28065223 60.70607376]
[3.95591879 51.25827026]
[9.08013153 42.26093674]
[15.04462814 33.79722977]
[21.79428482 25.94537163]
[29.26671982 18.77792740]
[37.39287186 12.36114120]
[46.09764481 6.75431395]
[55.30058289 2.00926614]
[64.91663361 -1.83014905]
[74.85692596 -4.72844744]
[85.02958679 -6.65884256]
[95.34061432 -7.60349464]
[105.69469452 -7.55367231]
[115.99614716 -6.50983620]
[126.14976501 -4.48163319]
[136.06170654 -1.48780882]
[145.64036560 2.44396853]
[154.79721069 7.27736139]
[163.44761658 12.96769905]
[171.51164246 19.46239090]
[178.91476440 26.70141411]
[185.58854675 34.61786270]
[191.47131348 43.13857651]
[196.50869751 52.18480682]
[200.65415955 61.67294312]
[203.86935425 71.51529694]
[206.12460327 81.62091064]
[207.39903259 91.89638519]
[207.68089294 102.24674988]
[206.96754456 112.57635498]
[205.26562500 122.78972626]
[202.59082031 132.79248047]
[198.96786499 142.49215698]
[194.43025208 151.79911804]
[189.01991272 160.62736511]
[200.79966736 169.91377258]
[212.57942200 179.20018005]
[224.35917664 188.48658752]
[236.13893127 197.77299500]
[251.03630066 193.43157959]
[265.62893677 198.70744324]
[274.30566406 211.57188416]
[273.73010254 227.07827759]
[264.12359619 239.26409912]
[249.17999268 243.44364929]
[234.64544678 238.00981140]
[226.10877991 225.05198669]
[226.85252380 209.55274963]
[215.07276917 200.26634216]
[203.29301453 190.97993469]
[191.51325989 181.69352722]
[179.73350525 172.40711975]
[154.87203979 192.67837524]
[125.14307404 204.72845459]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[60 77]
[61 76]
[62 75]
[63 74]
[64 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
