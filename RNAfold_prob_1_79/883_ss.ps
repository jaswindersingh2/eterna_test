%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGAACUAGAGGAGGAACCAAAAGGACCAAAAGGAAACCAUCCAAACUAGAACCAAAAGGAACUGAGGGCUUUCG\
) } def
/len { sequence length } bind def

/coor [
[104.44255066 272.21337891]
[93.77608490 260.55139160]
[94.56348419 244.76673889]
[106.33760071 234.22416687]
[106.92649841 219.23573303]
[107.51539612 204.24729919]
[108.10429382 189.25886536]
[97.83672333 178.52980042]
[98.22043610 163.32101440]
[109.54367828 152.62419128]
[110.13256836 137.63575745]
[99.08817291 138.32772827]
[88.47868347 135.89770508]
[79.15353394 130.64576721]
[71.82920837 123.09349060]
[67.03442383 113.93378448]
[65.07260132 103.96806335]
[66.00431824 94.03646851]
[52.14612961 88.29621887]
[39.77705002 92.52404022]
[28.25803566 87.25420380]
[23.67277718 75.88088989]
[10.05062962 69.60099792]
[-6.22132015 71.63954163]
[-15.90568733 58.40530396]
[-9.04002476 43.51252747]
[7.31286287 42.28162766]
[16.33052635 55.97884750]
[29.95267296 62.25874329]
[47.18376541 59.60713196]
[57.88637924 74.43802643]
[71.74457550 80.17827606]
[75.73543549 75.45410919]
[80.50530243 71.51795959]
[85.90102386 68.49620819]
[91.74938202 66.48586273]
[97.86262512 65.55146790]
[100.20913696 50.73614120]
[102.55565643 35.92081451]
[94.32699585 22.14878845]
[100.09859467 7.17987823]
[115.44296265 2.49695253]
[128.58923340 11.69235134]
[129.45269775 27.71215057]
[117.37097931 38.26733398]
[115.02446747 53.08265686]
[112.67794800 67.89797974]
[122.35620880 72.54357910]
[130.35916138 80.10138702]
[135.81460571 89.97418976]
[138.06126404 101.30566406]
[136.72474670 113.05420685]
[151.71318054 113.64310455]
[166.70161438 114.23199463]
[178.25387573 103.78292847]
[193.44589233 104.59367371]
[203.33628845 115.67137909]
[218.32472229 116.26027679]
[232.57792664 108.14989471]
[246.58964539 116.67069244]
[245.94581604 133.05720520]
[231.30876160 140.45237732]
[217.73582458 131.24871826]
[202.74739075 130.65982056]
[192.01834106 140.92738342]
[176.80953979 140.54367065]
[166.11271667 129.22042847]
[151.12428284 128.63153076]
[136.13584900 128.04263306]
[125.12100983 138.22465515]
[124.53211212 153.21308899]
[134.98118591 164.76535034]
[134.17044067 179.95736694]
[123.09272766 189.84776306]
[122.50382996 204.83619690]
[121.91493225 219.82463074]
[121.32603455 234.81306458]
[132.23669434 246.24691772]
[131.78321838 262.04470825]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 77]
[5 76]
[6 75]
[7 74]
[10 71]
[11 70]
[18 32]
[19 31]
[22 29]
[23 28]
[37 47]
[38 46]
[39 45]
[52 69]
[53 68]
[54 67]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
