%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:49 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (221)
} def

/sequence { (\
GGAAAAGCGAAGUACAGAUCCAGGAAACUGAGAUCAAAAGCUGAGACGAAAGUCCAGCAGUACAACGCGGUGUACUUCG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 8 0.111383847 ubox
1 73 0.008260334 ubox
1 75 0.024012137 ubox
1 76 0.012458304 ubox
1 78 0.023607448 ubox
2 8 0.038800565 ubox
2 71 0.004169941 ubox
2 73 0.012059140 ubox
2 75 0.014339513 ubox
2 77 0.023237994 ubox
2 78 0.021770410 ubox
3 71 0.008226184 ubox
3 73 0.012367138 ubox
3 76 0.021978637 ubox
3 77 0.021556666 ubox
4 71 0.027678799 ubox
4 73 0.010304859 ubox
4 76 0.017894018 ubox
5 71 0.010820081 ubox
6 71 0.006372674 ubox
6 73 0.003685935 ubox
7 13 0.004079574 ubox
7 68 0.078486313 ubox
7 78 0.004149699 ubox
8 12 0.004151894 ubox
8 67 0.078590064 ubox
8 69 0.005524716 ubox
8 79 0.915556770 ubox
9 66 0.078341185 ubox
9 68 0.005583498 ubox
9 78 0.996343813 ubox
10 77 0.996199868 ubox
11 76 0.995897221 ubox
12 63 0.078726867 ubox
12 75 0.996367413 ubox
13 62 0.078824027 ubox
13 72 0.003515358 ubox
13 74 0.996070443 ubox
14 61 0.078823714 ubox
14 71 0.007335045 ubox
14 73 0.995854098 ubox
15 60 0.078734583 ubox
15 69 0.003488011 ubox
15 70 0.008772579 ubox
15 72 0.995476026 ubox
16 71 0.874171239 ubox
17 35 0.998407825 ubox
17 68 0.006751650 ubox
18 34 0.999411082 ubox
19 32 0.004908149 ubox
19 33 0.999563092 ubox
19 70 0.004415951 ubox
20 32 0.999672061 ubox
20 67 0.004492068 ubox
20 69 0.004720042 ubox
21 30 0.999305394 ubox
22 29 0.999218814 ubox
23 28 0.998564554 ubox
23 29 0.026836683 ubox
24 28 0.027234693 ubox
36 61 0.021472233 ubox
37 61 0.117334488 ubox
38 61 0.032054779 ubox
39 61 0.025222956 ubox
40 53 0.006006758 ubox
40 58 0.997670620 ubox
40 61 0.041162028 ubox
41 52 0.006248206 ubox
41 57 0.998854458 ubox
41 60 0.042128853 ubox
42 51 0.006238252 ubox
42 56 0.998764049 ubox
42 59 0.042101905 ubox
43 54 0.004912843 ubox
43 55 0.998736268 ubox
43 58 0.042031399 ubox
44 53 0.006806992 ubox
45 53 0.005105976 ubox
45 54 0.999707895 ubox
46 53 0.999675042 ubox
47 52 0.999275929 ubox
54 70 0.006041841 ubox
55 69 0.006540147 ubox
55 70 0.003542083 ubox
57 68 0.021011936 ubox
58 67 0.022314835 ubox
58 69 0.009495309 ubox
58 70 0.011985148 ubox
59 71 0.019579383 ubox
59 76 0.026081733 ubox
60 66 0.268812687 ubox
60 68 0.472172324 ubox
60 71 0.007890870 ubox
60 73 0.004479342 ubox
60 75 0.031234226 ubox
61 65 0.242597525 ubox
61 67 0.463707987 ubox
61 69 0.024956111 ubox
61 70 0.033439050 ubox
61 72 0.023086395 ubox
61 74 0.032504566 ubox
62 71 0.205605954 ubox
62 73 0.034682843 ubox
63 67 0.016221150 ubox
63 69 0.192579672 ubox
63 70 0.254520802 ubox
63 72 0.036045601 ubox
64 71 0.035474734 ubox
65 71 0.084640697 ubox
65 73 0.006094864 ubox
66 70 0.097047314 ubox
66 72 0.007378237 ubox
67 71 0.009003229 ubox
69 75 0.014422001 ubox
69 76 0.008866109 ubox
69 78 0.019328434 ubox
70 75 0.009534586 ubox
70 77 0.017966819 ubox
70 78 0.005810615 ubox
71 79 0.004850320 ubox
72 78 0.008652157 ubox
8 79 0.9500000 lbox
9 78 0.9500000 lbox
10 77 0.9500000 lbox
11 76 0.9500000 lbox
12 75 0.9500000 lbox
13 74 0.9500000 lbox
14 73 0.9500000 lbox
15 72 0.9500000 lbox
16 71 0.9500000 lbox
17 35 0.9500000 lbox
18 34 0.9500000 lbox
19 33 0.9500000 lbox
20 32 0.9500000 lbox
21 30 0.9500000 lbox
22 29 0.9500000 lbox
23 28 0.9500000 lbox
40 58 0.9500000 lbox
41 57 0.9500000 lbox
42 56 0.9500000 lbox
43 55 0.9500000 lbox
45 54 0.9500000 lbox
46 53 0.9500000 lbox
47 52 0.9500000 lbox
showpage
end
%%EOF
