%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGAAGCACGGGAACAAGCGAAAGCACCGAAAGGAACGUAUCCAAAGUGCAAGUGAAAACAACCCGAUAUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[86.72435760 314.07101440]
[72.64675903 320.59796143]
[57.42784119 317.57070923]
[46.91958618 306.15335083]
[45.16263199 290.73605347]
[52.83256531 277.24710083]
[66.98014069 270.87329102]
[69.90649414 256.16149902]
[72.83284760 241.44972229]
[75.75920105 226.73794556]
[64.67001343 212.42364502]
[67.34465027 194.19969177]
[82.58696747 183.31251526]
[84.35002899 168.41648865]
[86.11309052 153.52046204]
[87.87614441 138.62443542]
[74.10357666 131.11607361]
[64.21916962 118.93585968]
[59.70699310 103.91256714]
[61.24451828 88.30183411]
[68.60089111 74.44749451]
[80.67161560 64.42967224]
[95.64435577 59.75247955]
[96.82124329 44.79871750]
[85.19318390 34.69453812]
[81.78427887 19.85429764]
[87.69755554 6.01604748]
[100.47255707 -1.59560859]
[101.64944458 -16.54936790]
[102.82633209 -31.50312805]
[104.00321198 -46.45689011]
[93.27479553 -53.44385910]
[86.66665649 -64.32411957]
[85.42732239 -76.91989136]
[89.73806000 -88.74188232]
[98.68952179 -97.48123932]
[110.47276306 -101.46044922]
[112.81928253 -116.27577209]
[115.16579437 -131.09109497]
[106.93714142 -144.86312866]
[112.70873260 -159.83203125]
[128.05310059 -164.51496887]
[141.19937134 -155.31956482]
[142.06283569 -139.29975891]
[129.98112488 -128.74458313]
[127.63460541 -113.92926025]
[125.28808594 -99.11392975]
[138.26887512 -87.46054077]
[141.88391113 -70.23781586]
[134.55741882 -54.06841660]
[118.95697784 -45.28000259]
[117.78009033 -30.32624245]
[116.60320282 -15.37248230]
[115.42631531 -0.41872218]
[126.85330963 9.09767246]
[130.52900696 23.69059181]
[124.84054565 37.81485367]
[111.77500153 45.97560501]
[110.59811401 60.92936325]
[123.38661194 66.95607758]
[133.32295227 77.01271820]
[139.19534302 89.87281036]
[140.28758240 103.96797943]
[136.46649170 117.57923126]
[128.19807434 129.04656982]
[116.49069977 136.97149658]
[102.77217102 140.38749695]
[101.00911713 155.28352356]
[99.24605560 170.17955017]
[97.48299408 185.07557678]
[106.73817444 193.03129578]
[110.84110260 204.39637756]
[108.84268951 216.18966675]
[101.37789154 225.37980652]
[90.47098541 229.66429138]
[87.54463196 244.37608337]
[84.61827087 259.08786011]
[81.69191742 273.79962158]
[92.32341003 285.10232544]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 78]
[8 77]
[9 76]
[10 75]
[13 70]
[14 69]
[15 68]
[16 67]
[23 59]
[24 58]
[28 54]
[29 53]
[30 52]
[31 51]
[37 47]
[38 46]
[39 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
