%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGCAGGGCAGGGCCCGGGAAACGCGGAAACGACGGCCGGGAGCGCGGGCCCGGGCAACAAGCGGCCGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[83.19628143 280.77655029]
[67.89762115 282.76513672]
[53.96224213 276.14633179]
[45.83687210 263.03213501]
[46.11428452 247.60726929]
[54.70596313 234.79373169]
[68.87033081 228.68029785]
[71.21685028 213.86497498]
[73.56336975 199.04963684]
[75.90988159 184.23431396]
[73.78926849 176.94314575]
[78.65037537 168.88807678]
[81.57672882 154.17630005]
[76.47106934 140.18411255]
[86.75197601 128.15856934]
[72.78948975 115.09979248]
[69.09632874 96.34230804]
[77.06629944 78.96524811]
[93.69151306 69.52675629]
[94.28041077 54.53832245]
[94.86930847 39.54988480]
[95.45819855 24.56145096]
[96.04709625 9.57301521]
[96.63599396 -5.41542006]
[97.22489166 -20.40385628]
[86.90431213 -29.30343056]
[83.72476959 -42.35324478]
[88.64910889 -54.63841248]
[99.63138580 -61.66752243]
[100.80827332 -76.62128448]
[101.98516083 -91.57504272]
[103.16204834 -106.52880096]
[90.61520386 -115.27660370]
[84.17410278 -129.03919983]
[85.47789001 -144.07803345]
[94.07665253 -156.36286926]
[107.57902527 -162.65187073]
[108.75591278 -177.60562134]
[99.47208405 -190.68959045]
[104.05143738 -206.06518555]
[118.98108673 -211.93757629]
[132.80828857 -203.80197144]
[134.92599487 -187.89930725]
[123.70967102 -176.42874146]
[122.53279114 -161.47497559]
[134.88511658 -153.15116882]
[141.45623779 -139.67243958]
[140.39137268 -124.61479950]
[131.87663269 -112.02925873]
[118.11580658 -105.35191345]
[116.93891907 -90.39815521]
[115.76203156 -75.44439697]
[114.58514404 -60.49063492]
[126.01862335 -48.32335281]
[125.22743988 -31.31124496]
[112.21332550 -19.81495857]
[111.62443542 -4.82652283]
[111.03553772 10.16191292]
[110.44664001 25.15034866]
[109.85774231 40.13878250]
[109.26884460 55.12722015]
[108.67994690 70.11565399]
[118.43817902 74.93111420]
[125.94190979 82.81184387]
[130.27362061 92.79422760]
[130.90367126 103.65769196]
[127.75500488 114.07391357]
[121.21263885 122.76927185]
[112.07651520 128.68054199]
[101.46375275 131.08493042]
[106.36010742 146.12940979]
[96.28850555 157.10266113]
[93.36215210 171.81443787]
[90.72521210 186.58084106]
[88.37869263 201.39616394]
[86.03217316 216.21148682]
[83.68566132 231.02680969]
[95.26761627 241.21807861]
[99.47918701 256.05944824]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 77]
[8 76]
[9 75]
[10 74]
[12 73]
[13 72]
[15 70]
[19 62]
[20 61]
[21 60]
[22 59]
[23 58]
[24 57]
[25 56]
[29 53]
[30 52]
[31 51]
[32 50]
[37 45]
[38 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
