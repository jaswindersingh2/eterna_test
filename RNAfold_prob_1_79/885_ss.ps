%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGAAGUAGACUUACAACCAAAAGGAGCAAAAGCAAAGUAAAGAAACUACAAGGAAAACCAACCUGUGGGUUUCG\
) } def
/len { sequence length } bind def

/coor [
[125.30908203 159.38772583]
[107.58772278 164.10833740]
[89.25399780 163.65513611]
[71.78752136 158.06468201]
[56.59790802 147.78817749]
[44.91102600 133.65496826]
[31.28887939 139.93487549]
[25.73951912 154.48966980]
[11.83526516 160.66433716]
[-2.00631809 155.28416443]
[-15.62846565 161.56405640]
[-29.25061417 167.84396362]
[-38.26827621 181.54118347]
[-54.62116241 180.31027222]
[-61.48682785 165.41749573]
[-51.80245972 152.18325806]
[-35.53050995 154.22181702]
[-21.90836143 147.94190979]
[-8.28621387 141.66201782]
[-3.38793325 127.64266205]
[10.33740234 121.07990265]
[25.00898361 126.31272125]
[38.63113022 120.03282928]
[36.15266800 109.53782654]
[35.45578384 98.77668762]
[36.55993271 88.04968262]
[39.43430328 77.65613556]
[43.99868393 67.88607025]
[50.12571716 59.01210022]
[57.64442825 51.28185272]
[66.34502411 44.91102600]
[60.06512833 31.28887939]
[46.36791229 22.27121735]
[47.59881210 5.91832972]
[62.49158478 -0.94733322]
[75.72582245 8.73703384]
[73.68727875 25.00898361]
[79.96717072 38.63113022]
[93.74422455 35.74801636]
[107.81866455 35.91942215]
[121.52141571 39.13719559]
[134.20104980 45.24837112]
[145.25476074 53.96242142]
[154.15708923 64.86508179]
[160.48480225 77.43804932]
[163.93707275 91.08360291]
[164.34980774 105.15303802]
[179.06158447 108.07939148]
[193.77337646 111.00575256]
[208.48515320 113.93210602]
[223.19692993 116.85845947]
[237.90870667 119.78481293]
[249.30958557 109.42497253]
[264.44763184 107.78398132]
[277.49493408 115.28278351]
[283.55227661 128.86389160]
[298.26406860 131.79023743]
[312.97583008 134.71659851]
[324.27853394 124.08510590]
[339.67587280 122.16100311]
[353.24722290 129.68415833]
[359.77413940 143.76174927]
[356.74691772 158.98066711]
[345.32955933 169.48893738]
[329.91226196 171.24588013]
[316.42330933 163.57594299]
[310.04949951 149.42837524]
[295.33770752 146.50201416]
[280.62591553 143.57566833]
[269.83239746 153.80491638]
[254.90859985 155.73992920]
[241.55084229 148.43075562]
[234.98236084 134.49659729]
[220.27056885 131.57023621]
[205.55879211 128.64389038]
[190.84701538 125.71752930]
[176.13523865 122.79117584]
[161.42346191 119.86482239]
[153.35882568 136.33576965]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 23]
[7 22]
[10 19]
[11 18]
[12 17]
[31 38]
[32 37]
[47 78]
[48 77]
[49 76]
[50 75]
[51 74]
[52 73]
[56 69]
[57 68]
[58 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
