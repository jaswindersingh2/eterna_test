%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAACAUUCGAUUGGAAACAAUCGCUGGCGAUGGAAACAUCAGAUGGAAACAUCGCUGGCGAAUGAUACCUAUUCG\
) } def
/len { sequence length } bind def

/coor [
[73.58169556 230.93066406]
[70.46985626 245.87318420]
[61.17605209 257.98052979]
[47.54557419 264.84878540]
[32.28476715 265.11425781]
[18.42367172 258.72418213]
[8.71441841 246.94738770]
[5.08478928 232.12211609]
[8.25544834 217.19195557]
[17.59685898 205.12129211]
[31.25427818 198.30677795]
[46.51601410 198.10142517]
[52.79590988 184.47927856]
[59.07580566 170.85713196]
[57.37762451 156.05964661]
[70.18177795 146.76641846]
[76.46167755 133.14427185]
[82.74156952 119.52211761]
[74.55560303 105.61686707]
[76.12690735 89.55769348]
[86.85292053 77.50287628]
[102.62049866 74.07511902]
[108.36074829 60.21692657]
[106.49351501 44.50629044]
[118.51235962 35.70876312]
[124.25260925 21.85057068]
[129.99285889 7.99237680]
[135.73310852 -5.86581612]
[141.47337341 -19.72400856]
[147.21362305 -33.58220291]
[152.95387268 -47.44039536]
[158.69412231 -61.29858780]
[164.43437195 -75.15678406]
[170.17462158 -89.01497650]
[175.91487122 -102.87316895]
[181.65512085 -116.73136139]
[172.42558289 -128.92819214]
[170.55261230 -144.00761414]
[176.43984985 -157.90750122]
[188.41397095 -166.93391418]
[203.19891357 -168.74264526]
[208.93916321 -182.60083008]
[214.67941284 -196.45903015]
[215.15469360 -213.40631104]
[231.57124329 -217.64108276]
[240.18505859 -203.03839111]
[228.53759766 -190.71878052]
[222.79734802 -176.86058044]
[217.05709839 -163.00239563]
[226.23265076 -151.26890564]
[228.31701660 -136.41928101]
[222.65119934 -122.42767334]
[210.66406250 -113.08930206]
[195.51332092 -110.99111176]
[189.77307129 -97.13291168]
[184.03282166 -83.27471924]
[178.29257202 -69.41652679]
[172.55230713 -55.55833817]
[166.81205750 -41.70014191]
[161.07180786 -27.84195137]
[155.33155823 -13.98375797]
[149.59130859 -0.12556455]
[143.85105896 13.73262882]
[138.11080933 27.59082222]
[132.37055969 41.44901276]
[134.64837646 56.16841888]
[122.21894073 65.95717621]
[116.47869110 79.81536865]
[124.32415009 90.65644073]
[125.75402069 103.96191406]
[120.39116669 116.22241211]
[109.65006256 124.20418549]
[96.36371613 125.80201721]
[90.08382416 139.42416382]
[83.80392456 153.04631042]
[85.05292511 168.81813049]
[72.69795227 177.13702393]
[66.41806030 190.75917053]
[60.13816071 204.38131714]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 79]
[13 78]
[14 77]
[16 75]
[17 74]
[18 73]
[22 68]
[23 67]
[25 65]
[26 64]
[27 63]
[28 62]
[29 61]
[30 60]
[31 59]
[32 58]
[33 57]
[34 56]
[35 55]
[36 54]
[41 49]
[42 48]
[43 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
