%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGCAGGAAAAACGCAAAAGUCCAUAGAAAUAAUGAAGACACCCGAGAGAGGAAGCAAAAACAUAUUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[163.47288513 84.57772064]
[149.40000916 89.76947784]
[135.32714844 94.96123505]
[134.55554199 108.90568542]
[128.49113464 121.48606873]
[118.06282806 130.77548218]
[104.86787415 135.35110474]
[90.92732239 134.51206970]
[78.37640381 128.38690186]
[69.13752747 117.91379547]
[54.87167740 122.54904938]
[47.44381332 128.32322693]
[39.95392227 127.07429504]
[32.45125961 140.98420715]
[17.28654480 145.43470764]
[3.45673585 137.78540039]
[-0.83318758 122.57447815]
[6.96191072 108.82631683]
[22.21733665 104.69745636]
[35.88231659 112.63746643]
[50.23642349 108.28320312]
[64.50227356 103.64794159]
[66.40673065 87.96302032]
[74.89701080 74.63789368]
[88.30862427 66.28489685]
[104.01227570 64.54160309]
[118.92933655 69.74977112]
[130.13539124 80.88836670]
[144.20825195 75.69660950]
[158.28112793 70.50485229]
[144.37466431 64.88253784]
[132.10276794 56.25698090]
[122.10305786 45.07637787]
[114.89515686 31.92167664]
[110.85358429 17.47640991]
[110.18834686 2.49116921]
[112.93400574 -12.25540161]
[118.94789886 -25.99705505]
[127.91754150 -38.01976395]
[139.37686157 -47.69881821]
[152.73040771 -54.53128433]
[167.28434753 -58.16213989]
[182.28240967 -58.40272522]
[196.94531250 -55.24053574]
[210.51113892 -48.83988571]
[222.27499390 -39.53335571]
[231.62564087 -27.80452156]
[238.07719421 -14.26282597]
[241.29441833 0.38809356]
[241.11015320 15.38696194]
[237.53398132 29.95442390]
[230.75169373 43.33354187]
[221.11575317 54.82912064]
[209.12680054 63.84384537]
[195.40783691 69.90930176]
[180.67279053 72.71023560]
[193.46238708 80.54771423]
[206.25198364 88.38519287]
[219.04159546 96.22267151]
[231.83119202 104.06015015]
[244.62080383 111.89762878]
[257.73379517 104.00407410]
[273.01373291 103.12016296]
[286.94946289 109.44901276]
[296.33862305 121.53630066]
[299.02362061 136.60446167]
[294.38751221 151.19091797]
[283.49563599 161.94384766]
[268.85083008 166.39227295]
[253.81840515 163.51399231]
[241.85267639 153.97041321]
[235.70327759 139.95458984]
[236.78332520 124.68723297]
[223.99371338 116.84975433]
[211.20411682 109.01227570]
[198.41450500 101.17479706]
[185.62490845 93.33731842]
[172.83531189 85.49983978]
[169.81484985 85.99445343]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[10 22]
[11 21]
[13 20]
[56 78]
[57 77]
[58 76]
[59 75]
[60 74]
[61 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
