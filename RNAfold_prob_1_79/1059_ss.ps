%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGUCCUGUUCAGCAGGGCCUCCACGAGCGCCCGCACGACGCGUCAAUGACCGUCAGCUGCACAGCAUAUCGUUCG\
) } def
/len { sequence length } bind def

/coor [
[-3.32323456 192.07191467]
[-16.41067505 199.40122986]
[-29.49811554 206.73054504]
[-33.83555603 219.06161499]
[-45.10540009 224.84516907]
[-56.87576294 221.40489197]
[-70.24085999 228.21475220]
[-83.60595703 235.02461243]
[-96.97105408 241.83447266]
[-110.33615112 248.64433289]
[-123.70124817 255.45417786]
[-137.06634521 262.26403809]
[-148.43414307 274.84219360]
[-163.66763306 267.40063477]
[-160.73396301 250.70243835]
[-143.87620544 248.89894104]
[-130.51110840 242.08908081]
[-117.14601135 235.27923584]
[-103.78091431 228.46937561]
[-90.41581726 221.65951538]
[-77.05072021 214.84965515]
[-63.68561935 208.03979492]
[-55.10030746 192.86633301]
[-36.82743454 193.64311218]
[-23.73999405 186.31378174]
[-10.65255356 178.98446655]
[1.81949115 170.65090942]
[13.59924507 161.36450195]
[25.37899971 152.07809448]
[37.15875244 142.79168701]
[38.33241272 126.13666534]
[51.36183929 115.16982269]
[68.63780975 116.92269135]
[80.04389954 107.18096924]
[80.88173676 90.81826782]
[93.12902069 79.93505859]
[109.47677612 81.02626038]
[120.49161530 70.84424591]
[131.50645447 60.66223526]
[142.31925964 50.26592636]
[152.71557617 39.45312119]
[162.89758301 28.43828392]
[173.07958984 17.42344666]
[183.26159668 6.40860939]
[186.92100525 -2.25875163]
[194.06614685 -4.82878542]
[204.67274475 -15.43538666]
[215.27935791 -26.04198837]
[222.20390320 -41.51735306]
[238.99139404 -39.14742661]
[241.36131287 -22.35993767]
[225.88595581 -15.43538666]
[215.27935791 -4.82878542]
[204.67274475 5.77781630]
[194.27644348 16.59062004]
[184.09443665 27.60545731]
[173.91241455 38.62029648]
[163.73040771 49.63513184]
[161.44287109 56.87567520]
[152.92585754 60.87252808]
[150.35581970 68.01767731]
[141.68846130 71.67707062]
[130.67362976 81.85908508]
[119.65879059 92.04109955]
[120.65119171 104.83120728]
[114.08798218 115.85373688]
[102.37043762 121.07588959]
[89.78562164 118.58705902]
[78.37953186 128.32878113]
[78.84999084 141.94845581]
[71.42549133 153.14147949]
[59.06157303 157.86460876]
[46.44516373 154.57144165]
[34.66540909 163.85784912]
[22.88565445 173.14425659]
[11.10590076 182.43066406]
[9.48226547 187.13587952]
[6.61205149 190.57948303]
[3.11283684 192.50982666]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 26]
[2 25]
[3 24]
[6 22]
[7 21]
[8 20]
[9 19]
[10 18]
[11 17]
[12 16]
[27 76]
[28 75]
[29 74]
[30 73]
[33 69]
[34 68]
[37 64]
[38 63]
[39 62]
[40 60]
[41 58]
[42 57]
[43 56]
[44 55]
[46 54]
[47 53]
[48 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
