%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGGCAAAGCCAAGGUCAAAGACCAAGUAGCAAAGCUACAAGCUGAAACAGCAAGCCAAAGGCAGCACCACUUCG\
) } def
/len { sequence length } bind def

/coor [
[111.15013885 178.57110596]
[107.64846039 163.98554993]
[96.50373077 164.34614563]
[85.46369171 162.78013611]
[74.85887909 159.33442688]
[65.00682831 154.11218262]
[56.20250320 147.26974487]
[44.79641342 157.01147461]
[33.39032364 166.75318909]
[25.27293777 181.63755798]
[8.72314072 177.95780945]
[7.67764902 161.03611755]
[23.64860344 155.34710693]
[35.05469131 145.60537720]
[46.46078110 135.86366272]
[39.55058670 122.32752228]
[36.00269318 107.54949188]
[36.01444626 92.35153961]
[21.42889786 88.84986115]
[6.84334946 85.34818268]
[-7.74219942 81.84650421]
[-24.55518532 84.02820587]
[-31.30592728 68.47623444]
[-18.23052406 57.68410110]
[-4.24051857 67.26094818]
[10.34502983 70.76263428]
[24.93057823 74.26431274]
[39.51612854 77.76599121]
[48.35145187 61.46329498]
[61.46329498 48.35145187]
[77.76599121 39.51612854]
[74.26431274 24.93057823]
[70.76263428 10.34502983]
[67.26094818 -4.24051857]
[63.75926971 -18.82606697]
[54.18241882 -32.81607437]
[64.97455597 -45.89147568]
[80.52652740 -39.14073563]
[78.34481812 -22.32774734]
[81.84650421 -7.74219942]
[85.34818268 6.84334946]
[88.84986115 21.42889786]
[92.35153961 36.01444626]
[110.88850403 36.48551178]
[128.52389526 42.21559525]
[143.79750061 52.73025131]
[155.20358276 42.98852921]
[166.60968018 33.24681091]
[178.01576233 23.50508881]
[186.13314819 8.62072277]
[202.68295288 12.30047703]
[203.72843933 29.22215843]
[187.75749207 34.91117859]
[176.35139465 44.65290070]
[164.94531250 54.39461899]
[153.53921509 64.13633728]
[160.44941711 77.67247772]
[163.99729919 92.45050812]
[163.98554993 107.64846039]
[178.57110596 111.15013885]
[193.15664673 114.65181732]
[209.96963501 112.47011566]
[216.72038269 128.02207947]
[203.64497375 138.81422424]
[189.65496826 129.23736572]
[175.06942749 125.73568726]
[160.48387146 122.23400879]
[155.74555969 132.32772827]
[149.33816528 141.45353699]
[141.45353699 149.33816528]
[132.32772827 155.74555969]
[122.23400879 160.48387146]
[125.73568726 175.06942749]
[139.81008911 181.88449097]
[146.16386414 196.17306519]
[141.79696655 211.18853760]
[128.77128601 219.84103394]
[113.23717499 218.04513550]
[102.52935028 206.64878845]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[2 72]
[7 15]
[8 14]
[9 13]
[18 28]
[19 27]
[20 26]
[21 25]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[46 56]
[47 55]
[48 54]
[49 53]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
