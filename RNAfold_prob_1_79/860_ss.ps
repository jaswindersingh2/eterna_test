%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGCACGAAGAAGGCAAAAGACGUCCGAAAGAGACAAGUCAGGCGAAAGAUCAAGCAACAAGCUGUGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[103.31436920 271.66442871]
[88.77574158 276.61657715]
[73.71195984 273.62017822]
[62.17512512 263.48132324]
[57.26857376 248.92723083]
[60.31214523 233.87292480]
[70.48713684 222.36791992]
[85.05653381 217.50700378]
[87.98288727 202.79522705]
[90.90924072 188.08345032]
[93.83559418 173.37167358]
[96.76194763 158.65989685]
[99.68830872 143.94812012]
[85.70895386 140.95982361]
[73.60501099 133.70901489]
[64.61428070 123.07685089]
[59.61053085 110.28216553]
[59.01943588 96.74235535]
[62.78477478 83.91653442]
[70.38724518 73.14832306]
[80.91247559 65.52513885]
[76.27721405 51.25929260]
[64.54144287 47.90913010]
[56.05729675 39.30574417]
[52.93476486 27.75908470]
[55.86633301 16.28791809]
[63.97762299 7.83070230]
[60.47594070 -6.75484657]
[56.97425842 -21.34039497]
[52.90265274 -35.77722549]
[48.26739883 -50.04307175]
[43.63214493 -64.30892181]
[38.71768951 -78.48101044]
[25.77021408 -88.54554749]
[28.28035355 -104.75144958]
[43.66588974 -110.42747498]
[56.09950638 -99.73461151]
[52.79056168 -83.67276764]
[58.20341110 -78.34741974]
[57.89799118 -68.94417572]
[62.53324509 -54.67832565]
[67.16850281 -40.41247940]
[71.17953491 -37.39009857]
[73.17002106 -31.70445251]
[71.55980682 -24.84207535]
[75.06149292 -10.25652695]
[78.56317139 4.32902145]
[94.62655640 12.68585300]
[99.82724762 30.35558319]
[90.54306793 46.62403870]
[95.17832184 60.88988495]
[104.48397064 60.39249420]
[113.75286102 62.10352325]
[122.46240997 65.97705078]
[130.10986328 71.84390259]
[136.24133301 79.41850281]
[140.47851562 88.31256866]
[142.54187012 98.05485535]
[142.26846313 108.11611938]
[139.62374878 117.93783569]
[134.70616150 126.96323395]
[148.07125854 133.77308655]
[161.43635559 140.58294678]
[177.07713318 137.01281738]
[189.52989197 147.12757874]
[189.24194336 163.16804504]
[176.43418884 172.82934570]
[160.93162537 168.70016479]
[154.62651062 153.94804382]
[141.26141357 147.13818359]
[127.89630890 140.32832336]
[114.40008545 146.87446594]
[111.47373199 161.58624268]
[108.54737854 176.29803467]
[105.62101746 191.00981140]
[102.69466400 205.72158813]
[99.76831055 220.43336487]
[111.36848450 230.49972534]
[116.36618042 245.02276611]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 77]
[9 76]
[10 75]
[11 74]
[12 73]
[13 72]
[21 51]
[22 50]
[27 47]
[28 46]
[29 45]
[30 42]
[31 41]
[32 40]
[33 38]
[61 71]
[62 70]
[63 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
