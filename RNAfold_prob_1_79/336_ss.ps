%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGAUGGAUCGAAAAAGAUCGGCAAAGCCACAUCACGCAGACGAAAAGUCGAUCGAAAGAUCGCGUUUCGGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[182.31042480 127.90330505]
[174.90080261 130.75169373]
[166.89311218 130.68722534]
[159.40104675 127.66783142]
[153.48518372 122.06595612]
[150.00302124 114.62329102]
[135.10699463 112.86022949]
[120.21096802 111.09717560]
[105.31494141 109.33411407]
[90.36118317 110.51099396]
[75.92435455 114.58260345]
[61.48752594 118.65421295]
[47.05069733 122.72581482]
[39.54803467 136.63572693]
[24.38331985 141.08622742]
[10.55350971 133.43692017]
[6.26358652 118.22599792]
[14.05868530 104.47783661]
[29.31411171 100.34897614]
[42.97909164 108.28898621]
[57.41592026 104.21738434]
[71.85274506 100.14577484]
[86.28957367 96.07416534]
[88.92652130 81.30776978]
[76.79126740 72.49098969]
[64.65601349 63.67421341]
[48.28793335 59.25579453]
[48.00254440 42.30424881]
[64.21260834 37.33735657]
[73.47279358 51.53895950]
[85.60804749 60.35573578]
[97.74330139 69.17251587]
[108.06152344 81.74486542]
[107.07800293 94.43808746]
[121.97402954 96.20114899]
[136.87005615 97.96420288]
[151.76608276 99.72726440]
[171.74624634 88.14115906]
[190.35140991 100.62196350]
[205.30517578 99.44507599]
[218.45573425 90.64887238]
[231.75083923 97.36375427]
[246.70460510 96.18686676]
[259.85516357 87.39067078]
[273.15026855 94.10554504]
[288.10403442 92.92866516]
[303.05780029 91.75177765]
[318.01153564 90.57489014]
[332.96530151 89.39800262]
[346.11587524 80.60180664]
[359.41098022 87.31668091]
[367.98156738 83.43604279]
[374.97296143 86.39894867]
[389.96139526 85.81005096]
[404.94982910 85.22115326]
[419.93826294 84.63225555]
[434.92669678 84.04335785]
[448.49963379 74.83969116]
[463.13668823 82.23487091]
[463.78051758 98.62137604]
[449.76879883 107.14216614]
[435.51559448 99.03179169]
[420.52716064 99.62068939]
[405.53872681 100.20958710]
[390.55029297 100.79848480]
[375.56185913 101.38738251]
[360.58786011 102.27044678]
[348.50689697 110.98246002]
[334.14218140 104.35176086]
[319.18844604 105.52864838]
[304.23468018 106.70553589]
[289.28091431 107.88242340]
[274.32714844 109.05931091]
[262.24618530 117.77132416]
[247.88148499 111.14062500]
[232.92771912 112.31751251]
[220.84675598 121.02953339]
[206.48205566 114.39883423]
[191.52828979 115.57572174]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 37]
[7 36]
[8 35]
[9 34]
[10 23]
[11 22]
[12 21]
[13 20]
[24 32]
[25 31]
[26 30]
[39 79]
[40 78]
[42 76]
[43 75]
[45 73]
[46 72]
[47 71]
[48 70]
[49 69]
[51 67]
[53 66]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
