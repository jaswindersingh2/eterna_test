%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACUGAUGGAGUAUAAAGUAAUUGGUGAAAGCGGAUUAUGUGAAAAAGCAAAGUAUUCAUAUUAGGCAUUUUUUCG\
) } def
/len { sequence length } bind def

/coor [
[116.57218170 257.59564209]
[115.98328400 242.60719299]
[115.39438629 227.61875916]
[114.80548859 212.63032532]
[114.21659088 197.64189148]
[112.16140747 182.78334045]
[108.65972900 168.19779968]
[105.15805054 153.61224365]
[101.65636444 139.02670288]
[98.15468597 124.44115448]
[94.65300751 109.85560608]
[90.86563110 95.34161377]
[86.79402924 80.90478516]
[82.72241974 66.46795654]
[78.65081024 52.03113174]
[74.57920837 37.59430313]
[70.50759888 23.15747452]
[47.99311829 18.16164017]
[32.15744781 1.53948331]
[28.29318237 -20.98512077]
[37.59786224 -41.74472046]
[28.31145287 -53.52447128]
[19.02504349 -65.30422974]
[9.73863411 -77.08398438]
[0.45222473 -88.86373138]
[-8.83418465 -100.64348602]
[-23.45402145 -106.69087982]
[-25.25716400 -121.47593689]
[-34.54357529 -133.25569153]
[-49.96746826 -138.82664490]
[-52.58808517 -155.01504517]
[-39.70955658 -165.16766357]
[-24.58020973 -158.84034729]
[-22.76382065 -142.54209900]
[-13.47741032 -130.76234436]
[0.47819921 -125.55752563]
[2.94556952 -109.92990112]
[12.23197842 -98.15014648]
[21.51838875 -86.37039185]
[30.80479813 -74.59063721]
[40.09120560 -62.81088257]
[49.37761688 -51.03112793]
[57.54721832 -54.17288589]
[66.22324371 -55.41410828]
[74.96892548 -54.68714523]
[83.34281921 -52.02354813]
[90.92111969 -47.55274963]
[97.31908417 -41.49578476]
[102.21056366 -34.15436172]
[105.34465027 -25.89583969]
[106.55850220 -17.13484192]
[105.78584290 -8.31244755]
[103.06054688 0.12602066]
[98.51514435 7.75347233]
[92.37445831 14.18266582]
[84.94442749 19.08586884]
[89.01603699 33.52269745]
[93.08763885 47.95952606]
[97.15924835 62.39635468]
[101.23085785 76.83318329]
[105.30245972 91.27001190]
[110.47522736 97.75359344]
[109.23855591 106.35391998]
[112.74023438 120.93946838]
[116.24192047 135.52502441]
[119.74359894 150.11056519]
[123.24527740 164.69612122]
[126.74695587 179.28166199]
[130.05189514 182.25909424]
[132.08691406 185.77426147]
[132.83653259 189.37771606]
[132.42819214 192.65927124]
[131.10801697 195.28988647]
[129.20503235 197.05299377]
[129.79393005 212.04142761]
[130.38282776 227.02986145]
[130.97172546 242.01829529]
[131.56062317 257.00674438]
[134.50581360 276.16333008]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[4 75]
[5 74]
[6 68]
[7 67]
[8 66]
[9 65]
[10 64]
[11 63]
[12 61]
[13 60]
[14 59]
[15 58]
[16 57]
[17 56]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
[28 35]
[29 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
