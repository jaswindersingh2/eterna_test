%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAGUUAGAUCUGACUUAUCUAGAUCGAAAAAAAAAAAAGAUCUAGAUGAGUUAGAUCUGACAAGGUCGGAUUCG\
) } def
/len { sequence length } bind def

/coor [
[91.91671753 154.28971863]
[102.66336823 143.22117615]
[99.16168976 128.63562012]
[84.98630524 124.39857483]
[74.81530762 113.65404510]
[71.36147308 99.26776886]
[75.54597473 85.07678223]
[86.25276184 74.86605835]
[82.75108337 60.28050995]
[79.24939728 45.69496155]
[75.74771881 31.10941315]
[72.24604034 16.52386284]
[68.74436188 1.93831480]
[65.24267578 -12.64723396]
[61.74099731 -27.23278236]
[58.23931885 -41.81833267]
[54.73763657 -56.40388107]
[51.23595428 -70.98942566]
[47.73427582 -85.57498169]
[44.23259354 -100.16053009]
[40.73091507 -114.74607849]
[37.22923279 -129.33161926]
[33.72755432 -143.91717529]
[30.22587395 -158.50271606]
[26.72419357 -173.08827209]
[23.22251320 -187.67381287]
[19.72083282 -202.25936890]
[16.21915054 -216.84490967]
[12.71747112 -231.43046570]
[9.21579075 -246.01602173]
[-5.76574898 -248.74975586]
[-18.33648872 -257.34606934]
[-26.31847000 -270.31555176]
[-28.32876968 -285.41119385]
[-24.01908875 -300.01760864]
[-14.13610554 -311.60406494]
[-0.39210749 -318.16320801]
[14.83167458 -318.55862427]
[28.89762878 -312.72177124]
[39.36874390 -301.66394043]
[44.43083572 -287.30096436]
[43.20686722 -272.12130737]
[35.90889359 -258.75494385]
[23.80134010 -249.51770020]
[27.30302048 -234.93214417]
[30.80470085 -220.34660339]
[34.30638123 -205.76104736]
[37.80805969 -191.17550659]
[41.30974197 -176.58995056]
[44.81142044 -162.00440979]
[48.31310272 -147.41885376]
[51.81478119 -132.83329773]
[55.31646347 -118.24775696]
[58.81814575 -103.66220856]
[62.31982422 -89.07666016]
[65.82150269 -74.49111176]
[69.32318878 -59.90555954]
[72.82486725 -45.32001114]
[76.32654572 -30.73446274]
[79.82822418 -16.14891434]
[83.32991028 -1.56336558]
[86.83158875 13.02218342]
[90.33326721 27.60773277]
[93.83494568 42.19327927]
[97.33663177 56.77883148]
[100.83831024 71.36437988]
[115.01369476 75.60142517]
[125.18469238 86.34595490]
[128.63853455 100.73223114]
[124.45402527 114.92321777]
[113.74723816 125.13394165]
[117.24891663 139.71948242]
[131.84927368 144.70275879]
[141.41981506 156.80270386]
[142.90658569 172.15824890]
[135.83518982 185.86952209]
[122.46208191 193.56129456]
[107.05455780 192.77914429]
[94.52910614 183.77265930]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 72]
[3 71]
[8 66]
[9 65]
[10 64]
[11 63]
[12 62]
[13 61]
[14 60]
[15 59]
[16 58]
[17 57]
[18 56]
[19 55]
[20 54]
[21 53]
[22 52]
[23 51]
[24 50]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
