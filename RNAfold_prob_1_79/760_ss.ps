%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGACGUGGCAAAGGCAGGUCAAGUGGACGGGAAAACGGUGCACAGAGGUCGCGAAAGGGAGCUCGUGUCGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[109.50129700 129.88882446]
[101.84634399 131.30827332]
[94.07761383 130.79841614]
[86.67383575 128.39067078]
[80.09125519 124.23342133]
[74.73550415 118.58283997]
[60.87731171 124.32308960]
[47.01911926 130.06333923]
[37.23035812 142.49276733]
[22.51095390 140.21495056]
[8.65276146 145.95520020]
[-1.13599837 158.38464355]
[-15.85540104 156.10682678]
[-28.17501640 167.75428772]
[-42.77770233 159.14045715]
[-38.54293823 142.72390747]
[-21.59565163 142.24862671]
[-12.79812336 130.22978210]
[2.91251016 132.09701538]
[16.77070236 126.35676575]
[25.56823349 114.33791351]
[41.27886581 116.20514679]
[55.13705826 110.46489716]
[68.99525452 104.72464752]
[69.72190094 91.82360077]
[75.58813477 80.31047058]
[85.59818268 72.13955688]
[82.09650421 57.55400467]
[78.59482574 42.96845627]
[67.84971619 31.35582161]
[72.40211487 17.17396927]
[68.90043640 2.58841968]
[58.15533066 -9.02421570]
[62.70772552 -23.20606995]
[49.83510971 -32.78079224]
[49.43901443 -48.81895447]
[61.82328796 -59.01745224]
[77.48777771 -55.55286789]
[84.41602325 -41.08293533]
[77.29327393 -26.70775032]
[87.78791809 -16.13837051]
[83.48598480 -0.91326076]
[86.98766327 13.67228794]
[97.48230743 24.24166679]
[93.18037415 39.46677780]
[96.68205261 54.05232620]
[100.18373108 68.63787079]
[122.60788727 78.26293182]
[131.34515381 101.04767609]
[145.78198242 105.11928558]
[160.21881104 109.19089508]
[174.65563965 113.26249695]
[189.09246826 117.33410645]
[203.67802429 120.83578491]
[218.38980103 123.76213837]
[233.10157776 126.68849945]
[247.81335449 129.61485291]
[262.52514648 132.54119873]
[273.82785034 121.90971375]
[289.22515869 119.98561859]
[302.79650879 127.50876617]
[309.32345581 141.58636475]
[306.29623413 156.80528259]
[294.87884521 167.31353760]
[279.46157837 169.07049561]
[265.97262573 161.40055847]
[259.59878540 147.25299072]
[244.88700867 144.32662964]
[230.17523193 141.40026855]
[215.46343994 138.47392273]
[200.75166321 135.54756165]
[196.15476990 137.57037354]
[190.22148132 136.52894592]
[185.02087402 131.77093506]
[170.58404541 127.69932556]
[156.14721680 123.62772369]
[141.71038818 119.55611420]
[127.27355194 115.48450470]
[122.61907959 121.72541809]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 24]
[7 23]
[8 22]
[10 20]
[11 19]
[13 17]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[34 40]
[49 78]
[50 77]
[51 76]
[52 75]
[53 74]
[54 71]
[55 70]
[56 69]
[57 68]
[58 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
