%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCGGCAUGGAAAAACAUGGGCAAAGCCACCGCAGCCACCGGAAAACGGCAAGGAAACUUGGGCGCUGCAGUUCG\
) } def
/len { sequence length } bind def

/coor [
[86.72324371 264.44335938]
[86.13434601 249.45492554]
[85.54544830 234.46649170]
[74.46774292 224.57609558]
[73.65699768 209.38407898]
[84.10606384 197.83181763]
[83.51717377 182.84338379]
[82.92827606 167.85494995]
[82.33937836 152.86651611]
[81.75048065 137.87806702]
[69.61522675 129.06129456]
[55.17839432 133.13290405]
[40.74156570 137.20451355]
[33.23890305 151.11441040]
[18.07418823 155.56492615]
[4.24437857 147.91561890]
[-0.04554468 132.70469666]
[7.74955368 118.95652771]
[23.00498009 114.82765961]
[36.66996002 122.76767731]
[51.10678864 118.69607544]
[65.54361725 114.62446594]
[65.75615692 94.04396057]
[76.43269348 78.22867584]
[68.09914398 65.75662994]
[59.76558685 53.28458786]
[48.66525269 51.70777512]
[40.53418350 44.31588364]
[38.01438904 33.84902954]
[41.73353195 23.98383713]
[34.40421295 10.89639759]
[20.04170036 2.98120427]
[19.98577309 -13.41784763]
[34.29396439 -21.43081856]
[48.24723053 -12.81465244]
[47.49165344 3.56707931]
[54.82096863 16.65452003]
[72.09654999 24.97444153]
[72.23763275 44.95103455]
[80.57118225 57.42308044]
[88.90473938 69.89512634]
[102.59203339 64.88140869]
[118.39836121 66.35850525]
[127.21514130 54.22324753]
[136.03192139 42.08799362]
[134.95249939 26.08129501]
[146.89076233 15.36414814]
[162.68870544 18.15782928]
[170.22749329 32.31926727]
[163.72399902 46.98501968]
[148.16717529 50.90477371]
[139.35038757 63.04002762]
[130.53361511 75.17528534]
[137.60456848 88.40409851]
[152.59300232 87.81520081]
[167.58143616 87.22631073]
[182.56987000 86.63741302]
[196.14280701 77.43373871]
[210.77986145 84.82892609]
[211.42369080 101.21543121]
[197.41197205 109.73622131]
[183.15876770 101.62584686]
[168.17033386 102.21474457]
[153.18190002 102.80364227]
[138.19346619 103.39253998]
[133.79171753 117.63322449]
[124.33497620 129.03936768]
[111.31347656 135.92004395]
[96.73891449 137.28916931]
[97.32781219 152.27761841]
[97.91670990 167.26605225]
[98.50560760 182.25448608]
[99.09450531 197.24291992]
[110.41773987 207.93974304]
[110.80145264 223.14852905]
[100.53388214 233.87759399]
[101.12277985 248.86602783]
[101.71167755 263.85446167]
[104.65687561 283.01107788]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[6 73]
[7 72]
[8 71]
[9 70]
[10 69]
[11 22]
[12 21]
[13 20]
[24 41]
[25 40]
[26 39]
[30 37]
[31 36]
[43 53]
[44 52]
[45 51]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
