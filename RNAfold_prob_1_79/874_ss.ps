%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGGGCAGGCCCAAGGGAAACCACGUACGCGGGAGGAGCCACAGCCCAACCGAAAGGACGCAGGUGAUUUCG\
) } def
/len { sequence length } bind def

/coor [
[229.92918396 289.89898682]
[220.33833313 290.05184937]
[211.04017639 287.61752319]
[202.72100830 282.76489258]
[195.99778748 275.84170532]
[191.37237549 267.34970093]
[189.19403076 257.90829468]
[189.63311768 248.20928955]
[192.66783142 238.96630859]
[198.08496094 230.86222839]
[189.26818848 218.72697449]
[180.45140076 206.59172058]
[171.63462830 194.45646667]
[153.50088501 188.22473145]
[151.01278687 168.40319824]
[141.27107239 156.99710083]
[131.52934265 145.59101868]
[121.56555939 134.37838745]
[111.38355255 123.36355591]
[93.12419891 125.06320190]
[78.28821564 114.28423309]
[74.26222992 96.39333344]
[60.64008331 90.11344147]
[44.36813354 92.15198517]
[34.68376541 78.91774750]
[41.54942703 64.02497101]
[57.90231705 62.79407501]
[66.91998291 76.49129486]
[80.54212952 82.77118683]
[81.62283325 81.62283325]
[82.77118683 80.54212952]
[76.49129486 66.91998291]
[62.79407501 57.90231705]
[64.02497101 41.54942703]
[78.91774750 34.68376541]
[92.15198517 44.36813354]
[90.11344147 60.64008331]
[96.39333344 74.26222992]
[110.62731171 76.28289795]
[121.60926819 85.56114960]
[125.97864532 99.25778198]
[122.39838409 113.18154144]
[132.58039856 124.19638062]
[140.93392944 128.52452087]
[142.93544006 135.84928894]
[152.67715454 147.25538635]
[162.41888428 158.66146851]
[173.62760925 158.92265320]
[182.57113647 165.30760193]
[186.30371094 175.40573120]
[183.76988220 185.63967896]
[192.58665466 197.77493286]
[201.40344238 209.91018677]
[210.22021484 222.04545593]
[231.67424011 219.79792786]
[250.43690491 230.19888306]
[259.79458618 249.37101746]
[256.48840332 270.32702637]
[268.26815796 279.61343384]
[280.04791260 288.89984131]
[291.82766724 298.18624878]
[303.60742188 307.47265625]
[319.09518433 305.80941772]
[330.90924072 315.39495850]
[332.39944458 330.17047119]
[344.17919922 339.45687866]
[360.47744751 341.27325439]
[366.80474854 356.40258789]
[356.65213013 369.28112793]
[340.46374512 366.66052246]
[334.89279175 351.23663330]
[323.11303711 341.95022583]
[308.39791870 343.95046997]
[296.31927490 334.70053101]
[294.32101440 319.25241089]
[282.54125977 309.96600342]
[270.76150513 300.67959595]
[258.98175049 291.39318848]
[247.20199585 282.10678101]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 54]
[11 53]
[12 52]
[13 51]
[15 47]
[16 46]
[17 45]
[18 43]
[19 42]
[22 29]
[23 28]
[31 38]
[32 37]
[58 79]
[59 78]
[60 77]
[61 76]
[62 75]
[65 72]
[66 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
