%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCACGGACGAAAAAGCCAAAACCCGGCCUACGGAGCCUAGGGAGCCGAAAGAGCAAGCAAAAACAACAAAUUCG\
) } def
/len { sequence length } bind def

/coor [
[90.96036530 217.22592163]
[88.41184235 202.35421753]
[89.80019379 187.32974243]
[95.03077698 173.17687988]
[103.74694824 160.86061096]
[115.35443878 151.22065735]
[109.07453918 137.59851074]
[92.46952057 137.93792725]
[77.25302124 131.28210449]
[66.23076630 118.85825348]
[51.96491623 123.49350739]
[44.53705215 129.26768494]
[37.04716492 128.01876831]
[29.54450035 141.92866516]
[14.37978554 146.37918091]
[0.54997653 138.72985840]
[-3.73994684 123.51894379]
[4.05515146 109.77078247]
[19.31057739 105.64191437]
[32.97555923 113.58193207]
[47.32966232 109.22766113]
[61.59551239 104.59240723]
[61.66243744 94.87883759]
[64.14745331 85.48828125]
[68.89382172 77.01303101]
[75.60217285 69.98765564]
[83.84938049 64.85526276]
[80.34770203 50.26971436]
[76.84602356 35.68416595]
[72.77441406 21.24733734]
[68.13916016 6.98148918]
[63.50390244 -7.28435850]
[58.58945084 -21.45644951]
[45.64197540 -31.52098465]
[48.15211105 -47.72688675]
[63.53765106 -53.40291214]
[75.97126770 -42.71005249]
[72.66232300 -26.64820480]
[78.07517242 -21.32286072]
[77.76975250 -11.91961384]
[82.40500641 2.34623432]
[87.04026031 16.61208153]
[91.05130005 19.63446236]
[93.04178619 25.32010841]
[91.43157196 32.18248367]
[94.93325043 46.76803207]
[98.43492889 61.35358429]
[116.19296265 64.87475586]
[130.40339661 76.09124756]
[143.76849365 69.28138733]
[156.99731445 62.21043777]
[164.91250610 47.84792709]
[181.31155396 47.79199982]
[189.32453918 62.10019302]
[180.70835876 76.05345917]
[164.32662964 75.29788208]
[159.91360474 81.47715759]
[150.57835388 82.64649200]
[137.21325684 89.45634460]
[138.34922791 105.03309631]
[133.23225403 119.78919220]
[122.69668579 131.31861877]
[128.97657776 144.94076538]
[143.84532166 142.37500000]
[158.87139893 143.74595642]
[173.03030396 148.96014404]
[185.35667419 157.66204834]
[195.01005554 169.25836182]
[201.33229065 182.95841980]
[203.89230347 197.82814026]
[202.51554871 212.85368347]
[197.29589844 227.01058960]
[188.58923340 239.33358765]
[176.98919678 248.98249817]
[163.28669739 255.29943848]
[148.41598511 257.85372925]
[133.39097595 256.47116089]
[119.23609161 251.24604797]
[106.91645050 242.53462219]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 63]
[7 62]
[10 22]
[11 21]
[13 20]
[27 47]
[28 46]
[29 45]
[30 42]
[31 41]
[32 40]
[33 38]
[49 59]
[50 58]
[51 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
