%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAUGCGCUGUCCGGCUUCCGUGCGCGGCAAGCUAGACCGUCGACUGGUGUCACGGAGGACUUCGCAAGCGUUUUCG\
) } def
/len { sequence length } bind def

/coor [
[100.38162231 336.80444336]
[99.79272461 321.81597900]
[99.20382690 306.82754517]
[98.61492920 291.83911133]
[98.02603149 276.85067749]
[97.43713379 261.86224365]
[96.84823608 246.87380981]
[96.25933838 231.88537598]
[95.08245850 216.93162537]
[93.31939697 202.03559875]
[80.54273987 187.73791504]
[88.05710602 169.22795105]
[85.13075256 154.51617432]
[82.20439911 139.80439758]
[79.27803802 125.09261322]
[70.22470093 113.13280487]
[56.85960388 106.32295227]
[43.49450684 99.51309204]
[30.12940788 92.70323181]
[16.76431084 85.89337921]
[3.26808667 79.34723663]
[-10.35406113 73.06734467]
[-23.97620773 66.78744507]
[-40.24815750 68.82598877]
[-49.93252563 55.59175491]
[-43.06686401 40.69897842]
[-26.71397591 39.46807861]
[-17.69631195 53.16529846]
[-4.07416487 59.44519424]
[9.54798222 65.72509003]
[17.14103317 65.66321564]
[23.57416916 72.52828217]
[36.93926620 79.33813477]
[50.30436325 86.14799500]
[63.66946030 92.95784760]
[77.03456116 99.76770782]
[80.59890747 90.12950897]
[87.72229767 83.49769592]
[96.54877472 80.94032288]
[105.04569244 82.54398346]
[114.78741455 71.13789368]
[124.52912903 59.73180771]
[134.27085876 48.32571793]
[137.58714294 39.52137375]
[144.62588501 36.67280197]
[154.80790710 25.65796471]
[164.98991394 14.64312744]
[168.07945251 -1.46236205]
[183.65859985 -6.58313799]
[195.70085144 4.54861593]
[191.81819153 20.48150444]
[176.00474548 24.82513809]
[165.82273865 35.83997726]
[155.64073181 46.85481262]
[145.67694092 58.06744003]
[135.93522644 69.47352600]
[126.19350433 80.87961578]
[116.45178223 92.28570557]
[115.75088501 113.22791290]
[93.98982239 122.16625977]
[96.91617584 136.87803650]
[99.84252930 151.58981323]
[102.76888275 166.30160522]
[112.42083740 172.00630188]
[117.10420990 181.94714355]
[115.42670441 192.58154297]
[108.21542358 200.27253723]
[109.97848511 215.16856384]
[113.86435699 221.04945374]
[113.96479797 227.07263184]
[111.24777985 231.29647827]
[111.83667755 246.28491211]
[112.42557526 261.27334595]
[113.01446533 276.26177979]
[113.60336304 291.25021362]
[114.19226074 306.23864746]
[114.78115845 321.22708130]
[115.37005615 336.21554565]
[118.31526184 355.37213135]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[4 75]
[5 74]
[6 73]
[7 72]
[8 71]
[9 68]
[10 67]
[12 63]
[13 62]
[14 61]
[15 60]
[16 36]
[17 35]
[18 34]
[19 33]
[20 32]
[21 30]
[22 29]
[23 28]
[40 58]
[41 57]
[42 56]
[43 55]
[45 54]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
