%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACCUGACAUCGCUACAAAAGACCGACUGUCUCGACGGAGACAGUCGGUCGUAGCGAUGUCAGGCCCGGGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[102.87040710 133.10470581]
[98.23514557 118.83885956]
[89.59487915 115.80349731]
[83.39206696 109.06607819]
[81.07976532 100.20487213]
[83.19964600 91.29567719]
[89.25511169 84.42551422]
[86.32875061 69.71373749]
[83.40239716 55.00195694]
[80.47604370 40.29018021]
[77.54969025 25.57839966]
[74.62333679 10.86662006]
[71.69698334 -3.84515882]
[68.77062225 -18.55693817]
[65.84426880 -33.26871872]
[62.91791534 -47.98049545]
[59.99156189 -62.69227600]
[57.06520462 -77.40405273]
[54.13885117 -92.11583710]
[51.21249771 -106.82761383]
[47.75723267 -110.41040802]
[45.99201965 -114.53114319]
[45.86067200 -118.52532959]
[47.07423019 -121.83068848]
[49.17277908 -124.06109619]
[48.58388138 -139.04953003]
[47.99498367 -154.03796387]
[47.40608597 -169.02639771]
[46.81718826 -184.01484680]
[46.22829437 -199.00328064]
[45.63939667 -213.99171448]
[45.05049896 -228.98014832]
[44.46160126 -243.96858215]
[43.87270355 -258.95703125]
[43.28380585 -273.94546509]
[42.69490814 -288.93389893]
[42.10601044 -303.92233276]
[32.90234375 -317.49526978]
[40.29752350 -332.13232422]
[56.68402863 -332.77612305]
[65.20482635 -318.76443481]
[57.09444809 -304.51123047]
[57.68334579 -289.52279663]
[58.27224350 -274.53436279]
[58.86113739 -259.54592896]
[59.45003510 -244.55747986]
[60.03893280 -229.56904602]
[60.62783051 -214.58061218]
[61.21672821 -199.59217834]
[61.80562592 -184.60374451]
[62.39452362 -169.61529541]
[62.98342133 -154.62686157]
[63.57231903 -139.63842773]
[64.16121674 -124.64999390]
[65.92427826 -109.75396729]
[68.85063171 -95.04219055]
[71.77698517 -80.33040619]
[74.70333862 -65.61862946]
[77.62969208 -50.90685272]
[80.55605316 -36.19507217]
[83.48240662 -21.48329353]
[86.40876007 -6.77151346]
[89.33511353 7.94026566]
[92.26146698 22.65204430]
[95.18782043 37.36382294]
[98.11418152 52.07560349]
[101.04053497 66.78738403]
[103.96688843 81.49916077]
[118.30827332 95.22251892]
[112.50099945 114.20359802]
[117.13625336 128.46945190]
[132.08258057 132.29182434]
[142.57296753 143.60357666]
[145.25994873 158.79513550]
[139.28611755 173.01895142]
[126.55771637 181.73625183]
[111.13632202 182.16537476]
[97.94284821 174.16938782]
[91.18728638 160.29978943]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[7 68]
[8 67]
[9 66]
[10 65]
[11 64]
[12 63]
[13 62]
[14 61]
[15 60]
[16 59]
[17 58]
[18 57]
[19 56]
[20 55]
[25 54]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
