%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAACGCAGAUCAGAGCCGAGCAAAGGCCGAAAGGACCGGCACGAGCACGGGAUCGGGCAAAAACGCACAACUUCG\
) } def
/len { sequence length } bind def

/coor [
[107.30839539 294.35330200]
[99.08253479 281.73257446]
[93.87178040 267.59765625]
[91.93750000 252.65756226]
[93.37672424 237.66168213]
[98.11724854 223.36219788]
[105.92130280 210.47636414]
[116.39743042 199.65054321]
[129.02015686 191.42774963]
[123.82840729 177.35487366]
[109.76921082 167.04562378]
[112.68834686 148.99070740]
[106.94809723 135.13252258]
[101.20783997 121.27432251]
[95.46759033 107.41613007]
[92.43889618 105.98030853]
[89.93580627 103.29231262]
[88.47004700 99.57469177]
[88.45057678 95.25392151]
[90.10498047 90.91171265]
[86.60330200 76.32616425]
[83.10162354 61.74061203]
[72.35651398 50.12797928]
[76.90891266 35.94612503]
[73.40723419 21.36057472]
[58.77125549 16.91811371]
[48.39253235 5.81951523]
[44.98525238 -8.88615799]
[49.36693573 -23.22689819]
[60.26504898 -33.38055038]
[56.76336670 -47.96610260]
[53.26168823 -62.55165100]
[49.76000595 -77.13719940]
[35.68560028 -83.95226288]
[29.33182335 -98.24084473]
[33.69873428 -113.25630951]
[46.72440720 -121.90881348]
[62.25852203 -120.11290741]
[72.96634674 -108.71656799]
[73.79196930 -93.10079193]
[64.34555817 -80.63887787]
[67.84723663 -66.05332947]
[71.34891510 -51.46778107]
[74.85060120 -36.88223267]
[89.17054749 -32.78290176]
[99.58522034 -21.99444962]
[103.22554779 -7.34472704]
[99.01669312 7.25603867]
[87.99278259 17.85889435]
[91.49446106 32.44444275]
[101.98909760 43.01382446]
[97.68717194 58.23893356]
[101.18885040 72.82447815]
[104.69052887 87.41003418]
[109.32578278 101.67588043]
[115.06603241 115.53407288]
[120.80628967 129.39225769]
[126.54653931 143.25045776]
[138.28231812 149.00718689]
[142.70115662 160.87870789]
[137.90127563 172.16311646]
[143.09303284 186.23599243]
[158.03170776 184.29084778]
[173.02862549 185.71917725]
[187.33155823 190.44929504]
[200.22305298 198.24398804]
[211.05648804 208.71224976]
[219.28846741 221.32899475]
[224.50605774 235.46138000]
[226.44758606 250.40052795]
[225.01562500 265.39709473]
[220.28202820 279.69888306]
[212.48422241 292.58847046]
[202.01335144 303.41937256]
[189.39460754 311.64831543]
[175.26095581 316.86248779]
[160.32133484 318.80038452]
[145.32510376 317.36480713]
[131.02447510 312.62771606]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 62]
[10 61]
[12 58]
[13 57]
[14 56]
[15 55]
[20 54]
[21 53]
[22 52]
[24 50]
[25 49]
[30 44]
[31 43]
[32 42]
[33 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
