%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGAACGUACAAAAAAGUACCGCAAAGCGAGUUCAGGCAGACGAAAAGUCGUAUGGAAAUACGCCUAAUCAGUUCG\
) } def
/len { sequence length } bind def

/coor [
[67.91206360 223.08561707]
[52.56674194 226.09477234]
[38.90235138 218.49093628]
[33.37080383 203.86437988]
[38.58392715 189.12133789]
[52.08024216 181.22300720]
[54.42675781 166.40768433]
[56.77327728 151.59236145]
[59.11979294 136.77703857]
[47.90716934 126.81324768]
[33.47034073 130.88485718]
[19.03351212 134.95646667]
[4.59668255 139.02807617]
[-2.90598130 152.93797302]
[-18.07069588 157.38848877]
[-31.90050507 149.73916626]
[-36.19042969 134.52825928]
[-28.39533043 120.78009033]
[-13.13990402 116.65122223]
[0.52507591 124.59123993]
[14.96190453 120.51963806]
[29.39873314 116.44802856]
[43.83555984 112.37641907]
[46.47250748 97.61002350]
[34.33724976 88.79324341]
[22.20199585 79.97646332]
[5.83391953 75.55804443]
[5.54852819 58.60650253]
[21.75859642 53.63961029]
[31.01877403 67.84120941]
[43.15402985 76.65798950]
[55.28928375 85.47476959]
[64.30564117 71.91310120]
[77.03369141 62.67033386]
[91.65119934 58.59576797]
[106.21861267 59.83206940]
[118.93507385 65.84181976]
[128.36100769 75.52104950]
[141.44844055 68.19172668]
[154.53588867 60.86241150]
[167.62332153 53.53309250]
[163.50038147 41.06867218]
[169.59436035 25.51489067]
[178.41114807 13.37963676]
[187.22792053 1.24438155]
[186.14851379 -14.76231766]
[198.08677673 -25.47946548]
[213.88471985 -22.68578339]
[221.42349243 -8.52434444]
[214.92001343 6.14140606]
[199.36317444 10.06116009]
[190.54640198 22.19641495]
[181.72962952 34.33166885]
[188.80056763 47.56048965]
[203.78900146 46.97159195]
[218.77745056 46.38269424]
[233.76588440 45.79379654]
[247.33880615 36.59012985]
[261.97586060 43.98530960]
[262.61968994 60.37181473]
[248.60798645 68.89260864]
[234.35478210 60.78223419]
[219.36634827 61.37113190]
[204.37789917 61.96002579]
[189.38946533 62.54892349]
[174.95263672 66.62052917]
[161.86520386 73.94985199]
[148.77775574 81.27916718]
[135.69032288 88.60848999]
[138.85119629 103.98781586]
[135.40377808 119.96762848]
[125.42790222 133.72587585]
[110.19619751 142.62620544]
[92.02709198 144.71458435]
[73.93511963 139.12355042]
[71.58860016 153.93887329]
[69.24208069 168.75419617]
[66.89556885 183.56953430]
[77.29061127 195.25187683]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 78]
[7 77]
[8 76]
[9 75]
[10 23]
[11 22]
[12 21]
[13 20]
[24 32]
[25 31]
[26 30]
[38 69]
[39 68]
[40 67]
[41 66]
[43 53]
[44 52]
[45 51]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
