%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGAAGGACAAAAAAGCCAAAACCGGAACAAAAGAUUCAACGGACUCAAAAGAAGAACCAAAAACAUGCGAUUCG\
) } def
/len { sequence length } bind def

/coor [
[76.88524628 193.81103516]
[67.25775909 190.89965820]
[57.98510361 187.00317383]
[49.16778183 182.16378784]
[40.90134811 176.43397522]
[33.27538681 169.87580872]
[26.37254715 162.56037903]
[20.26763535 154.56695557]
[15.02681255 145.98217773]
[10.70687580 136.89906311]
[-3.55897212 141.53431702]
[-10.98683739 147.30850220]
[-18.47672462 146.05957031]
[-25.97938919 159.96948242]
[-41.14410400 164.41998291]
[-54.97391510 156.77067566]
[-59.26383591 141.55975342]
[-51.46873856 127.81158447]
[-36.21331406 123.68272400]
[-22.54833221 131.62274170]
[-8.19422722 127.26847076]
[6.07162094 122.63321686]
[3.57083941 93.98171234]
[9.61470222 65.86349487]
[23.66765976 40.77013779]
[44.48447037 20.92517090]
[70.22054291 8.08706951]
[66.71886444 -6.49847937]
[63.21718216 -21.08402824]
[48.17155075 -23.08238602]
[34.86569214 -30.38433647]
[25.09910774 -42.00234985]
[20.19265175 -56.36518860]
[20.80988121 -71.53039551]
[26.86732101 -85.44699860]
[37.54575348 -96.23289490]
[51.40100479 -102.42937469]
[66.55927277 -103.19842529]
[80.97052002 -98.43602753]
[92.68574524 -88.78626251]
[100.12055969 -75.55418396]
[102.26946259 -60.52931595]
[98.84184265 -45.74365234]
[90.30125427 -33.19683075]
[77.80273438 -24.58570862]
[81.30441284 -10.00015926]
[84.80609131 4.58538914]
[94.80787659 3.52282834]
[104.86593628 3.50582671]
[114.87125397 4.53456831]
[124.71540833 6.59790468]
[134.29171753 9.67347431]
[143.49638367 13.72794628]
[152.22967529 18.71738052]
[160.39692688 24.58770561]
[167.90963745 31.27530289]
[174.68638611 38.70769501]
[180.65373230 46.80433273]
[185.74699402 55.47747421]
[189.91099548 64.63311768]
[193.10058594 74.17205048]
[195.28121948 83.99089050]
[196.42926025 93.98322296]
[196.53224182 104.04076385]
[195.58908081 114.05451965]
[193.60998535 123.91595459]
[190.61640930 133.51820374]
[186.64077759 142.75720215]
[181.72619629 151.53282166]
[175.92590332 159.74996948]
[169.30278015 167.31958008]
[161.92860413 174.15962219]
[153.88328552 180.19598389]
[145.25399780 185.36320496]
[136.13429260 189.60533142]
[126.62297821 192.87637329]
[116.82314301 195.14086914]
[106.84098816 196.37428284]
[96.78469086 196.56326294]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 22]
[11 21]
[13 20]
[27 47]
[28 46]
[29 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
