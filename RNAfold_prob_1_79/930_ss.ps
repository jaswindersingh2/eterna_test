%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGUCUCGGUCGAGGUCGACGCCACGUUACUAAUUAUGUAACGUGGGCAUCUACGGAUGUGAGACGAGCCAUUUCG\
) } def
/len { sequence length } bind def

/coor [
[154.58615112 229.86357117]
[151.08447266 215.27801514]
[137.27603149 209.75852966]
[129.27076721 197.01568604]
[130.31619263 181.82489014]
[140.22044373 170.02607727]
[136.71876526 155.44052124]
[133.21708679 140.85498047]
[129.71539307 126.26942444]
[126.21372223 111.68387604]
[101.53561401 125.43742371]
[80.89931488 111.44629669]
[66.18753815 114.37265015]
[51.47575760 117.29900360]
[36.76398087 120.22535706]
[24.79792213 131.43899536]
[9.18421459 126.42459869]
[5.98490000 110.34055328]
[18.49115944 99.73274994]
[33.83762360 105.51358032]
[48.54940414 102.58722687]
[63.26118088 99.66087341]
[77.97296143 96.73451996]
[90.08927155 76.52239227]
[116.78595734 76.72117615]
[113.28427887 62.13562393]
[109.78260040 47.55007553]
[106.28091431 32.96452713]
[102.77923584 18.37897873]
[99.27755737 3.79342961]
[95.77587891 -10.79211903]
[92.27419281 -25.37766838]
[88.77251434 -39.96321487]
[74.69811249 -46.77828217]
[68.34432983 -61.06686401]
[72.71124268 -76.08232880]
[85.73691559 -84.73483276]
[101.27103424 -82.93892670]
[111.97885132 -71.54258728]
[112.80447388 -55.92681122]
[103.35806274 -43.46489716]
[106.85974121 -28.87934875]
[110.36142731 -14.29379940]
[113.86310577 0.29174924]
[117.36478424 14.87729836]
[120.86646271 29.46284676]
[124.36814880 44.04839706]
[127.86982727 58.63394547]
[131.37150574 73.21949005]
[144.31251526 80.80435181]
[158.74934387 76.73274994]
[173.18617249 72.66114044]
[187.62300110 68.58953094]
[202.05982971 64.51792908]
[213.10919189 52.40001678]
[229.06819153 56.17391968]
[233.51959229 71.95736694]
[221.88415527 83.51369476]
[206.13143921 78.95475769]
[191.69461060 83.02635956]
[177.25778198 87.09796906]
[162.82095337 91.16957855]
[148.38412476 95.24118042]
[140.79927063 108.18219757]
[144.30094910 122.76774597]
[147.80262756 137.35330200]
[151.30430603 151.93884277]
[154.80598450 166.52439880]
[168.98728943 172.54077148]
[176.81524658 185.60127258]
[175.46763611 200.58952332]
[165.67002869 211.77633667]
[169.17170715 226.36189270]
[183.24610901 233.17695618]
[189.59988403 247.46553040]
[185.23297119 262.48098755]
[172.20730591 271.13351440]
[156.67318726 269.33758545]
[145.96536255 257.94125366]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[2 72]
[6 68]
[7 67]
[8 66]
[9 65]
[10 64]
[12 23]
[13 22]
[14 21]
[15 20]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
