%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCCGUCCUCACCUUCUAACACAUCCCUCCAACAACUCACCCAAUCACCUCAAUACUAAUCGGCAAUUGGGUUCG\
) } def
/len { sequence length } bind def

/coor [
[72.35456848 164.71377563]
[65.02525330 177.80122375]
[57.69593048 190.88865662]
[62.22653961 206.02963257]
[54.65044785 219.89968872]
[39.46241760 224.26995850]
[25.67323685 216.54765320]
[21.46378517 201.31427002]
[29.33145142 187.60749817]
[44.60848999 183.55934143]
[51.93780899 170.47190857]
[59.26712799 157.38446045]
[52.30680847 151.74459839]
[46.11940002 145.26615906]
[40.80518341 138.05413818]
[36.45026779 130.22540283]
[33.12524033 121.90685272]
[30.88398170 113.23326874]
[29.76281357 104.34523773]
[29.77990532 95.38677979]
[30.93498039 86.50308990]
[33.20932007 77.83812714]
[36.56606674 69.53231812]
[40.95082092 61.72026825]
[46.29252243 54.52857971]
[52.50460434 48.07379532]
[59.48639297 42.46052551]
[67.12474823 37.77973938]
[75.29586792 34.10728836]
[83.86735535 31.50269318]
[92.70027924 30.00816154]
[101.65150452 29.64791489]
[110.57595825 30.42778969]
[119.32902527 32.33514786]
[127.76885223 35.33908081]
[135.75865173 39.39090347]
[143.16894531 44.42495728]
[149.87965393 50.35965729]
[155.78201294 57.09882355]
[160.78036499 64.53324127]
[164.79371643 72.54244232]
[167.75701904 80.99661255]
[169.62226868 89.75874329]
[184.61070251 89.16985321]
[199.59913635 88.58095551]
[214.58757019 87.99205780]
[229.57600403 87.40316010]
[244.56443787 86.81426239]
[259.55288696 86.22536469]
[270.24969482 74.90212250]
[285.45849609 74.51841736]
[296.18756104 84.78598022]
[311.17599487 84.19708252]
[317.20611572 70.17566681]
[328.72839355 60.16566086]
[343.45501709 56.15456390]
[358.46206665 58.93878174]
[370.76980591 67.96550751]
[377.93460083 81.44247437]
[378.53381348 96.69382477]
[372.44851685 110.69139099]
[360.88693237 120.65594482]
[346.14459229 124.60901642]
[331.14865112 121.76572418]
[318.87652588 112.69059753]
[311.76489258 99.18552399]
[296.77645874 99.77442169]
[286.88604736 110.85212708]
[271.69403076 111.66286469]
[260.14178467 101.21379852]
[245.15333557 101.80269623]
[230.16490173 102.39159393]
[215.17646790 102.98049164]
[200.18803406 103.56938934]
[185.19960022 104.15828705]
[170.21116638 104.74718475]
[163.39901733 130.54028320]
[147.47558594 151.94432068]
[124.72927094 165.88328552]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[43 76]
[44 75]
[45 74]
[46 73]
[47 72]
[48 71]
[49 70]
[52 67]
[53 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
