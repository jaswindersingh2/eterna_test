%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:45 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (11)
} def

/sequence { (\
GGAAAAAAGAUCGGAUCACAUCAUGAAACAUAGAUGAAAAGUACAGUCAAAGACGUACAGAUCGGAUCCAUACACUUCG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 12 0.006728379 ubox
1 69 0.110935716 ubox
1 71 0.007308729 ubox
1 73 0.092052510 ubox
1 75 0.142944232 ubox
1 76 0.162347292 ubox
1 77 0.018380174 ubox
1 78 0.361759403 ubox
2 11 0.005962444 ubox
2 12 0.011876332 ubox
2 68 0.105752167 ubox
2 69 0.031445778 ubox
2 71 0.007769770 ubox
2 73 0.071765629 ubox
2 75 0.186787384 ubox
2 76 0.022643913 ubox
2 77 0.358680801 ubox
2 78 0.345184433 ubox
3 11 0.011453218 ubox
3 67 0.094033884 ubox
3 71 0.021501278 ubox
3 76 0.344442212 ubox
3 77 0.344202340 ubox
4 67 0.005435953 ubox
4 71 0.037594668 ubox
4 76 0.318736362 ubox
4 77 0.016418886 ubox
5 71 0.055115659 ubox
5 76 0.019681242 ubox
5 77 0.008305405 ubox
6 71 0.160378076 ubox
6 76 0.009247141 ubox
6 77 0.007905980 ubox
7 71 0.080233209 ubox
7 76 0.008470742 ubox
7 77 0.021821323 ubox
8 71 0.081015425 ubox
8 76 0.024647089 ubox
8 77 0.006299892 ubox
9 63 0.028494164 ubox
9 67 0.005198273 ubox
9 68 0.986628179 ubox
9 69 0.071132167 ubox
9 71 0.007305740 ubox
9 73 0.017343461 ubox
9 75 0.019179763 ubox
9 78 0.005625779 ubox
10 62 0.028499377 ubox
10 67 0.992710336 ubox
10 71 0.033871503 ubox
10 77 0.005212852 ubox
11 61 0.028494348 ubox
11 65 0.005760763 ubox
11 66 0.997172919 ubox
11 70 0.034155256 ubox
12 60 0.028459729 ubox
12 64 0.009624431 ubox
12 65 0.996446824 ubox
13 19 0.003599127 ubox
13 29 0.003548086 ubox
13 63 0.009336570 ubox
13 69 0.063458594 ubox
14 62 0.004977886 ubox
14 63 0.996466653 ubox
14 68 0.063519185 ubox
15 62 0.997253491 ubox
15 67 0.063501474 ubox
16 26 0.004038324 ubox
16 37 0.003757005 ubox
16 39 0.004394889 ubox
16 61 0.997089651 ubox
16 66 0.063458198 ubox
17 25 0.004244403 ubox
17 36 0.004272387 ubox
17 60 0.996106047 ubox
17 64 0.003600532 ubox
17 65 0.063310597 ubox
18 24 0.004100378 ubox
18 35 0.004368967 ubox
18 42 0.004161909 ubox
19 25 0.013478492 ubox
19 33 0.005180590 ubox
19 36 0.969164483 ubox
19 41 0.004735589 ubox
19 64 0.013010973 ubox
20 24 0.010973295 ubox
20 31 0.004052201 ubox
20 35 0.973167959 ubox
20 62 0.011687523 ubox
21 30 0.004186891 ubox
21 32 0.003744423 ubox
21 33 0.007242031 ubox
21 34 0.973779696 ubox
21 37 0.208008502 ubox
21 38 0.009553540 ubox
21 61 0.012041085 ubox
22 33 0.973616467 ubox
22 36 0.222571173 ubox
22 60 0.011951959 ubox
23 31 0.889448292 ubox
23 35 0.222174382 ubox
24 28 0.005030552 ubox
24 30 0.897135048 ubox
24 32 0.111120943 ubox
24 33 0.016851918 ubox
24 34 0.220107642 ubox
24 37 0.003730342 ubox
25 29 0.883573693 ubox
25 31 0.099327019 ubox
26 31 0.032857679 ubox
26 35 0.004201484 ubox
27 31 0.036718966 ubox
29 33 0.006236173 ubox
29 36 0.018597711 ubox
30 35 0.015546698 ubox
35 40 0.006159997 ubox
36 63 0.006922088 ubox
37 62 0.007186516 ubox
41 54 0.003739467 ubox
41 58 0.997838187 ubox
42 53 0.003688183 ubox
42 57 0.999009267 ubox
43 56 0.998800661 ubox
44 52 0.003203643 ubox
44 55 0.992943063 ubox
45 56 0.003655310 ubox
46 54 0.993697122 ubox
46 58 0.005195191 ubox
47 51 0.006034965 ubox
47 52 0.014040075 ubox
47 53 0.993943800 ubox
47 57 0.005104751 ubox
48 52 0.985615720 ubox
48 55 0.005131446 ubox
69 79 0.021138611 ubox
70 76 0.011302713 ubox
70 77 0.030458729 ubox
71 79 0.006824153 ubox
72 76 0.007502741 ubox
72 77 0.010424361 ubox
73 79 0.040859309 ubox
75 79 0.015577160 ubox
9 68 0.9500000 lbox
10 67 0.9500000 lbox
11 66 0.9500000 lbox
12 65 0.9500000 lbox
14 63 0.9500000 lbox
15 62 0.9500000 lbox
16 61 0.9500000 lbox
17 60 0.9500000 lbox
19 36 0.9500000 lbox
20 35 0.9500000 lbox
21 34 0.9500000 lbox
22 33 0.9500000 lbox
23 31 0.9500000 lbox
24 30 0.9500000 lbox
25 29 0.9500000 lbox
41 58 0.9500000 lbox
42 57 0.9500000 lbox
43 56 0.9500000 lbox
44 55 0.9500000 lbox
46 54 0.9500000 lbox
47 53 0.9500000 lbox
48 52 0.9500000 lbox
showpage
end
%%EOF
