%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAUAUAUAUAUAAAAUAUAUAAUAAAAAUAAUAUAUGUAAAAAAACAAAAUAUAUAAUAUGCGCAUAUAUUCG\
) } def
/len { sequence length } bind def

/coor [
[121.28755951 359.71478271]
[116.55961609 345.32989502]
[116.76110077 330.18927002]
[121.87017059 315.93530273]
[131.33262634 304.11410522]
[144.12205505 296.00796509]
[140.62037659 281.42242432]
[137.11868286 266.83685303]
[133.61700439 252.25131226]
[130.11532593 237.66577148]
[126.61364746 223.08021545]
[122.82627106 208.56623840]
[118.75466919 194.12940979]
[114.68305969 179.69258118]
[110.61145782 165.25575256]
[106.53984833 150.81892395]
[102.46823883 136.38209534]
[81.39120483 131.36018372]
[66.88390350 115.26673126]
[64.06807709 93.78343201]
[73.93783569 74.49485779]
[65.60427856 62.02281189]
[57.27072906 49.55076981]
[48.93717575 37.07872391]
[40.60362244 24.60667992]
[32.27006912 12.13463593]
[23.93651390 -0.33740816]
[9.83621883 -7.51321840]
[9.19865513 -22.39417267]
[0.86510211 -34.86621475]
[-14.07415390 -41.63013840]
[-15.41656303 -57.97425079]
[-1.78117073 -67.08512878]
[12.80510139 -59.59028244]
[13.33714581 -43.19976807]
[21.67070007 -30.72772598]
[35.17492294 -24.44400024]
[36.40855789 -8.67096138]
[44.74211121 3.80108261]
[53.07566452 16.27312660]
[61.40921783 28.74517059]
[69.74277496 41.21721649]
[78.07632446 53.68925858]
[86.40988159 66.16130066]
[95.32908630 63.83466721]
[104.54673767 63.81884384]
[113.47387695 66.11485291]
[121.54009247 70.57597351]
[128.22998047 76.91717529]
[133.11608887 84.73326874]
[135.88623047 93.52484894]
[136.36337280 102.73016357]
[134.51705933 111.76102448]
[130.46524048 120.04041290]
[124.46681976 127.03929901]
[116.90506744 132.31048584]
[120.97667694 146.74731445]
[125.04828644 161.18414307]
[129.11988831 175.62097168]
[133.19149780 190.05780029]
[137.26310730 204.49462891]
[142.74121094 212.14346313]
[141.19920349 219.57853699]
[144.70088196 234.16409302]
[148.20256042 248.74963379]
[151.70423889 263.33517456]
[155.20591736 277.92074585]
[158.70759583 292.50628662]
[173.78317261 293.92260742]
[187.58097839 300.15951538]
[198.60437012 310.54043579]
[205.65759277 323.93936157]
[207.97557068 338.90283203]
[205.30685425 353.80776978]
[197.94094849 367.03735352]
[186.67683411 377.15655518]
[172.73637390 383.06774902]
[157.63169861 384.12966919]
[143.00128174 380.22720337]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 68]
[7 67]
[8 66]
[9 65]
[10 64]
[11 63]
[12 61]
[13 60]
[14 59]
[15 58]
[16 57]
[17 56]
[21 44]
[22 43]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
[29 36]
[30 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
