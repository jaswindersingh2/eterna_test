%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACUGAGCGCAAAGGGCACAGAAGUAGCCACAAAAUGAGGGUACAGUCACGGCAAAAGGCGAGACCAGUCUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[119.11758423 229.54377747]
[117.35452271 214.64775085]
[115.59146118 199.75172424]
[106.41186523 188.02209473]
[112.47349548 173.40815735]
[110.71043396 158.51213074]
[108.94737244 143.61610413]
[107.18431091 128.72007751]
[84.48522949 126.29254150]
[69.60045624 108.07022095]
[55.74226379 113.81047058]
[45.95350266 126.23989868]
[31.23410034 123.96208191]
[18.91448402 135.60954285]
[4.31179953 126.99571991]
[8.54656506 110.57917023]
[25.49384880 110.10388947]
[34.29137802 98.08503723]
[50.00201035 99.95227814]
[63.86020660 94.21202850]
[49.05886841 96.64521790]
[36.44689560 88.52498627]
[32.53587341 74.04383087]
[39.34507370 60.67839813]
[53.35889053 55.32929230]
[67.34195709 60.75827026]
[74.07498932 74.16437531]
[70.57331085 59.57883072]
[67.07163239 44.99327850]
[56.32652664 33.38064575]
[60.87892151 19.19879150]
[57.37723923 4.61324263]
[46.63213730 -6.99939299]
[51.18453217 -21.18124580]
[47.68284988 -35.76679611]
[38.10599899 -49.75680161]
[48.89813614 -62.83220291]
[64.45010376 -56.08146286]
[62.26840210 -39.26847458]
[65.77008057 -24.68292618]
[76.26472473 -14.11354733]
[71.96279144 1.11156225]
[75.46446991 15.69711113]
[85.95911407 26.26649094]
[81.65718079 41.49160004]
[85.15885925 56.07714844]
[88.66053772 70.66269684]
[117.38198090 74.90274048]
[129.60368347 100.28124237]
[144.49971008 98.51818085]
[159.39573669 96.75511932]
[172.19084167 87.44940948]
[185.73930359 93.63715363]
[200.63533020 91.87409210]
[213.43043518 82.56838226]
[226.97889709 88.75611877]
[239.78788757 78.51590729]
[254.96003723 84.73988342]
[256.88754272 101.02536011]
[243.58757019 110.61923218]
[228.74195862 103.65215302]
[217.01232910 112.83174896]
[202.39839172 106.77011871]
[187.50236511 108.53318024]
[175.77273560 117.71277618]
[161.15879822 111.65114594]
[146.26277161 113.41420746]
[131.36674500 115.17726898]
[122.08033752 126.95701599]
[123.84339905 141.85304260]
[125.60646057 156.74906921]
[127.36952209 171.64509583]
[136.67523193 184.44020081]
[130.48748779 197.98866272]
[132.25054932 212.88468933]
[134.01361084 227.78071594]
[144.25382996 240.58970642]
[138.02984619 255.76185608]
[121.74437714 257.68936157]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[5 72]
[6 71]
[7 70]
[8 69]
[10 20]
[11 19]
[13 17]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[34 40]
[35 39]
[49 68]
[50 67]
[51 66]
[53 64]
[54 63]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
