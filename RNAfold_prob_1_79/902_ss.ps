%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACCAACUGUAUUACAAAUUGAGAGAAUAGAAAUGAAAUGAUGAGAGAUAGAAGAGAAAUCAAGGGUAUAUAUUCG\
) } def
/len { sequence length } bind def

/coor [
[39.85934067 193.66308594]
[35.97953033 208.20721436]
[29.25111580 221.67248535]
[19.94962502 233.50747681]
[8.45594406 243.22756958]
[-4.75926590 250.43472290]
[-19.15485001 254.83381653]
[-34.14131927 256.24472046]
[-49.10498810 254.60961914]
[-63.43310165 249.99549866]
[-76.53893280 242.59130859]
[-87.88581085 232.70024109]
[-97.00907898 220.72732544]
[-103.53514862 207.16282654]
[-107.19679260 192.56224060]
[-107.84404755 177.52342224]
[-105.45042419 162.66221619]
[-100.11393738 148.58717346]
[-92.05311584 135.87466431]
[-81.59803772 125.04524994]
[-69.17683411 116.54239655]
[-55.29814148 110.71427917]
[-40.53029633 107.79956818]
[-25.47802162 107.91761017]
[-10.75770283 111.06357574]
[3.02787375 117.10863495]
[15.31419659 125.80525208]
[25.59814835 136.79730225]
[38.38775253 128.95982361]
[51.17735291 121.12234497]
[63.96695709 113.28486633]
[76.75656128 105.44739532]
[77.96880341 90.80445862]
[87.52626801 79.64471436]
[101.80867004 76.19537354]
[115.40596008 81.76300812]
[128.19557190 73.92552948]
[128.27934265 59.99212646]
[135.24253845 48.04928207]
[147.13757324 41.22138596]
[160.74383545 41.23168945]
[172.43939209 47.96867752]
[185.52684021 40.63935852]
[198.61427307 33.31003952]
[211.70172119 25.98072052]
[209.24061584 11.02348804]
[212.04666138 -3.87288380]
[219.78102112 -16.90958595]
[231.50971985 -26.51237297]
[245.81645203 -31.52165985]
[260.97363281 -31.33255577]
[275.15093994 -25.96788979]
[286.63641357 -16.07547569]
[294.04312134 -2.84986949]
[296.47662354 12.11187267]
[293.64312744 27.00304794]
[285.88476562 40.02547455]
[274.13839722 49.60663223]
[259.82244873 54.58954620]
[244.66564941 54.37250519]
[230.49824524 48.98172379]
[219.03103638 39.06816101]
[205.94358826 46.39748001]
[192.85615540 53.72679901]
[179.76870728 61.05611801]
[178.42956543 77.29353333]
[167.64044189 89.72047424]
[151.43103027 93.39887238]
[136.03305054 86.71513367]
[123.24343872 94.55260468]
[122.03119659 109.19554138]
[112.47373199 120.35528564]
[98.19132996 123.80462646]
[84.59403992 118.23699188]
[71.80443573 126.07447052]
[59.01483154 133.91195679]
[46.22523117 141.74943542]
[33.43562698 149.58691406]
[38.56080246 163.74026489]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[28 78]
[29 77]
[30 76]
[31 75]
[32 74]
[36 70]
[37 69]
[42 65]
[43 64]
[44 63]
[45 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
