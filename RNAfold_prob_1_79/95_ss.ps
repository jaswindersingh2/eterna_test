%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAACAAGGCUUUCGAAAGAAAGACUGGCGUUCGAAAGAACAGUUAGAAAUAACGCUGGUCCUUGCAGUGACUUCG\
) } def
/len { sequence length } bind def

/coor [
[112.06683350 207.73336792]
[97.57694244 211.61190796]
[82.58396912 211.15290833]
[68.35846710 206.39529419]
[56.10594940 197.74220276]
[46.86474228 185.92695618]
[41.41798019 171.95080566]
[40.22723389 156.99813843]
[43.39341736 142.33610535]
[50.64821625 129.20721436]
[61.37683105 118.72404480]
[74.67008209 111.77497864]
[89.40535736 108.94874573]
[74.41692352 109.53764343]
[59.42848969 110.12654114]
[44.44005203 110.71543884]
[29.45161819 111.30433655]
[15.87868500 120.50800323]
[1.24163222 113.11282349]
[0.59780478 96.72631836]
[14.60951710 88.20552063]
[28.86272049 96.31590271]
[43.85115814 95.72700500]
[58.83959198 95.13810730]
[73.82802582 94.54920959]
[88.81645966 93.96031189]
[87.78602600 88.37206268]
[89.11627960 82.01997375]
[87.93939209 67.06621552]
[86.76251221 52.11245346]
[85.58562469 37.15869141]
[84.40873718 22.20493317]
[82.93847656 7.27716208]
[81.17541504 -7.61886501]
[79.41235352 -22.51489258]
[77.64929199 -37.41091919]
[67.40908051 -50.21989822]
[73.63305664 -65.39205170]
[89.91853333 -67.31956482]
[99.51240540 -54.01957703]
[92.54532623 -39.17398071]
[94.30838013 -24.27795219]
[96.07144165 -9.38192558]
[97.83450317 5.51410103]
[101.85462189 11.95591068]
[99.36249542 21.02804565]
[100.53938293 35.98180771]
[101.71627045 50.93556595]
[102.89315796 65.88932800]
[104.07003784 80.84308624]
[108.62171936 66.55035400]
[121.58261108 58.99950790]
[136.26098633 62.08906937]
[145.07835388 74.22389221]
[143.48229980 89.13874054]
[132.29687500 99.13304138]
[117.29521179 99.04596710]
[131.15339661 104.78621674]
[145.01159668 110.52647400]
[158.86978149 116.26672363]
[172.72798157 122.00697327]
[186.51422119 114.62633514]
[201.80857849 117.88464355]
[211.38954163 130.24340820]
[210.73326111 145.86721802]
[200.14961243 157.37896729]
[184.63587952 159.34318542]
[171.51716614 150.83239746]
[166.98773193 135.86517334]
[153.12953186 130.12492371]
[139.27134705 124.38466644]
[125.41315460 118.64441681]
[111.55495453 112.90415955]
[124.39823914 120.65335846]
[134.46551514 131.77316284]
[140.90362549 145.32124329]
[143.16700745 160.14950562]
[141.06384277 175.00132751]
[134.77235413 188.61813354]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[28 50]
[29 49]
[30 48]
[31 47]
[32 46]
[33 44]
[34 43]
[35 42]
[36 41]
[57 73]
[58 72]
[59 71]
[60 70]
[61 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
