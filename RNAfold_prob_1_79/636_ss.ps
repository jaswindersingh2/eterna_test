%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCCCUCUCCUAUAAACUUCACACUUCCACUUCAAAUCCACAACUUCUCCAUCACUUCUCGGGCUUAGAUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[64.50068665 104.70581818]
[65.65347290 89.86776733]
[72.73885345 76.77983856]
[84.53298187 67.70266724]
[81.03130341 53.11711884]
[77.52962494 38.53157043]
[74.02793884 23.94602203]
[70.52626038 9.36047363]
[67.02458191 -5.22507524]
[52.12713623 -3.34643292]
[37.11344147 -3.11806417]
[22.16574860 -4.54274082]
[7.46551085 -7.60316896]
[-6.80882406 -12.26219845]
[-20.48398018 -18.46327019]
[-33.39395142 -26.13111305]
[-45.38202667 -35.17264175]
[-56.30267715 -45.47810745]
[-66.02333832 -56.92240143]
[-74.42601013 -69.36660767]
[-81.40869904 -82.65966797]
[-86.88662720 -96.64020538]
[-90.79330444 -111.13851929]
[-93.08130646 -125.97860718]
[-93.72286224 -140.98033142]
[-92.71018982 -155.96156311]
[-90.05556488 -170.74047852]
[-85.79122162 -185.13764954]
[-79.96892548 -198.97831726]
[-72.65935516 -212.09446716]
[-63.95124435 -224.32688904]
[-53.95029449 -235.52706909]
[-42.77790833 -245.55906677]
[-30.56971359 -254.30110168]
[-17.47390366 -261.64706421]
[-3.64945078 -267.50775146]
[10.73583031 -271.81201172]
[25.50731468 -274.50765991]
[40.48569107 -275.56192017]
[55.48913193 -274.96200562]
[70.33551788 -272.71520996]
[84.84461212 -268.84878540]
[98.84030151 -263.40966797]
[112.15269470 -256.46392822]
[124.62017059 -248.09580994]
[136.09140015 -238.40695190]
[146.42713928 -227.51495361]
[155.50190735 -215.55201721]
[163.20556641 -202.66337585]
[169.44456482 -189.00549316]
[174.14320374 -174.74414062]
[177.24441528 -160.05245972]
[178.71057129 -145.10877991]
[178.52388000 -130.09451294]
[176.68659973 -115.19190216]
[173.22102356 -100.58187103]
[168.16923523 -86.44176483]
[161.59255981 -72.94322968]
[153.57081604 -60.25012970]
[144.20138550 -48.51654053]
[133.59802246 -37.88490295]
[121.88941193 -28.48427582]
[109.21771240 -20.42876816]
[95.73674011 -13.81617260]
[81.61013031 -8.72675610]
[85.11180878 5.85879278]
[88.61348724 20.44434166]
[92.11517334 35.02989197]
[95.61685181 49.61544037]
[99.11853027 64.20098877]
[113.74813080 66.93437958]
[126.00304413 75.37911987]
[133.76652527 88.07656097]
[135.69758606 102.83351135]
[131.46269226 117.10103607]
[121.79331970 128.41473389]
[108.35964966 134.82043457]
[93.48203278 135.21168518]
[79.73024750 129.52088928]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 70]
[5 69]
[6 68]
[7 67]
[8 66]
[9 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
