%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAUGCCGAGACCUGUCCAGCAAAUGCUCGGACUGUCGCGUGCAGUCGGCUGACGCUGGUCGAGGCUAGCAUGUUCG\
) } def
/len { sequence length } bind def

/coor [
[95.25462341 301.10333252]
[94.66572571 286.11489868]
[94.07682800 271.12643433]
[85.84582520 258.71276855]
[93.03536224 244.61946106]
[92.44646454 229.63102722]
[91.85756683 214.64259338]
[91.26867676 199.65414429]
[82.51580048 191.06555176]
[82.05524445 178.40667725]
[90.69468689 168.59706116]
[90.69468689 153.59706116]
[87.45958710 146.72738647]
[91.00075531 138.01106262]
[91.58965302 123.02262115]
[92.17855072 108.03418732]
[92.47305298 93.03707886]
[84.73575592 79.23690796]
[92.47305298 66.50963593]
[92.47305298 51.50963593]
[92.47305298 36.50963593]
[92.47305298 21.50963402]
[92.47305298 6.50963449]
[79.27854156 -1.22678256]
[71.77750397 -14.44159031]
[71.89733887 -29.53635788]
[79.50572968 -42.45797729]
[92.47305298 -49.78697205]
[92.47305298 -64.78697205]
[92.47305298 -79.78697205]
[89.30534363 -86.08384705]
[89.91354370 -92.07706451]
[93.10819244 -95.95229340]
[94.28507996 -110.90605164]
[95.46196747 -125.85981750]
[96.63884735 -140.81356812]
[97.81573486 -155.76733398]
[98.99262238 -170.72109985]
[89.70879364 -183.80505371]
[94.28814697 -199.18064880]
[109.21779633 -205.05305481]
[123.04499817 -196.91743469]
[125.16269684 -181.01477051]
[113.94638062 -169.54420471]
[112.76950073 -154.59045410]
[111.59261322 -139.63668823]
[110.41572571 -124.68292999]
[109.23883820 -109.72917175]
[108.06195068 -94.77540588]
[107.47305298 -79.78697205]
[107.47305298 -64.78697205]
[107.47305298 -49.78697205]
[120.44037628 -42.45797729]
[128.04876709 -29.53635788]
[128.16860962 -14.44159031]
[120.66756439 -1.22678256]
[107.47305298 6.50963449]
[107.47305298 21.50963402]
[107.47305298 36.50963593]
[107.47305298 51.50963593]
[107.47305298 66.50963593]
[115.21035767 79.23690796]
[107.47305298 93.03707886]
[110.69170380 100.68133545]
[107.16698456 108.62308502]
[106.57808685 123.61151886]
[105.98918915 138.59996033]
[105.69468689 153.59706116]
[105.69468689 168.59706116]
[115.30093384 184.16052246]
[106.25711060 199.06524658]
[106.84600830 214.05369568]
[107.43490601 229.04212952]
[108.02380371 244.03056335]
[116.29692841 257.51632690]
[109.06526184 270.53756714]
[109.65415955 285.52600098]
[110.24305725 300.51443481]
[113.18825531 319.67102051]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[5 74]
[6 73]
[7 72]
[8 71]
[11 69]
[12 68]
[14 67]
[15 66]
[16 65]
[17 63]
[19 61]
[20 60]
[21 59]
[22 58]
[23 57]
[28 52]
[29 51]
[30 50]
[33 49]
[34 48]
[35 47]
[36 46]
[37 45]
[38 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
