%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGACGCACGAAAAAGGCAAAAGGCACCCUAACGCGGUAAGCCAGGCGAAAGACCAACCAAAAACGAUGGGUUCG\
) } def
/len { sequence length } bind def

/coor [
[77.77968597 368.14648438]
[62.43436432 371.15563965]
[48.76997757 363.55178833]
[43.23843002 348.92523193]
[48.45154953 334.18218994]
[61.94786453 326.28387451]
[64.29438019 311.46853638]
[66.64089966 296.65322876]
[68.98741913 281.83789062]
[63.33636093 268.05694580]
[73.13722229 255.63705444]
[75.48374176 240.82173157]
[77.53892517 225.96318054]
[79.30198669 211.06715393]
[66.66197205 203.14910889]
[58.68046951 190.47610474]
[56.98587799 175.53323364]
[61.96753693 161.27828979]
[72.68792725 150.55633545]
[87.05859375 145.53187561]
[88.82165527 130.63584900]
[78.07776642 124.14386749]
[70.58201599 114.07456207]
[67.44504547 101.91986847]
[69.13164520 89.48071289]
[75.39191437 78.60016632]
[85.29828644 70.89037323]
[81.79660034 56.30482483]
[78.29492188 41.71927643]
[74.22331238 27.28244781]
[69.58805847 13.01659966]
[64.95280457 -1.24924791]
[60.03835297 -15.42133904]
[47.09087753 -25.48587418]
[49.60101318 -41.69177628]
[64.98654938 -47.36780167]
[77.42016602 -36.67494202]
[74.11122131 -20.61309433]
[79.52407074 -15.28774929]
[79.21865082 -5.88450289]
[83.85390472 8.38134480]
[88.48916626 22.64719200]
[92.50019836 25.66957283]
[94.49068451 31.35522079]
[92.88047028 38.21759415]
[96.38214874 52.80314636]
[99.88383484 67.38869476]
[113.65312958 70.38407898]
[124.87327576 78.90898895]
[138.23837280 72.09912872]
[151.46719360 65.02817535]
[159.38238525 50.66566467]
[175.78143311 50.60973740]
[183.79441833 64.91793060]
[175.17823792 78.87120056]
[158.79650879 78.11561584]
[154.38348389 84.29489136]
[145.04823303 85.46422577]
[131.68313599 92.27408600]
[130.89324951 110.44595337]
[120.49298096 125.36825562]
[103.71768188 132.39891052]
[101.95462799 147.29493713]
[114.75529480 155.53533936]
[122.67649078 168.46366882]
[124.19275665 183.48768616]
[119.05664062 197.62208557]
[108.33721161 208.08169556]
[94.19801331 212.83021545]
[92.43495178 227.72624207]
[94.56898499 236.88922119]
[90.29906464 243.16824341]
[87.95254517 257.98358154]
[93.43576813 272.82421875]
[83.80274200 284.18441772]
[81.45622253 298.99972534]
[79.10971069 313.81506348]
[76.76319122 328.63040161]
[87.15823364 340.31274414]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 78]
[7 77]
[8 76]
[9 75]
[11 73]
[12 72]
[13 70]
[14 69]
[20 63]
[21 62]
[27 47]
[28 46]
[29 45]
[30 42]
[31 41]
[32 40]
[33 38]
[49 59]
[50 58]
[51 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
