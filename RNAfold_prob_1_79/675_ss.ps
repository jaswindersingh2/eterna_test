%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCUCAACGAUAACCACAACAAAUCGAAGCACAACAAAACAAAGUGCAAGAGCAACAAAAACAAUGUGAGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[79.22595978 331.21395874]
[68.55950165 319.55197144]
[69.34690094 303.76730347]
[81.12101746 293.22473145]
[81.70991516 278.23629761]
[82.29881287 263.24786377]
[82.88771057 248.25942993]
[83.47660828 233.27099609]
[84.06550598 218.28256226]
[84.65440369 203.29412842]
[81.69149780 196.30274963]
[85.57213593 187.73216248]
[86.74902344 172.77839661]
[72.65628815 168.73576355]
[59.63760376 161.99322510]
[48.20432663 152.81562805]
[38.80554962 141.56347656]
[31.81045723 128.67872620]
[27.49380875 114.66749573]
[26.02516174 100.08013916]
[27.46220207 85.48963165]
[31.74848175 71.46907806]
[38.71564102 58.56920624]
[48.09001541 47.29671097]
[59.50338364 38.09436798]
[72.50743103 31.32364464]
[86.59137726 27.25048447]
[101.20199585 26.03488350]
[102.96505737 11.13885784]
[93.37454224 1.45697272]
[91.22868347 -11.80207729]
[97.10172272 -23.66301346]
[108.60164642 -29.80879593]
[110.94815826 -44.62412262]
[113.29467773 -59.43944550]
[115.64119720 -74.25476837]
[103.33038330 -83.34885406]
[96.66636658 -97.12744904]
[97.18048859 -112.42431641]
[104.75461578 -125.72436523]
[117.64826202 -133.97132874]
[132.89855957 -135.27012634]
[147.00111389 -129.32229614]
[156.71525574 -117.49460602]
[159.80873108 -102.50497437]
[155.57070923 -87.79791260]
[144.97503662 -76.75299072]
[130.45652771 -71.90825653]
[128.11000061 -57.09292984]
[125.76348877 -42.27760315]
[123.41696930 -27.46227837]
[133.86056519 -14.43544197]
[131.73707581 2.46214676]
[117.86108398 12.90191841]
[116.09802246 27.79794502]
[130.59947205 32.65049362]
[143.79335022 40.38098907]
[155.11585999 50.65909958]
[164.08320618 63.04561615]
[170.31216431 77.01125336]
[173.53659058 91.95922852]
[173.61866760 107.25080872]
[170.55491638 122.23254395]
[164.47625732 136.26425171]
[155.64242554 148.74632263]
[144.43089294 159.14540100]
[131.32077026 167.01710510]
[116.87226868 172.02507019]
[101.70278168 173.95527649]
[100.52590179 188.90904236]
[99.64283752 203.88302612]
[99.05393982 218.87145996]
[98.46504211 233.85989380]
[97.87614441 248.84832764]
[97.28724670 263.83676147]
[96.69834900 278.82519531]
[96.10945129 293.81362915]
[107.02011108 305.24749756]
[106.56663513 321.04528809]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 77]
[5 76]
[6 75]
[7 74]
[8 73]
[9 72]
[10 71]
[12 70]
[13 69]
[28 55]
[29 54]
[33 51]
[34 50]
[35 49]
[36 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
