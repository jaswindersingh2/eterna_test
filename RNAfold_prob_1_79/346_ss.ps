%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGUAAUAUGUAAGUCAAAAGAAAUUGAUAUAGAAAACUAUAUCAAUUUCGACUUACAUAUUACGAUCUAGUUCG\
) } def
/len { sequence length } bind def

/coor [
[104.34176636 150.21220398]
[100.84008789 135.62664795]
[97.33840942 121.04110718]
[85.69418335 115.65744781]
[79.28398895 104.54523468]
[80.45312500 91.77006531]
[88.77382660 82.00596619]
[85.84747314 67.29418182]
[82.92111969 52.58240509]
[79.99476624 37.87062836]
[77.06841278 23.15884781]
[74.14205933 8.44706821]
[71.21569824 -6.26471090]
[68.28934479 -20.97649002]
[65.36299133 -35.68827057]
[62.43663788 -50.40004730]
[59.51028061 -65.11182404]
[56.58392715 -79.82360840]
[53.65757370 -94.53538513]
[50.73121643 -109.24716187]
[47.27595520 -112.82995605]
[45.51074219 -116.95069885]
[45.37939453 -120.94487762]
[46.59295273 -124.25024414]
[48.69150162 -126.48065186]
[48.10260391 -141.46908569]
[47.51370621 -156.45751953]
[46.92480850 -171.44595337]
[46.33591080 -186.43438721]
[45.74701309 -201.42282104]
[45.15811539 -216.41127014]
[44.56921768 -231.39970398]
[43.98032379 -246.38813782]
[43.39142609 -261.37655640]
[42.80252838 -276.36499023]
[42.21363068 -291.35345459]
[41.62473297 -306.34188843]
[32.42106247 -319.91479492]
[39.81624603 -334.55184937]
[56.20275116 -335.19567871]
[64.72354889 -321.18399048]
[56.61317062 -306.93078613]
[57.20206451 -291.94235229]
[57.79096222 -276.95388794]
[58.37985992 -261.96545410]
[58.96875763 -246.97703552]
[59.55765533 -231.98860168]
[60.14655304 -217.00015259]
[60.73545074 -202.01171875]
[61.32434845 -187.02328491]
[61.91324234 -172.03485107]
[62.50214005 -157.04641724]
[63.09103775 -142.05798340]
[63.67993546 -127.06954956]
[65.44299316 -112.17352295]
[68.36935425 -97.46173859]
[71.29570770 -82.74996185]
[74.22206116 -68.03818512]
[77.14841461 -53.32640457]
[80.07476807 -38.61462402]
[83.00112915 -23.90284538]
[85.92748260 -9.19106579]
[88.85383606 5.52071381]
[91.78018951 20.23249245]
[94.70654297 34.94427109]
[97.63289642 49.65605164]
[100.55925751 64.36782837]
[103.48561096 79.07961273]
[117.35261536 87.80578613]
[120.86388397 103.80924988]
[111.92395782 117.53942871]
[115.42563629 132.12496948]
[118.92731476 146.71052551]
[133.00172424 153.52558899]
[139.35549927 167.81416321]
[134.98858643 182.82963562]
[121.96292114 191.48213196]
[106.42880249 189.68623352]
[95.72097778 178.28988647]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[2 72]
[3 71]
[7 68]
[8 67]
[9 66]
[10 65]
[11 64]
[12 63]
[13 62]
[14 61]
[15 60]
[16 59]
[17 58]
[18 57]
[19 56]
[20 55]
[25 54]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
