%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAACGUCGCGUCGGCGCGGCUUUGCGCUUUUGCAGCUGCGGCAGCGGUUCGCGUUCGAAAAAACGCGCGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[120.13907623 230.54702759]
[105.73176575 234.72187805]
[90.73520660 234.40054321]
[76.51994324 229.61241150]
[64.38510895 220.79505920]
[55.43970871 208.75430298]
[50.50126266 194.59054565]
[50.02110291 179.59823608]
[54.04310608 165.14750671]
[62.19969940 152.55902100]
[73.74545288 142.98324585]
[87.62519836 137.29530334]
[102.57046509 136.01502991]
[117.21098328 139.25770569]
[108.87743378 126.78565979]
[100.54387665 114.31361389]
[88.09007263 107.95795441]
[86.98407745 94.01993561]
[72.88378143 86.84413147]
[72.24621582 71.96317291]
[63.91266632 59.49113083]
[55.57911301 47.01908493]
[47.24555969 34.54704285]
[38.91200638 22.07499695]
[30.57845116 9.60295296]
[22.24489784 -2.86909103]
[16.11268616 -6.34486055]
[13.28873062 -11.66594124]
[13.79202271 -16.66292763]
[6.46270466 -29.75036812]
[-8.81433487 -33.79853058]
[-16.68200302 -47.50529099]
[-12.47254944 -62.73867798]
[1.31662941 -70.46099091]
[16.50465965 -66.09071350]
[24.08075142 -52.22066116]
[19.55014420 -37.07968521]
[26.87946320 -23.99224663]
[34.71694183 -11.20264435]
[43.05049515 1.26939964]
[51.38404846 13.74144363]
[59.71760178 26.21348763]
[68.05115509 38.68553162]
[76.38471222 51.15757751]
[84.71826172 63.62961960]
[98.22248840 69.91334534]
[99.45612335 85.68638611]
[111.90992737 92.04204559]
[113.01592255 105.98006439]
[121.34947968 118.45210266]
[129.68302917 130.92414856]
[141.81828308 139.74093628]
[156.25511169 143.81253052]
[171.63737488 140.11164856]
[181.78659058 151.01315308]
[196.22341919 155.08476257]
[210.66024780 159.15637207]
[225.09707642 163.22798157]
[239.53390503 167.29959106]
[253.97073364 171.37118530]
[267.63571167 163.43116760]
[282.89114380 167.56004333]
[290.68624878 181.30819702]
[286.39630127 196.51911926]
[272.56649780 204.16842651]
[257.40179443 199.71792603]
[249.89912415 185.80801392]
[235.46229553 181.73641968]
[221.02546692 177.66481018]
[206.58863831 173.59320068]
[192.15180969 169.52159119]
[177.71498108 165.44998169]
[163.36534119 169.44209290]
[152.18350220 158.24935913]
[137.74667358 154.17776489]
[145.35656738 167.10406494]
[148.75590515 181.71380615]
[147.63400269 196.67179871]
[142.09339905 210.61100769]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 51]
[15 50]
[16 49]
[18 47]
[20 45]
[21 44]
[22 43]
[23 42]
[24 41]
[25 40]
[26 39]
[29 38]
[30 37]
[52 75]
[53 74]
[55 72]
[56 71]
[57 70]
[58 69]
[59 68]
[60 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
