%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCGCGCGGCGCAAAAGCGAAAAGCGCGCGGCGGAAACGCGGCGCGAGCGCGCGGCGCGAAGACGCCUGGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[91.77018738 172.42221069]
[81.58500671 161.41030884]
[76.20406342 147.40869141]
[76.39309692 132.40988159]
[82.12520599 118.54830933]
[92.58383942 107.79716492]
[77.59540558 108.38606262]
[62.60696793 108.97496033]
[47.61853409 109.56385803]
[32.63009644 110.15275574]
[17.64166260 110.74165344]
[5.59215403 125.08278656]
[-12.78548145 126.31933594]
[-26.18560219 114.14125061]
[-41.08162689 115.90430450]
[-55.97765350 117.66736603]
[-68.78663635 127.90758514]
[-83.95878601 121.68360901]
[-85.88629913 105.39813232]
[-72.58631134 95.80426025]
[-57.74071503 102.77133942]
[-42.84468842 101.00827789]
[-27.94866180 99.24522400]
[-22.82163239 88.70809174]
[-13.07414722 81.98735809]
[-1.16040885 80.92039490]
[9.84772110 85.90236664]
[17.05276489 95.75321960]
[32.04119873 95.16432190]
[47.02963638 94.57542419]
[62.01807022 93.98652649]
[77.00650787 93.39762878]
[91.99494171 92.80873108]
[106.26078796 88.17347717]
[118.73283386 79.83992767]
[131.20487976 71.50637054]
[143.67692566 63.17281723]
[142.77903748 47.90386200]
[149.59939575 34.32521820]
[162.21681213 26.03865242]
[177.18774414 25.18593407]
[190.48583984 31.89609909]
[202.95788574 23.56254387]
[215.42993164 15.22899151]
[227.90197754 6.89543772]
[235.07778931 -7.20485735]
[249.95874023 -7.84242058]
[262.43078613 -16.17597389]
[274.90283203 -24.50952721]
[287.37487793 -32.84308243]
[294.13879395 -47.78233719]
[310.48291016 -49.12474823]
[319.59378052 -35.48935318]
[312.09893799 -20.90308189]
[295.70843506 -20.37103653]
[283.23638916 -12.03748322]
[270.76434326 -3.70392990]
[258.29229736 4.62962341]
[252.00856018 18.13384628]
[236.23553467 19.36748123]
[223.76348877 27.70103455]
[211.29144287 36.03458786]
[198.81939697 44.36814117]
[199.92982483 59.22184753]
[193.41288757 72.72686768]
[180.92861938 81.21270752]
[165.77354431 82.31757355]
[152.01048279 75.64485931]
[139.53843689 83.97841644]
[127.06639099 92.31196594]
[114.59434509 100.64552307]
[129.37586975 103.19630432]
[142.16065979 111.04162598]
[151.12936401 123.06503296]
[155.00567627 137.55552673]
[153.23794556 152.45100403]
[146.07775879 165.63172913]
[134.54405212 175.22201538]
[120.27814484 179.85708618]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 33]
[7 32]
[8 31]
[9 30]
[10 29]
[11 28]
[14 23]
[15 22]
[16 21]
[34 71]
[35 70]
[36 69]
[37 68]
[42 63]
[43 62]
[44 61]
[45 60]
[47 58]
[48 57]
[49 56]
[50 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
