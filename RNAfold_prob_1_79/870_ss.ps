%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGAAGGACGAGAAAGCCGAAAGCGCGCGGAGACAGCGAACGCACGCGAAAGACGGACCAAAAAGGGUGGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[80.73603058 224.83409119]
[74.22418976 238.46392822]
[64.13512421 249.70614624]
[51.28670883 257.64938354]
[36.72051620 261.64971924]
[21.61735535 261.38284302]
[7.20157337 256.87042236]
[-5.35820580 248.47825623]
[-15.04381847 236.88664246]
[-21.07009315 223.03526306]
[-22.94850922 208.04698181]
[-20.52679253 193.13685608]
[-14.00125694 179.51356506]
[-3.90090203 168.28149414]
[8.95548344 160.35116577]
[23.52569008 156.36546326]
[38.62857437 156.64750671]
[53.03981400 161.17440796]
[61.37336731 148.70236206]
[69.70692444 136.23031616]
[78.04047394 123.75827026]
[86.37403107 111.28622437]
[83.52021790 105.46638489]
[82.98993683 99.12851715]
[84.76775360 93.14904022]
[88.52503204 88.32285309]
[93.67656708 85.25765991]
[92.49967957 70.30389404]
[91.32279205 55.35013580]
[82.52659607 42.19956589]
[89.24147797 28.90446663]
[88.06459045 13.95070744]
[86.88770294 -1.00305271]
[72.79406738 -6.97196579]
[63.09762955 -18.81416702]
[60.02656555 -33.80840302]
[64.28658295 -48.50911331]
[74.89876556 -59.53817749]
[89.42449951 -64.36119843]
[104.52588654 -61.86988068]
[116.73274231 -52.63671494]
[123.24000549 -38.78340912]
[122.55236816 -23.49335670]
[114.82784271 -10.28009605]
[101.84146118 -2.17993903]
[103.01834869 12.77382088]
[104.19523621 27.72758102]
[112.90725708 39.80855560]
[106.27655792 54.17324829]
[107.45344543 69.12700653]
[108.63032532 84.08077240]
[110.40952301 69.18666077]
[119.65451050 57.37437439]
[133.68482971 52.06872177]
[148.43258667 54.80801010]
[159.62185669 64.79801941]
[164.00846863 79.14227295]
[160.32055664 93.68185425]
[149.62741089 104.20120239]
[135.02935791 107.65036011]
[120.76094055 103.03065491]
[133.84837341 110.35997772]
[146.93582153 117.68929291]
[162.07679749 113.15869141]
[175.94685364 120.73477936]
[180.31712341 135.92280579]
[172.59481812 149.71199036]
[157.36141968 153.92144775]
[143.65466309 146.05377197]
[139.60650635 130.77673340]
[126.51906586 123.44741821]
[113.43162537 116.11809540]
[98.84607697 119.61978149]
[90.51251984 132.09182739]
[82.17896271 144.56387329]
[73.84541321 157.03590393]
[65.51185608 169.50794983]
[75.20911407 181.08984375]
[81.24929810 194.93515015]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 77]
[19 76]
[20 75]
[21 74]
[22 73]
[27 51]
[28 50]
[29 49]
[31 47]
[32 46]
[33 45]
[61 72]
[62 71]
[63 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
