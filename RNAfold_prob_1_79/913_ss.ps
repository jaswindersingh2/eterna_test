%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGUACGCGACGAAGCGAAAGCAGGGAAACCAAACGAUCGAAAGUACAAGGGAAACCACGCCUUAGUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[121.90381622 138.58972168]
[107.59834290 143.71737671]
[92.40165710 143.71737671]
[78.09618378 138.58972168]
[66.35983276 128.93583679]
[58.56916809 115.88803864]
[43.85739136 118.81439209]
[40.04487228 131.03656006]
[31.36682320 140.34994507]
[19.58036041 144.96174622]
[7.03211641 144.02182007]
[-3.80891275 137.77865601]
[-10.83717251 127.51793671]
[-25.73320007 129.28099060]
[-40.62922668 131.04405212]
[-50.21550751 143.60903931]
[-65.88973236 145.63246155]
[-78.35266113 135.91386414]
[-80.21025085 120.21913147]
[-70.36044312 107.85964966]
[-54.64693832 106.16809082]
[-42.39228821 116.14803314]
[-27.49625969 114.38497162]
[-12.60023403 112.62191010]
[-4.90787840 96.96528625]
[10.68695736 88.81101990]
[28.23798561 91.47341156]
[40.93103409 104.10261536]
[55.64281464 101.17626190]
[60.46356583 79.85517883]
[74.87911224 63.42289352]
[68.59922028 49.80074692]
[54.90200043 40.78308487]
[56.13290024 24.43019676]
[71.02567291 17.56453323]
[84.25991058 27.24890137]
[82.22136688 43.52085114]
[88.50125885 57.14299774]
[98.68226624 55.64678955]
[108.93414307 56.53593826]
[118.70552826 59.76261902]
[127.47091675 65.15330505]
[134.75889587 72.41807556]
[140.17750549 81.16622925]
[143.43534851 90.92726898]
[144.35719299 101.17626190]
[159.06896973 104.10261536]
[173.78074646 107.02896881]
[188.49252319 109.95532227]
[197.79469299 108.54679108]
[203.71934509 113.29618835]
[213.06964111 112.25394440]
[218.80325317 117.23228455]
[233.24008179 121.30389404]
[248.62234497 117.60301208]
[258.77154541 128.50451660]
[273.20837402 132.57612610]
[287.64520264 136.64772034]
[302.08203125 140.71932983]
[314.18402100 131.00741577]
[329.68484497 130.29730225]
[342.62411499 138.86206055]
[348.02642822 153.40837097]
[343.81445312 168.34284973]
[331.60781860 177.92291260]
[316.10021973 178.46482849]
[303.25460815 169.76020813]
[298.01043701 155.15615845]
[283.57360840 151.08454895]
[269.13677979 147.01295471]
[254.69995117 142.94134521]
[240.35031128 146.93345642]
[229.16847229 135.74072266]
[214.73164368 131.66911316]
[200.21765137 127.88173676]
[185.56616211 124.66710663]
[170.85438538 121.74074554]
[156.14260864 118.81439209]
[141.43083191 115.88803864]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 29]
[7 28]
[13 24]
[14 23]
[15 22]
[31 38]
[32 37]
[46 79]
[47 78]
[48 77]
[49 76]
[51 75]
[53 74]
[54 73]
[56 71]
[57 70]
[58 69]
[59 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
