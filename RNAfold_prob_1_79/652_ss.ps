%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCGCAAAAAAUAAAUAAAAUAAAUAAAAAUAAAAAAUAAUAAAAAAAAAAAAAAAAAAAGUGCCGGCGGGUUCG\
) } def
/len { sequence length } bind def

/coor [
[46.78368759 115.90774536]
[32.43454742 120.31532288]
[17.73993111 123.38011169]
[2.82521653 125.07596588]
[-12.18234921 125.38842010]
[-27.15472221 124.31479645]
[-41.96416473 121.86426544]
[-56.48431778 118.05772400]
[-70.59130859 112.92766571]
[-84.16476440 106.51783752]
[-97.08889771 98.88294983]
[-109.25342560 90.08812714]
[-120.55456543 80.20841217]
[-130.89590454 69.32808685]
[-140.18920898 57.53999329]
[-148.35517883 44.94469833]
[-155.32417297 31.64966583]
[-161.03669739 17.76832581]
[-165.44404602 3.41910911]
[-168.50859070 -11.27555656]
[-170.20419312 -26.19029999]
[-170.51638794 -41.19787216]
[-169.44252014 -56.17022705]
[-166.99172974 -70.97962952]
[-163.18495178 -85.49971771]
[-158.05465698 -99.60662079]
[-151.64460754 -113.17997742]
[-144.00950623 -126.10397339]
[-135.21447754 -138.26835632]
[-125.33457184 -149.56933594]
[-114.45407867 -159.91049194]
[-102.66583252 -169.20359802]
[-90.07040405 -177.36936951]
[-76.77525330 -184.33813477]
[-62.89381790 -190.05043030]
[-48.54452515 -194.45753479]
[-33.84981155 -197.52183533]
[-18.93503761 -199.21719360]
[-3.92746258 -199.52912903]
[11.04487514 -198.45501709]
[25.85423470 -196.00398254]
[40.37426376 -192.19696045]
[54.48107910 -187.06643677]
[68.05432892 -180.65615845]
[80.97820282 -173.02084351]
[93.14243317 -164.22561646]
[104.44324493 -154.34552002]
[114.78422546 -143.46484375]
[124.07713318 -131.67645264]
[132.24269104 -119.08087921]
[139.21122742 -105.78561401]
[144.92330933 -91.90408325]
[149.33016968 -77.55471802]
[152.39422607 -62.85995102]
[154.08932495 -47.94515228]
[154.40103149 -32.93757248]
[153.32666016 -17.96525192]
[150.87538147 -3.15593314]
[147.06811523 11.36403179]
[141.93734741 25.47076416]
[135.52685547 39.04390335]
[127.89131165 51.96764755]
[119.09588623 64.13173676]
[109.21559906 75.43238831]
[98.33476257 85.77317810]
[111.24883270 91.13213348]
[113.44499207 104.94040680]
[122.73139954 116.72016144]
[132.01780701 128.49992371]
[147.44169617 134.07087708]
[150.06231689 150.25927734]
[137.18379211 160.41188049]
[122.05444336 154.08456421]
[120.23805237 137.78633118]
[110.95164490 126.00657654]
[101.66523743 114.22682190]
[88.75116730 108.86786652]
[86.55500793 95.05959320]
[73.95985413 103.22577667]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[65 78]
[67 76]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
