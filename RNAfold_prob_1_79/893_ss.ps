%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGAUCGCACACAAGAGAAAUCAGAGAAAUCAAAGUAGUGAAAGAUCAAGGAAAACCAAGCACCCAUUUUCG\
) } def
/len { sequence length } bind def

/coor [
[116.61518860 195.45094299]
[112.54357910 181.01411438]
[100.40101624 176.26258850]
[93.17457581 165.17417908]
[93.74713135 151.75480652]
[102.13318634 141.01278687]
[98.63150787 126.42724609]
[81.45600128 118.87834930]
[73.60142517 101.84046173]
[79.01580048 83.87748718]
[70.19902039 71.74223328]
[61.38224411 59.60697937]
[52.56546402 47.47172546]
[37.16127777 47.34026337]
[24.93115997 38.26956558]
[20.44042587 23.90651131]
[25.21123886 9.82186222]
[16.39445877 -2.31339216]
[7.57768059 -14.44864750]
[-6.32518864 -8.63427353]
[-21.19429016 -6.18344450]
[-36.22774887 -7.22833109]
[-50.61483383 -11.71258354]
[-63.57966614 -19.39437294]
[-74.42306519 -29.85942650]
[-82.56026459 -42.54338074]
[-87.55243683 -56.76220703]
[-89.13035583 -71.74909973]
[-87.20892334 -86.69583130]
[-81.89176941 -100.79634857]
[-73.46563721 -113.29022217]
[-62.38492966 -123.50368500]
[-49.24723053 -130.88592529]
[-34.76102829 -135.03883362]
[-19.70754623 -135.73844910]
[-4.89860439 -132.94703674]
[8.86717224 -126.81514740]
[20.84741211 -117.67345428]
[30.39603806 -106.01496124]
[36.99810028 -92.46839905]
[40.29756165 -77.76430511]
[40.11648560 -62.69566727]
[36.46463776 -48.07510757]
[29.53895760 -34.69110107]
[19.71293640 -23.26542664]
[28.52971458 -11.13017082]
[37.34649277 1.00508380]
[52.21605301 0.82016724]
[64.48841858 9.52953720]
[69.33584595 23.96407127]
[64.70072174 38.65494537]
[73.51749420 50.79019928]
[82.33427429 62.92545319]
[91.15105438 75.06070709]
[105.60941315 74.13871002]
[118.38645172 80.96817780]
[125.65247345 93.50209808]
[140.64091492 94.09099579]
[154.89411926 85.98062134]
[168.90582275 94.50141907]
[168.26199341 110.88792419]
[153.62493896 118.28310394]
[140.05201721 109.07943726]
[125.06357574 108.49053955]
[122.32132721 114.21373749]
[118.29530334 119.11946106]
[113.21705627 122.92556763]
[116.71873474 137.51110840]
[131.72560120 146.24757385]
[135.82048035 162.77844238]
[126.98040771 176.94250488]
[131.05201721 191.37933350]
[145.65606689 196.62350464]
[154.36068726 209.46910095]
[153.81877136 224.97671509]
[144.23870850 237.18334961]
[129.30421448 241.39530945]
[114.75791931 235.99301147]
[106.19316101 223.05374146]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[6 68]
[7 67]
[10 54]
[11 53]
[12 52]
[13 51]
[17 47]
[18 46]
[19 45]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
