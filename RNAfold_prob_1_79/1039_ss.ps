%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACGCGUAACGCAACCAGUAUCUGGAACCCUCAACGAGGGAAGGUCAUAGACCACGGCACAGCCAGGUCUGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 196.60386658]
[92.50000000 180.76473999]
[92.50000000 165.76473999]
[92.50000000 150.76473999]
[83.03823853 148.43147278]
[74.18820190 144.35154724]
[66.26905060 138.67210388]
[54.86296082 148.41383362]
[43.45687103 158.15554810]
[35.33948517 173.03991699]
[18.78968811 169.36015320]
[17.74419594 152.43847656]
[33.71514893 146.74945068]
[45.12123871 137.00773621]
[56.52732849 127.26601410]
[51.68729782 117.29714966]
[49.10032272 106.52163696]
[48.88705444 95.44197845]
[34.30150604 91.94029999]
[19.71595764 88.43862152]
[5.13040829 84.93694305]
[-11.68257713 87.11864471]
[-18.43331909 71.56667328]
[-5.35791731 60.77453995]
[8.63208866 70.35139465]
[23.21763802 73.85307312]
[37.80318451 77.35475159]
[52.38873672 80.85643005]
[59.18040466 68.90225983]
[68.90225983 59.18040466]
[80.85643005 52.38873672]
[77.35475159 37.80318451]
[73.85307312 23.21763802]
[70.35139465 8.63208866]
[66.84970856 -5.95346022]
[57.27286148 -19.94346619]
[68.06499481 -33.01886749]
[83.61696625 -26.26812553]
[81.43525696 -9.45514011]
[84.93694305 5.13040829]
[88.43862152 19.71595764]
[91.94029999 34.30150604]
[95.44197845 48.88705444]
[106.38432312 49.08292007]
[117.03627777 51.59469223]
[126.91336060 56.30812836]
[135.56631470 63.00883865]
[142.60157776 71.39205170]
[147.69914246 81.07646942]
[150.62718201 91.62160492]
[151.25248718 102.54782104]
[165.96426392 105.47417450]
[180.67604065 108.40052795]
[195.38781738 111.32688141]
[210.09960938 114.25324249]
[224.81138611 117.17959595]
[236.11798096 110.61991882]
[248.44375610 113.54125214]
[255.15972900 123.80149078]
[269.74526978 127.30316925]
[284.33084106 130.80485535]
[301.14382935 128.62313843]
[307.89456177 144.17510986]
[294.81915283 154.96725464]
[280.82916260 145.39039612]
[266.24359131 141.88871765]
[251.65805054 138.38703918]
[235.27536011 144.34931946]
[221.88502502 131.89137268]
[207.17324829 128.96501160]
[192.46147156 126.03866577]
[177.74969482 123.11231232]
[163.03790283 120.18595123]
[148.32612610 117.25959778]
[132.55438232 139.66763306]
[107.50000000 150.76473999]
[107.50000000 165.76473999]
[107.50000000 180.76473999]
[113.54634094 196.60386658]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[7 15]
[8 14]
[9 13]
[18 28]
[19 27]
[20 26]
[21 25]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[51 74]
[52 73]
[53 72]
[54 71]
[55 70]
[56 69]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
