%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAACUUGACAAACAAGCAAAAGCAGGAAAACCAAAGUAUUGAAACAAGAACGAAAACGAAGCAUGGCUAUUCG\
) } def
/len { sequence length } bind def

/coor [
[99.42902374 276.50268555]
[98.84012604 261.51425171]
[98.25122833 246.52581787]
[90.02022552 234.11212158]
[97.20976257 220.01882935]
[96.62086487 205.03039551]
[96.03197479 190.04196167]
[63.21021652 182.27885437]
[35.54025650 162.99397278]
[16.89681816 134.88783264]
[2.63097143 139.52308655]
[-11.63487625 144.15834045]
[-25.90072441 148.79359436]
[-34.43595886 162.37774658]
[-50.39360428 164.03096008]
[-61.53231812 152.48503113]
[-59.30743790 136.59700012]
[-45.42569733 128.55480957]
[-30.53597832 134.52774048]
[-16.27013206 129.89248657]
[-2.00428367 125.25723267]
[12.26156425 120.62197876]
[10.21877193 107.91393280]
[10.00698948 95.04447937]
[11.63053417 82.27610016]
[15.05629635 69.86917877]
[20.21441078 58.07675171]
[26.99968147 47.13930893]
[35.27373123 37.27991486]
[44.86781311 28.69964218]
[55.58626938 21.57347679]
[49.30637360 7.95132923]
[35.60915375 -1.06633413]
[36.84005356 -17.41922188]
[51.73282623 -24.28488350]
[64.96706390 -14.60051727]
[62.92852020 1.67143309]
[69.20841217 15.29358101]
[77.73572540 12.66386127]
[86.48128510 10.89027309]
[95.35935974 9.99020290]
[104.28292847 9.97247314]
[113.16452026 10.83725739]
[121.91705322 12.57607937]
[130.45474243 15.17189407]
[138.69389343 18.59925461]
[146.55374146 22.82456207]
[153.95722961 27.80640030]
[160.83180237 33.49593353]
[167.11004639 39.83738327]
[172.73043823 46.76859283]
[177.63786316 54.22161484]
[181.78424072 62.12339020]
[185.12890625 70.39646149]
[187.63906860 78.95972443]
[189.29013062 87.72924042]
[190.06591797 96.61904144]
[189.95880127 105.54198456]
[188.96984863 114.41059875]
[187.10874939 123.13795471]
[184.39375305 131.63850403]
[180.85145569 139.82888794]
[176.51660156 147.62886047]
[171.43168640 154.96192932]
[165.64653015 161.75622559]
[159.21786499 167.94514465]
[152.20870972 173.46801758]
[144.68775940 178.27070618]
[136.72875977 182.30612183]
[128.40969849 185.53471375]
[119.81216431 187.92483521]
[111.02040863 189.45306396]
[111.60930634 204.44149780]
[112.19820404 219.42993164]
[120.47132874 232.91569519]
[113.23966217 245.93692017]
[113.82855988 260.92535400]
[114.41745758 275.91378784]
[117.36266327 295.07040405]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[5 74]
[6 73]
[7 72]
[10 22]
[11 21]
[12 20]
[13 19]
[31 38]
[32 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
