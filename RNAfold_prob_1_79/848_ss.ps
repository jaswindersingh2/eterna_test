%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGAAGCACGAAAAAGGCAAAACUGCGGCGAAAGACUGAACAGAGACGAAAGAUCAACCAAAAACGUAUAGUUCG\
) } def
/len { sequence length } bind def

/coor [
[173.86390686 143.36929321]
[166.67469788 153.77041626]
[158.03265381 162.99986267]
[148.12608337 170.85656738]
[137.17085266 177.16929626]
[125.40565491 181.80052185]
[113.08688354 184.64930725]
[100.48294067 185.65359497]
[87.86848450 184.79150391]
[75.51836395 182.08180237]
[63.70170212 177.58354187]
[52.67597961 171.39474487]
[42.68144226 163.65025330]
[33.93587112 154.51882935]
[26.62983704 144.19944763]
[20.92253304 132.91696167]
[16.93832207 120.91722107]
[14.76401997 108.46168518]
[14.44700527 95.82177734]
[15.99418545 83.27291107]
[19.37184715 71.08852386]
[5.74970007 64.80862427]
[-7.87244749 58.52872849]
[-24.14439774 60.56727600]
[-33.82876587 47.33303833]
[-26.96310234 32.44026566]
[-10.61021423 31.20936394]
[-1.59255123 44.90658188]
[12.02959633 51.18647766]
[25.65174484 57.46637344]
[36.21964264 42.82624054]
[49.62166214 30.72665977]
[65.26227570 21.70528221]
[82.44647980 16.16297722]
[100.41068268 14.34602261]
[118.35664368 16.33515549]
[135.48690796 22.04198837]
[151.04029846 31.21293259]
[164.32566833 43.44047165]
[174.75270081 58.18127060]
[181.85804749 74.78031158]
[185.32597351 92.50000000]
[200.32597351 92.50000000]
[215.32597351 92.50000000]
[230.32597351 92.50000000]
[237.67759705 80.66359711]
[249.85481262 74.11890411]
[263.56457520 74.51230621]
[275.16043091 81.63034821]
[281.61245728 93.48548126]
[296.60089111 94.07437897]
[311.58932495 94.66327667]
[317.30603027 80.62422180]
[327.48190308 69.38912964]
[340.88818359 62.31470490]
[355.90600586 60.25521088]
[370.72183228 63.45933914]
[383.54666138 71.54018402]
[392.83175659 83.52193451]
[397.45596313 97.95774841]
[396.86083984 113.10441589]
[391.11828613 127.13291931]
[380.92172241 138.34922791]
[367.50241089 145.39894104]
[352.48086548 147.43075562]
[337.67092896 144.19932556]
[324.86105347 136.09486389]
[315.59802246 124.09602356]
[311.00042725 109.65171051]
[296.01199341 109.06281281]
[281.02355957 108.47391510]
[271.39770508 121.61888885]
[255.70541382 126.57729340]
[239.96267700 121.24425507]
[230.32597351 107.50000000]
[215.32597351 107.50000000]
[200.32597351 107.50000000]
[185.32597351 107.50000000]
[183.29226685 119.97925568]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[21 30]
[22 29]
[23 28]
[42 78]
[43 77]
[44 76]
[45 75]
[50 71]
[51 70]
[52 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
