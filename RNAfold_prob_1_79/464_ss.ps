%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACCCGGGCGCAGGGUAAACCCGCGUAAACGCGCGAAAAUGGCCCUAAUGGGCCACCCGGGAAACCUUUUUUUCG\
) } def
/len { sequence length } bind def

/coor [
[148.62426758 283.86450195]
[148.03536987 268.87606812]
[147.44647217 253.88763428]
[146.85757446 238.89920044]
[146.26867676 223.91076660]
[145.67977905 208.92231750]
[143.04283142 194.15592957]
[138.40757751 179.89007568]
[133.77232361 165.62423706]
[129.13706970 151.35838318]
[124.50181580 137.09252930]
[119.86656189 122.82668304]
[108.81751251 129.54895020]
[95.73520660 131.12095642]
[82.94458771 127.06087494]
[72.80274200 117.90599823]
[67.26487732 105.15045166]
[52.31112289 103.97356415]
[39.22716141 113.25739288]
[23.85156059 108.67803955]
[17.97916603 93.74839020]
[26.11477470 79.92118835]
[42.01744461 77.80348969]
[53.48800659 89.01980591]
[68.44176483 90.19668579]
[76.02662659 77.25567627]
[67.69307709 64.78363037]
[59.35951996 52.31158447]
[51.02596664 39.83954239]
[42.69241333 27.36749649]
[27.75315857 20.60357285]
[26.41074753 4.25946188]
[40.04614258 -4.85141611]
[54.63241196 2.64342904]
[55.16445923 19.03394318]
[63.49801254 31.50598717]
[71.83156586 43.97803116]
[80.16511536 56.45007706]
[88.49867249 68.92211914]
[99.26687622 67.44576263]
[109.74024200 69.53189087]
[118.79307556 74.83011627]
[125.49375916 82.65187836]
[129.20027161 92.05757141]
[140.98002625 82.77116394]
[152.75978088 73.48475647]
[164.53953552 64.19834900]
[176.31929016 54.91193771]
[188.09904480 45.62552643]
[193.66999817 30.20163155]
[209.85839844 27.58101654]
[220.01100159 40.45954514]
[213.68368530 55.58889008]
[197.38545227 57.40528107]
[185.60569763 66.69168854]
[173.82594299 75.97809601]
[162.04618835 85.26451111]
[150.26643372 94.55091858]
[138.48667908 103.83732605]
[134.13240051 118.19142914]
[138.76766968 132.45727539]
[143.40292358 146.72312927]
[148.03817749 160.98896790]
[152.67343140 175.25482178]
[157.30868530 189.52067566]
[165.75123596 177.12216187]
[180.09597778 172.73709106]
[194.02793884 178.29591370]
[201.41389465 191.35147095]
[199.00236511 206.15635681]
[187.85496521 216.19305420]
[172.87907410 217.04313660]
[160.66821289 208.33341980]
[161.25711060 223.32186890]
[161.84600830 238.31030273]
[162.43490601 253.29873657]
[163.02380371 268.28717041]
[163.61270142 283.27560425]
[166.55790710 302.43222046]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[4 75]
[5 74]
[6 73]
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[17 25]
[18 24]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
