%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACCAAGAUCAUUCCCAAGAGAAAUCAUGGAAACAAAAGGAGAAGAGGAUCAAUGGAAACAAAGGGUUCAACUUCG\
) } def
/len { sequence length } bind def

/coor [
[115.07249451 149.20750427]
[97.97953033 151.42446899]
[81.11319733 147.87324524]
[66.36536407 138.95214844]
[55.39027405 125.66185760]
[49.41898346 109.49311829]
[34.43054962 110.08201599]
[19.44211197 110.67091370]
[5.95634460 118.94403839]
[-7.06487989 111.71237946]
[-22.05331612 112.30127716]
[-37.04175186 112.89017487]
[-47.73857498 124.21340942]
[-62.94736862 124.59712219]
[-73.67642212 114.32955170]
[-88.66486359 114.91844940]
[-103.65329742 115.50734711]
[-117.22622681 124.71101379]
[-131.86328125 117.31583405]
[-132.50711060 100.92932892]
[-118.49539948 92.40853119]
[-104.24219513 100.51891327]
[-89.25375366 99.93001556]
[-74.26531982 99.34111786]
[-64.37492371 88.26340485]
[-49.18290710 87.45266724]
[-37.63064957 97.90173340]
[-22.64221191 97.31283569]
[-7.65377712 96.72393799]
[4.75991774 88.49293518]
[18.85321617 95.68247986]
[33.84165192 95.09358215]
[48.83008575 94.50468445]
[51.78964615 81.99111176]
[57.75895691 70.60182190]
[66.36536407 61.04785156]
[77.07157135 53.92565155]
[89.20919037 49.67985535]
[102.02046967 48.57552719]
[114.70561981 50.68161392]
[126.47270203 55.86662674]
[136.58709717 63.80687332]
[144.41738892 74.00663757]
[149.47470093 85.82916260]
[151.44332886 98.53636932]
[166.33935547 100.29943085]
[181.23538208 102.06249237]
[196.13140869 103.82555389]
[212.71609497 96.11518097]
[226.45451355 106.84818268]
[241.40827942 108.02506256]
[256.36203003 109.20195007]
[271.31579590 110.37883759]
[286.26956177 111.55572510]
[299.21578979 99.98306274]
[316.20297241 101.19692230]
[326.94207764 113.98126221]
[341.93051147 114.57015991]
[356.18371582 106.45977783]
[370.19540405 114.98057556]
[369.55157471 131.36708069]
[354.91455078 138.76226807]
[341.34161377 129.55859375]
[326.35317993 128.96969604]
[318.08193970 139.04966736]
[305.30313110 142.49591064]
[292.71749878 137.80456543]
[285.09268188 126.50948334]
[270.13891602 125.33259583]
[255.18515015 124.15570831]
[240.23138428 122.97882843]
[225.27763367 121.80194092]
[215.71977234 129.48464966]
[203.09451294 128.45413208]
[194.36834717 118.72158051]
[179.47232056 116.95851898]
[164.57629395 115.19545746]
[149.68026733 113.43239594]
[142.45880127 129.08279419]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 33]
[7 32]
[8 31]
[10 29]
[11 28]
[12 27]
[15 24]
[16 23]
[17 22]
[45 78]
[46 77]
[47 76]
[48 75]
[50 72]
[51 71]
[52 70]
[53 69]
[54 68]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
