%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACUACCAUGGAAAAACAUGCGCAAAGCGAGUAGAGGCACUAGAAAAUAGCUAUGAAAAUAGGCCGAUCUAUUUCG\
) } def
/len { sequence length } bind def

/coor [
[165.54673767 144.11582947]
[161.64344788 158.59907532]
[152.68762207 170.63206482]
[139.93432617 178.52848816]
[125.17083740 181.18170166]
[110.46615601 178.21989441]
[97.88101959 170.05812073]
[89.17914581 157.84022522]
[85.58002472 143.27841187]
[87.58800507 128.41354370]
[73.15117645 132.48515320]
[58.71434402 136.55676270]
[44.27751541 140.62837219]
[36.77485275 154.53828430]
[21.61013794 158.98878479]
[7.78032827 151.33947754]
[3.49040508 136.12855530]
[11.28550339 122.38038635]
[26.54092979 118.25152588]
[40.20590973 126.19154358]
[54.64273834 122.11993408]
[69.07956696 118.04832458]
[83.51639557 113.97672272]
[86.15334320 99.21031952]
[74.01808167 90.39354706]
[61.88283157 81.57676697]
[45.51475143 77.15834808]
[45.22936249 60.20680237]
[61.43943024 55.23991013]
[70.69960785 69.44151306]
[82.83486176 78.25828552]
[94.97011566 87.07506561]
[109.89788818 88.54532623]
[123.52003479 82.26542664]
[137.14218140 75.98553467]
[150.76432800 69.70563507]
[164.38647461 63.42573929]
[178.00862122 57.14584351]
[191.37371826 50.33598709]
[204.46116638 43.00666809]
[217.54859924 35.67734909]
[223.70726013 28.56501579]
[231.29689026 28.32874107]
[244.66198730 21.51888275]
[258.02706909 14.70902538]
[255.88496399 -0.28063956]
[258.72848511 -15.15319920]
[266.24923706 -28.29538918]
[277.63140869 -38.28164291]
[291.64031982 -44.02872849]
[306.75640869 -44.91323853]
[321.33999634 -40.83923721]
[333.80917358 -32.24863434]
[342.81137085 -20.07327843]
[347.37008667 -5.63385963]
[346.99084473 9.50334263]
[341.71475220 23.69635773]
[332.11413574 35.40563202]
[319.23040771 43.36103058]
[304.46112061 46.69961548]
[289.40826416 45.05923843]
[275.70474243 38.61783600]
[264.83694458 28.07412338]
[251.47184753 34.88397980]
[238.10675049 41.69384003]
[224.87792969 48.76478958]
[211.79048157 56.09410858]
[198.70304871 63.42342758]
[196.52125549 67.94702911]
[191.33317566 71.00848389]
[184.28852844 70.76799011]
[170.66638184 77.04788971]
[157.04423523 83.32778168]
[143.42207336 89.60768127]
[129.79992676 95.88757324]
[116.17778778 102.16747284]
[131.15989685 101.43517303]
[145.36149597 106.26370239]
[156.79232788 115.97637939]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 23]
[11 22]
[12 21]
[13 20]
[24 32]
[25 31]
[26 30]
[33 76]
[34 75]
[35 74]
[36 73]
[37 72]
[38 71]
[39 68]
[40 67]
[41 66]
[43 65]
[44 64]
[45 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
