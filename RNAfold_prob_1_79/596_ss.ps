%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAGAUAUUAUAAUAUUAUAAUAUGCAAAAAAAAAAAAAGCAUAUUAUAAUAUUAUAAUAUCAACACAUUUUUCG\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 198.46118164]
[92.50000000 182.62205505]
[92.50000000 167.62205505]
[92.50000000 152.62205505]
[92.50000000 137.62205505]
[92.50000000 122.62205505]
[92.50000000 107.62205505]
[90.73693848 92.72602844]
[87.23526001 78.14048004]
[83.73358154 63.55492783]
[80.23189545 48.96937943]
[76.73021698 34.38383102]
[73.22853851 19.79828262]
[69.72686005 5.21273327]
[66.22517395 -9.37281513]
[62.72349548 -23.95836449]
[59.22181320 -38.54391479]
[55.72013474 -53.12946320]
[52.21845245 -67.71501160]
[48.71677399 -82.30056000]
[45.21509171 -96.88610840]
[41.71341324 -111.47165680]
[38.21173096 -126.05720520]
[34.71005249 -140.64276123]
[31.20837212 -155.22830200]
[27.70669174 -169.81385803]
[24.20500946 -184.39939880]
[20.70332909 -198.98495483]
[17.20164871 -213.57049561]
[13.69996929 -228.15605164]
[-1.28157043 -230.88978577]
[-13.85230923 -239.48609924]
[-21.83429146 -252.45559692]
[-23.84459114 -267.55123901]
[-19.53491020 -282.15762329]
[-9.65192699 -293.74411011]
[4.09207106 -300.30325317]
[19.31585312 -300.69866943]
[33.38180923 -294.86181641]
[43.85292053 -283.80398560]
[48.91501236 -269.44100952]
[47.69104385 -254.26135254]
[40.39307404 -240.89498901]
[28.28551865 -231.65773010]
[31.78719902 -217.07217407]
[35.28887939 -202.48663330]
[38.79055786 -187.90107727]
[42.29224014 -173.31553650]
[45.79391861 -158.72998047]
[49.29560089 -144.14443970]
[52.79727936 -129.55888367]
[56.29896164 -114.97333527]
[59.80064011 -100.38778687]
[63.30232239 -85.80223846]
[66.80400085 -71.21669006]
[70.30568695 -56.63114166]
[73.80736542 -42.04559326]
[77.30904388 -27.46004486]
[80.81072235 -12.87449551]
[84.31240845 1.71105301]
[87.81408691 16.29660225]
[91.31576538 30.88215065]
[94.81744385 45.46770096]
[98.31912994 60.05324936]
[101.82080841 74.63879395]
[105.32248688 89.22434235]
[115.43284607 78.14370728]
[130.39634705 77.09793854]
[141.94970703 86.66455078]
[143.71279907 101.56056976]
[134.71200562 113.55998230]
[119.91783142 116.03633881]
[107.50000000 107.62205505]
[107.50000000 122.62205505]
[107.50000000 137.62205505]
[107.50000000 152.62205505]
[107.50000000 167.62205505]
[107.50000000 182.62205505]
[113.54634094 198.46118164]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[5 75]
[6 74]
[7 73]
[8 66]
[9 65]
[10 64]
[11 63]
[12 62]
[13 61]
[14 60]
[15 59]
[16 58]
[17 57]
[18 56]
[19 55]
[20 54]
[21 53]
[22 52]
[23 51]
[24 50]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
