%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGGCCAGGCCCAAGCUUUUGCAGGACUUCCACCGGUGCCAACGGCCAAGGGAAACCACGCUCAAGCAUUCG\
) } def
/len { sequence length } bind def

/coor [
[93.48342133 224.12071228]
[99.52976227 208.28158569]
[99.52976227 193.28158569]
[99.52976227 178.28158569]
[91.79245758 165.55430603]
[99.52976227 151.75413513]
[99.52976227 136.75413513]
[77.36554718 124.32598114]
[70.40871429 102.51546478]
[79.19622040 84.12581635]
[70.37944031 71.99056244]
[61.56266403 59.85530472]
[52.74588394 47.72005081]
[34.05284882 40.67345047]
[32.22653961 21.58598328]
[22.48481941 10.17989445]
[12.74309921 -1.22619534]
[2.77931261 -12.43881989]
[-7.40269852 -23.45365715]
[-26.39696884 -21.82936478]
[-41.48680878 -33.06419754]
[-45.27456665 -51.23581314]
[-58.89671326 -57.51570892]
[-75.16866302 -55.47716522]
[-84.85303497 -68.71140289]
[-77.98736572 -83.60417938]
[-61.63448334 -84.83507538]
[-52.61681747 -71.13785553]
[-38.99467087 -64.85796356]
[-37.91396713 -66.00631714]
[-36.76560974 -67.08702087]
[-43.04550552 -80.70916748]
[-56.74272537 -89.72683716]
[-55.51182556 -106.07971954]
[-40.61904907 -112.94538116]
[-27.38481140 -103.26101685]
[-29.42335892 -86.98906708]
[-23.14346123 -73.36692047]
[-8.73045540 -71.55644226]
[2.59988904 -62.23228836]
[7.24264574 -48.15717697]
[3.61213923 -33.63566971]
[13.79415035 -22.62083054]
[20.83289337 -19.77226257]
[24.14918900 -10.96791649]
[33.89091110 0.43817347]
[43.63262939 11.84426308]
[54.17532730 11.76950741]
[63.12309647 17.75631332]
[67.24379730 27.94327164]
[64.88114166 38.90327072]
[73.69791412 51.03852844]
[82.51469421 63.17378235]
[91.33147430 75.30903625]
[108.98416138 71.69352722]
[127.07225800 80.73436737]
[136.74426270 100.97308350]
[151.73269653 101.56198120]
[165.98590088 93.45159912]
[179.99761963 101.97239685]
[179.35379028 118.35890198]
[164.71673584 125.75408173]
[151.14379883 116.55041504]
[136.15536499 115.96151733]
[130.74896240 121.15967560]
[143.62022400 128.86231995]
[156.93225098 135.77534485]
[159.07577515 150.62139893]
[148.26292419 161.01765442]
[133.51249695 158.29280090]
[127.12754059 144.71972656]
[119.93616486 131.55598450]
[114.52976227 136.75413513]
[114.52976227 151.75413513]
[122.26705933 165.55430603]
[114.52976227 178.28158569]
[114.52976227 193.28158569]
[114.52976227 208.28158569]
[120.57609558 224.12071228]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[6 74]
[7 73]
[10 54]
[11 53]
[12 52]
[13 51]
[15 47]
[16 46]
[17 45]
[18 43]
[19 42]
[22 29]
[23 28]
[31 38]
[32 37]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
