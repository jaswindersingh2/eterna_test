%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAUAUUAGGACACACAAAAGUGGACAAAAGUCGUCAAAACAUUAUAAAAGUAAUGCUAAUGAAACAUUUAUUUCG\
) } def
/len { sequence length } bind def

/coor [
[112.18763733 261.47604370]
[106.55954742 247.46792603]
[104.92064667 232.46070862]
[107.39255524 217.56802368]
[113.79184723 203.89498901]
[123.64364624 192.45625305]
[136.21688843 184.10064697]
[131.58163452 169.83479309]
[126.94637299 155.56895447]
[122.31111908 141.30310059]
[117.67586517 127.03725433]
[113.04061127 112.77140808]
[104.22372437 122.13520813]
[89.09645081 124.49954224]
[73.40375519 116.11611176]
[58.41532135 115.52721405]
[43.42688751 114.93831635]
[31.99303055 125.84897614]
[16.19524765 125.39550018]
[5.40608454 113.84693146]
[6.02655792 98.05482483]
[17.68855286 87.38836670]
[33.47321320 88.17576599]
[44.01578140 99.94988251]
[59.00421906 100.53878021]
[73.99265289 101.12767792]
[80.80251312 87.76258087]
[71.51610565 75.98282623]
[62.22969437 64.20307159]
[46.80579758 58.63211823]
[44.18518448 42.44371796]
[57.06371307 32.29110336]
[72.19305420 38.61841965]
[74.00944519 54.91666412]
[83.29586029 66.69641876]
[92.58226776 78.47617340]
[100.03028107 79.35770416]
[92.12102509 66.61235809]
[97.15423584 52.48200989]
[111.33988190 47.60683060]
[123.99614716 55.65784836]
[125.59284210 70.57262421]
[114.92630768 81.12076569]
[122.37432098 82.00229645]
[134.15406799 72.71588135]
[145.93382263 63.42947388]
[157.71357727 54.14306641]
[169.49333191 44.85665512]
[181.27308655 35.57024765]
[186.84403992 20.14635277]
[203.03244019 17.52573586]
[213.18505859 30.40426445]
[206.85774231 45.53361130]
[190.55949402 47.35000229]
[178.77973938 56.63640976]
[166.99998474 65.92282104]
[155.22023010 75.20922852]
[143.44047546 84.49563599]
[131.66073608 93.78204346]
[127.30645752 108.13615417]
[131.94171143 122.40200043]
[136.57696533 136.66784668]
[141.21221924 150.93370056]
[145.84747314 165.19953918]
[150.48272705 179.46539307]
[165.56600952 178.83485413]
[180.25979614 182.29824829]
[193.47373962 189.59854126]
[204.22724915 200.19403076]
[211.72238159 213.29844666]
[215.40290833 227.93936157]
[214.99574280 243.03030396]
[210.53108215 257.45144653]
[202.34024048 270.13262939]
[191.03102112 280.13284302]
[177.44265747 286.70999146]
[162.58348083 289.37600708]
[147.55615234 287.93307495]
[133.47581482 282.48822021]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[15 26]
[16 25]
[17 24]
[27 36]
[28 35]
[29 34]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
