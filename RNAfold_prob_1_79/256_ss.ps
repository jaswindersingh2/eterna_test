%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAACAACAAGUAGAAAACUACAGUGAAGACAAACUGACAAAAGACAGAGUCAACACAAGUUGAUUCUAACUUCG\
) } def
/len { sequence length } bind def

/coor [
[148.26188660 146.11581421]
[141.71694946 152.11117554]
[134.43443298 157.18521118]
[126.54312134 161.24818420]
[118.18251801 164.22830200]
[109.50044250 166.07283020]
[100.65040588 166.74919128]
[91.78886414 166.24542236]
[83.07249451 164.57040405]
[74.65541077 161.75378418]
[66.68642426 157.84533691]
[59.30642319 152.91418457]
[52.64589691 147.04750061]
[46.82259369 140.34899902]
[41.93947983 132.93711853]
[38.08288574 124.94291687]
[35.32099533 116.50771332]
[33.70264053 107.78064728]
[33.25643921 98.91602325]
[33.99026871 90.07056427]
[35.89116669 81.40065765]
[38.92551804 73.05958557]
[43.03967667 65.19483185]
[48.16090393 57.94543457]
[54.19865417 51.43957520]
[61.04618454 45.79226685]
[53.71686554 32.70482635]
[46.38754654 19.61738777]
[39.05822754 6.52994680]
[23.63346100 4.83991098]
[12.17060661 -5.61870193]
[9.07736397 -20.82434082]
[15.54314899 -34.93013000]
[29.08173561 -42.51210022]
[44.48725891 -40.65483475]
[55.83598328 -30.07248878]
[58.76409149 -14.83418846]
[52.14566803 -0.79937184]
[59.47498703 12.28806782]
[66.80430603 25.37550926]
[74.13362122 38.46294785]
[99.79107666 33.24796295]
[125.48066711 38.30223846]
[147.25027466 52.84822083]
[161.75079346 74.64812469]
[166.75144958 100.34820557]
[181.64747620 102.11126709]
[196.54350281 103.87432861]
[208.87998962 94.36384583]
[223.96156311 96.36404419]
[232.95231628 108.18359375]
[247.84834290 109.94665527]
[262.74438477 111.70971680]
[277.64041138 113.47277832]
[292.53643799 115.23583984]
[307.43246460 116.99890137]
[322.32849121 118.76196289]
[337.22451782 120.52502441]
[352.12054443 122.28808594]
[366.96612549 115.32099915]
[380.26611328 124.91487122]
[378.33859253 141.20034790]
[363.16644287 147.42433167]
[350.35748291 137.18411255]
[335.46145630 135.42105103]
[320.56542969 133.65798950]
[305.66940308 131.89492798]
[290.77337646 130.13186646]
[275.87734985 128.36880493]
[260.98132324 126.60574341]
[246.08528137 124.84268188]
[231.18925476 123.07962036]
[219.68769836 132.47373962]
[204.55589294 130.89794922]
[194.78045654 118.77035522]
[179.88441467 117.00729370]
[164.98838806 115.24423218]
[162.39140320 123.73165131]
[158.69131470 131.79949951]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[26 41]
[27 40]
[28 39]
[29 38]
[46 77]
[47 76]
[48 75]
[51 72]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
