%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAUUCACGAGAAACACGAGAAAACACAGCAGAAAAACAGCAGUGACACACGACAAAAGACGAGUGCCUCACGUUCG\
) } def
/len { sequence length } bind def

/coor [
[61.93429947 266.10787964]
[55.58844757 279.92086792]
[44.43624115 290.25027466]
[30.17831993 295.52096558]
[14.98890781 294.92916870]
[1.18428242 288.56515503]
[-9.13045216 277.39935303]
[-14.38237381 263.13452148]
[-13.77060318 247.94590759]
[-7.38842916 234.14965820]
[3.79091144 223.84962463]
[18.06265068 218.61647034]
[33.25045395 219.24821472]
[39.53034973 205.62606812]
[45.81024551 192.00392151]
[38.17640305 180.87300110]
[37.09859467 167.30949402]
[42.97217178 154.91540527]
[54.33187485 147.03665161]
[68.21575165 145.85993958]
[75.02560425 132.49484253]
[81.83546448 119.12973785]
[76.12873077 111.22763062]
[73.68111420 101.79262543]
[74.82678986 92.11287689]
[79.40933228 83.50994873]
[86.80310059 77.15839386]
[83.30142212 62.57284164]
[79.79974365 47.98729324]
[69.05463409 36.37465668]
[73.60703278 22.19280434]
[70.10535431 7.60725546]
[55.50498962 2.62398100]
[45.93445969 -9.47595596]
[44.44767761 -24.83151054]
[51.51907349 -38.54277802]
[64.89218903 -46.23454666]
[80.29971313 -45.45240021]
[92.82516479 -36.44591522]
[98.47170258 -22.08903313]
[95.43755341 -6.96297979]
[84.69090271 4.10557508]
[88.19258118 18.69112396]
[98.68721771 29.26050377]
[94.38529205 44.48561096]
[97.88697052 59.07116318]
[101.38864899 73.65670776]
[115.08368683 78.35791779]
[124.23441315 89.57932281]
[139.13043213 87.81626129]
[154.02645874 86.05319977]
[166.82156372 76.74748993]
[180.37002563 82.93523407]
[195.26605225 81.17217255]
[202.73025513 67.56829071]
[216.77938843 60.98033524]
[232.01130676 63.94149780]
[242.56900024 75.31315613]
[244.39283752 90.72267151]
[236.78150940 104.24477386]
[222.66172791 110.67993927]
[207.46284485 107.55371857]
[197.02911377 96.06819916]
[182.13308716 97.83126068]
[170.40345764 107.01085663]
[155.78952026 100.94922638]
[140.89349365 102.71228790]
[125.99747467 104.47534943]
[115.08368683 121.64208221]
[95.20056152 125.93959808]
[88.39070129 139.30468750]
[81.58084869 152.66978455]
[89.45209503 167.49591064]
[87.05681610 183.94395447]
[75.51468658 195.67481995]
[59.43239212 198.28381348]
[53.15249634 211.90597534]
[46.87260056 225.52812195]
[57.21667480 236.66671753]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 78]
[14 77]
[15 76]
[20 72]
[21 71]
[22 70]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[49 68]
[50 67]
[51 66]
[53 64]
[54 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
