%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGAUCACGAUGGAAACAUCAGACUGGACGAGGAGGCGAAAGGCUCAGUCUGGUCACGAUCAUCUGAUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[59.57127380 355.85531616]
[44.27261353 357.84390259]
[30.33723068 351.22509766]
[22.21185875 338.11090088]
[22.48927498 322.68603516]
[31.08095169 309.87249756]
[45.24532318 303.75906372]
[47.59183884 288.94375610]
[49.93835449 274.12841797]
[52.28487396 259.31307983]
[54.63138962 244.49777222]
[56.97790527 229.68244934]
[59.32442474 214.86711121]
[57.20381165 207.57594299]
[62.06491470 199.52087402]
[64.99127197 184.80909729]
[67.91762543 170.09732056]
[70.84397888 155.38554382]
[69.24023438 153.34645081]
[68.34782410 150.54170227]
[68.45787048 147.23667908]
[69.76196289 143.79484558]
[72.32181549 140.64129639]
[76.05183411 138.21754456]
[81.79208374 124.35935211]
[87.53234100 110.50115204]
[84.82042694 94.05883026]
[97.97290802 83.82570648]
[103.16466522 69.75283813]
[108.35642242 55.67996597]
[113.54817200 41.60709763]
[118.73992920 27.53422546]
[123.93168640 13.46135616]
[129.12344360 -0.61151403]
[134.31520081 -14.68438435]
[129.06625366 -24.59156990]
[130.26708984 -35.51458740]
[137.25386047 -43.70541000]
[147.42102051 -46.49517441]
[153.70092773 -60.11732101]
[159.98081970 -73.73947144]
[158.73181152 -89.51129913]
[171.08679199 -97.83018494]
[169.04824829 -114.10213470]
[182.28248596 -123.78650665]
[197.17526245 -116.92083740]
[198.40615845 -100.56795502]
[184.70893860 -91.55029297]
[186.40711975 -76.75280762]
[173.60296631 -67.45957184]
[167.32307434 -53.83742523]
[161.04316711 -40.21527863]
[164.46655273 -21.34871292]
[148.38806152 -9.49262810]
[143.19631958 4.58024168]
[138.00456238 18.65311241]
[132.81280518 32.72598267]
[127.62104797 46.79885101]
[122.42929077 60.87172318]
[117.23753357 74.94459534]
[112.04577637 89.01746368]
[116.30078125 100.03732300]
[111.99536133 111.03757477]
[101.39053345 116.24140930]
[95.65027618 130.09959412]
[89.91002655 143.95779419]
[85.55575562 158.31190491]
[82.62940216 173.02368164]
[79.70304871 187.73545837]
[76.77669525 202.44723511]
[74.13974762 217.21363831]
[71.79322815 232.02896118]
[69.44671631 246.84428406]
[67.10019684 261.65960693]
[64.75367737 276.47494507]
[62.40716553 291.29025269]
[60.06064606 306.10559082]
[71.64260101 316.29684448]
[75.85417938 331.13821411]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 77]
[8 76]
[9 75]
[10 74]
[11 73]
[12 72]
[13 71]
[15 70]
[16 69]
[17 68]
[18 67]
[24 66]
[25 65]
[26 64]
[28 61]
[29 60]
[30 59]
[31 58]
[32 57]
[33 56]
[34 55]
[35 54]
[39 52]
[40 51]
[41 50]
[43 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
