%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGAGAAACUCAAGAGCAAUGCUCAAGACAGAAACUGUCAACUGGUAACCAGAAGUCAAAGACAGGUAUGGUUCG\
) } def
/len { sequence length } bind def

/coor [
[15.26270103 262.28369141]
[11.44582081 270.44772339]
[5.30351114 276.99539185]
[-2.53980589 281.29235840]
[-11.29645252 282.93154907]
[-20.09457970 281.77160645]
[-28.06497955 277.94873047]
[-39.47106934 287.69046021]
[-50.87715912 297.43218994]
[-58.99454498 312.31655884]
[-75.54434204 308.63681030]
[-76.58983612 291.71511841]
[-60.61887741 286.02609253]
[-49.21278763 276.28436279]
[-37.80669785 266.54266357]
[-38.98622131 244.84593201]
[-24.21203232 228.56909180]
[-1.99659216 227.62651062]
[6.82018661 215.49124146]
[15.63696575 203.35598755]
[24.45374489 191.22073364]
[25.67503929 176.37628174]
[40.04618454 169.75958252]
[48.86296463 157.62432861]
[57.67974091 145.48907471]
[66.49652100 133.35382080]
[75.31330109 121.21856689]
[68.51521301 108.26854706]
[68.07305908 93.64933777]
[74.07608795 80.31214905]
[85.31245422 70.94940948]
[81.81077576 56.36386108]
[78.30909729 41.77831268]
[74.80741882 27.19276428]
[71.30573273 12.60721493]
[61.72888565 -1.38279080]
[72.52101898 -14.45819378]
[88.07299042 -7.70745134]
[85.89128113 9.10553455]
[89.39296722 23.69108391]
[92.89464569 38.27663422]
[96.39632416 52.86218262]
[99.89800262 67.44773102]
[106.73477173 68.15187073]
[113.27131653 70.27571869]
[119.21626282 73.72460938]
[130.62234497 63.98289108]
[142.02844238 54.24116898]
[153.43452454 44.49945068]
[161.55191040 29.61508369]
[178.10171509 33.29483795]
[179.14720154 50.21651840]
[163.17625427 55.90554047]
[151.77015686 65.64726257]
[140.36407471 75.38897705]
[128.95797729 85.13069916]
[130.94868469 89.90841675]
[132.15695190 94.94126129]
[132.55227661 100.10199738]
[147.13781738 103.60367584]
[161.72337341 107.10535431]
[178.53634644 104.92364502]
[185.28709412 120.47561646]
[172.21170044 131.26776123]
[158.22167969 121.69090271]
[143.63613892 118.18922424]
[129.05058289 114.68754578]
[111.26695251 130.54040527]
[87.44855499 130.03533936]
[78.63177490 142.17059326]
[69.81499481 154.30584717]
[60.99821854 166.44111633]
[52.18143845 178.57637024]
[50.32950974 194.28880310]
[36.58900070 200.03752136]
[27.77222061 212.17277527]
[18.95544243 224.30802917]
[10.13866234 236.44328308]
[14.59730816 244.39414978]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 15]
[8 14]
[9 13]
[18 78]
[19 77]
[20 76]
[21 75]
[23 73]
[24 72]
[25 71]
[26 70]
[27 69]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[46 56]
[47 55]
[48 54]
[49 53]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
