%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGCAACGCUCGAAAAGCAAAAAACUAGUAACUGAGAGGUAACUAGGGCCGAGGGUUGCAAAAAGCUCUGGUUCG\
) } def
/len { sequence length } bind def

/coor [
[133.29052734 337.24954224]
[128.41044617 322.97946167]
[127.23331451 307.94400024]
[129.83316040 293.08828735]
[136.04652405 279.34622192]
[145.48286438 267.58157349]
[157.54896545 258.53393555]
[151.80871582 244.67573547]
[146.06846619 230.81755066]
[140.32820129 216.95935059]
[134.58795166 203.10116577]
[122.56910706 194.30363464]
[124.43634033 178.59300232]
[118.69609070 164.73480225]
[112.95584106 150.87661743]
[107.21559143 137.01841736]
[98.28291321 137.67597961]
[89.44708252 136.20861816]
[81.20642853 132.69908142]
[74.02574158 127.34531403]
[68.31000519 120.44926453]
[64.38159180 112.39987183]
[62.46205521 103.65113068]
[62.65966415 94.69646454]
[64.96327209 86.04091644]
[69.24295807 78.17266083]
[75.25734711 71.53547668]
[82.66722107 66.50369263]
[91.05466461 63.36109924]
[90.46576691 48.37266541]
[89.87686920 33.38422775]
[89.28797150 18.39579201]
[88.69908142 3.40735722]
[80.42594910 -10.07841110]
[87.65761566 -23.09963608]
[87.06871796 -38.08806992]
[86.47982025 -53.07650757]
[77.27615356 -66.64943695]
[84.67133331 -81.28649139]
[101.05783844 -81.93032074]
[109.57863617 -67.91860962]
[101.46825409 -53.66540527]
[102.05715179 -38.67696762]
[102.64604950 -23.68853188]
[110.87705994 -11.27483749]
[103.68751526 2.81845999]
[104.27641296 17.80689621]
[104.86531067 32.79533005]
[105.45420837 47.78376770]
[106.04310608 62.77220154]
[125.92439270 72.60740662]
[136.83880615 91.91731262]
[135.01123047 114.02289581]
[121.07378387 131.27816772]
[126.81403351 145.13635254]
[132.55429077 158.99455261]
[138.29454041 172.85275269]
[150.72396851 182.64151001]
[148.44615173 197.36091614]
[154.18640137 211.21910095]
[159.92665100 225.07730103]
[165.66690063 238.93548584]
[171.40715027 252.79368591]
[186.33683777 250.65930176]
[201.32817078 252.30566406]
[215.43881226 257.62927246]
[227.78173828 266.29547119]
[237.58106995 277.75949097]
[244.22080994 291.30072021]
[247.28356934 306.06793213]
[246.57684326 321.13281250]
[242.14503479 335.54843140]
[234.26673889 348.40856934]
[223.43719482 358.90484619]
[210.33715820 366.37747192]
[195.79010010 370.35665894]
[180.71047974 370.59231567]
[166.04618835 367.06961060]
[152.71903992 360.01000977]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 63]
[8 62]
[9 61]
[10 60]
[11 59]
[13 57]
[14 56]
[15 55]
[16 54]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[35 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
