%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAGCAUGUCUUUAAAAGAAGAGCUGCCCUUUAAAAGAAGAGUACAAAAGUAUGGUGGCCAUGUGUAGCAUUUCG\
) } def
/len { sequence length } bind def

/coor [
[20.71702766 147.62327576]
[7.26456881 154.37158203]
[-7.52939987 157.05308533]
[-22.46441269 155.45887756]
[-36.33100891 149.72666931]
[-48.00866699 140.32890320]
[-56.55636215 128.03385925]
[-61.28838730 113.84282684]
[-76.27682495 114.43172455]
[-91.26525879 115.02062225]
[-101.96208191 126.34385681]
[-117.17087555 126.72756958]
[-127.89993286 116.45999908]
[-142.88836670 117.04889679]
[-157.87680054 117.63779449]
[-172.86523438 118.22669220]
[-187.85366821 118.81558990]
[-201.42660522 128.01925659]
[-216.06365967 120.62407684]
[-216.70748901 104.23757172]
[-202.69577026 95.71677399]
[-188.44256592 103.82715607]
[-173.45413208 103.23825836]
[-158.46569824 102.64936066]
[-143.47726440 102.06046295]
[-128.48883057 101.47156525]
[-118.59842682 90.39385223]
[-103.40641022 89.58311462]
[-91.85415649 100.03218079]
[-76.86571503 99.44328308]
[-61.87728119 98.85438538]
[-58.27326202 84.33583832]
[-50.71657562 71.40804291]
[-39.81225586 61.12302780]
[-26.43815041 54.32052612]
[-11.67425632 51.55944824]
[3.28449607 53.07196426]
[17.22495079 58.74399948]
[29.01412010 68.12379456]
[37.69125748 80.45787811]
[42.54615402 94.75157928]
[57.53458786 94.16268158]
[72.52302551 93.57378387]
[87.51145935 92.98488617]
[99.43764496 85.68709564]
[111.89964294 92.02667236]
[126.88807678 91.43777466]
[141.86206055 90.55471802]
[156.81582642 89.37783051]
[171.76957703 88.20094299]
[175.73365784 85.19074249]
[180.03330994 83.92210388]
[184.01525879 84.26113892]
[187.15505981 85.85478210]
[189.12335205 88.20094299]
[204.07711792 89.37783051]
[219.03086853 90.55471802]
[233.98463440 91.73160553]
[248.93840027 92.90848541]
[265.20309448 88.12351227]
[274.30358887 102.42796326]
[263.07742310 115.13267517]
[247.76150513 107.86225128]
[232.80775452 106.68536377]
[217.85398865 105.50847626]
[202.90022278 104.33158875]
[187.94647217 103.15470123]
[172.94647217 103.15470123]
[157.99270630 104.33158875]
[143.03895569 105.50847626]
[136.44427490 109.27259064]
[127.47697449 106.42621613]
[112.48854065 107.01511383]
[100.56235504 114.31290436]
[88.10035706 107.97332764]
[73.11192322 108.56222534]
[58.12348557 109.15112305]
[43.13505173 109.74001312]
[39.41659164 124.37056732]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 31]
[9 30]
[10 29]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[41 78]
[42 77]
[43 76]
[44 75]
[46 73]
[47 72]
[48 70]
[49 69]
[50 68]
[55 67]
[56 66]
[57 65]
[58 64]
[59 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
