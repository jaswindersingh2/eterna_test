%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAGGACCCAAGCAAAAGCUUGGCAGCUGUUGAAAACAACAGUCGAAAACGACAGAAGCGGUCCGCAUGGAUUCG\
) } def
/len { sequence length } bind def

/coor [
[76.64774323 263.02835083]
[67.13951111 251.27740479]
[61.51889801 237.24528503]
[60.28568649 222.17974854]
[63.54954147 207.42037964]
[71.02023315 194.27960205]
[82.03347778 183.92587280]
[95.60998535 177.27983093]
[93.26346588 162.46449280]
[90.91695404 147.64916992]
[88.57043457 132.83384705]
[86.22391510 118.01852417]
[74.62876129 108.50262451]
[59.64032364 109.09152222]
[44.65188980 109.68041992]
[29.66345406 110.26931763]
[14.67501736 110.85821533]
[1.10208476 120.06188202]
[-13.53496838 112.66670227]
[-14.17879581 96.28019714]
[-0.16708319 87.75939941]
[14.08612061 95.86978149]
[29.07455635 95.28088379]
[44.06299210 94.69198608]
[59.05142593 94.10308838]
[74.03986359 93.51419067]
[78.91072083 87.81114197]
[65.05253601 82.07086945]
[66.22947693 67.11711121]
[80.81504059 63.61550522]
[88.65244293 76.40505219]
[93.52330780 70.70201111]
[91.76024628 55.80598450]
[89.99718475 40.90995789]
[88.23412323 26.01393127]
[86.47106171 11.11790371]
[76.23084259 -1.69107711]
[82.45481873 -16.86322784]
[98.74029541 -18.79074097]
[108.33416748 -5.49075603]
[101.36708832 9.35484219]
[103.13014984 24.25086975]
[104.89321136 39.14689636]
[106.65627289 54.04292297]
[108.41933441 68.93894958]
[122.27752686 74.67919922]
[134.05728149 65.39279175]
[145.83703613 56.10638428]
[157.61679077 46.81997299]
[163.18774414 31.39608002]
[179.37614441 28.77546310]
[189.52874756 41.65399170]
[183.20144653 56.78333664]
[166.90319824 58.59972763]
[155.12344360 67.88613892]
[143.34368896 77.17254639]
[131.56393433 86.45895386]
[131.40574646 95.81668091]
[128.73474121 104.06140137]
[124.13884735 110.58476257]
[118.33349609 115.01084137]
[112.08098602 117.21611023]
[106.10942078 117.32347870]
[101.03924561 115.67200470]
[103.38575745 130.48733521]
[105.73227692 145.30265808]
[108.07879639 160.11798096]
[110.42530823 174.93330383]
[125.39107513 177.05870056]
[139.06477356 183.50241089]
[150.23054504 193.69146729]
[157.89555359 206.71986389]
[161.37820435 221.42912292]
[160.36885071 236.51132202]
[154.95722961 250.62535095]
[145.62452698 262.51620483]
[133.20062256 271.12652588]
[118.79022980 275.69073486]
[103.67471313 275.80297852]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 68]
[9 67]
[10 66]
[11 65]
[12 64]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[32 45]
[33 44]
[34 43]
[35 42]
[36 41]
[46 57]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
