%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAACGCGACGCGAGCGCGCGAAACGCAGCGCGAAACCCGACGCAAAGCGCGGGACGCGACGCGGCGCCGGUUCG\
) } def
/len { sequence length } bind def

/coor [
[122.89926147 313.21124268]
[119.39758301 298.62570190]
[108.04259491 296.25210571]
[98.42321014 289.67544556]
[92.03334808 279.86856079]
[89.88390350 268.30953979]
[92.34305573 256.75897217]
[99.07386017 246.99186707]
[109.07986450 240.52487183]
[107.31680298 225.62884521]
[105.55374146 210.73281860]
[103.79067993 195.83679199]
[94.61108398 184.10716248]
[100.67271423 169.49320984]
[98.90965271 154.59718323]
[97.14659119 139.70115662]
[95.38352966 124.80513763]
[82.46852875 118.14535522]
[75.36837006 105.46711731]
[76.43804932 90.97554016]
[64.65829468 81.68912506]
[52.87854004 72.40271759]
[41.09878540 63.11631012]
[29.31903076 53.82990265]
[14.42165661 58.17131424]
[-0.17097849 52.89545822]
[-8.84770775 40.03101349]
[-8.27215290 24.52461624]
[1.33437467 12.33879375]
[16.27796745 8.15924454]
[30.81251144 13.59309006]
[39.34917450 26.55090523]
[38.60543823 42.05014801]
[50.38519287 51.33655548]
[62.16494751 60.62296677]
[73.94470215 69.90937805]
[85.72445679 79.19578552]
[91.58655548 76.21302032]
[98.02039337 74.84671783]
[104.58876038 75.18972015]
[110.84529114 77.21873474]
[121.02730560 66.20389557]
[131.20932007 55.18905640]
[141.39132690 44.17421722]
[145.05072021 35.50685883]
[152.19587708 32.93682480]
[162.80247498 22.33022308]
[173.40907288 11.72362041]
[180.33361816 -3.75174522]
[197.12110901 -1.38181663]
[199.49104309 15.40567207]
[184.01567078 22.33022308]
[173.40907288 32.93682480]
[162.80247498 43.54342651]
[152.40615845 54.35622787]
[142.22415161 65.37107086]
[132.04214478 76.38590240]
[121.86013031 87.40074158]
[123.99617004 107.79682922]
[110.27955627 123.04207611]
[112.04261780 137.93809509]
[113.80567932 152.83412170]
[115.56874084 167.73014832]
[124.87445068 180.52525330]
[118.68670654 194.07373047]
[120.44976807 208.96975708]
[122.21282959 223.86578369]
[123.97589111 238.76181030]
[140.88478088 247.07826233]
[149.58161926 263.63122559]
[146.87895203 281.98696899]
[133.98313904 295.12402344]
[137.48481750 309.70956421]
[151.55921936 316.52462769]
[157.91299438 330.81320190]
[153.54608154 345.82867432]
[140.52041626 354.48117065]
[124.98629761 352.68527222]
[114.27847290 341.28894043]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[2 72]
[9 68]
[10 67]
[11 66]
[12 65]
[14 63]
[15 62]
[16 61]
[17 60]
[20 37]
[21 36]
[22 35]
[23 34]
[24 33]
[41 58]
[42 57]
[43 56]
[44 55]
[46 54]
[47 53]
[48 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
