%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACACAAAGUGAACAUCAAAGAUGAACAAAGAAACUUUGAACAUGAAACAUGAAGACAAAGUCACUCAGAGUUCG\
) } def
/len { sequence length } bind def

/coor [
[-28.37402534 181.39945984]
[-34.94708633 191.01464844]
[-42.98351288 199.44093323]
[-52.27194214 206.45814514]
[-62.56832886 211.88311768]
[-73.60233307 215.57450867]
[-85.08442688 217.43650818]
[-96.71347809 217.42124939]
[-108.18468475 215.53012085]
[-119.19752502 211.81364441]
[-129.46363831 206.37016296]
[-138.71440125 199.34320068]
[-146.70790100 190.91775513]
[-153.23535156 181.31532288]
[-158.12644958 170.78814697]
[-161.25387573 159.61257935]
[-162.53657532 148.08181763]
[-161.94192505 136.49818420]
[-176.52748108 132.99650574]
[-191.11302185 129.49482727]
[-205.69857788 125.99314880]
[-222.51156616 128.17485046]
[-229.26229858 112.62287903]
[-216.18690491 101.83074951]
[-202.19689941 111.40760040]
[-187.61134338 114.90927887]
[-173.02580261 118.41095734]
[-158.44024658 121.91263580]
[-149.50608826 104.54173279]
[-136.20455933 90.22042084]
[-119.51946259 80.01736450]
[-100.68744659 74.69628143]
[-81.10628510 74.65879059]
[-62.23117828 79.91407013]
[-45.46656418 90.07774353]
[-32.06164551 104.39996338]
[-23.01730728 121.82073212]
[-8.43175888 118.31904602]
[6.15379000 114.81736755]
[20.73933983 111.31568909]
[35.32488632 107.81400299]
[49.91043472 104.31232452]
[64.49598694 100.81064606]
[79.08153534 97.30896759]
[85.98944855 75.50492096]
[113.88640594 67.49507141]
[125.29249573 57.75334930]
[136.69857788 48.01163101]
[148.10467529 38.26990891]
[156.22206116 23.38554192]
[172.77185059 27.06529617]
[173.81735229 43.98697662]
[157.84638977 49.67599869]
[146.44030762 59.41772079]
[135.03421021 69.15943909]
[123.62812805 78.90116119]
[125.37896729 86.19393158]
[128.88064575 100.77948761]
[130.63148499 108.07225800]
[145.21704102 111.57393646]
[159.80258179 115.07562256]
[176.61557007 112.89391327]
[183.36631775 128.44587708]
[170.29090881 139.23802185]
[156.30090332 129.66116333]
[141.71536255 126.15948486]
[127.12980652 122.65780640]
[107.84901428 129.57092285]
[90.99099731 124.22171783]
[82.58321381 111.89451599]
[67.99766541 115.39619446]
[53.41211700 118.89787292]
[38.82656860 122.39955902]
[24.24102020 125.90123749]
[9.65547085 129.40292358]
[-4.93007803 132.90460205]
[-19.51562691 136.40628052]
[-18.94843483 148.05172729]
[-20.26754570 159.63308716]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 28]
[19 27]
[20 26]
[21 25]
[37 77]
[38 76]
[39 75]
[40 74]
[41 73]
[42 72]
[43 71]
[44 70]
[46 56]
[47 55]
[48 54]
[49 53]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
