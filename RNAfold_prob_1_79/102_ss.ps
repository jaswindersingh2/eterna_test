%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACUUGAGGUAUCAUCAAAAGGCAAUGCACGUCAAAAGACGUGCAUUGCCGAUGAUACCUCAAGUCAAGUUUUCG\
) } def
/len { sequence length } bind def

/coor [
[95.29900360 171.38671875]
[94.71010590 156.39828491]
[94.12120819 141.40985107]
[93.53231049 126.42141724]
[92.94341278 111.43298340]
[91.18035889 96.53695679]
[88.25399780 81.82517242]
[85.32764435 67.11339569]
[82.40129089 52.40161514]
[79.47493744 37.68983459]
[76.54858398 22.97805786]
[73.62222290 8.26627827]
[70.69586945 -6.44550133]
[67.76951599 -21.15727997]
[64.84316254 -35.86906052]
[61.91680527 -50.58083725]
[58.99045181 -65.29261780]
[56.06409836 -80.00439453]
[53.13774109 -94.71617889]
[50.21138763 -109.42795563]
[46.75612640 -113.01074982]
[44.99090958 -117.13148499]
[44.85956573 -121.12567139]
[46.07312012 -124.43103027]
[48.17166901 -126.66143799]
[47.58277130 -141.64987183]
[46.99387741 -156.63830566]
[46.40497971 -171.62673950]
[45.81608200 -186.61518860]
[45.22718430 -201.60362244]
[44.63828659 -216.59205627]
[44.04938889 -231.58049011]
[43.46049118 -246.56892395]
[42.87159348 -261.55737305]
[42.28269958 -276.54580688]
[41.69380188 -291.53424072]
[41.10490417 -306.52267456]
[31.90123367 -320.09561157]
[39.29641724 -334.73266602]
[55.68292236 -335.37646484]
[64.20372009 -321.36477661]
[56.09333801 -307.11157227]
[56.68223572 -292.12313843]
[57.27113342 -277.13470459]
[57.86003113 -262.14627075]
[58.44892883 -247.15782166]
[59.03782654 -232.16938782]
[59.62672424 -217.18095398]
[60.21561813 -202.19252014]
[60.80451584 -187.20408630]
[61.39341354 -172.21563721]
[61.98231125 -157.22720337]
[62.57120895 -142.23876953]
[63.16010666 -127.25033569]
[64.92316437 -112.35430908]
[67.84952545 -97.64253235]
[70.77587891 -82.93075562]
[73.70223236 -68.21897125]
[76.62858582 -53.50719452]
[79.55493927 -38.79541397]
[82.48129272 -24.08363533]
[85.40765381 -9.37185574]
[88.33400726 5.33992290]
[91.26036072 20.05170250]
[94.18671417 34.76348114]
[97.11306763 49.47526169]
[100.03942871 64.18704224]
[102.96578217 78.89881897]
[105.89213562 93.61059570]
[108.58251953 95.60970306]
[110.51311493 98.73437500]
[111.22543335 102.66651917]
[110.40158844 106.90806580]
[107.93185425 110.84408569]
[108.52075195 125.83251953]
[109.10964966 140.82095337]
[109.69854736 155.80938721]
[110.28743744 170.79782104]
[113.23264313 189.95443726]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[4 75]
[5 74]
[6 69]
[7 68]
[8 67]
[9 66]
[10 65]
[11 64]
[12 63]
[13 62]
[14 61]
[15 60]
[16 59]
[17 58]
[18 57]
[19 56]
[20 55]
[25 54]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
