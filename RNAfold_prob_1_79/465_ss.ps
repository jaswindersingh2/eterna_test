%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGUGUACGUCAGGCGAAAGCCGUCGAAAGACGACAAAAGAUAACGAAAGUUAUCGUACACAAAGCGAGUAUUCG\
) } def
/len { sequence length } bind def

/coor [
[113.78279114 261.31500244]
[108.15470123 247.30690002]
[106.51580048 232.29968262]
[108.98770905 217.40698242]
[115.38700104 203.73396301]
[125.23880005 192.29522705]
[137.81204224 183.93962097]
[133.17678833 169.67376709]
[128.54153442 155.40791321]
[123.90627289 141.14207458]
[119.27101898 126.87622833]
[114.63576508 112.61037445]
[109.45610046 119.39800262]
[101.13349915 123.81414032]
[90.84261322 124.44303894]
[80.36824036 120.47095490]
[71.79693604 111.93413544]
[56.90091324 110.17108154]
[42.00488663 108.40802002]
[27.15928650 115.37509918]
[13.85930061 105.78122711]
[15.78681374 89.49575043]
[30.95896530 83.27177429]
[43.76794434 93.51199341]
[58.66397095 95.27505493]
[73.55999756 97.03810883]
[81.64707184 84.40485382]
[73.80959320 71.61524963]
[65.97211456 58.82564926]
[58.13463974 46.03604507]
[42.93330002 40.90779877]
[37.60052872 25.77700233]
[46.22716141 12.25070381]
[62.19559097 10.70512581]
[73.25620270 22.32590294]
[70.92424011 38.19856644]
[78.76171875 50.98817062]
[86.59919739 63.77777100]
[94.43667603 76.56737518]
[101.81987762 77.88584900]
[104.45704651 63.11948776]
[119.22336578 65.75688934]
[116.58627319 80.52278900]
[123.96947479 81.84126282]
[135.74922180 72.55485535]
[147.52897644 63.26844406]
[159.30873108 53.98203659]
[171.08848572 44.69562531]
[182.86824036 35.40921783]
[188.43919373 19.98532295]
[204.62759399 17.36470795]
[214.78021240 30.24323463]
[208.45289612 45.37258148]
[192.15464783 47.18897247]
[180.37489319 56.47537994]
[168.59513855 65.76178741]
[156.81538391 75.04820251]
[145.03564453 84.33460999]
[133.25588989 93.62101746]
[128.90161133 107.97512054]
[133.53686523 122.24096680]
[138.17211914 136.50682068]
[142.80737305 150.77265930]
[147.44262695 165.03851318]
[152.07788086 179.30436707]
[167.16116333 178.67382812]
[181.85494995 182.13722229]
[195.06889343 189.43751526]
[205.82240295 200.03300476]
[213.31753540 213.13742065]
[216.99806213 227.77833557]
[216.59089661 242.86927795]
[212.12623596 257.29043579]
[203.93539429 269.97161865]
[192.62617493 279.97183228]
[179.03781128 286.54898071]
[164.17863464 289.21499634]
[149.15130615 287.77203369]
[135.07096863 282.32720947]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[17 26]
[18 25]
[19 24]
[27 39]
[28 38]
[29 37]
[30 36]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
