%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACCUGACAUCGCUACAAAAGACGUACUGACGUCACGGCGUCAGUAUGUCGUAGUGAUGUCAGGGUCUGGUUUCG\
) } def
/len { sequence length } bind def

/coor [
[95.23738098 169.81822205]
[94.64848328 154.82978821]
[94.05958557 139.84135437]
[93.47068787 124.85291290]
[77.65573120 112.68987274]
[75.31071472 92.87691498]
[87.84929657 77.35800934]
[84.92294312 62.64623260]
[81.99658203 47.93445206]
[79.07022858 33.22267532]
[76.14387512 18.51089478]
[73.21752167 3.79911566]
[70.29116821 -10.91266346]
[67.36481476 -25.62444305]
[64.43845367 -40.33622360]
[61.51210022 -55.04800034]
[58.58574677 -69.75978088]
[55.65939331 -84.47155762]
[52.73303604 -99.18334198]
[49.80668259 -113.89511871]
[46.35141754 -117.47791290]
[44.58620453 -121.59864807]
[44.45486069 -125.59283447]
[45.66841507 -128.89819336]
[47.76696396 -131.12860107]
[47.17806625 -146.11703491]
[46.58916855 -161.10546875]
[46.00027466 -176.09390259]
[45.41137695 -191.08235168]
[44.82247925 -206.07078552]
[44.23358154 -221.05921936]
[43.64468384 -236.04765320]
[43.05578613 -251.03608704]
[42.46688843 -266.02453613]
[41.87799072 -281.01296997]
[41.28909683 -296.00140381]
[40.70019913 -310.98983765]
[31.49652863 -324.56277466]
[38.89171219 -339.19982910]
[55.27821350 -339.84362793]
[63.79901123 -325.83193970]
[55.68863297 -311.57873535]
[56.27753067 -296.59030151]
[56.86642838 -281.60186768]
[57.45532608 -266.61343384]
[58.04422379 -251.62498474]
[58.63312149 -236.63655090]
[59.22201538 -221.64811707]
[59.81091309 -206.65968323]
[60.39981079 -191.67124939]
[60.98870850 -176.68280029]
[61.57760620 -161.69436646]
[62.16650391 -146.70593262]
[62.75540161 -131.71749878]
[64.51846313 -116.82147217]
[67.44481659 -102.10969543]
[70.37117004 -87.39791107]
[73.29752350 -72.68613434]
[76.22387695 -57.97435760]
[79.15023804 -43.26257706]
[82.07659149 -28.55079842]
[85.00294495 -13.83901787]
[87.92929840 0.87276089]
[90.85565186 15.58454037]
[93.78201294 30.29631996]
[96.70836639 45.00809860]
[99.63471985 59.71987915]
[102.56107330 74.43165588]
[112.01273346 77.28450775]
[119.69108582 83.49060059]
[124.46266174 92.13378906]
[125.62309265 101.93817139]
[123.00106049 111.45645142]
[116.98365021 119.28353882]
[108.45912170 124.26401520]
[109.04801941 139.25245667]
[109.63691711 154.24089050]
[110.22581482 169.22932434]
[113.17101288 188.38594055]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[4 75]
[7 68]
[8 67]
[9 66]
[10 65]
[11 64]
[12 63]
[13 62]
[14 61]
[15 60]
[16 59]
[17 58]
[18 57]
[19 56]
[20 55]
[25 54]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
