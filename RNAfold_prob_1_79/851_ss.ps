%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAAGGACAAAAAAGCCAAAAGACCUACGAAAGAUAGAAGUCAGACGAAAGAUCAAGCAAAAAACUUGUUUUCG\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 297.40966797]
[92.50000000 281.57052612]
[92.50000000 266.57052612]
[92.50000000 251.57052612]
[92.50000000 236.57052612]
[92.50000000 221.57052612]
[92.50000000 206.57052612]
[92.50000000 191.57052612]
[92.50000000 176.57052612]
[92.50000000 161.57052612]
[82.98447418 159.64605713]
[73.88579559 156.26036072]
[65.42687225 151.49639893]
[57.81491852 145.47085571]
[51.23642731 138.33137512]
[45.85255432 130.25283813]
[41.79519272 121.43316650]
[39.16374207 112.08841705]
[38.02266693 102.44752502]
[38.39992142 92.74667358]
[40.28626633 83.22351837]
[43.63548660 74.11135101]
[48.36553574 65.63341522]
[54.36053085 57.99739075]
[61.47361374 51.39035416]
[69.53051758 45.97416306]
[78.33386993 41.88150787]
[74.83219147 27.29595947]
[71.33051300 12.71041012]
[67.25890350 -1.72641861]
[62.62364960 -15.99226665]
[57.98839188 -30.25811386]
[53.07394028 -44.43020630]
[40.12646484 -54.49473953]
[42.63660049 -70.70064545]
[58.02214050 -76.37667084]
[70.45575714 -65.68380737]
[67.14681244 -49.62195969]
[72.55966187 -44.29661560]
[72.25424194 -34.89336777]
[76.88949585 -20.62752151]
[81.52474976 -6.36167336]
[85.53578949 -3.33929348]
[87.52627563 2.34635377]
[85.91606140 9.20872974]
[89.41773987 23.79427910]
[92.91941833 38.37982559]
[125.96763611 43.67183685]
[151.45481873 65.36501312]
[164.81991577 58.55515671]
[178.04873657 51.48420715]
[185.96392822 37.12169266]
[202.36297607 37.06576538]
[210.37594604 51.37395859]
[201.75978088 65.32722473]
[185.37805176 64.57164764]
[180.96502686 70.75092316]
[171.62977600 71.92025757]
[158.26467896 78.73011017]
[160.95094299 88.50379181]
[162.00949097 98.58448792]
[161.41203308 108.70298767]
[159.17454529 118.58906555]
[155.35676575 127.97871399]
[150.06066895 136.62117004]
[143.42765808 144.28564453]
[135.63490295 150.76745605]
[126.89048767 155.89349365]
[117.42795563 159.52685547]
[107.50000000 161.57052612]
[107.50000000 176.57052612]
[107.50000000 191.57052612]
[107.50000000 206.57052612]
[107.50000000 221.57052612]
[107.50000000 236.57052612]
[107.50000000 251.57052612]
[107.50000000 266.57052612]
[107.50000000 281.57052612]
[113.54634094 297.40966797]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[5 75]
[6 74]
[7 73]
[8 72]
[9 71]
[10 70]
[27 47]
[28 46]
[29 45]
[30 42]
[31 41]
[32 40]
[33 38]
[49 59]
[50 58]
[51 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
