%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACGGCCAGGCCAACCUCAAAGAGGAAGCAUCAAAGAUGCACGGAGAAACUCCACGCGAAACGCAAGCCUCGUUCG\
) } def
/len { sequence length } bind def

/coor [
[72.67875671 290.70089722]
[62.01229477 279.03890991]
[62.79969788 263.25424194]
[74.57381439 252.71166992]
[75.16271210 237.72323608]
[75.75160980 222.73480225]
[76.34049988 207.74635315]
[73.97454071 204.79492188]
[73.07756042 200.45918274]
[74.32704926 195.52296448]
[77.98387146 191.06097412]
[80.33039093 176.24565125]
[82.67690277 161.43031311]
[85.02342224 146.61499023]
[70.51315308 139.08685303]
[59.28976822 127.20170593]
[52.60433578 112.28440857]
[51.20207214 95.99776459]
[36.61652374 92.49608612]
[22.03097534 88.99440765]
[7.44542551 85.49272919]
[-9.36756039 87.67443085]
[-16.11830330 72.12245941]
[-3.04289985 61.33032608]
[10.94710636 70.90718079]
[25.53265572 74.40885925]
[40.11820221 77.91053772]
[54.70375443 81.41221619]
[61.12331390 70.23661804]
[70.23661804 61.12331390]
[81.41221619 54.70375443]
[77.91053772 40.11820221]
[74.40885925 25.53265572]
[70.90718079 10.94710636]
[67.40549469 -3.63844275]
[57.82864761 -17.62844849]
[68.62078094 -30.70385170]
[84.17275238 -23.95310974]
[81.99104309 -7.14012337]
[85.49272919 7.44542551]
[88.99440765 22.03097534]
[92.49608612 36.61652374]
[95.99776459 51.20207214]
[108.86972046 51.84832764]
[121.12709045 55.83098602]
[131.92057800 62.87409973]
[143.32666016 53.13237762]
[154.73275757 43.39065933]
[166.13883972 33.64893723]
[174.25622559 18.76457214]
[190.80603027 22.44432640]
[191.85151672 39.36600494]
[175.88056946 45.05502701]
[164.47447205 54.79674911]
[153.06838989 64.53846741]
[141.66229248 74.28018951]
[146.13543701 83.60556793]
[148.54989624 93.66249847]
[148.79792786 104.00223541]
[163.38348389 107.50391388]
[177.96902466 111.00559235]
[194.78201294 108.82388306]
[201.53276062 124.37585449]
[188.45735168 135.16799927]
[174.46734619 125.59114075]
[159.88179016 122.08946228]
[145.29624939 118.58778381]
[134.65919495 134.58317566]
[118.68718719 145.25532532]
[99.83874512 148.96151733]
[97.49223328 163.77684021]
[95.14571381 178.59216309]
[92.79919434 193.40748596]
[91.32894135 208.33525085]
[90.74004364 223.32369995]
[90.15114594 238.31213379]
[89.56224823 253.30056763]
[100.47290802 264.73440552]
[100.01943207 280.53219604]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 77]
[5 76]
[6 75]
[7 74]
[11 73]
[12 72]
[13 71]
[14 70]
[18 28]
[19 27]
[20 26]
[21 25]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[46 56]
[47 55]
[48 54]
[49 53]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
