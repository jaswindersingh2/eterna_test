%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCGCACCUCUCACUAUUCUACCCACCAAAAUUCAACCCUCCCUCACUUCUCUUCUUACCGCGCUCGAACUUUCG\
) } def
/len { sequence length } bind def

/coor [
[94.73363495 156.99700928]
[94.14473724 142.00857544]
[93.55583954 127.02014160]
[92.96694183 112.03170776]
[90.91175842 97.17316437]
[87.41007233 82.58761597]
[83.90839386 68.00206757]
[80.40671539 53.41652298]
[76.90503693 38.83097458]
[62.00758743 40.70961380]
[46.99389267 40.93798447]
[32.04619980 39.51330566]
[17.34596443 36.45288086]
[3.07162857 31.79384995]
[-10.60352707 25.59277725]
[-23.51350021 17.92493439]
[-35.50157547 8.88340473]
[-46.42222595 -1.42205799]
[-56.14288712 -12.86635399]
[-64.54556274 -25.31056213]
[-71.52824402 -38.60361862]
[-77.00617218 -52.58415604]
[-80.91284943 -67.08246613]
[-83.20085907 -81.92255402]
[-83.84241486 -96.92427826]
[-82.82973480 -111.90551758]
[-80.17510986 -126.68443298]
[-75.91076660 -141.08160400]
[-70.08847809 -154.92227173]
[-62.77890396 -168.03842163]
[-54.07078934 -180.27082825]
[-44.06983948 -191.47102356]
[-32.89745712 -201.50302124]
[-20.68926048 -210.24505615]
[-7.59345150 -217.59100342]
[6.23100233 -223.45169067]
[20.61628342 -227.75598145]
[35.38776779 -230.45161438]
[50.36614227 -231.50587463]
[65.36958313 -230.90596008]
[80.21596527 -228.65914917]
[94.72506714 -224.79272461]
[108.72075653 -219.35362244]
[122.03314209 -212.40786743]
[134.50062561 -204.03976440]
[145.97186279 -194.35090637]
[156.30760193 -183.45890808]
[165.38237000 -171.49597168]
[173.08601379 -158.60733032]
[179.32501221 -144.94944763]
[184.02365112 -130.68809509]
[187.12486267 -115.99640656]
[188.59103394 -101.05272675]
[188.40434265 -86.03845978]
[186.56704712 -71.13585663]
[183.10148621 -56.52582550]
[178.04969788 -42.38571930]
[171.47300720 -28.88718414]
[163.45126343 -16.19408226]
[154.08184814 -4.46049404]
[143.47846985 6.17114353]
[131.76986694 15.57177258]
[119.09816742 23.62727928]
[105.61718750 30.23987579]
[91.49058533 35.32929230]
[94.99226379 49.91484070]
[98.49394226 64.50038910]
[101.99562073 79.08593750]
[105.49730682 93.67148590]
[107.92377472 95.11537170]
[109.91764832 97.47513580]
[111.14344025 100.60070801]
[111.32328033 104.22332764]
[110.27738953 107.97859955]
[107.95537567 111.44281006]
[108.54427338 126.43124390]
[109.13317108 141.41967773]
[109.72206879 156.40811157]
[112.66726685 175.56472778]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[4 75]
[5 69]
[6 68]
[7 67]
[8 66]
[9 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
