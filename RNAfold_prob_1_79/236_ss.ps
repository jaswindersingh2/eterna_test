%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACAUUGGUUAAGGAUAUUGAGAGAUAAUCCAAAACCAUAUUUGAGAGAAAUGGAUAAUUGGUGCAAGAGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[95.40647888 185.53170776]
[77.57908630 182.66847229]
[60.74798584 176.13180542]
[45.66106796 166.21217346]
[32.98873520 153.35037231]
[23.29408836 138.11791992]
[17.00791740 121.19166565]
[14.40954971 103.32374573]
[15.61444664 85.30813599]
[20.56906891 67.94536591]
[7.20397091 61.13550949]
[-6.16112709 54.32564926]
[-19.52622414 47.51579285]
[-32.89132309 40.70593643]
[-47.75703430 45.35871887]
[-61.21413422 38.26216507]
[-65.55824280 24.06130981]
[-78.92333984 17.25145149]
[-92.28843689 10.44159412]
[-105.65353394 3.63173699]
[-119.14975739 -2.91440153]
[-132.77191162 -9.19429779]
[-146.39405823 -15.47419357]
[-162.66600037 -13.43564701]
[-172.35037231 -26.66988564]
[-165.48471069 -41.56266022]
[-149.13182068 -42.79356003]
[-140.11415100 -29.09634209]
[-126.49201202 -22.81644440]
[-112.86986542 -16.53654861]
[-105.27680969 -16.59842491]
[-98.84367371 -9.73336124]
[-85.47857666 -2.92350340]
[-72.11347961 3.88635421]
[-58.74838257 10.69621181]
[-44.70624924 5.86361408]
[-31.05512810 12.57938671]
[-26.08146477 27.34083748]
[-12.71636772 34.15069580]
[0.64873028 40.96055222]
[14.01382828 47.77040863]
[27.37892532 54.58026886]
[34.85644150 44.38445282]
[43.75342941 35.40049744]
[53.87602615 27.82416344]
[65.00366211 21.82053375]
[76.89386749 17.52043152]
[89.28755188 15.01755524]
[101.91466522 14.36644077]
[114.50005341 15.58127594]
[126.76948547 18.63559151]
[138.45561218 23.46283150]
[149.30380249 29.95781326]
[159.07765198 37.97900772]
[167.56420898 47.35163879]
[174.57855225 57.87147522]
[179.96781921 69.30928802]
[183.61460876 81.41584778]
[185.43942261 93.92736053]
[185.40252686 106.57118988]
[183.50471497 119.07183838]
[179.78733826 131.15690613]
[174.33140564 142.56306458]
[167.25578308 153.04179382]
[158.71467590 162.36473083]
[168.00108337 174.14448547]
[182.62092590 180.19187927]
[184.42405701 194.97692871]
[193.71047974 206.75668335]
[209.13436890 212.32763672]
[211.75498962 228.51605225]
[198.87644958 238.66865540]
[183.74710083 232.34133911]
[181.93072510 216.04310608]
[172.64430237 204.26335144]
[158.68870544 199.05851746]
[156.22132874 183.43089294]
[146.93492126 171.65113831]
[130.87237549 179.89787292]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 42]
[11 41]
[12 40]
[13 39]
[14 38]
[17 35]
[18 34]
[19 33]
[20 32]
[21 30]
[22 29]
[23 28]
[65 78]
[66 77]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
