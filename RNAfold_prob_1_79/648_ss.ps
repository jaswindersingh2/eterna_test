%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCGCCUCUCUCUUCUUUUCUCCCUCUUUUUCUCUCUCUCUUCUCCUCCCUCCUCUCCUUGCGCUAUAGAGUUCG\
) } def
/len { sequence length } bind def

/coor [
[61.58634949 113.09557343]
[59.44945145 98.34006500]
[62.78521347 83.80857849]
[71.14345551 71.46226501]
[83.39614105 62.96738815]
[79.89446259 48.38183975]
[76.39278412 33.79629135]
[72.89109802 19.21074104]
[69.38941956 4.62519217]
[54.49197388 6.50383425]
[39.47827911 6.73220348]
[24.53058815 5.30752659]
[9.83035088 2.24709821]
[-4.44398403 -2.41193056]
[-18.11914062 -8.61300373]
[-31.02911186 -16.28084564]
[-43.01718521 -25.32237625]
[-53.93783951 -35.62783813]
[-63.65850067 -47.07213593]
[-72.06117249 -59.51634216]
[-79.04385376 -72.80939484]
[-84.52178192 -86.78993988]
[-88.42846680 -101.28824615]
[-90.71646881 -116.12833405]
[-91.35802460 -131.13005066]
[-90.34534454 -146.11129761]
[-87.69072723 -160.89021301]
[-83.42638397 -175.28738403]
[-77.60408783 -189.12805176]
[-70.29451752 -202.24420166]
[-61.58640289 -214.47660828]
[-51.58545303 -225.67680359]
[-40.41307068 -235.70880127]
[-28.20487404 -244.45083618]
[-15.10906410 -251.79678345]
[-1.28461087 -257.65747070]
[13.10066986 -261.96176147]
[27.87215424 -264.65737915]
[42.85052872 -265.71163940]
[57.85397339 -265.11172485]
[72.70035553 -262.86492920]
[87.20945740 -258.99850464]
[101.20514679 -253.55940247]
[114.51753235 -246.61364746]
[126.98501587 -238.24554443]
[138.45625305 -228.55668640]
[148.79197693 -217.66468811]
[157.86676025 -205.70175171]
[165.57040405 -192.81311035]
[171.80940247 -179.15522766]
[176.50804138 -164.89387512]
[179.60925293 -150.20219421]
[181.07542419 -135.25851440]
[180.88871765 -120.24423981]
[179.05143738 -105.34163666]
[175.58586121 -90.73160553]
[170.53407288 -76.59149933]
[163.95739746 -63.09296417]
[155.93565369 -50.39986038]
[146.56622314 -38.66627502]
[135.96286011 -28.03463745]
[124.25425720 -18.63400841]
[111.58255768 -10.57850170]
[98.10157776 -3.96590471]
[83.97496796 1.12351167]
[87.47664642 15.70906067]
[90.97833252 30.29460907]
[94.48001099 44.88015747]
[97.98168945 59.46570587]
[112.75551605 61.47209549]
[125.80786133 68.67817688]
[135.37721252 80.11141968]
[140.17207336 94.22880554]
[139.54536438 109.12506866]
[133.58163452 122.78982544]
[123.08576965 133.37887573]
[109.47426605 139.46315002]
[94.58412170 140.22152710]
[80.42490387 135.55162048]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 69]
[6 68]
[7 67]
[8 66]
[9 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
