%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACACUUCAGAAAAAACUGAUCCAAAGGAAAGUGACUCACUCAAAAAGAGACCCAAAAGGGUGAGCCGCGUAUUCG\
) } def
/len { sequence length } bind def

/coor [
[86.35573578 116.23718262]
[73.26829529 123.56650543]
[60.18085098 130.89582825]
[73.58983612 137.61885071]
[78.65803528 151.73669434]
[72.58664703 165.45304871]
[58.72846985 171.19332886]
[44.73640060 165.78759766]
[38.33727646 152.22105408]
[43.06494904 137.98545837]
[28.62811852 142.05706787]
[14.19128990 146.12867737]
[-0.24553819 150.20028687]
[-7.74820232 164.11019897]
[-22.91291618 168.56069946]
[-36.74272537 160.91139221]
[-41.03264999 145.70046997]
[-33.23755264 131.95230103]
[-17.98212433 127.82344055]
[-4.31714487 135.76345825]
[10.11968327 131.69184875]
[24.55651283 127.62023926]
[38.99333954 123.54862976]
[52.85153198 117.80838013]
[65.93897247 110.47906494]
[79.02641296 103.14974213]
[81.04722595 90.48135376]
[90.00225067 81.29553223]
[102.61512756 78.95307159]
[114.27121735 84.31100464]
[127.63631439 77.50114441]
[141.00141907 70.69129181]
[145.99320984 54.05958176]
[161.11138916 46.21878815]
[176.94776917 51.50807190]
[190.03520203 44.17875290]
[203.12265015 36.84943390]
[211.38262939 23.35561180]
[226.26773071 23.88756180]
[239.35517883 16.55824280]
[252.44261169 9.22892380]
[265.53005981 1.89960504]
[278.61749268 -5.42971373]
[291.70492554 -12.75903225]
[304.79238892 -20.08835030]
[302.33126831 -35.04558182]
[305.13732910 -49.94195557]
[312.87167358 -62.97865677]
[324.60037231 -72.58144379]
[338.90710449 -77.59072876]
[354.06430054 -77.40162659]
[368.24160767 -72.03696442]
[379.72708130 -62.14454651]
[387.13375854 -48.91894150]
[389.56729126 -33.95719910]
[386.73379517 -19.06602287]
[378.97543335 -6.04359674]
[367.22906494 3.53755951]
[352.91311646 8.52047348]
[337.75631714 8.30343533]
[323.58889771 2.91265297]
[312.12170410 -7.00091076]
[299.03424072 0.32840794]
[285.94680786 7.65772676]
[272.85937500 14.98704529]
[259.77194214 22.31636429]
[246.68449402 29.64568329]
[233.59706116 36.97500229]
[226.27317810 49.94458008]
[210.45196533 49.93687439]
[197.36453247 57.26619339]
[184.27708435 64.59551239]
[182.49148560 77.51179504]
[173.39642334 87.12710571]
[160.21417236 89.70305634]
[147.81126404 84.05638885]
[134.44616699 90.86624146]
[121.08107758 97.67610168]
[116.44658661 113.39111328]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 26]
[2 25]
[3 24]
[10 23]
[11 22]
[12 21]
[13 20]
[30 78]
[31 77]
[32 76]
[35 72]
[36 71]
[37 70]
[39 68]
[40 67]
[41 66]
[42 65]
[43 64]
[44 63]
[45 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
