%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAUGCGAACAUAAGGGCGCGUAAACGCAGCCCAAAAGCGCAGCGUAAACGCGCGCAUAUGAACGCGUAUAUAUUCG\
) } def
/len { sequence length } bind def

/coor [
[106.66445160 329.24603271]
[103.71851349 314.33328247]
[106.70858002 299.42935181]
[115.17868805 286.80691528]
[127.83721161 278.39083862]
[124.91085815 263.67907715]
[121.98450470 248.96728516]
[119.05814362 234.25550842]
[116.13179016 219.54373169]
[103.64327240 211.50802612]
[100.46595764 196.62988281]
[108.97920990 183.58525085]
[106.05284882 168.87347412]
[103.12649536 154.16169739]
[100.20014191 139.44992065]
[90.12854767 128.47666931]
[95.02489471 113.43218994]
[85.95128632 102.79446411]
[90.26332855 89.49416351]
[87.33696747 74.78238678]
[84.41061401 60.07060623]
[81.48426056 45.35882568]
[78.55790710 30.64704895]
[75.63155365 15.93526840]
[62.77436829 7.14148569]
[60.01620483 -7.82003736]
[68.47896576 -20.02320290]
[65.55261230 -34.73498154]
[62.62625885 -49.44676208]
[59.69990158 -64.15853882]
[49.41899109 -76.18407440]
[54.52465439 -90.17626953]
[51.59830093 -104.88804626]
[37.45072556 -111.26187897]
[29.78079224 -124.75083160]
[31.53774452 -140.16812134]
[42.04600143 -151.58547974]
[57.26491928 -154.61271667]
[71.34251404 -148.08578491]
[78.86566925 -134.51441956]
[76.94157410 -119.11709595]
[66.31008148 -107.81439972]
[69.23643494 -93.10262299]
[79.30802917 -82.12937164]
[74.41168213 -67.08489227]
[77.33803558 -52.37311554]
[80.26438904 -37.66133499]
[83.19074249 -22.94955826]
[95.67926788 -14.91386223]
[98.85658264 -0.03571279]
[90.34333038 13.00891399]
[93.26968384 27.72069359]
[96.19603729 42.43247223]
[99.12239838 57.14425278]
[102.04875183 71.85603333]
[104.97510529 86.56781006]
[114.04871368 97.20553589]
[109.73667145 110.50583649]
[120.01758575 122.53137207]
[114.91191864 136.52355957]
[117.83827972 151.23533630]
[120.76463318 165.94711304]
[123.69098663 180.65890503]
[136.54817200 189.45268250]
[139.30633545 204.41419983]
[130.84356689 216.61737061]
[133.76992798 231.32914734]
[136.69627380 246.04092407]
[139.62263489 260.75271606]
[142.54899597 275.46447754]
[157.46463013 278.39572144]
[170.12039185 286.81594849]
[178.58634949 299.44116211]
[181.57150269 314.34609985]
[178.62066650 329.25787354]
[170.18379211 341.90252686]
[157.54745483 350.35186768]
[142.63859558 353.31744385]
[127.73072052 350.34698486]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 70]
[6 69]
[7 68]
[8 67]
[9 66]
[12 63]
[13 62]
[14 61]
[15 60]
[17 58]
[19 56]
[20 55]
[21 54]
[22 53]
[23 52]
[24 51]
[27 48]
[28 47]
[29 46]
[30 45]
[32 43]
[33 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
