%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGAGUAGCACAGGGAAAACCCGACAAAAGUCGUGAAAAGACUUCAAAAGAAGUCCUACUCAAACGACGUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[111.36558533 260.43325806]
[105.73748779 246.42515564]
[104.09859467 231.41793823]
[106.57050323 216.52525330]
[112.96979523 202.85221863]
[122.82159424 191.41348267]
[135.39483643 183.05787659]
[130.75958252 168.79202271]
[126.12432098 154.52618408]
[121.48906708 140.26033020]
[116.85381317 125.99448395]
[112.21855927 111.72863770]
[108.25904083 118.29437256]
[100.98066711 123.18703461]
[91.22669220 124.83941650]
[80.53299713 122.13670349]
[70.88807678 114.70327759]
[55.99205017 112.94021606]
[41.09602356 111.17715454]
[26.25042534 118.14423370]
[12.95044041 108.55036163]
[14.87795353 92.26488495]
[30.05010414 86.04090881]
[42.85908508 96.28112793]
[57.75511169 98.04418945]
[72.65113831 99.80725098]
[79.98046112 86.71981049]
[70.69404602 74.94005585]
[61.40763855 63.16030121]
[45.98374557 57.58934784]
[43.36312866 41.40094376]
[56.24165726 31.24833298]
[71.37100220 37.57564926]
[73.18739319 53.87389374]
[82.47380066 65.65364838]
[91.76020813 77.43340302]
[99.20822144 78.31493378]
[91.29897308 65.56958771]
[96.33217621 51.43923569]
[110.51782990 46.56406021]
[123.17409515 54.61507797]
[124.77078247 69.52985382]
[114.10424805 80.07798767]
[121.55226135 80.95951843]
[133.33201599 71.67311096]
[145.11177063 62.38670349]
[156.89152527 53.10029221]
[168.67127991 43.81388474]
[180.45103455 34.52747726]
[186.02198792 19.10358047]
[202.21038818 16.48296547]
[212.36300659 29.36149406]
[206.03569031 44.49084091]
[189.73744202 46.30722809]
[177.95768738 55.59363937]
[166.17793274 64.88005066]
[154.39817810 74.16645813]
[142.61842346 83.45286560]
[130.83866882 92.73927307]
[126.48440552 107.09338379]
[131.11965942 121.35923004]
[135.75491333 135.62507629]
[140.39016724 149.89093018]
[145.02542114 164.15676880]
[149.66067505 178.42262268]
[164.74394226 177.79208374]
[179.43774414 181.25547791]
[192.65167236 188.55577087]
[203.40519714 199.15126038]
[210.90032959 212.25567627]
[214.58085632 226.89659119]
[214.17369080 241.98753357]
[209.70903015 256.40869141]
[201.51818848 269.08987427]
[190.20896912 279.09008789]
[176.62060547 285.66723633]
[161.76142883 288.33325195]
[146.73410034 286.89028931]
[132.65374756 281.44546509]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[17 26]
[18 25]
[19 24]
[27 36]
[28 35]
[29 34]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
