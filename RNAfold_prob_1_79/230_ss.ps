%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACGAUUGAUAUACUAAAUGGAAACGUAUUAGAAAAGUGUAUUGGAAACAAAUACAGUGUUGAUCCAUUUACUUCG\
) } def
/len { sequence length } bind def

/coor [
[99.14681244 304.75018311]
[91.76204681 291.54714966]
[88.82067108 276.70788574]
[90.61085510 261.68621826]
[96.95720673 247.95381165]
[107.23798370 236.85603333]
[120.44596863 229.48011780]
[117.51961517 214.76832581]
[114.59326172 200.05654907]
[111.66690826 185.34477234]
[108.74055481 170.63299561]
[105.81420135 155.92121887]
[102.88784027 141.20944214]
[99.96148682 126.49765778]
[97.03513336 111.78588104]
[86.10533905 111.20888519]
[76.46173859 100.78369141]
[63.09663773 93.97383118]
[49.73154068 87.16397858]
[36.36644363 80.35411835]
[22.87021828 73.80797577]
[9.24807072 67.52808380]
[-4.37407684 61.24818802]
[-20.64602661 63.28673553]
[-30.33039474 50.05249405]
[-23.46473122 35.15972137]
[-7.11184406 33.92882156]
[1.90581918 47.62603760]
[15.52796650 53.90593719]
[29.15011406 60.18583298]
[36.74316406 60.12395477]
[43.17630005 66.98902130]
[56.54139709 73.79887390]
[69.90649414 80.60873413]
[83.27159119 87.41859436]
[74.04363251 75.59299469]
[76.55045319 60.80395508]
[89.15998840 52.67993546]
[103.66273499 56.51012421]
[110.61661530 69.80085754]
[105.49458313 83.89881897]
[116.10118103 73.29221344]
[126.70778656 62.68561172]
[137.31439209 52.07901001]
[147.92098999 41.47240829]
[158.52758789 30.86580849]
[156.98452759 15.30454254]
[165.84771729 2.42129374]
[180.93220520 -1.70086205]
[195.11557007 4.88443136]
[201.70086670 19.06779861]
[197.57870483 34.15229034]
[184.69544983 43.01546860]
[169.13418579 41.47240829]
[158.52758789 52.07901001]
[147.92098999 62.68561172]
[137.31439209 73.29221344]
[126.70778656 83.89881897]
[116.10118103 94.50541687]
[111.74691010 108.85951996]
[114.67327118 123.57130432]
[117.59962463 138.28308105]
[120.52597809 152.99485779]
[123.45233154 167.70663452]
[126.37868500 182.41842651]
[129.30503845 197.13020325]
[132.23139954 211.84197998]
[135.15774536 226.55375671]
[150.18298340 228.31373596]
[163.92811584 234.63247681]
[175.04655457 244.89091492]
[182.44900513 258.08404541]
[185.41026306 272.91934204]
[183.64021301 287.94342041]
[177.31227112 301.68429565]
[167.04638672 312.79586792]
[153.84828186 320.18948364]
[139.01100159 323.14077759]
[123.98814392 321.36068726]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 68]
[8 67]
[9 66]
[10 65]
[11 64]
[12 63]
[13 62]
[14 61]
[15 60]
[17 35]
[18 34]
[19 33]
[20 32]
[21 30]
[22 29]
[23 28]
[41 59]
[42 58]
[43 57]
[44 56]
[45 55]
[46 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
