%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGGAGAAGACACUGGAGCAAAGAGCAAAAGCAUCAGCACCAAGAGAACUUCAACCAAAAAAUAUCGUUUUCG\
) } def
/len { sequence length } bind def

/coor [
[140.95507812 198.05934143]
[136.91256714 212.50433350]
[129.19818115 225.36856079]
[118.35987091 235.73828125]
[105.16747284 242.87695312]
[90.55802155 246.27752686]
[75.56919861 245.69847107]
[61.26564789 241.18090820]
[48.66332245 233.04571533]
[38.65734863 221.87071228]
[31.95843697 208.44966125]
[29.04239845 193.73583984]
[30.11635780 178.77433777]
[35.10403061 164.62783813]
[43.65115356 152.30117798]
[55.15063477 142.66987610]
[68.78568268 136.41804504]
[83.58782196 133.98973083]
[98.50567627 135.55740356]
[112.47743988 141.00851440]
[105.66757965 127.64342499]
[98.85772705 114.27832794]
[87.23727417 106.50293732]
[87.77717590 92.53153229]
[80.96732330 79.16643524]
[70.12926483 76.29584503]
[62.92337799 67.99948883]
[61.65129852 57.30901337]
[66.50418854 47.94934082]
[60.76393509 34.09114838]
[54.75270462 20.34832954]
[48.47280884 6.72618103]
[34.77558899 -2.29148221]
[36.00648880 -18.64436913]
[50.89926529 -25.51003265]
[64.13349915 -15.82566547]
[62.09495544 0.44628498]
[68.37485504 14.06843281]
[74.18883514 18.95267487]
[74.62213135 28.35089684]
[80.36238098 42.20909119]
[96.54031372 52.50186920]
[94.33242035 72.35657501]
[101.14227295 85.72167206]
[112.76272583 93.49706268]
[112.22282410 107.46846771]
[119.03267670 120.83356476]
[125.84253693 134.19866943]
[131.02029419 136.95790100]
[134.22183228 141.35525513]
[148.48767090 145.99050903]
[162.75352478 150.62576294]
[177.01937866 155.26101685]
[191.28521729 159.89627075]
[205.55107117 164.53152466]
[214.63565063 152.41752625]
[227.16282654 143.91172791]
[241.77372742 139.93676758]
[256.88348389 140.92381287]
[270.85308838 146.76580811]
[282.16720581 156.82905579]
[289.59860229 170.02197266]
[292.34118652 184.91348267]
[290.09741211 199.88827515]
[283.11068726 213.32197571]
[272.13891602 223.75743103]
[258.37219238 230.06265259]
[243.30381775 231.55369568]
[228.56832886 228.06884766]
[215.76411438 219.98611450]
[206.28007507 208.18222046]
[201.14497375 193.93759155]
[200.91581726 178.79737854]
[186.64996338 174.16212463]
[172.38410950 169.52687073]
[158.11827087 164.89161682]
[143.85241699 160.25636292]
[129.58657837 155.62110901]
[137.15721130 168.57044983]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 48]
[21 47]
[22 46]
[24 44]
[25 43]
[29 41]
[30 40]
[31 38]
[32 37]
[50 78]
[51 77]
[52 76]
[53 75]
[54 74]
[55 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
