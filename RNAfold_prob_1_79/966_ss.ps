%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGAUAGAGAAUAAAAGUUCAGAAUUAUAGAAAAAAAUUAUGAUUUACAAGAAAACUUGAUUAUCGAGUGUUUUCG\
) } def
/len { sequence length } bind def

/coor [
[119.72633362 138.79161072]
[113.62642670 141.33084106]
[107.21242523 142.91734314]
[100.63216400 143.51457214]
[94.03733826 143.10874939]
[87.57995605 141.70922852]
[81.40885925 139.34828186]
[75.66631317 136.08030701]
[70.48467255 131.98066711]
[65.98339081 127.14383698]
[62.26622391 121.68132019]
[59.41884995 115.71902466]
[44.70707321 118.64537811]
[29.99529266 121.57173920]
[15.28351402 124.49809265]
[3.31745696 135.71171570]
[-12.29625034 130.69732666]
[-15.49556541 114.61328125]
[-2.98930693 104.00547791]
[12.35715866 109.78630829]
[27.06893730 106.85995483]
[41.78071594 103.93360138]
[56.49249649 101.00724792]
[63.34741211 76.53715515]
[82.69988251 60.06726456]
[79.19820404 45.48171616]
[75.69652557 30.89616585]
[72.19483948 16.31061745]
[68.69316101 1.72506869]
[65.19148254 -12.86048031]
[61.68980026 -27.44602966]
[58.18812180 -42.03157806]
[54.68643951 -56.61712646]
[40.61203384 -63.43219376]
[34.25825882 -77.72077179]
[38.62516785 -92.73623657]
[51.65084076 -101.38874054]
[67.18495941 -99.59283447]
[77.89277649 -88.19649506]
[78.71839905 -72.58071899]
[69.27198792 -60.11880875]
[72.77366638 -45.53325653]
[76.27535248 -30.94771004]
[79.77703094 -16.36215973]
[83.27870941 -1.77661180]
[86.78039551 12.80893707]
[90.28207397 27.39448547]
[93.78375244 41.98003387]
[97.28543091 56.56558228]
[113.84791565 58.74284744]
[128.36999512 66.99907684]
[138.71194458 80.11778259]
[143.34994507 96.16599274]
[141.60061646 112.77912903]
[154.96571350 119.58898163]
[168.33081055 126.39884186]
[181.69590759 133.20869446]
[195.31805420 139.48860168]
[209.17625427 145.22885132]
[223.03443909 150.96910095]
[236.89263916 156.70935059]
[250.75082397 162.44960022]
[264.60900879 168.18984985]
[281.55630493 168.66513062]
[285.79107666 185.08168030]
[271.18838501 193.69551086]
[258.86877441 182.04804993]
[245.01057434 176.30780029]
[231.15238953 170.56753540]
[217.29418945 164.82728577]
[203.43600464 159.08703613]
[189.57780457 153.34678650]
[184.67460632 154.43392944]
[179.05848694 152.25497437]
[174.88604736 146.57379150]
[161.52095032 139.76394653]
[148.15585327 132.95408630]
[134.79075623 126.14422607]
[130.43188477 131.10977173]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 23]
[13 22]
[14 21]
[15 20]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[54 78]
[55 77]
[56 76]
[57 75]
[58 72]
[59 71]
[60 70]
[61 69]
[62 68]
[63 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
