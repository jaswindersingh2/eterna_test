%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACGGCUAAGCCACGGUCAAUGACCACGGAUCUAAGAUCCACGCAGAAACUGCACGCGAAACGCACUGCUAGUUCG\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 273.79974365]
[92.50000000 257.96063232]
[92.50000000 242.96061707]
[92.50000000 227.96061707]
[81.81912994 217.64294434]
[81.60544586 202.43080139]
[92.50000000 191.29768372]
[92.50000000 176.29768372]
[92.50000000 161.29768372]
[82.02141571 159.07983398]
[72.08365631 155.08477783]
[62.98564911 149.43270874]
[55.00107956 142.29365540]
[48.37013626 133.88233948]
[43.29228592 124.45180511]
[39.92027283 114.28572845]
[38.35553360 103.68991852]
[38.64514160 92.98311615]
[24.05959129 89.48143768]
[9.47404194 85.97975159]
[-5.11150646 82.47807312]
[-21.92449188 84.65978241]
[-28.67523575 69.10781097]
[-15.59983158 58.31567383]
[-1.60982609 67.89252472]
[12.97572231 71.39420319]
[27.56127167 74.89588928]
[42.14682007 78.39756775]
[50.56728363 62.98564911]
[62.98564911 50.56728363]
[78.39756775 42.14682007]
[74.89588928 27.56127167]
[71.39420319 12.97572231]
[67.89252472 -1.60982609]
[64.39084625 -16.19537544]
[54.81399536 -30.18538094]
[65.60613251 -43.26078415]
[81.15810394 -36.51004028]
[78.97639465 -19.69705582]
[82.47807312 -5.11150646]
[85.97975159 9.47404194]
[89.48143768 24.05959129]
[92.98311615 38.64514160]
[110.53804779 39.15096283]
[127.24070740 44.57798767]
[141.74026489 54.48729706]
[153.14634705 44.74557495]
[164.55244446 35.00385666]
[175.95852661 25.26213455]
[184.07591248 10.37776852]
[200.62571716 14.05752277]
[201.67120361 30.97920418]
[185.70025635 36.66822433]
[174.29415894 46.40994644]
[162.88807678 56.15166473]
[151.48197937 65.89338684]
[157.96583557 78.70169830]
[161.31716919 92.66098785]
[161.35485840 107.01688385]
[175.94041443 110.51856232]
[190.52595520 114.02024841]
[207.33894348 111.83853912]
[214.08969116 127.39051056]
[201.01428223 138.18264771]
[187.02427673 128.60578918]
[172.43873596 125.10411072]
[157.85317993 121.60243225]
[149.88909912 136.39688110]
[138.23202515 148.49708557]
[123.74485779 157.00733948]
[107.50000000 161.29768372]
[107.50000000 176.29768372]
[107.50000000 191.29768372]
[118.39455414 202.43080139]
[118.18087006 217.64294434]
[107.50000000 227.96061707]
[107.50000000 242.96061707]
[107.50000000 257.96063232]
[113.54634094 273.79974365]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[7 73]
[8 72]
[9 71]
[18 28]
[19 27]
[20 26]
[21 25]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[46 56]
[47 55]
[48 54]
[49 53]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
