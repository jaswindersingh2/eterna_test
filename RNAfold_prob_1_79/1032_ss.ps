%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGACAAAGUCAAGAUGAAACAUCAAGAUAGAAACUAUCAAGAUCAAAGAUCAAGAGAAACUCACGUGGGCUUCG\
) } def
/len { sequence length } bind def

/coor [
[83.83966827 262.38577271]
[72.53324127 272.58798218]
[58.05269623 277.30322266]
[42.90686417 275.71459961]
[29.71986008 268.09732056]
[20.77640915 255.77116394]
[17.62601662 240.87165833]
[20.81450844 225.98027039]
[29.78946114 213.67701721]
[42.99590683 206.09350586]
[58.14574814 204.54362488]
[62.78100586 190.27777100]
[67.41625977 176.01193237]
[72.05151367 161.74607849]
[76.68676758 147.48023987]
[59.94841003 134.55068970]
[49.61380386 116.09690857]
[47.33531570 95.06944275]
[32.74976730 91.56776428]
[18.16421700 88.06607819]
[3.57866859 84.56439972]
[-13.23431683 86.74610901]
[-19.98505974 71.19413757]
[-6.90965700 60.40200043]
[7.08034897 69.97885132]
[21.66589737 73.48052979]
[36.25144577 76.98221588]
[50.83699417 80.48389435]
[57.87714005 68.00712585]
[68.00712585 57.87714005]
[80.48389435 50.83699417]
[76.98221588 36.25144577]
[73.48052979 21.66589737]
[69.97885132 7.08034897]
[66.47717285 -7.50519991]
[56.90032196 -21.49520493]
[67.69245148 -34.57061005]
[83.24442291 -27.81986618]
[81.06272125 -11.00687981]
[84.56439972 3.57866859]
[88.06607819 18.16421700]
[91.56776428 32.74976730]
[95.06944275 47.33531570]
[109.38247681 47.94379425]
[123.00728607 52.37076187]
[134.94442749 60.29148483]
[146.35052490 50.54976273]
[157.75660706 40.80804443]
[169.16270447 31.06632233]
[177.28009033 16.18195534]
[193.82987976 19.86170959]
[194.87538147 36.78339005]
[178.90441895 42.47241211]
[167.49833679 52.21413040]
[156.09223938 61.95585251]
[144.68615723 71.69757080]
[149.77323914 82.09736633]
[152.47590637 93.35478973]
[152.66468811 104.93055725]
[167.25022888 108.43223572]
[181.83578491 111.93392181]
[198.64877319 109.75221252]
[205.39950562 125.30418396]
[192.32411194 136.09631348]
[178.33410645 126.51947021]
[163.74855042 123.01778412]
[149.16300964 119.51610565]
[143.49554443 130.10011292]
[135.58726501 139.13343811]
[125.84561157 146.15066528]
[114.77243805 150.79029846]
[102.93820953 152.81330872]
[90.95261383 152.11549377]
[86.31735992 166.38133240]
[81.68210602 180.64718628]
[77.04685211 194.91304016]
[72.41159821 209.17887878]
[83.75708008 219.33761597]
[89.98384094 233.23536682]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 77]
[12 76]
[13 75]
[14 74]
[15 73]
[18 28]
[19 27]
[20 26]
[21 25]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[46 56]
[47 55]
[48 54]
[49 53]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
