%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACGGAAACCGAAGUUCAAAGAGCAAGACUCAAAGAGUCAAGGACAAAGUCCAAGACAAAGUCAGAUGGCAUUCG\
) } def
/len { sequence length } bind def

/coor [
[80.74836731 276.30212402]
[70.04054260 287.69845581]
[54.50642776 289.49438477]
[41.48075104 280.84185791]
[37.11384201 265.82641602]
[43.46762085 251.53782654]
[57.54202652 244.72276306]
[61.04370499 230.13720703]
[64.54538727 215.55166626]
[68.04706573 200.96611023]
[60.06992340 188.44010925]
[63.41334915 173.59840393]
[76.60585785 165.31617737]
[80.10754395 150.73062134]
[65.00603485 141.76994324]
[53.53849411 128.47164917]
[46.89577866 112.21669006]
[45.76769638 94.69309235]
[31.18214798 91.19140625]
[16.59659958 87.68972778]
[2.01104999 84.18804932]
[-14.80193615 86.36975861]
[-21.55267906 70.81778717]
[-8.47727585 60.02565002]
[5.51273060 69.60250092]
[20.09827995 73.10417938]
[34.68382645 76.60585785]
[49.26937866 80.10754395]
[56.55984116 67.10230255]
[67.10230255 56.55984116]
[80.10754395 49.26937866]
[76.60585785 34.68382645]
[73.10417938 20.09827995]
[69.60250092 5.51273060]
[66.10082245 -9.07281876]
[56.52396774 -23.06282425]
[67.31610107 -36.13822556]
[82.86807251 -29.38748550]
[80.68637085 -12.57449913]
[84.18804932 2.01104999]
[87.68972778 16.59659958]
[91.19140625 31.18214798]
[94.69309235 45.76769638]
[109.59064484 46.35929108]
[123.77022552 50.96651840]
[136.17033386 59.24446869]
[147.57641602 49.50274658]
[158.98251343 39.76102829]
[170.38859558 30.01930618]
[178.50598145 15.13494015]
[195.05578613 18.81469345]
[196.10127258 35.73637390]
[180.13032532 41.42539597]
[168.72422791 51.16711807]
[157.31814575 60.90883636]
[145.91204834 70.65055847]
[151.24954224 81.48538208]
[154.06913757 93.22983551]
[154.23229980 105.30690765]
[168.81785583 108.80859375]
[183.40339661 112.31027222]
[200.21638489 110.12856293]
[206.96713257 125.68053436]
[193.89172363 136.47267151]
[179.90171814 126.89582062]
[165.31617737 123.39414215]
[150.73062134 119.89245605]
[143.94612122 132.21868896]
[134.23170471 142.39689636]
[122.23503876 149.74845886]
[108.75594330 153.78326416]
[94.69309235 154.23229980]
[91.19140625 168.81785583]
[99.18596649 182.18664551]
[95.42698669 196.92858887]
[82.63261414 204.46778870]
[79.13093567 219.05334473]
[75.62925720 233.63888550]
[72.12757111 248.22444153]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 79]
[8 78]
[9 77]
[10 76]
[13 73]
[14 72]
[18 28]
[19 27]
[20 26]
[21 25]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[46 56]
[47 55]
[48 54]
[49 53]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
