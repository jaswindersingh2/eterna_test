%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACAACAAGAAGGAAAAAAAAAACUUCAAGUAGGAAAAAAAAAACUACAAGUUGAAAAAAAAAAACUUGAACUUCG\
) } def
/len { sequence length } bind def

/coor [
[127.76541901 164.31477356]
[118.74528503 176.29965210]
[105.91907501 184.07707214]
[91.12172699 186.53440857]
[76.47016144 183.32009888]
[64.06046295 174.89398193]
[55.66796494 162.46153259]
[52.49331284 147.80131531]
[54.99067688 133.01068115]
[62.80278015 120.20555878]
[74.81201172 111.21788788]
[89.30209351 107.33331299]
[74.34833527 106.15642548]
[59.39457321 104.97953796]
[44.44081497 103.80265045]
[36.34065628 116.78903198]
[23.12739754 124.51355743]
[7.83734369 125.20119476]
[-6.01596069 118.69393158]
[-15.24912834 106.48707581]
[-17.74044418 91.38568878]
[-12.91742325 76.85995483]
[-1.88835895 66.24777222]
[12.81234932 61.98775482]
[27.80658722 65.05881500]
[39.64878845 74.75525665]
[45.61770248 88.84889221]
[60.57146072 90.02577972]
[75.52522278 91.20266724]
[90.47898102 92.37955475]
[90.76979065 89.21422577]
[91.95405579 85.94264984]
[94.07089996 82.79486847]
[96.41741180 67.97953796]
[98.76393127 53.16421509]
[101.11045074 38.34888840]
[88.79962921 29.25480461]
[82.13562012 15.47621632]
[82.64974213 0.17934531]
[90.22386932 -13.12069988]
[103.11751556 -21.36766624]
[118.36782074 -22.66646004]
[132.47036743 -16.71863174]
[142.18450928 -4.89094400]
[145.27798462 10.09868431]
[141.03994751 24.80574608]
[130.44427490 35.85066986]
[115.92577362 40.69540787]
[113.57925415 55.51073074]
[111.23274231 70.32605743]
[108.88622284 85.14138031]
[116.47108459 98.08239746]
[130.54394531 103.27415466]
[144.61682129 108.46591187]
[158.68969727 113.65766907]
[172.76255798 118.84941864]
[188.38777161 116.36682892]
[197.65037537 128.03102112]
[211.72325134 133.22277832]
[223.48034668 123.34014893]
[238.60638428 120.67588806]
[253.03256226 125.94667053]
[262.87829590 137.73468018]
[265.49511719 152.86900330]
[260.17913818 167.27857971]
[248.36033630 177.08731079]
[233.21788025 179.65669250]
[218.82504272 174.29557800]
[209.05340576 162.44607544]
[206.53149414 147.29565430]
[192.45861816 142.10389709]
[177.83999634 144.95783997]
[167.57080078 132.92228699]
[153.49794006 127.73053741]
[139.42506409 122.53878021]
[125.35219574 117.34702301]
[111.27932739 112.15526581]
[122.81095123 121.74805450]
[129.95486450 134.93762207]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 30]
[13 29]
[14 28]
[15 27]
[33 51]
[34 50]
[35 49]
[36 48]
[52 77]
[53 76]
[54 75]
[55 74]
[56 73]
[58 71]
[59 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
