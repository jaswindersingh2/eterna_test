%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGAUGGCGCAAAGGGCGAUCAAGACGCAGGGAUAACGUGGGUCAGGCGGUGCGAAAGGAUGGCCGCGCUAUUUCG\
) } def
/len { sequence length } bind def

/coor [
[85.97207642 278.24169922]
[71.75321960 271.73339844]
[65.09113312 257.58593750]
[69.13146210 242.47932434]
[81.96647644 233.54643250]
[83.14336395 218.59268188]
[84.32025146 203.63891602]
[85.49713898 188.68515015]
[86.67401886 173.73139954]
[87.85090637 158.77763367]
[89.02779388 143.82388306]
[90.20468140 128.87011719]
[91.38156891 113.91635895]
[85.12264252 127.54815674]
[73.99873352 137.61088562]
[59.80974960 142.47634888]
[44.85155106 141.35726929]
[31.54446411 134.43473816]
[22.04165649 122.82884979]
[17.88073540 108.41751099]
[19.73496246 93.53255463]
[27.30431366 80.58246613]
[39.36402512 71.66263580]
[53.96276093 68.21634674]
[68.73835754 70.80123138]
[81.30004883 78.99903870]
[89.61624146 91.48571777]
[86.11455536 76.90016937]
[82.61287689 62.31461716]
[71.86777496 50.70198441]
[76.42016602 36.52013016]
[72.91848755 21.93458176]
[62.17338181 10.32194519]
[66.72577667 -3.85990763]
[53.85316467 -13.43463135]
[53.45706558 -29.47279358]
[65.84133911 -39.67129135]
[81.50582886 -36.20670700]
[88.43408203 -21.73677444]
[81.31132507 -7.36158800]
[91.80596924 3.20779133]
[87.50403595 18.43290138]
[91.00571442 33.01844788]
[101.50035858 43.58782959]
[97.19842529 58.81293869]
[100.70010376 73.39849091]
[104.20178986 87.98403931]
[109.34466553 87.58342743]
[114.96857452 89.38441467]
[129.86460876 87.62135315]
[144.76063538 85.85829163]
[157.55572510 76.55258179]
[171.10420227 82.74032593]
[186.00022888 80.97726440]
[198.79531860 71.67155457]
[212.34379578 77.85929871]
[225.15277100 67.61907959]
[240.32492065 73.84305573]
[242.25244141 90.12853241]
[228.95245361 99.72240448]
[214.10685730 92.75532532]
[202.37722778 101.93492126]
[187.76329041 95.87329102]
[172.86726379 97.63635254]
[161.13763428 106.81594849]
[146.52369690 100.75431824]
[131.62767029 102.51737976]
[116.73163605 104.28044128]
[106.33532715 115.09324646]
[105.15843964 130.04699707]
[103.98155212 145.00076294]
[102.80466461 159.95452881]
[101.62778473 174.90827942]
[100.45089722 189.86204529]
[99.27400970 204.81579590]
[98.09712219 219.76956177]
[96.92023468 234.72332764]
[108.19982147 245.55406189]
[109.82720947 261.10675049]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 77]
[6 76]
[7 75]
[8 74]
[9 73]
[10 72]
[11 71]
[12 70]
[13 69]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[34 40]
[49 68]
[50 67]
[51 66]
[53 64]
[54 63]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
