%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACCAAGGACAACACAGCCAAAAGAGGUGCUACAGACACAACUCAGCCUACAGAGCAAGGAAAAAUAGUCAGUUCG\
) } def
/len { sequence length } bind def

/coor [
[69.73683929 160.59854126]
[64.81739044 169.87991333]
[57.73125458 177.61485291]
[48.93943787 183.31086731]
[39.01121140 186.60777283]
[28.58727074 187.30043030]
[18.33839035 185.35154724]
[8.92224789 180.89353943]
[0.94123101 174.21963501]
[-5.09610367 165.76451111]
[-19.36195183 170.39976501]
[-26.78981590 176.17393494]
[-34.27970505 174.92501831]
[-41.78236771 188.83491516]
[-56.94708252 193.28543091]
[-70.77689362 185.63612366]
[-75.06681824 170.42520142]
[-67.27172089 156.67703247]
[-52.01629257 152.54817200]
[-38.35131073 160.48818970]
[-23.99720573 156.13391113]
[-9.73135853 151.49865723]
[-7.42800045 131.32637024]
[4.30805683 114.67597961]
[22.65312195 105.66588593]
[43.13923645 106.56260681]
[60.74229431 117.21098328]
[73.21434021 108.87743378]
[85.68638611 100.54387665]
[92.04204559 88.09007263]
[105.98006439 86.98407745]
[118.45210266 78.65052032]
[130.75813293 70.07370758]
[142.89338684 61.25692368]
[155.02864075 52.44014740]
[149.71176147 37.77077103]
[148.70245361 22.21468163]
[152.07292175 7.00934935]
[159.54734802 -6.63789272]
[170.52430725 -17.64573097]
[184.12530518 -25.14453888]
[199.26493835 -28.54508018]
[214.73762512 -27.58479500]
[229.31350708 -22.34806442]
[241.83630371 -13.25885296]
[253.61605835 -22.54526138]
[265.39581299 -31.83167076]
[264.65206909 -47.33091354]
[273.18875122 -60.28872681]
[287.72329712 -65.72257233]
[302.66687012 -61.54302597]
[312.27340698 -49.35720444]
[312.84896851 -33.85080338]
[304.17224121 -20.98635864]
[289.57958984 -15.71050453]
[274.68222046 -20.05191803]
[262.90246582 -10.76550865]
[251.12271118 -1.47909904]
[256.77386475 11.83414173]
[258.75189209 26.17356873]
[256.91305542 40.54383850]
[251.37878418 53.94578552]
[242.52763367 65.44588470]
[230.96946716 74.24128723]
[217.50340271 79.71585846]
[203.06256104 81.48332977]
[188.64945984 79.41458130]
[175.26629639 73.64699554]
[163.84541321 64.57540131]
[151.71015930 73.39218140]
[139.57490540 82.20896149]
[135.91876221 88.86409760]
[126.78565979 91.12256622]
[114.31361389 99.45612335]
[107.95795441 111.90992737]
[94.01993561 113.01592255]
[81.54789734 121.34947968]
[69.07585144 129.68302917]
[71.94418335 139.83323669]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 22]
[11 21]
[13 20]
[27 78]
[28 77]
[29 76]
[31 74]
[32 73]
[33 71]
[34 70]
[35 69]
[45 58]
[46 57]
[47 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
