%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGUAUAAUAAGAAAUUAUAUGUGUUAUAGAAAAAAUGUAAUAUAAUCUAAAAAUAGAAAUACUUGUAUUGUUCG\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 309.34277344]
[92.50000000 293.50363159]
[92.50000000 278.50363159]
[92.50000000 263.50363159]
[84.76270294 250.77635193]
[92.50000000 236.97618103]
[92.50000000 221.97618103]
[92.50000000 206.97618103]
[92.50000000 191.97618103]
[92.50000000 176.97618103]
[92.50000000 161.97618103]
[92.50000000 146.97618103]
[83.35332489 144.56344604]
[74.86489105 140.38859558]
[67.37033081 134.61671448]
[61.16600418 127.47603607]
[56.49723053 119.24891663]
[53.54862213 110.26066589]
[52.43677139 100.86669159]
[53.20564270 91.43845367]
[55.82483673 82.34874725]
[60.19078445 73.95699310]
[66.13084412 66.59502411]
[73.41014862 60.55393982]
[81.74085236 56.07261276]
[78.23917389 41.48706436]
[74.73749542 26.90151405]
[71.23580933 12.31596565]
[67.73413086 -2.26958346]
[64.23245239 -16.85513306]
[60.73077011 -31.44068146]
[57.22909164 -46.02622986]
[53.72740936 -60.61177826]
[39.65300369 -67.42684174]
[33.29922485 -81.71542358]
[37.66613388 -96.73088837]
[50.69181061 -105.38339233]
[66.22592926 -103.58748627]
[76.93374634 -92.19114685]
[77.75936890 -76.57537079]
[68.31295776 -64.11345673]
[71.81463623 -49.52791214]
[75.31632233 -34.94235992]
[78.81800079 -20.35681343]
[82.31967926 -5.77126408]
[85.82135773 8.81428528]
[89.32304382 23.39983368]
[92.82472229 37.98538208]
[96.32640076 52.57093048]
[124.05468750 58.95875549]
[143.17666626 80.03034973]
[157.61349487 75.95874023]
[172.05032349 71.88713837]
[186.48715210 67.81552887]
[197.53651428 55.69762039]
[213.49551392 59.47151947]
[217.94691467 75.25496674]
[206.31147766 86.81130219]
[190.55876160 82.25235748]
[176.12193298 86.32396698]
[161.68510437 90.39556885]
[147.24827576 94.46717834]
[147.11709595 106.55677032]
[143.94245911 118.22283936]
[137.92944336 128.71183777]
[129.46643066 137.34623718]
[119.10008240 143.56832886]
[107.50000000 146.97618103]
[107.50000000 161.97618103]
[107.50000000 176.97618103]
[107.50000000 191.97618103]
[107.50000000 206.97618103]
[107.50000000 221.97618103]
[107.50000000 236.97618103]
[115.23729706 250.77635193]
[107.50000000 263.50363159]
[107.50000000 278.50363159]
[107.50000000 293.50363159]
[113.54634094 309.34277344]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[6 74]
[7 73]
[8 72]
[9 71]
[10 70]
[11 69]
[12 68]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[51 62]
[52 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
