%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAUGCCCUUGGACGUGCGUCCGGGUUCCUCAAUCAGUCAAUAGUCUGCGAGUCACCAUGGGCGCACUCGAUUCG\
) } def
/len { sequence length } bind def

/coor [
[21.56753731 310.23461914]
[14.23821831 323.32208252]
[20.85664368 337.35687256]
[17.92853546 352.59518433]
[6.57981110 363.17752075]
[-8.82571316 365.03479004]
[-22.36429977 357.45281982]
[-28.83008575 343.34704590]
[-25.73684311 328.14138794]
[-14.27398777 317.68280029]
[1.15077806 315.99273682]
[8.48009682 302.90530396]
[5.44217634 281.59393311]
[23.90410995 269.17343140]
[21.05016708 254.55479431]
[33.08571243 244.28559875]
[38.27746582 230.21273804]
[37.62003708 222.64794922]
[43.95920181 215.69601440]
[49.69945145 201.83781433]
[55.43970490 187.97962952]
[61.17995453 174.12142944]
[66.92020416 160.26324463]
[72.66046143 146.40504456]
[78.40071106 132.54685974]
[84.14096069 118.68865967]
[89.88121033 104.83046722]
[95.34827423 90.86224365]
[100.54002380 76.78937531]
[105.73178101 62.71650314]
[99.36396790 48.50071335]
[104.82962036 34.30278015]
[118.42144775 28.31965065]
[123.61320496 14.24678135]
[128.80496216 0.17391108]
[123.55602264 -9.73327541]
[124.75685883 -20.65629387]
[131.74362183 -28.84711266]
[141.91079712 -31.63687897]
[148.19068909 -45.25902557]
[154.47058105 -58.88117218]
[153.22158813 -74.65299988]
[165.57655334 -82.97189331]
[163.53800964 -99.24384308]
[176.77224731 -108.92820740]
[191.66502380 -102.06254578]
[192.89591980 -85.70965576]
[179.19869995 -76.69199371]
[180.89688110 -61.89451218]
[168.09272766 -52.60127640]
[161.81283569 -38.97912979]
[155.53294373 -25.35698128]
[158.95631409 -6.49041748]
[142.87783813 5.36566687]
[137.68608093 19.43853760]
[132.49432373 33.51140594]
[138.94389343 46.88819885]
[133.87919617 61.23404694]
[119.80464935 67.90825653]
[114.61289978 81.98113251]
[109.42114258 96.05400085]
[109.79504395 104.33980560]
[103.73940277 110.57071686]
[97.99915314 124.42890930]
[92.25890350 138.28710938]
[86.51865387 152.14529419]
[80.77840424 166.00349426]
[75.03814697 179.86167908]
[69.29789734 193.71987915]
[63.55764771 207.57806396]
[57.81739426 221.43626404]
[52.35033798 235.40447998]
[47.15858078 249.47735596]
[49.64117432 265.10256958]
[37.97697830 274.36517334]
[43.17266083 281.64633179]
[44.87902451 290.32907104]
[42.86920166 298.84802246]
[37.57916260 305.70043945]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[14 75]
[16 73]
[17 72]
[19 71]
[20 70]
[21 69]
[22 68]
[23 67]
[24 66]
[25 65]
[26 64]
[27 63]
[28 61]
[29 60]
[30 59]
[33 56]
[34 55]
[35 54]
[39 52]
[40 51]
[41 50]
[43 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
