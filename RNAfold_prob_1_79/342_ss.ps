%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGUCCGAAGGAUUUACUUCGCCGAAGGCAGGGCAGGCAAGCGAUUAGCUGAAGGAAACUUCGCCGAUGAAUUUCG\
) } def
/len { sequence length } bind def

/coor [
[99.41725159 121.00531769]
[93.67700195 134.86351013]
[87.93675232 148.72171021]
[87.46146393 165.66899109]
[71.04491425 169.90374756]
[62.43109512 155.30107117]
[74.07855988 142.98146057]
[79.81880951 129.12326050]
[85.55905914 115.26506805]
[75.59527588 104.05244446]
[61.15844345 108.12404633]
[46.72161484 112.19565582]
[32.28479004 116.26726532]
[24.78212357 130.17716980]
[9.61740971 134.62767029]
[-4.21239996 126.97836304]
[-8.50232315 111.76744843]
[-0.70722502 98.01927948]
[14.54820061 93.89041901]
[28.21318054 101.83043671]
[42.65000916 97.75882721]
[57.08683777 93.68721771]
[71.52366638 89.61561584]
[75.59527588 75.17878723]
[65.41326141 64.16394806]
[55.23125076 53.14910889]
[39.83814240 55.10660934]
[26.25049210 47.61291885]
[19.69302940 33.54951859]
[22.68723488 18.32406616]
[34.08177185 7.79106331]
[49.49521255 6.00066423]
[63.00077057 13.64131355]
[69.40528107 27.77502632]
[66.24608612 42.96709824]
[76.42810059 53.98193741]
[86.61011505 64.99677277]
[103.68865967 75.86956024]
[107.03361511 91.09894562]
[120.12105560 83.76962280]
[133.20849609 76.44030762]
[129.08555603 63.97588348]
[135.17953491 48.42210388]
[143.99632263 36.28684998]
[152.81309509 24.15159416]
[151.73367310 8.14489555]
[163.67195129 -2.57225180]
[179.46989441 0.22143048]
[187.00866699 14.38286877]
[180.50518799 29.04861832]
[164.94834900 32.96837234]
[156.13157654 45.10363007]
[147.31478882 57.23888397]
[154.38574219 70.46770477]
[169.37417603 69.87880707]
[184.36260986 69.28990936]
[199.35105896 68.70101166]
[212.92398071 59.49734116]
[227.56103516 66.89252472]
[228.20486450 83.27902985]
[214.19314575 91.79981995]
[199.93994141 83.68944550]
[184.95150757 84.27834320]
[169.96307373 84.86724091]
[154.97463989 85.45613861]
[140.53781128 89.52774811]
[127.45037079 96.85706329]
[114.36293030 104.18637848]
[128.69345093 99.75508881]
[143.56101990 101.74387360]
[156.22303772 109.78585052]
[164.34371948 122.39752960]
[166.42506409 137.25242615]
[162.08312988 151.61026001]
[152.11885071 162.82244873]
[138.37034607 168.82067871]
[123.37380981 168.49845886]
[109.89564514 161.91522217]
[100.42216492 150.28536987]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 9]
[2 8]
[3 7]
[10 23]
[11 22]
[12 21]
[13 20]
[24 37]
[25 36]
[26 35]
[39 68]
[40 67]
[41 66]
[43 53]
[44 52]
[45 51]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
