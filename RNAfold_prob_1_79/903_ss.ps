%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAGGUACAUACUGAAAUGAAAAUAUAGAAAUAAAACAUGUAGAGGUACGACGUAAACGAAGCACUGUAUUUCG\
) } def
/len { sequence length } bind def

/coor [
[143.43032837 175.66180420]
[123.97650909 183.88104248]
[103.11765289 187.18476868]
[82.07608795 185.37936401]
[62.08488846 178.57064819]
[44.31555557 167.15760803]
[29.80938339 151.80906677]
[17.01978111 159.64654541]
[4.23017883 167.48402405]
[2.09789538 182.97555542]
[-9.52792645 193.43377686]
[-25.15792847 193.92062378]
[-37.41210175 184.20623779]
[-40.50440216 168.87745667]
[-32.97473907 155.17205811]
[-18.37838745 149.56129456]
[-3.60729957 154.69442749]
[9.18230247 146.85694885]
[21.97190475 139.01947021]
[17.58700752 128.61819458]
[14.58178329 117.73783875]
[13.00653934 106.56052399]
[12.88764858 95.27338409]
[14.22710133 84.06536865]
[17.00247383 73.12411499]
[21.16730309 62.63278580]
[26.65186691 52.76702499]
[33.36434555 43.69198608]
[41.19237137 35.55959702]
[50.00489044 28.50600243]
[59.65437698 22.64928436]
[69.97928619 18.08749008]
[80.80677032 14.89698792]
[91.95556641 13.13119221]
[103.23903656 12.81966209]
[114.46828461 13.96761417]
[125.45531464 16.55582809]
[136.01620483 20.54097939]
[145.97413635 25.85634804]
[155.16242981 32.41295242]
[163.42724609 40.10102463]
[170.63023376 48.79186630]
[176.65080261 58.33998108]
[181.38816833 68.58551788]
[184.76301575 79.35697174]
[186.71884155 90.47400665]
[187.22291565 101.75051117]
[186.26679993 112.99771118]
[200.85235596 116.49939728]
[215.43791199 120.00107574]
[230.02345276 123.50275421]
[244.60900879 127.00443268]
[259.19454956 130.50611877]
[273.78009033 134.00779724]
[288.36566162 137.50947571]
[301.73443604 129.51492310]
[316.47637939 133.27389526]
[324.01559448 146.06826782]
[338.60113525 149.56994629]
[351.06304932 140.12353516]
[366.67883301 140.94915771]
[378.07516479 151.65698242]
[379.87106323 167.19110107]
[371.21856689 180.21676636]
[356.20309448 184.58367920]
[341.91452026 178.22990417]
[335.09945679 164.15550232]
[320.51391602 160.65382385]
[307.98791504 168.63096619]
[293.14620972 165.28753662]
[284.86398315 152.09503174]
[270.27841187 148.59335327]
[255.69287109 145.09165955]
[241.10731506 141.58998108]
[226.52177429 138.08830261]
[211.93621826 134.58662415]
[197.35067749 131.08494568]
[182.76512146 127.58325958]
[173.71189880 146.66325378]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 19]
[8 18]
[9 17]
[48 78]
[49 77]
[50 76]
[51 75]
[52 74]
[53 73]
[54 72]
[55 71]
[58 68]
[59 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
