%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACUGGCUGGGCGGAUCCAUGAUCCGCGGCUCUAAGAGCCCAGAUCAAUGAUCUGCCAGCCAGAGGGUAAAUUCG\
) } def
/len { sequence length } bind def

/coor [
[115.97821808 385.57781982]
[109.27398682 372.02993774]
[106.86255646 357.10760498]
[108.95833588 342.13766479]
[115.37498474 328.45123291]
[125.54193878 317.26535034]
[138.55514526 309.57458496]
[135.05346680 294.98904419]
[131.55178833 280.40347290]
[128.05010986 265.81793213]
[124.54843140 251.23239136]
[121.04674530 236.64683533]
[117.54506683 222.06129456]
[114.04338837 207.47573853]
[109.29398346 201.55110168]
[110.70252228 192.24893188]
[107.77616119 177.53713989]
[104.84980774 162.82536316]
[101.92345428 148.11358643]
[98.99710083 133.40180969]
[96.07074738 118.69003296]
[84.08177185 110.55302429]
[81.25501251 96.34191895]
[89.21747589 84.23632812]
[86.29112244 69.52454376]
[83.36476898 54.81276703]
[80.43841553 40.10098648]
[77.51205444 25.38920784]
[67.23114777 13.36367512]
[72.33680725 -0.62851858]
[67.47570801 -8.68357944]
[69.59632111 -15.97475529]
[67.24980164 -30.79007912]
[64.90328217 -45.60540390]
[62.55677032 -60.42073059]
[60.21025085 -75.23605347]
[51.76056671 -89.93432617]
[63.54531860 -102.12268066]
[78.51969147 -94.17255402]
[75.02557373 -77.58257294]
[77.37209320 -62.76724625]
[79.71861267 -47.95192337]
[82.06512451 -33.13659668]
[84.41164398 -18.32127190]
[87.04859161 -3.55487347]
[97.12018585 7.41837502]
[92.22383881 22.46285439]
[95.15019226 37.17463303]
[98.07654572 51.88641357]
[101.00289917 66.59819031]
[103.92925262 81.30996704]
[115.91822815 89.44697571]
[118.74498749 103.65808105]
[110.78252411 115.76367188]
[113.70887756 130.47544861]
[116.63523102 145.18724060]
[119.56158447 159.89901733]
[122.48794556 174.61079407]
[125.41429901 189.32257080]
[128.62893677 203.97406006]
[132.13061523 218.55960083]
[135.63229370 233.14515686]
[139.13397217 247.73071289]
[142.63565063 262.31625366]
[146.13734436 276.90179443]
[149.63902283 291.48736572]
[153.14070129 306.07290649]
[168.22708130 307.01754761]
[182.36419678 312.36856079]
[194.29498291 321.65014648]
[202.95854187 334.03698730]
[207.58454895 348.42767334]
[207.76162720 363.54257202]
[203.47406006 378.03765869]
[195.10308838 390.62408447]
[183.39303589 400.18267822]
[169.38517761 405.86343384]
[154.32505798 407.16125488]
[139.55183411 403.96078491]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 67]
[8 66]
[9 65]
[10 64]
[11 63]
[12 62]
[13 61]
[14 60]
[16 59]
[17 58]
[18 57]
[19 56]
[20 55]
[21 54]
[24 51]
[25 50]
[26 49]
[27 48]
[28 47]
[30 45]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
