%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGUGUACGUCAAAGGAAACUUGAUGAAAAUCGACAAAGGUAUAUGAAAAUAUACGUAUACAAGAUUAUUGUUCG\
) } def
/len { sequence length } bind def

/coor [
[175.07609558 160.59082031]
[167.34286499 152.59318542]
[161.01174927 143.44149780]
[156.25224304 133.37893677]
[153.19206238 122.67311096]
[151.91375732 111.60889435]
[136.95999146 110.43200684]
[122.00623322 109.25511932]
[112.41860962 120.38896179]
[98.12693024 123.79964447]
[84.54474640 118.19524384]
[76.81687927 105.69863892]
[61.86311722 104.52175140]
[46.90935898 103.34486389]
[31.95559692 102.16798401]
[17.00183678 100.99109650]
[2.04807782 99.81420898]
[-7.02405787 102.30633545]
[-13.46586800 98.28621674]
[-28.31146622 105.25330353]
[-41.61145020 95.65942383]
[-39.68393707 79.37394714]
[-24.51178741 73.14997101]
[-11.70280647 83.39019012]
[3.22496414 84.86045074]
[18.17872429 86.03733826]
[33.13248444 87.21421814]
[48.08624268 88.39110565]
[63.04000473 89.56799316]
[77.99376678 90.74488068]
[87.58139038 79.61103821]
[101.87306976 76.20035553]
[115.45525360 81.80475616]
[123.18312073 94.30136108]
[138.13688660 95.47824860]
[153.09063721 96.65513611]
[159.95390320 77.36226654]
[172.22367859 60.98738861]
[188.78732300 49.00006866]
[208.14730835 42.47270584]
[228.55673218 41.98457718]
[248.17680359 47.57045746]
[265.24264526 58.71830368]
[278.22192383 74.41618347]
[291.84408569 68.13628387]
[305.46621704 61.85639191]
[319.08837891 55.57649612]
[332.71051025 49.29660034]
[346.33267212 43.01670074]
[359.95480347 36.73680496]
[362.84985352 21.49218941]
[374.17559814 10.88524342]
[389.57705688 8.99455738]
[403.13204956 16.54713821]
[409.62841797 30.63886452]
[406.56817627 45.85117722]
[395.12805176 56.33463669]
[379.70697021 58.05813599]
[366.23471069 50.35895538]
[352.61254883 56.63885117]
[338.99041748 62.91874695]
[325.36825562 69.19863892]
[311.74612427 75.47853851]
[298.12396240 81.75843811]
[284.50183105 88.03833008]
[287.14761353 98.79117584]
[288.00930786 109.83439636]
[287.06289673 120.87390137]
[284.33255005 131.61553955]
[279.88998413 141.77291870]
[273.85260010 151.07505798]
[266.38031006 159.27360535]
[257.67141724 166.14947510]
[247.95722961 171.51867676]
[237.49600220 175.23727417]
[226.56607056 177.20524597]
[215.45835876 177.36912537]
[204.46878052 175.72351074]
[193.89018250 172.31118774]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 36]
[7 35]
[8 34]
[12 30]
[13 29]
[14 28]
[15 27]
[16 26]
[17 25]
[19 24]
[44 65]
[45 64]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
