%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGCGCGGCAAAGGCGGGCCACGGCGGCGGGAAAACGGCGGCCAGCCAGGGCGAAAGGCCGGGCGCCCGCCUUCG\
) } def
/len { sequence length } bind def

/coor [
[73.42745209 292.53735352]
[65.47205353 305.42105103]
[53.76277924 315.02166748]
[39.56976700 320.29776001]
[24.43256378 320.67700195]
[9.99314404 316.11828613]
[-2.18221259 307.11608887]
[-10.77281475 294.64691162]
[-14.84681702 280.06332397]
[-13.96230412 264.94723511]
[-8.21522045 250.93832397]
[1.77103376 239.55616760]
[14.91322422 232.03541565]
[29.78578377 229.19187927]
[44.77544785 231.33399963]
[51.58530426 217.96890259]
[58.39516449 204.60380554]
[65.20501709 191.23870850]
[72.01487732 177.87361145]
[78.82473755 164.50851440]
[85.63459015 151.14341736]
[92.44445038 137.77832031]
[99.25431061 124.41321564]
[85.92525482 118.46684265]
[78.96230316 106.48125458]
[80.26062012 93.41794586]
[88.47935486 84.14051056]
[84.97767639 69.55495453]
[81.47599792 54.96940994]
[70.73089600 43.35677338]
[75.28328705 29.17492104]
[71.78160858 14.58937168]
[61.03650284 2.97673631]
[65.58889771 -11.20511723]
[52.71628571 -20.77984047]
[52.32018661 -36.81800461]
[64.70446014 -47.01649857]
[80.36894989 -43.55191422]
[87.29719543 -29.08198357]
[80.17444611 -14.70679760]
[90.66909027 -4.13741779]
[86.36715698 11.08769131]
[89.86883545 25.67324066]
[100.36347961 36.24261856]
[96.06154633 51.46772766]
[99.56322479 66.05327606]
[103.06491089 80.63882446]
[118.81912994 88.57933807]
[123.16236877 107.75022888]
[138.05839539 105.98716736]
[152.95442200 104.22410583]
[161.68058777 94.49155426]
[174.30583191 93.46102905]
[183.86369324 101.14374542]
[198.81745911 99.96686554]
[213.77122498 98.78997803]
[225.24177551 87.57366180]
[241.14445496 89.69136047]
[249.28005981 103.51856232]
[243.40766907 118.44821167]
[228.03205872 123.02756500]
[214.94810486 113.74373627]
[199.99433899 114.92062378]
[185.04058838 116.09751129]
[171.30215454 126.83050537]
[154.71748352 119.12013245]
[139.82145691 120.88319397]
[124.92543030 122.64625549]
[112.61940765 131.22308350]
[105.80954742 144.58818054]
[98.99969482 157.95327759]
[92.18983459 171.31837463]
[85.37997437 184.68347168]
[78.57012177 198.04856873]
[71.76026154 211.41366577]
[64.95040131 224.77876282]
[58.14054489 238.14385986]
[68.68425751 249.01164246]
[75.12566376 262.71517944]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 77]
[16 76]
[17 75]
[18 74]
[19 73]
[20 72]
[21 71]
[22 70]
[23 69]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[34 40]
[49 68]
[50 67]
[51 66]
[54 64]
[55 63]
[56 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
