%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGAAGAAGACUUGGAAGCAAAAGCAGCAAAAGCAAACCAAAGAAACUUCAACCAAAAGGAACUUGGACACUUCG\
) } def
/len { sequence length } bind def

/coor [
[217.11061096 278.79568481]
[213.64463806 272.47171021]
[211.51350403 265.57192993]
[210.80751038 258.37512207]
[211.55924988 251.17298889]
[213.74218750 244.25819397]
[217.27151489 237.91250610]
[207.08950806 226.89767456]
[196.90750122 215.88282776]
[186.72547913 204.86799622]
[172.49551392 209.33717346]
[157.67530823 207.17590332]
[145.21211243 198.75985718]
[137.60791016 185.71392822]
[136.41720581 170.59873962]
[141.92958069 156.40806580]
[131.74757385 145.39323425]
[121.56555939 134.37838745]
[111.38355255 123.36355591]
[93.12419891 125.06320190]
[78.28821564 114.28423309]
[74.26222992 96.39333344]
[60.64008331 90.11344147]
[44.36813354 92.15198517]
[34.68376541 78.91774750]
[41.54942703 64.02497101]
[57.90231705 62.79407501]
[66.91998291 76.49129486]
[80.54212952 82.77118683]
[81.62283325 81.62283325]
[82.77118683 80.54212952]
[76.49129486 66.91998291]
[62.79407501 57.90231705]
[64.02497101 41.54942703]
[78.91774750 34.68376541]
[92.15198517 44.36813354]
[90.11344147 60.64008331]
[96.39333344 74.26222992]
[110.62731171 76.28289795]
[121.60926819 85.56114960]
[125.97864532 99.25778198]
[122.39838409 113.18154144]
[132.58039856 124.19638062]
[142.76240540 135.21121216]
[152.94442749 146.22605896]
[167.52383423 141.84405518]
[182.49902344 144.21701050]
[194.90811157 152.82135010]
[202.32035828 165.90644836]
[203.31219482 180.85052490]
[197.74032593 194.68598938]
[207.92233276 205.70082092]
[218.10433960 216.71566772]
[228.28636169 227.73049927]
[253.81211853 223.62985229]
[275.32693481 237.62110901]
[281.83480835 262.25085449]
[296.10067749 266.88610840]
[310.36651611 271.52136230]
[324.63235474 276.15661621]
[337.79702759 267.71707153]
[353.29986572 269.76535034]
[363.82095337 281.33428955]
[364.39254761 296.96142578]
[354.74472046 309.26809692]
[339.43292236 312.44345093]
[325.68688965 304.98818970]
[319.99710083 290.42245483]
[305.73126221 285.78720093]
[291.46542358 281.15194702]
[277.19955444 276.51669312]
[273.05343628 282.29541016]
[267.82598877 287.13265991]
[261.72662354 290.82922363]
[255.00080872 293.23168945]
[247.92013550 294.23880005]
[240.77136230 293.80575562]
[233.84484863 291.94619751]
[227.42269897 288.73168945]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 54]
[8 53]
[9 52]
[10 51]
[16 45]
[17 44]
[18 43]
[19 42]
[22 29]
[23 28]
[31 38]
[32 37]
[57 71]
[58 70]
[59 69]
[60 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
