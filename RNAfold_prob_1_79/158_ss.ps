%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGAAGUUAAUGGCAUGGUGAGGCAUGAGAGUAGUAAUGGUAGUGAGGUGGCGGUCAAAAAAGAUGGACUUCG\
) } def
/len { sequence length } bind def

/coor [
[9.76508045 118.49977112]
[-1.73084700 127.07156372]
[-14.33029556 133.91506958]
[-27.77535248 138.89079285]
[-41.79087830 141.89746094]
[-56.09014130 142.87408447]
[-70.38067627 141.80123901]
[-84.37027740 138.70135498]
[-97.77295685 133.63835144]
[-110.31480408 126.71626282]
[-121.73960114 118.07707977]
[-131.81399536 107.89791870]
[-140.33235168 96.38729858]
[-147.12086487 83.78093719]
[-152.04118347 70.33687592]
[-154.99316406 56.33024597]
[-155.91694641 42.04758835]
[-154.79415894 27.78102493]
[-151.64826965 13.82227707]
[-146.54414368 0.45669043]
[-159.63159180 -6.87262821]
[-172.71902466 -14.20194721]
[-185.80647278 -21.53126526]
[-200.94744873 -17.00065804]
[-214.81750488 -24.57675171]
[-219.18777466 -39.76478195]
[-211.46546936 -53.55395889]
[-196.23207092 -57.76341248]
[-182.52531433 -49.89574432]
[-178.47715759 -34.61870575]
[-165.38970947 -27.28938675]
[-152.30227661 -19.96006775]
[-139.21482849 -12.63074970]
[-129.52391052 -25.03260422]
[-118.00611877 -35.76283646]
[-104.94599915 -44.55532455]
[-90.66633606 -51.19182205]
[-75.52021790 -55.50738907]
[-59.88227081 -57.39448166]
[-44.13943100 -56.80562973]
[-28.68134499 -53.75463867]
[-13.89072609 -48.31625748]
[-0.13389289 -40.62436676]
[12.24831486 -30.86865044]
[22.94897652 -19.28995132]
[31.70269585 -6.17430592]
[38.29219055 8.15411758]
[42.55368042 23.34103012]
[44.38095474 39.01078033]
[43.72802734 54.77564621]
[40.61028671 70.24544525]
[54.68315887 75.43719482]
[68.75602722 80.62895203]
[82.82889557 85.82070923]
[96.90177155 91.01246643]
[102.31955719 89.86648560]
[107.95239258 91.99359894]
[111.84809875 97.20343781]
[127.61992645 95.95443726]
[135.93881226 108.30941010]
[149.56097412 114.58930969]
[163.18312073 120.86920166]
[177.92195129 115.16461945]
[192.34365845 121.62911987]
[197.89210510 136.42744446]
[191.27548218 150.77999878]
[176.41932678 156.17167664]
[162.13752747 149.40368652]
[156.90321350 134.49134827]
[143.28106689 128.21145630]
[129.65892029 121.93155670]
[114.86144257 123.62973785]
[105.56820679 110.82558441]
[91.71001434 105.08533478]
[77.63714600 99.89357758]
[63.56427383 94.70182800]
[49.49140167 89.51007080]
[35.41853333 84.31831360]
[28.53205872 96.90264893]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 33]
[21 32]
[22 31]
[23 30]
[51 78]
[52 77]
[53 76]
[54 75]
[55 74]
[58 73]
[60 71]
[61 70]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
