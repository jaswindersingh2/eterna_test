%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGCCAGGACGAAAUUCUACACCGUCAAUCGCAAAACCAGACCGCGAGCGGCCCACGCGAAUAAGGCUACGUUCG\
) } def
/len { sequence length } bind def

/coor [
[94.11200714 259.23754883]
[100.15834808 243.39842224]
[100.15834808 228.39842224]
[100.15834808 213.39842224]
[89.15076447 197.69810486]
[98.78865814 180.19967651]
[97.61177063 165.24591064]
[96.43488312 150.29216003]
[95.25800323 135.33839417]
[80.81754303 130.05531311]
[69.94468689 119.18245697]
[64.66160583 104.74199677]
[49.70784760 103.56511688]
[34.75408554 102.38822937]
[19.80032539 101.21134186]
[11.70016956 114.19771576]
[-1.51309121 121.92224884]
[-16.80314445 122.60988617]
[-30.65645027 116.10261536]
[-39.88961792 103.89576721]
[-42.38093185 88.79438019]
[-37.55791092 74.26863861]
[-26.52884674 63.65645981]
[-11.82813931 59.39644241]
[3.16609836 62.46750641]
[15.00829887 72.16394043]
[20.97721291 86.25758362]
[35.93097305 87.43446350]
[50.88473129 88.61135101]
[65.83849335 89.78823853]
[73.83467102 73.28694916]
[89.57197571 62.28490067]
[109.53681183 60.26059341]
[111.88333130 45.44526672]
[114.22984314 30.62994385]
[116.57636261 15.81461811]
[104.26554871 6.72053194]
[97.60153198 -7.05805588]
[98.11565399 -22.35492706]
[105.68978119 -35.65497208]
[118.58342743 -43.90193939]
[133.83372498 -45.20073318]
[147.93627930 -39.25290298]
[157.65042114 -27.42521667]
[160.74389648 -12.43558788]
[156.50587463 2.27147460]
[145.91020203 13.31639576]
[131.39169312 18.16113472]
[129.04516602 32.97645950]
[126.69865417 47.79178619]
[124.35213470 62.60710907]
[135.36697388 72.78912354]
[149.95252991 69.28743744]
[164.53807068 65.78575897]
[174.11279297 52.91314697]
[190.15095520 52.51704788]
[200.34945679 64.90132141]
[196.88487244 80.56581116]
[182.41493225 87.49405670]
[168.03974915 80.37130737]
[153.45420837 83.87299347]
[138.86865234 87.37467194]
[139.97375488 96.54172516]
[138.98500061 105.55237579]
[136.02987671 113.94327545]
[131.33499146 121.30030060]
[125.21051788 127.27892303]
[118.03076935 131.62019348]
[110.21176147 134.16151428]
[111.38864899 149.11526489]
[112.56553650 164.06903076]
[113.74241638 179.02278137]
[122.65695190 185.82241821]
[126.13944244 196.24481201]
[123.22362518 206.60833740]
[115.15834808 213.39842224]
[115.15834808 228.39842224]
[115.15834808 243.39842224]
[121.20468903 259.23754883]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[6 72]
[7 71]
[8 70]
[9 69]
[12 30]
[13 29]
[14 28]
[15 27]
[33 51]
[34 50]
[35 49]
[36 48]
[52 62]
[53 61]
[54 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
