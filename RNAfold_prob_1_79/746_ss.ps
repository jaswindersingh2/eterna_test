%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGAUGCUGCAAAGGAGGAUCACGAUGCUGGGAAAACGAGGAUCAGAUGCUGCGAAAGGAGGAUCGAUCUUGUUCG\
) } def
/len { sequence length } bind def

/coor [
[147.37074280 323.00631714]
[143.86906433 308.42074585]
[140.36738586 293.83520508]
[127.57301331 286.29598999]
[123.81403351 271.55407715]
[131.80859375 258.18527222]
[128.30691528 243.59971619]
[124.80522919 229.01417542]
[114.31059265 218.44479370]
[118.61251831 203.21968079]
[115.11083984 188.63412476]
[104.61620331 178.06475830]
[108.91812897 162.83964539]
[93.65384674 157.14328003]
[84.62207031 143.38604736]
[85.48166656 126.78676605]
[96.09410858 113.78112793]
[86.21384430 103.88809967]
[89.46906281 90.29048157]
[85.39745331 75.85365295]
[74.20472717 64.67182159]
[78.19683075 50.32217407]
[74.12522888 35.88534546]
[70.05361938 21.44851875]
[59.07581711 14.35229206]
[56.08295822 2.04368997]
[62.17591095 -8.59834099]
[58.67422867 -23.18388939]
[55.17255020 -37.76943970]
[44.42744446 -49.38207245]
[48.97983932 -63.56392670]
[45.47816086 -78.14947510]
[34.73305511 -89.76210785]
[39.28544998 -103.94396210]
[26.41283417 -113.51868439]
[26.01673889 -129.55685425]
[38.40101242 -139.75534058]
[54.06550217 -136.29075623]
[60.99375153 -121.82083130]
[53.87099838 -107.44564819]
[64.36563873 -96.87626648]
[60.06370926 -81.65115356]
[63.56538773 -67.06560516]
[74.06002808 -56.49622726]
[69.75809479 -41.27111816]
[73.25978088 -26.68556976]
[76.76145935 -12.10002136]
[89.51147461 -0.20974885]
[84.49044800 17.37691116]
[88.56205750 31.81373978]
[92.63365936 46.25056839]
[103.53516388 56.39978027]
[99.83428192 71.78204346]
[103.90589142 86.21887207]
[113.78615570 96.11190033]
[110.53093719 109.70951843]
[123.91847229 113.57224274]
[133.52282715 123.51576996]
[136.86558533 136.81758118]
[133.16236877 149.91020203]
[123.50367737 159.33796692]
[134.24877930 170.95059204]
[129.69639587 185.13244629]
[133.19807434 199.71800232]
[143.94317627 211.33064270]
[139.39077759 225.51248169]
[142.89245605 240.09803772]
[146.39413452 254.68357849]
[159.58665466 262.96582031]
[162.93008423 277.80752563]
[154.95292664 290.33352661]
[158.45462036 304.91906738]
[161.95629883 319.50460815]
[176.03070068 326.31970215]
[182.38447571 340.60827637]
[178.01756287 355.62371826]
[164.99189758 364.27624512]
[149.45777893 362.48034668]
[138.74995422 351.08398438]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[2 72]
[3 71]
[6 68]
[7 67]
[8 66]
[10 64]
[11 63]
[13 61]
[17 56]
[19 54]
[20 53]
[22 51]
[23 50]
[24 49]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[34 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
