%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGGCGAAGAAGAAGAAGAAGAAAGAAGAAGAAGAAGAAGAAGAACAAGAAGAAGAAGAAGCUCCUGGUAUUUCG\
) } def
/len { sequence length } bind def

/coor [
[94.71010590 156.39828491]
[94.12120819 141.40985107]
[93.53231049 126.42141724]
[92.94341278 111.43298340]
[91.18035889 96.53695679]
[88.25399780 81.82517242]
[85.32764435 67.11339569]
[82.11300659 52.46190643]
[78.61132812 37.87635803]
[63.71388245 39.75500107]
[48.70018768 39.98336792]
[33.75249481 38.55869293]
[19.05225754 35.49826431]
[4.77792311 30.83923531]
[-8.89723301 24.63816261]
[-21.80720520 16.97031975]
[-33.79528046 7.92878962]
[-44.71593094 -2.37667322]
[-54.43659210 -13.82096958]
[-62.83926392 -26.26517677]
[-69.82194519 -39.55823135]
[-75.29988098 -53.53877258]
[-79.20655823 -68.03708649]
[-81.49456024 -82.87717438]
[-82.13611603 -97.87889099]
[-81.12343597 -112.86013794]
[-78.46881866 -127.63904572]
[-74.20447540 -142.03622437]
[-68.38217926 -155.87689209]
[-61.07261276 -168.99304199]
[-52.36449814 -181.22544861]
[-42.36354446 -192.42562866]
[-31.19116211 -202.45764160]
[-18.98296738 -211.19967651]
[-5.88715696 -218.54562378]
[7.93729639 -224.40631104]
[22.32257843 -228.71058655]
[37.09406281 -231.40621948]
[52.07243729 -232.46047974]
[67.07588196 -231.86056519]
[81.92226410 -229.61376953]
[96.43135834 -225.74734497]
[110.42705536 -220.30824280]
[123.73944092 -213.36248779]
[136.20692444 -204.99438477]
[147.67816162 -195.30552673]
[158.01388550 -184.41351318]
[167.08865356 -172.45059204]
[174.79231262 -159.56195068]
[181.03131104 -145.90405273]
[185.72994995 -131.64271545]
[188.83116150 -116.95102692]
[190.29733276 -102.00734711]
[190.11062622 -86.99307251]
[188.27334595 -72.09046936]
[184.80776978 -57.48043823]
[179.75598145 -43.34033203]
[173.17930603 -29.84179878]
[165.15756226 -17.14869690]
[155.78813171 -5.41510916]
[145.18476868 5.21652842]
[133.47616577 14.61715794]
[120.80445862 22.67266464]
[107.32348633 29.28526115]
[93.19687653 34.37467575]
[96.69855499 48.96022415]
[101.44795990 54.88486862]
[100.03942871 64.18704224]
[102.96578217 78.89881897]
[105.89213562 93.61059570]
[108.58251953 95.60970306]
[110.51311493 98.73437500]
[111.22543335 102.66651917]
[110.40158844 106.90806580]
[107.93185425 110.84408569]
[108.52075195 125.83251953]
[109.10964966 140.82095337]
[109.69854736 155.80938721]
[112.64374542 174.96600342]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[4 75]
[5 70]
[6 69]
[7 68]
[8 66]
[9 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
