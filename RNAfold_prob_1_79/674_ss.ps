%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAUAACAACUUAGAAAAAAAAAAUAAGAAGUUAGAAAAAAAAAAUAACAAGUUAAAAAAAAAAAAUAAAAAUUUCG\
) } def
/len { sequence length } bind def

/coor [
[183.00260925 183.23786926]
[175.31423950 170.33560181]
[169.26969910 156.58630371]
[164.96066284 142.19839478]
[162.45243835 127.39000702]
[161.78303528 112.38562012]
[146.82928467 111.20873260]
[131.87551880 110.03185272]
[116.92176056 108.85496521]
[105.83596802 118.18509674]
[91.39111328 117.04826355]
[81.90135193 106.09880066]
[66.94759369 104.92191315]
[51.99383545 103.74502563]
[37.04007721 102.56813812]
[28.93991852 115.55451965]
[15.72665882 123.27904510]
[0.43660486 123.96668243]
[-13.41669941 117.45941162]
[-22.64986801 105.25256348]
[-25.14118385 90.15117645]
[-20.31816101 75.62543488]
[-9.28909779 65.01325989]
[5.41161060 60.75324249]
[20.40584755 63.82430267]
[32.24805069 73.52073669]
[38.21696091 87.61437988]
[53.17072296 88.79126740]
[68.12448120 89.96814728]
[83.07823944 91.14503479]
[94.16403198 81.81490326]
[108.60888672 82.95173645]
[118.09864807 93.90119934]
[133.05239868 95.07808685]
[148.00616455 96.25497437]
[162.95993042 97.43186188]
[165.96827698 82.71692657]
[170.76217651 68.48322296]
[177.26892090 54.94654083]
[185.38990784 42.31208801]
[195.00198364 30.77140236]
[205.95945740 20.49943542]
[218.09622192 11.65190697]
[231.22827148 4.36294508]
[245.15652466 -1.25695217]
[259.66986084 -5.12258863]
[274.54821777 -7.17536211]
[289.56607056 -7.38415289]
[304.49575806 -5.74579573]
[319.11093140 -2.28512859]
[333.19003296 2.94538689]
[346.51965332 9.86645699]
[358.89767456 18.37315941]
[370.13647461 28.33653450]
[380.06567383 39.60554123]
[388.53475952 52.00934601]
[395.41531372 65.35990906]
[400.60305786 79.45483398]
[404.01934814 94.08045197]
[405.61236572 109.01503754]
[405.35797119 124.03219604]
[403.26000977 138.90425110]
[399.35034180 153.40577698]
[393.68817139 167.31689453]
[386.35937500 180.42675781]
[377.47503662 192.53659058]
[367.16983032 203.46282959]
[355.60000610 213.03982544]
[342.94094849 221.12239075]
[329.38458252 227.58801270]
[315.13638306 232.33866882]
[300.41238403 235.30232239]
[285.43579102 236.43406677]
[270.43362427 235.71673584]
[255.63331604 233.16120911]
[241.25924683 228.80622864]
[227.52932739 222.71778870]
[214.65170288 214.98822021]
[202.82157898 205.73469543]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 36]
[7 35]
[8 34]
[9 33]
[12 30]
[13 29]
[14 28]
[15 27]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
