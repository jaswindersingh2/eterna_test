%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACCACGGGCGCGGCCGAGCGAAAGCGGCGAAAGCAAAGGACCGAAAGCCCACGGGAAACCACGGCGGGUCCUUCG\
) } def
/len { sequence length } bind def

/coor [
[130.94374084 157.02474976]
[122.89173889 169.68038940]
[110.71527863 178.44017029]
[96.15634155 182.05091858]
[81.29776001 179.99606323]
[68.26520538 172.56958008]
[58.92314148 160.83392334]
[54.60804749 146.46798706]
[55.93725204 131.52700806]
[62.72059631 118.14842224]
[73.98764801 108.24622345]
[88.12827301 103.23674774]
[74.27008057 97.49649811]
[60.10723495 106.50672913]
[43.52197266 105.40932465]
[30.92167854 94.82317352]
[27.05891991 78.99515533]
[12.98604870 73.80339813]
[-1.08682096 68.61164093]
[-15.15969086 63.41988373]
[-27.98636627 72.15235901]
[-43.49511337 71.64409637]
[-55.72250748 62.09053421]
[-59.96686172 47.16521835]
[-54.59613800 32.60723114]
[-41.67548752 24.01441956]
[-26.17316437 24.69089317]
[-14.05012894 34.37653351]
[-9.96793556 49.34701538]
[4.10493469 54.53877258]
[18.17780495 59.73052597]
[32.25067520 64.92227936]
[42.74833679 56.43865204]
[56.18547821 54.29998398]
[69.00218964 59.18302536]
[77.74792480 69.88954926]
[80.01033783 83.63830566]
[93.86853027 89.37855530]
[101.62277222 87.88449097]
[108.65302277 91.42350006]
[123.54904938 89.66043854]
[138.44508362 87.89737701]
[153.34111023 86.13431549]
[168.23713684 84.37125397]
[183.13316345 82.60819244]
[198.02919006 80.84513092]
[203.07919312 72.32529449]
[211.45144653 67.30167389]
[221.06518555 66.86744690]
[229.60362244 70.99388885]
[235.07235718 78.56918335]
[250.07235718 78.56918335]
[265.07235718 78.56918335]
[273.55987549 67.90715790]
[286.47482300 64.21773529]
[298.94384766 68.65596771]
[306.39868164 79.35381317]
[321.38711548 79.94271088]
[335.64031982 71.83233643]
[349.65203857 80.35312653]
[349.00820923 96.73963165]
[334.37115479 104.13481903]
[320.79821777 94.93114471]
[305.80978394 94.34224701]
[294.10076904 106.24459839]
[277.07070923 106.12191772]
[265.07235718 93.56918335]
[250.07235718 93.56918335]
[235.07235718 93.56918335]
[218.56095886 105.68778992]
[199.79225159 95.74115753]
[184.89622498 97.50421906]
[170.00019836 99.26728058]
[155.10417175 101.03034210]
[140.20814514 102.79340363]
[125.31211090 104.55646515]
[110.41608429 106.31952667]
[122.66481018 114.97798157]
[130.82154846 127.56637573]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 38]
[13 37]
[17 32]
[18 31]
[19 30]
[20 29]
[40 77]
[41 76]
[42 75]
[43 74]
[44 73]
[45 72]
[46 71]
[51 69]
[52 68]
[53 67]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
