%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGUAAUAUAUAUAUAAAAAAUAUUAUUAUAUUGAAAGAUGUAGUGGUAUUAUAUAUAUAUUAUGUCUACUUUCG\
) } def
/len { sequence length } bind def

/coor [
[105.29224396 146.39526367]
[101.22064209 131.95843506]
[97.14903259 117.52159882]
[87.92243958 113.01026917]
[82.73846436 104.14412689]
[83.33228302 93.89086151]
[89.50512695 85.68244934]
[86.57877350 70.97067261]
[83.65242004 56.25889587]
[80.72606659 41.54711533]
[77.79971313 26.83533669]
[74.87335205 12.12355709]
[71.94699860 -2.58822227]
[69.02064514 -17.30000114]
[66.09429169 -32.01177979]
[63.16793442 -46.72356033]
[60.24158096 -61.43534088]
[57.31522751 -76.14711761]
[54.38887024 -90.85889435]
[51.46251678 -105.57067871]
[48.00725174 -109.15347290]
[46.24203873 -113.27420807]
[46.11069489 -117.26839447]
[47.32424927 -120.57375336]
[49.42279816 -122.80416107]
[48.83390045 -137.79260254]
[48.24500275 -152.78103638]
[47.65610886 -167.76947021]
[47.06721115 -182.75790405]
[46.47831345 -197.74633789]
[45.88941574 -212.73477173]
[45.30051804 -227.72320557]
[44.71162033 -242.71163940]
[44.12272263 -257.70007324]
[43.53382492 -272.68850708]
[42.94493103 -287.67694092]
[42.35603333 -302.66537476]
[33.15236282 -316.23831177]
[40.54754639 -330.87536621]
[56.93405151 -331.51919556]
[65.45484161 -317.50747681]
[57.34446716 -303.25427246]
[57.93336487 -288.26583862]
[58.52226257 -273.27740479]
[59.11116028 -258.28897095]
[59.70005798 -243.30053711]
[60.28895569 -228.31210327]
[60.87784958 -213.32366943]
[61.46674728 -198.33523560]
[62.05564499 -183.34680176]
[62.64454269 -168.35836792]
[63.23344040 -153.36993408]
[63.82233810 -138.38150024]
[64.41123199 -123.39305878]
[66.17429352 -108.49703217]
[69.10064697 -93.78525543]
[72.02700806 -79.07347107]
[74.95336151 -64.36169434]
[77.87971497 -49.64991379]
[80.80606842 -34.93813705]
[83.73242188 -20.22635651]
[86.65878296 -5.51457691]
[89.58513641 9.19720173]
[92.51148987 23.90898132]
[95.43784332 38.62076187]
[98.36419678 53.33253860]
[101.29055023 68.04431915]
[104.21691132 82.75609589]
[117.26153564 95.85587311]
[111.58586121 113.44998932]
[115.65747070 127.88681793]
[119.72907257 142.32365417]
[134.33311462 147.56782532]
[143.03773499 160.41342163]
[142.49583435 175.92103577]
[132.91577148 188.12767029]
[117.98127747 192.33963013]
[103.43497467 186.93733215]
[94.87021637 173.99806213]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 70]
[7 68]
[8 67]
[9 66]
[10 65]
[11 64]
[12 63]
[13 62]
[14 61]
[15 60]
[16 59]
[17 58]
[18 57]
[19 56]
[20 55]
[25 54]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
