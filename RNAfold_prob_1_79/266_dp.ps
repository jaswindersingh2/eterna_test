%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:51 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (266)
} def

/sequence { (\
GGAAAAAAGAUCAAGUACAAAAGUACAGCGGAGCGGAGGCGACGAAAGGCGCACGCGACGCAAGAUCAGCCGACAUUCG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 12 0.021116525 ubox
1 67 0.011497634 ubox
1 70 0.013582889 ubox
1 71 0.513627634 ubox
1 74 0.114945433 ubox
1 76 0.011656176 ubox
1 77 0.005479864 ubox
1 78 0.119908963 ubox
2 11 0.018713141 ubox
2 12 0.032499027 ubox
2 66 0.007067575 ubox
2 67 0.018222821 ubox
2 70 0.513866228 ubox
2 71 0.026122722 ubox
2 74 0.070922083 ubox
2 76 0.007132027 ubox
2 77 0.118371152 ubox
2 78 0.123030268 ubox
3 11 0.031431565 ubox
3 66 0.017150727 ubox
3 76 0.112462534 ubox
3 77 0.122377962 ubox
4 11 0.005288218 ubox
4 66 0.003625003 ubox
4 76 0.111687603 ubox
4 77 0.006186728 ubox
5 11 0.003973284 ubox
5 76 0.007186842 ubox
5 77 0.004703474 ubox
6 11 0.004294297 ubox
6 66 0.008901431 ubox
6 76 0.005180650 ubox
6 77 0.006102154 ubox
7 66 0.005511478 ubox
7 76 0.006561947 ubox
7 77 0.013493856 ubox
8 66 0.003909185 ubox
8 76 0.015179232 ubox
8 77 0.003943114 ubox
9 66 0.004577654 ubox
9 67 0.980108887 ubox
9 70 0.010354329 ubox
9 71 0.025810080 ubox
9 74 0.014937464 ubox
9 77 0.006954724 ubox
9 78 0.022485617 ubox
10 66 0.981522408 ubox
10 76 0.007517291 ubox
10 77 0.021063752 ubox
11 27 0.003431631 ubox
11 63 0.003895349 ubox
11 65 0.981599892 ubox
11 69 0.003463181 ubox
11 73 0.025085072 ubox
11 75 0.006978924 ubox
12 64 0.980666547 ubox
12 69 0.006348890 ubox
12 72 0.025882632 ubox
14 24 0.003569723 ubox
15 26 0.998112984 ubox
15 74 0.005387308 ubox
16 22 0.003504726 ubox
16 25 0.999304530 ubox
16 73 0.005334049 ubox
17 24 0.999263194 ubox
18 23 0.997538547 ubox
23 66 0.004041233 ubox
24 65 0.004243603 ubox
28 61 0.998779297 ubox
29 44 0.006895768 ubox
29 60 0.999810529 ubox
29 79 0.006815950 ubox
30 43 0.006996643 ubox
30 59 0.999733174 ubox
30 78 0.007277532 ubox
31 59 0.004536942 ubox
31 77 0.007172990 ubox
31 78 0.010542858 ubox
32 76 0.007114886 ubox
32 77 0.010607612 ubox
33 40 0.007012040 ubox
33 56 0.999795565 ubox
33 61 0.005136758 ubox
33 76 0.010499741 ubox
34 39 0.007009721 ubox
34 55 0.999770138 ubox
34 57 0.009893527 ubox
34 60 0.005142442 ubox
35 54 0.991562744 ubox
35 56 0.009984514 ubox
35 59 0.005129497 ubox
35 74 0.012754740 ubox
36 52 0.254728248 ubox
36 54 0.080643906 ubox
38 50 0.175388804 ubox
38 52 0.246237191 ubox
38 54 0.030328388 ubox
38 56 0.003234988 ubox
38 71 0.012973333 ubox
39 50 0.716061623 ubox
39 52 0.665328536 ubox
39 70 0.012973875 ubox
40 48 0.173987310 ubox
40 49 0.716605137 ubox
40 51 0.674628913 ubox
40 69 0.012969181 ubox
41 50 0.665093037 ubox
41 67 0.006651595 ubox
42 66 0.006589240 ubox
43 48 0.424575007 ubox
43 49 0.439308804 ubox
43 51 0.005710275 ubox
43 64 0.004709021 ubox
44 50 0.006277070 ubox
44 67 0.005158756 ubox
45 66 0.005078767 ubox
49 61 0.014444032 ubox
50 60 0.014463278 ubox
51 59 0.014408613 ubox
52 57 0.011684052 ubox
62 76 0.003888563 ubox
62 77 0.022920462 ubox
63 76 0.026370006 ubox
63 77 0.003372993 ubox
64 70 0.011621694 ubox
64 71 0.021579700 ubox
64 74 0.036731885 ubox
64 76 0.003503343 ubox
64 77 0.013016574 ubox
64 78 0.037172084 ubox
65 76 0.014310141 ubox
65 77 0.036654646 ubox
66 73 0.064579605 ubox
66 75 0.013790860 ubox
67 72 0.067516812 ubox
68 76 0.016622139 ubox
68 77 0.021154263 ubox
69 74 0.067522919 ubox
69 76 0.020131794 ubox
69 77 0.007388467 ubox
69 78 0.037308259 ubox
70 79 0.028985690 ubox
71 79 0.415223743 ubox
72 76 0.008064164 ubox
72 77 0.015474135 ubox
72 78 0.457853849 ubox
73 77 0.398433012 ubox
74 79 0.046014406 ubox
9 67 0.9500000 lbox
10 66 0.9500000 lbox
11 65 0.9500000 lbox
12 64 0.9500000 lbox
15 26 0.9500000 lbox
16 25 0.9500000 lbox
17 24 0.9500000 lbox
18 23 0.9500000 lbox
28 61 0.9500000 lbox
29 60 0.9500000 lbox
30 59 0.9500000 lbox
33 56 0.9500000 lbox
34 55 0.9500000 lbox
35 54 0.9500000 lbox
39 50 0.9500000 lbox
40 49 0.9500000 lbox
showpage
end
%%EOF
