%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACUGAGCGCAAAGGGCACAGAACUGAGCACAAAAAGAGCACAGACGGCGCGCGAAAGGGCACUGGUAUAUGUUCG\
) } def
/len { sequence length } bind def

/coor [
[131.13325500 149.97775269]
[113.74565887 157.25480652]
[94.94948578 158.66470337]
[76.67085266 154.06298828]
[60.78286362 143.92118835]
[48.91362000 129.27861023]
[35.05542755 135.01885986]
[21.19723511 140.75910950]
[11.40847588 153.18855286]
[-3.31092715 150.91073608]
[-17.16912079 156.65098572]
[-26.95788002 169.08041382]
[-41.67728424 166.80259705]
[-53.99689865 178.45005798]
[-68.59958649 169.83622742]
[-64.36482239 153.41967773]
[-47.41753387 152.94439697]
[-38.62000656 140.92555237]
[-22.90937233 142.79278564]
[-9.05117893 137.05253601]
[-0.25364923 125.03368378]
[15.45698452 126.90092468]
[29.31517792 121.16066742]
[43.17337036 115.42041779]
[41.24248123 103.82218933]
[41.65452194 92.07155609]
[44.39305878 80.63706207]
[49.34889984 69.97465515]
[56.32442856 60.50949860]
[65.04150391 52.61900330]
[75.15252686 46.61780930]
[86.25434113 42.74520111]
[97.90425110 41.15560150]
[109.63772583 41.91239929]
[120.98690796 44.98541260]
[131.49923706 50.25210571]
[140.75555420 57.50247192]
[148.38676453 66.44741058]
[154.08857727 76.73023987]
[157.63362122 87.94094086]
[172.58738708 86.76406097]
[187.54113770 85.58717346]
[202.49490356 84.41028595]
[217.44866943 83.23339844]
[224.32080078 68.33474731]
[237.64753723 58.92454147]
[253.80166626 57.45017242]
[268.44296265 64.21439362]
[277.68429565 77.31894684]
[292.58032227 75.55588531]
[307.47634888 73.79282379]
[320.27145386 64.48712158]
[333.81991577 70.67485809]
[348.71594238 68.91179657]
[361.51104736 59.60609436]
[375.05950928 65.79383087]
[387.86849976 55.55361557]
[403.04064941 61.77759171]
[404.96817017 78.06306458]
[391.66818237 87.65694427]
[376.82257080 80.68985748]
[365.09295654 89.86946106]
[350.47900391 83.80782318]
[335.58297729 85.57088470]
[323.85336304 94.75048828]
[309.23941040 88.68885040]
[294.34338379 90.45191193]
[279.44735718 92.21497345]
[274.82321167 105.21556854]
[264.96109009 114.96146393]
[251.78041077 119.47442627]
[237.88201904 117.80266571]
[226.03512573 110.22089386]
[218.62554932 98.18715668]
[203.67178345 99.36404419]
[188.71803284 100.54093170]
[173.76426697 101.71781921]
[158.81050110 102.89470673]
[154.88252258 121.32986450]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 24]
[7 23]
[8 22]
[10 20]
[11 19]
[13 17]
[40 78]
[41 77]
[42 76]
[43 75]
[44 74]
[49 68]
[50 67]
[51 66]
[53 64]
[54 63]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
