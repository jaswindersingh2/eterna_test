%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGAAGAUCACUGCGAAGCGAAAGCAGCGAAAGCAAACGACAGGAGGAUCAAGCAAAGGCAACCGAUCUGGUUCG\
) } def
/len { sequence length } bind def

/coor [
[88.01869965 140.65628052]
[79.43048096 136.57817078]
[72.04930878 130.73696899]
[66.22479248 123.46327972]
[62.22050476 115.15390015]
[60.20229721 106.25035095]
[60.23172379 97.21543121]
[62.26500702 88.50920868]
[66.15740967 80.56555176]
[71.67266846 73.77053833]
[62.85589218 61.63528061]
[54.03911209 49.50002670]
[45.22233200 37.36477280]
[26.52929688 30.31817055]
[24.70298958 11.23070526]
[14.96126938 -0.17538466]
[5.21954870 -11.58147430]
[-4.74423790 -22.79409981]
[-14.92624855 -33.80893707]
[-33.92051697 -32.18464279]
[-49.01036072 -43.41947556]
[-52.79811859 -61.59109497]
[-66.42026520 -67.87098694]
[-82.69221497 -65.83244324]
[-92.37657928 -79.06668091]
[-85.51091766 -93.95945740]
[-69.15803528 -95.19035339]
[-60.14036942 -81.49313354]
[-46.51822281 -75.21324158]
[-45.43751907 -76.36160278]
[-44.28916168 -77.44229889]
[-50.56905746 -91.06445312]
[-64.26627350 -100.08211517]
[-63.03537369 -116.43499756]
[-48.14260101 -123.30065918]
[-34.90836334 -113.61629486]
[-36.94690704 -97.34434509]
[-30.66701317 -83.72219849]
[-16.25400543 -81.91172028]
[-4.92366123 -72.58757019]
[-0.28090486 -58.51245880]
[-3.91141129 -43.99094772]
[6.27059984 -32.97610855]
[13.30934238 -30.12754059]
[16.62563896 -21.32319450]
[26.36735916 -9.91710567]
[36.10908127 1.48898411]
[46.65177536 1.41422832]
[55.59954453 7.40103531]
[59.72024918 17.58799362]
[57.35758972 28.54799271]
[66.17436981 40.68324661]
[74.99114227 52.81850433]
[83.80792236 64.95375824]
[108.73993683 60.53059387]
[132.25209045 72.71553040]
[144.00624084 97.73481750]
[158.99467468 98.32371521]
[173.24787903 90.21334076]
[187.25958252 98.73413849]
[186.61575317 115.12064362]
[171.97871399 122.51582336]
[158.40577698 113.31215668]
[143.41734314 112.72325897]
[136.87120056 126.21948242]
[146.61291504 137.62556458]
[156.35464478 149.03166199]
[166.09635925 160.43774414]
[181.91278076 163.12484741]
[189.54687500 177.23512268]
[183.14242554 191.94439697]
[167.61238098 195.96896362]
[154.87005615 186.22151184]
[154.69027710 170.17947388]
[144.94854736 158.77337646]
[135.20683289 147.36729431]
[125.46511078 135.96119690]
[116.61228943 140.35943604]
[107.09069824 142.63917542]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 54]
[11 53]
[12 52]
[13 51]
[15 47]
[16 46]
[17 45]
[18 43]
[19 42]
[22 29]
[23 28]
[31 38]
[32 37]
[57 64]
[58 63]
[65 77]
[66 76]
[67 75]
[68 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
