%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAUCCACGAAAAAGGGAAAAGGCCACCGAAAGAGUGAAGCCAGGCGAAAGACCAAGCAAAAAGUAGCGGUUCG\
) } def
/len { sequence length } bind def

/coor [
[117.21299744 212.22328186]
[116.62409973 197.23484802]
[116.03520203 182.24641418]
[104.95749664 172.35601807]
[104.14675903 157.16400146]
[114.59582520 145.61174011]
[114.00692749 130.62330627]
[91.65325165 129.46238708]
[77.08667755 115.33095551]
[62.82083130 119.96620941]
[48.55498123 124.60146332]
[41.12711716 130.37564087]
[33.63722992 129.12672424]
[26.13456535 143.03662109]
[10.96985054 147.48712158]
[-2.85995889 139.83781433]
[-7.14988232 124.62689972]
[0.64521593 110.87873840]
[15.90064240 106.74987030]
[29.56562233 114.68988800]
[43.91972733 110.33561707]
[58.18557358 105.70036316]
[72.45142365 101.06510925]
[73.19459534 93.55571747]
[75.94602203 86.52912140]
[80.49955750 80.51176453]
[86.51406097 75.95446014]
[83.01238251 61.36891174]
[79.51070404 46.78335953]
[75.43909454 32.34653091]
[70.80384064 18.08068466]
[66.16858673 3.81483722]
[61.25413132 -10.35725307]
[48.30665588 -20.42178917]
[50.81679535 -36.62768936]
[66.20233154 -42.30371475]
[78.63594818 -31.61085510]
[75.32700348 -15.54900932]
[80.73985291 -10.22366428]
[80.43443298 -0.82041758]
[85.06968689 13.44542980]
[89.70494080 27.71127701]
[93.71598053 30.73365784]
[95.70646667 36.41930389]
[94.09625244 43.28168106]
[97.59793091 57.86722946]
[101.09960938 72.45278168]
[121.19762421 77.90110016]
[133.56278992 97.25778961]
[146.92788696 90.44792938]
[160.15670776 83.37698364]
[168.07189941 69.01446533]
[184.47096252 68.95854187]
[192.48393250 83.26673126]
[183.86776733 97.22000122]
[167.48603821 96.46442413]
[163.07301331 102.64369965]
[153.73774719 103.81302643]
[140.37265015 110.62288666]
[155.36645508 111.05424500]
[170.03544617 107.92047119]
[184.56237793 111.65789795]
[195.89764404 121.48193359]
[201.66165161 135.33026123]
[200.64440918 150.29573059]
[193.05943298 163.23667908]
[180.49903870 171.43646240]
[165.59999084 173.17370605]
[151.48997498 168.08374023]
[141.13110352 157.23506165]
[136.69801331 142.90567017]
[128.99536133 130.03440857]
[129.58425903 145.02284241]
[140.90750122 155.71966553]
[141.29121399 170.92846680]
[131.02363586 181.65751648]
[131.61253357 196.64595032]
[132.20143127 211.63438416]
[135.14663696 230.79100037]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[6 73]
[7 72]
[9 23]
[10 22]
[11 21]
[13 20]
[27 47]
[28 46]
[29 45]
[30 42]
[31 41]
[32 40]
[33 38]
[49 59]
[50 58]
[51 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
