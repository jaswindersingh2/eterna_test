%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGGCAAAGCCAACCUCAAAGAGGAAUCGAGAAACUCGAAACGUGAAACACGAACGCAAAGCGAGCGCGACUUCG\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 206.07194519]
[92.50000000 190.23281860]
[92.50000000 175.23281860]
[92.50000000 160.23281860]
[80.37303925 157.43713379]
[69.07115173 152.22689819]
[59.06946945 144.82113647]
[47.66337967 154.56285095]
[36.25728989 164.30456543]
[28.13990211 179.18893433]
[11.59010601 175.50918579]
[10.54461384 158.58750916]
[26.51556778 152.89848328]
[37.92165756 143.15675354]
[49.32774734 133.41503906]
[43.01131439 120.89334106]
[39.73733139 107.25621796]
[39.68058014 93.23170471]
[25.09503174 89.73001862]
[10.50948334 86.22834015]
[-4.07606506 82.72666168]
[-20.88905144 84.90837097]
[-27.63979340 69.35639954]
[-14.56439018 58.56426239]
[-0.57438457 68.14111328]
[14.01116467 71.64279175]
[28.59671211 75.14447021]
[43.18226242 78.64615631]
[51.43910599 63.58459854]
[63.58459854 51.43910599]
[78.64615631 43.18226242]
[75.14447021 28.59671211]
[71.64279175 14.01116467]
[68.14111328 -0.57438457]
[64.63943481 -15.15993309]
[55.06258011 -29.14993858]
[65.85471344 -42.22534180]
[81.40668488 -35.47459793]
[79.22498322 -18.66161346]
[82.72666168 -4.07606506]
[86.22834015 10.50948334]
[89.73001862 25.09503174]
[93.23170471 39.68058014]
[110.40017700 40.19968033]
[126.73582458 45.50745392]
[140.93052673 55.17887115]
[152.33662415 45.43714905]
[163.74270630 35.69543076]
[175.14880371 25.95370865]
[183.26618958 11.06934166]
[199.81597900 14.74909592]
[200.86148071 31.67077637]
[184.89051819 37.35979843]
[173.48443604 47.10151672]
[162.07833862 56.84323883]
[150.67225647 66.58496094]
[158.00405884 82.11784363]
[160.69102478 99.08269501]
[158.51799011 116.12100220]
[172.37619019 121.86125946]
[186.23437500 127.60150909]
[200.02061462 120.22087097]
[215.31497192 123.47917175]
[224.89593506 135.83793640]
[224.23965454 151.46174622]
[213.65600586 162.97351074]
[198.14227295 164.93771362]
[185.02355957 156.42694092]
[180.49412537 141.45970154]
[166.63594055 135.71945190]
[152.77774048 129.97920227]
[146.32072449 139.22540283]
[138.26466370 147.11749268]
[128.88763428 153.38301086]
[118.51337433 157.80567932]
[107.50000000 160.23281860]
[107.50000000 175.23281860]
[107.50000000 190.23281860]
[113.54634094 206.07194519]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[7 15]
[8 14]
[9 13]
[18 28]
[19 27]
[20 26]
[21 25]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[46 56]
[47 55]
[48 54]
[49 53]
[59 71]
[60 70]
[61 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
