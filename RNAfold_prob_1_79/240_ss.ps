%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACUAUGAUAGAGAUCAUAGAAAUAUCGAUCAAAACUAUCGACGAAAGUCAUAGACUAUUGUAGGAUAGAUUUCG\
) } def
/len { sequence length } bind def

/coor [
[-36.72439957 216.89237976]
[-52.34396744 216.97973633]
[-67.64975739 213.89045715]
[-82.00274658 207.75575256]
[-94.80416870 198.83390808]
[-105.52043915 187.49948120]
[-113.70545197 174.22747803]
[-127.77832031 179.41923523]
[-141.85119629 184.61099243]
[-155.92405701 189.80274963]
[-169.99693298 194.99450684]
[-184.06980896 200.18626404]
[-198.14266968 205.37802124]
[-208.20721436 218.32548523]
[-224.41311646 215.81535339]
[-230.08914185 200.42980957]
[-219.39627075 187.99620056]
[-203.33442688 191.30514526]
[-189.26156616 186.11338806]
[-175.18869019 180.92163086]
[-161.11581421 175.72987366]
[-147.04295349 170.53811646]
[-132.97007751 165.34635925]
[-118.89720917 160.15460205]
[-121.21960449 145.94828796]
[-120.83181000 131.55426025]
[-117.74600983 117.48511505]
[-112.07048798 104.24213409]
[-104.00582123 92.29750061]
[-93.83781433 82.07743073]
[-81.92736816 73.94696808]
[-68.69763184 68.19695282]
[-54.61903381 65.03363037]
[-40.19249725 64.57120514]
[-25.93164444 66.82778931]
[-12.34450912 71.72463226]
[0.08457106 79.08892059]
[10.91221046 88.65982819]
[19.75179672 100.09779358]
[26.28729630 112.99655914]
[40.72412491 108.92495728]
[55.16095352 104.85334778]
[69.59777832 100.78174591]
[84.03460693 96.71013641]
[95.26811981 84.40108490]
[111.44698334 88.39468384]
[125.71283722 83.75942993]
[139.97868347 79.12417603]
[154.24452209 74.48891449]
[164.97831726 62.86581802]
[179.47363281 66.29148865]
[193.73947144 61.65623093]
[208.00532532 57.02097702]
[222.27116394 52.38572311]
[235.46665955 41.74074936]
[249.34849548 51.47373199]
[243.83876038 67.50741577]
[226.90643311 66.65156555]
[212.64057922 71.28682709]
[198.37472534 75.92208099]
[184.10888672 80.55733490]
[174.39549255 91.84888458]
[158.87979126 88.75476837]
[144.61393738 93.39002228]
[130.34808350 98.02527618]
[116.08223724 102.66053009]
[110.06240845 112.82438660]
[98.75826263 116.25346375]
[88.10621643 111.14696503]
[73.66938782 115.21857452]
[59.23255920 119.29017639]
[44.79573059 123.36178589]
[30.35890198 127.43338776]
[31.49861526 143.05464172]
[29.43901062 158.57600403]
[24.26830101 173.34928894]
[16.20457077 186.75802612]
[5.58657503 198.24314880]
[-7.14048147 207.32633972]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 24]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[13 18]
[40 73]
[41 72]
[42 71]
[43 70]
[44 69]
[46 66]
[47 65]
[48 64]
[49 63]
[51 61]
[52 60]
[53 59]
[54 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
