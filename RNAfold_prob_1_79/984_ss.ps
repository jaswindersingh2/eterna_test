%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACUUUCAGAAUGAAAAUUCAUAAAAAAAUGAAAAAAAUUUUUUUAAUAAUGAAAAUUAAGAAAGCAGAGAUUUCG\
) } def
/len { sequence length } bind def

/coor [
[105.89608002 315.50567627]
[101.16812897 301.12078857]
[101.36962128 285.98016357]
[106.47869110 271.72616577]
[115.94113922 259.90499878]
[128.73056030 251.79885864]
[125.22888947 237.21330261]
[121.72720337 222.62776184]
[118.22552490 208.04220581]
[114.72384644 193.45666504]
[101.92947388 185.91744995]
[98.17049408 171.17552185]
[106.16505432 157.80671692]
[102.66336823 143.22117615]
[99.16168976 128.63562012]
[84.98630524 124.39857483]
[74.81530762 113.65404510]
[71.36147308 99.26776886]
[75.54597473 85.07678223]
[86.25276184 74.86605835]
[82.75108337 60.28050995]
[79.24939728 45.69496155]
[66.05688477 37.41272736]
[62.71346283 22.57102585]
[70.69060516 10.04502201]
[67.18892670 -4.54052734]
[63.68724442 -19.12607574]
[60.18556595 -33.71162415]
[56.68388367 -48.29717255]
[53.18220520 -62.88272095]
[49.68052292 -77.46826935]
[46.17884445 -92.05381775]
[42.67716217 -106.63936615]
[28.60275841 -113.45443726]
[22.24897957 -127.74301910]
[26.61588860 -142.75848389]
[39.64156342 -151.41098022]
[55.17567825 -149.61508179]
[65.88349915 -138.21873474]
[66.70912170 -122.60296631]
[57.26271057 -110.14105225]
[60.76439285 -95.55550385]
[64.26607513 -80.96994781]
[67.76775360 -66.38439941]
[71.26943207 -51.79885483]
[74.77111053 -37.21330643]
[78.27279663 -22.62775612]
[81.77447510 -8.04220772]
[85.27615356 6.54334116]
[98.07052612 14.08254433]
[101.82950592 28.82448196]
[93.83494568 42.19327927]
[97.33663177 56.77883148]
[100.83831024 71.36437988]
[115.01369476 75.60142517]
[125.18469238 86.34595490]
[128.63853455 100.73223114]
[124.45402527 114.92321777]
[113.74723816 125.13394165]
[117.24891663 139.71948242]
[120.75060272 154.30503845]
[133.94311523 162.58726501]
[137.28654480 177.42897034]
[129.30938721 189.95497131]
[132.81108093 204.54052734]
[136.31275940 219.12608337]
[139.81443787 233.71162415]
[143.31611633 248.29718018]
[158.39167786 249.71351624]
[172.18949890 255.95040894]
[183.21289062 266.33132935]
[190.26611328 279.73025513]
[192.58409119 294.69372559]
[189.91537476 309.59866333]
[182.54946899 322.82824707]
[171.28535461 332.94744873]
[157.34487915 338.85864258]
[142.24021912 339.92056274]
[127.60978699 336.01809692]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 68]
[7 67]
[8 66]
[9 65]
[10 64]
[13 61]
[14 60]
[15 59]
[20 54]
[21 53]
[22 52]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
