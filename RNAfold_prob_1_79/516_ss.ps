%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACUCGCAUUUAGAAACAAGUGACCAAAAGGACACUUGAGAAAAAACUAAACUAAAUAGCGAGUUGUUGUAUUCG\
) } def
/len { sequence length } bind def

/coor [
[125.99498749 364.00531006]
[123.84607697 348.98043823]
[127.27370453 334.19476318]
[135.81430054 321.64794922]
[148.31282043 313.03683472]
[144.81114197 298.45126343]
[141.30944824 283.86572266]
[137.80776978 269.28018188]
[134.30609131 254.69462585]
[130.80441284 240.10906982]
[127.30273438 225.52352905]
[123.51535797 211.00953674]
[119.44374847 196.57270813]
[115.37214661 182.13587952]
[111.30053711 167.69905090]
[107.22893524 153.26222229]
[103.15732574 138.82539368]
[81.01070404 134.01156616]
[65.29212189 117.68454742]
[61.32243347 95.37116241]
[70.44541931 74.62467194]
[61.15901184 62.84492111]
[51.87260437 51.06516647]
[42.58619308 39.28541183]
[33.29978561 27.50565720]
[24.01337433 15.72590351]
[9.39353848 9.67851067]
[7.59039497 -5.10654736]
[-1.69601452 -16.88630104]
[-17.11990929 -22.45725441]
[-19.74052429 -38.64565659]
[-6.86199665 -48.79827118]
[8.26734924 -42.47095490]
[10.08373928 -26.17271042]
[19.37014961 -14.39295673]
[33.32575989 -9.18813038]
[35.79312897 6.43949461]
[45.07953644 18.21924782]
[54.36594772 29.99900246]
[63.65235519 41.77875519]
[72.93876648 53.55850983]
[82.22517395 65.33826447]
[90.39782715 62.24846268]
[99.05355835 61.05793381]
[107.75690460 61.82656860]
[116.07000732 64.51570129]
[123.57463074 68.99004364]
[129.89321899 75.02449036]
[134.70788574 82.31545258]
[137.77639771 90.49611664]
[138.94439697 99.15491486]
[138.15310669 107.85623932]
[135.44235229 116.16230774]
[130.94848633 123.65525818]
[124.89762115 129.95811462]
[117.59415436 134.75379944]
[121.66576385 149.19062805]
[125.73736572 163.62745667]
[129.80897522 178.06428528]
[133.88058472 192.50111389]
[137.95219421 206.93794250]
[143.43029785 214.58676147]
[141.88827515 222.02185059]
[145.38996887 236.60739136]
[148.89164734 251.19294739]
[152.39332581 265.77850342]
[155.89500427 280.36404419]
[159.39668274 294.94958496]
[162.89836121 309.53512573]
[177.94400024 311.53350830]
[191.24986267 318.83544922]
[201.01643372 330.45346069]
[205.92289734 344.81631470]
[205.30566406 359.98150635]
[199.24822998 373.89810181]
[188.56979370 384.68402100]
[174.71453857 390.88049316]
[159.55627441 391.64953613]
[145.14503479 386.88714600]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 69]
[6 68]
[7 67]
[8 66]
[9 65]
[10 64]
[11 63]
[12 61]
[13 60]
[14 59]
[15 58]
[16 57]
[17 56]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
[28 35]
[29 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
