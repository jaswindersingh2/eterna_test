%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCACGGACGAAAAAGCCAAAAGCCGGCCGAAAGAGCCAAGGCAGGUAAAAAACCAAGCAAAAAUGUGUAAUUCG\
) } def
/len { sequence length } bind def

/coor [
[110.19171906 264.35891724]
[109.60282135 249.37048340]
[109.01393127 234.38204956]
[97.93621826 224.49165344]
[97.12548065 209.29963684]
[107.57454681 197.74737549]
[106.98564911 182.75894165]
[106.39675140 167.77050781]
[105.80785370 152.78207397]
[93.50183105 144.20526123]
[79.23598480 148.84051514]
[71.80812073 154.61468506]
[64.31822968 153.36576843]
[56.81557083 167.27566528]
[41.65085602 171.72616577]
[27.82104492 164.07685852]
[23.53112221 148.86593628]
[31.32621956 135.11778259]
[46.58164597 130.98892212]
[60.24662781 138.92893982]
[74.60073090 134.57466125]
[88.86657715 129.93940735]
[77.84022522 121.23342896]
[71.99453735 109.07386780]
[72.07869720 96.13948822]
[77.59035492 85.05656433]
[86.97293091 77.86578369]
[83.47125244 63.28023148]
[79.96956635 48.69468307]
[75.89796448 34.25785446]
[71.26271057 19.99200821]
[66.62745667 5.72616005]
[61.71300125 -8.44593048]
[48.76552200 -18.51046753]
[51.27566147 -34.71636963]
[66.66120148 -40.39239120]
[79.09481812 -29.69953346]
[75.78587341 -13.63768673]
[81.19872284 -8.31234169]
[80.89330292 1.09090519]
[85.52855682 15.35675335]
[90.16381073 29.62260056]
[94.17484283 32.64498138]
[96.16532898 38.33062744]
[94.55511475 45.19300461]
[98.05680084 59.77855301]
[101.55847931 74.36409760]
[126.20957947 88.03179932]
[125.36372375 119.41655731]
[138.72882080 112.60669708]
[152.09391785 105.79684448]
[158.39904785 91.04472351]
[173.90159607 86.91553497]
[186.70936584 96.57683563]
[186.99731445 112.61730957]
[174.54455566 122.73206329]
[158.90377808 119.16194153]
[145.53868103 125.97179413]
[132.17358398 132.78164673]
[145.94158936 126.82834625]
[160.87580872 128.23170471]
[173.29373169 136.64567566]
[180.13339233 149.99554443]
[179.70823669 164.98951721]
[172.12310791 177.93038940]
[159.24835205 185.62718201]
[144.25862122 186.18205261]
[130.85006714 179.45816040]
[122.32897949 167.11347961]
[120.79629517 152.19317627]
[121.38518524 167.18161011]
[121.97408295 182.17004395]
[122.56298065 197.15847778]
[133.88621521 207.85530090]
[134.26992798 223.06410217]
[124.00236511 233.79315186]
[124.59126282 248.78158569]
[125.18016052 263.77001953]
[128.12536621 282.92663574]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[6 73]
[7 72]
[8 71]
[9 70]
[10 22]
[11 21]
[13 20]
[27 47]
[28 46]
[29 45]
[30 42]
[31 41]
[32 40]
[33 38]
[49 59]
[50 58]
[51 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
