%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGAAGCACGAAAAAGGCAAAACUCCUACGAAAGAUAGAAGAGACCGGAAACAGGAACCAAAAAGAUAGCUUUCG\
) } def
/len { sequence length } bind def

/coor [
[86.76580048 277.43481445]
[71.42047882 280.44400024]
[57.75609207 272.84014893]
[52.22454453 258.21359253]
[57.43766785 243.47053528]
[70.93398285 235.57221985]
[73.28049469 220.75689697]
[75.62701416 205.94157410]
[77.97353363 191.12625122]
[80.32005310 176.31091309]
[82.66656494 161.49559021]
[73.25883484 158.02642822]
[64.50971985 153.12811279]
[56.63470078 146.92127991]
[49.82773972 139.55882263]
[44.25648499 131.22204590]
[40.05815506 122.11631012]
[37.33614731 112.46585846]
[36.15750504 102.50837708]
[36.55125809 92.48912048]
[38.50770950 82.65485382]
[41.97867203 73.24777985]
[46.87865448 64.49959564]
[53.08697891 56.62576294]
[60.45073700 49.82020569]
[68.78856659 44.25053787]
[77.89511108 40.05394363]
[74.39343262 25.46839333]
[70.89174652 10.88284492]
[66.82014465 -3.55398393]
[62.18488693 -17.81983185]
[57.54963303 -32.08567810]
[52.63518143 -46.25777054]
[39.68770599 -56.32230759]
[42.19784164 -72.52820587]
[57.58338165 -78.20423126]
[70.01699829 -67.51137543]
[66.70805359 -51.44952774]
[72.12090302 -46.12417984]
[71.81548309 -36.72093582]
[76.45073700 -22.45508575]
[81.08599091 -8.18923855]
[85.09702301 -5.16685915]
[87.08750916 0.51878828]
[85.47730255 7.38116407]
[88.97898102 21.96671295]
[92.48065948 36.55226135]
[126.74890137 41.97714233]
[153.12945557 64.51174164]
[166.49455261 57.70188522]
[169.83572388 42.42541122]
[182.24624634 32.91158295]
[197.86625671 33.65254593]
[209.32048035 44.29843140]
[211.20056152 59.82258606]
[202.61880493 72.89497375]
[187.62722778 77.34320831]
[173.30441284 71.06697845]
[159.93931580 77.87683868]
[162.44367981 86.47435760]
[163.72140503 95.33757782]
[163.74740601 104.29238129]
[162.52114868 113.16287231]
[160.06675720 121.77478790]
[156.43240356 129.95896912]
[151.68951416 137.55462646]
[145.93124390 144.41258240]
[139.27070618 150.39810181]
[131.83872986 155.39360046]
[123.78132629 159.30096436]
[115.25676727 162.04342651]
[106.43251038 163.56712341]
[97.48188782 163.84211731]
[95.13537598 178.65744019]
[92.78885651 193.47276306]
[90.44233704 208.28808594]
[88.09582520 223.10340881]
[85.74930573 237.91873169]
[96.14434814 249.60107422]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 78]
[7 77]
[8 76]
[9 75]
[10 74]
[11 73]
[27 47]
[28 46]
[29 45]
[30 42]
[31 41]
[32 40]
[33 38]
[49 59]
[50 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
