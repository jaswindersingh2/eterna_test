%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCGGGAAUUGAGAAACUAAGAUAAUUUAAGACUGAGAACUAAUGAUUUGCUAAUAUACACCGCGACAGUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[7.27538824 203.90983582]
[0.65066558 217.40876770]
[-8.16023350 229.59384155]
[-18.90380287 240.11447144]
[-31.27092743 248.66796875]
[-44.90578079 255.00820923]
[-59.41606140 258.95278931]
[-74.38427734 260.38824463]
[-89.37976837 259.27319336]
[-103.97108459 255.63980103]
[-117.73839569 249.59255981]
[-130.28559875 241.30546570]
[-141.25167847 231.01696777]
[-150.32112122 219.02308655]
[-157.23297119 205.66891479]
[-161.78839111 191.33865356]
[-163.85627747 176.44462585]
[-163.37715149 161.41537476]
[-160.36479187 146.68331909]
[-154.90588379 132.67230225]
[-147.15747070 119.78549194]
[-137.34249878 108.39363098]
[-125.74337769 98.82450104]
[-112.69381714 91.35343170]
[-98.56928253 86.19536591]
[-83.77616882 83.49871826]
[-68.74011230 83.34107971]
[-53.89371490 85.72698212]
[-39.66414261 90.58778381]
[-26.46081352 97.78361511]
[-14.66360855 107.10746002]
[-4.61195850 118.29103088]
[3.40493107 131.01257324]
[17.26312447 125.27231598]
[31.12131691 119.53206635]
[44.97951126 113.79180908]
[58.83770370 108.05155945]
[72.69589233 102.31130981]
[86.55409241 96.57106018]
[72.63034058 90.99170685]
[62.34246826 80.07567596]
[57.59715652 65.84605408]
[59.27385712 50.94005966]
[67.06182861 38.12025070]
[79.51770020 29.76254845]
[94.33300781 27.41590691]
[108.76198578 31.51523399]
[120.13049316 41.30079269]
[126.33156586 54.95900345]
[126.21595001 69.95855713]
[119.80506897 83.51955414]
[108.28655243 93.12897491]
[123.24031067 94.30586243]
[138.19407654 95.48274994]
[153.14782715 96.65962982]
[161.24798584 83.67325592]
[174.46124268 75.94872284]
[189.75129700 75.26108551]
[203.60461426 81.76835632]
[212.83776855 93.97520447]
[215.32908630 109.07659912]
[210.50607300 123.60233307]
[199.47700500 134.21450806]
[184.77629089 138.47453308]
[169.78205872 135.40347290]
[157.93986511 125.70703125]
[151.97094727 111.61339569]
[137.01718140 110.43650818]
[122.06342316 109.25962067]
[107.10966492 108.08273315]
[92.29434204 110.42925262]
[78.43614960 116.16950226]
[64.57795715 121.90975189]
[50.71976089 127.65000916]
[36.86156845 133.39025879]
[23.00337601 139.13050842]
[9.14518261 144.87075806]
[12.47187042 159.53504944]
[13.27226162 174.55061340]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[33 77]
[34 76]
[35 75]
[36 74]
[37 73]
[38 72]
[39 71]
[52 70]
[53 69]
[54 68]
[55 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
