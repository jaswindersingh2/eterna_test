%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACGACGAUUCCGCCGUCAGGGAGCUGUACGGAAGACCUGACGCUUAUGCGCAGGAGGAAGGGUCUUAGCUGUUCG\
) } def
/len { sequence length } bind def

/coor [
[83.56912231 135.37492371]
[74.75234985 147.51017761]
[65.93556976 159.64543152]
[57.11878967 171.78068542]
[61.07716751 186.90898132]
[54.33849335 201.02012634]
[40.08456421 207.45126343]
[25.04565048 203.16581726]
[16.32266617 190.18722534]
[18.03433800 174.64360046]
[29.37246513 163.87416077]
[44.98353195 162.96391296]
[53.80031204 150.82865906]
[62.61709213 138.69338989]
[71.43386841 126.55814362]
[62.07310104 109.10544586]
[62.49024582 89.30527496]
[49.12514877 82.49541473]
[35.76005173 75.68555450]
[22.39495468 68.87570190]
[8.89872932 62.32956314]
[-4.72341776 56.04966736]
[-18.34556580 49.76977158]
[-34.61751556 51.80831528]
[-44.30188370 38.57407761]
[-37.43621826 23.68130493]
[-21.08333206 22.45040512]
[-12.06566906 36.14762115]
[1.55647814 42.42751694]
[15.17862606 48.70741272]
[22.77167511 48.64553833]
[29.20481110 55.51060104]
[42.56990814 62.32046127]
[55.93500900 69.13031769]
[69.30010223 75.94017792]
[77.26779938 68.30448151]
[87.05525208 63.20608521]
[97.87895966 61.05311584]
[108.87246704 62.01792526]
[119.15570831 66.02327728]
[128.89743042 54.61719131]
[138.63914490 43.21110153]
[148.38087463 31.80501175]
[151.69717407 23.00066566]
[158.73591614 20.15209579]
[168.91792297 9.13725758]
[179.09992981 -1.87757981]
[182.18946838 -17.98307037]
[197.76861572 -23.10384560]
[209.81086731 -11.97209167]
[205.92820740 3.96079707]
[190.11477661 8.30443096]
[179.93275452 19.31926918]
[169.75074768 30.33410645]
[159.78695679 41.54673004]
[150.04524231 52.95281982]
[140.30351257 64.35890961]
[130.56179810 75.76499939]
[137.66590881 89.86895752]
[138.59559631 105.63365936]
[133.19847107 120.47486115]
[144.21331787 130.65687561]
[155.22814941 140.83888245]
[170.61401367 144.52478027]
[174.70785522 158.84573364]
[185.72268677 169.02774048]
[196.73753357 179.20974731]
[212.84301758 182.29928589]
[217.96379089 197.87843323]
[206.83203125 209.92070007]
[190.89915466 206.03802490]
[186.55551147 190.22459412]
[175.54067993 180.04258728]
[164.52583313 169.86056519]
[149.92782593 166.90295410]
[145.04614258 151.85371399]
[134.03129578 141.67170715]
[123.01646423 131.48970032]
[110.62319946 137.53007507]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 13]
[4 12]
[17 35]
[18 34]
[19 33]
[20 32]
[21 30]
[22 29]
[23 28]
[40 58]
[41 57]
[42 56]
[43 55]
[45 54]
[46 53]
[47 52]
[61 78]
[62 77]
[63 76]
[65 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
