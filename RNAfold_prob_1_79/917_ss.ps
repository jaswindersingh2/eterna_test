%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGAAGAUGAGGUACAAGAGAAAUCACCGAAAGGAAGGUAGCCGAGCAUCAAGGGAAACCAACCCUGGUCCUUCG\
) } def
/len { sequence length } bind def

/coor [
[83.19700623 312.82824707]
[69.11940765 319.35516357]
[53.90048981 316.32794189]
[43.39223480 304.91058350]
[41.63528061 289.49328613]
[49.30521393 276.00433350]
[63.45278931 269.63052368]
[66.37914276 254.91873169]
[69.30549622 240.20695496]
[72.23184967 225.49517822]
[74.86879730 210.72877502]
[77.21531677 195.91345215]
[71.56425476 182.13249207]
[81.36511993 169.71260071]
[83.71163940 154.89727783]
[86.05815125 140.08195496]
[76.63203430 135.42422485]
[68.64030457 128.59208679]
[62.57350159 120.00488281]
[58.80403900 110.18972778]
[57.56328201 99.74910736]
[58.92740250 89.32388306]
[45.30525208 83.04398346]
[29.03330421 85.08253479]
[19.34893608 71.84829712]
[26.21459961 56.95552063]
[42.56748581 55.72462082]
[51.58515167 69.42183685]
[65.20729828 75.70173645]
[69.99218750 69.99218750]
[75.70173645 65.20729828]
[69.42183685 51.58515167]
[55.72462082 42.56748581]
[56.95552063 26.21459961]
[71.84829712 19.34893608]
[85.08253479 29.03330421]
[83.04398346 45.30525208]
[89.32388306 58.92740250]
[104.17295837 57.76820755]
[118.50801849 61.81111145]
[130.56326294 70.55810547]
[143.03530884 62.22455597]
[155.50735474 53.89100266]
[158.71151733 38.64727783]
[171.47865295 30.37354088]
[185.99147034 33.52216339]
[198.46351624 25.18861008]
[197.37893677 9.86806011]
[204.11437988 -3.93518233]
[216.85801697 -12.50811291]
[232.18190002 -13.54465675]
[245.96395874 -6.76598883]
[254.49690247 6.00446367]
[255.48541260 21.33151245]
[248.66357422 35.09225845]
[235.86643982 43.58513260]
[220.53636169 44.52558899]
[206.79707336 37.66065598]
[194.32502747 45.99420929]
[191.68016052 60.60722733]
[179.15045166 69.23630524]
[163.84089661 66.36304474]
[151.36885071 74.69660187]
[138.89682007 83.03015137]
[142.30505371 103.34968567]
[135.74156189 122.87966156]
[120.75341797 137.01666260]
[100.87348175 142.42846680]
[98.52696228 157.24378967]
[96.18044281 172.05911255]
[101.66366577 186.89976501]
[92.03063965 198.25996399]
[89.68412018 213.07528687]
[91.45677185 222.31498718]
[86.94363403 228.42152405]
[84.01728058 243.13330078]
[81.09091949 257.84509277]
[78.16456604 272.55685425]
[88.79605865 283.85955811]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 78]
[8 77]
[9 76]
[10 75]
[11 73]
[12 72]
[14 70]
[15 69]
[16 68]
[22 29]
[23 28]
[31 38]
[32 37]
[41 64]
[42 63]
[43 62]
[46 59]
[47 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
