%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCGAGGUCUAUGUCCACGCACGGCACCACUAAAUGCGGCGCCAGCCACGGCGAAAGGCGAGGCUCGGAUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[80.12851715 176.52264404]
[73.35871124 163.13722229]
[71.43225098 148.26144409]
[74.56902313 133.59307861]
[82.41100311 120.80624390]
[94.06541443 111.35904694]
[80.20722198 117.09930420]
[66.34902954 122.83955383]
[56.56026840 135.26898193]
[41.84086609 132.99116516]
[27.98267174 138.73141479]
[23.45323181 153.69865417]
[10.33451748 162.20942688]
[-5.17921495 160.24522400]
[-15.76285553 148.73345947]
[-16.41913414 133.10966492]
[-6.83817339 120.75089264]
[8.45618725 117.49258423]
[22.24242020 124.87322235]
[36.10061264 119.13297272]
[44.89814377 107.11412048]
[60.60877609 108.98136139]
[74.46697235 103.24110413]
[88.32516479 97.50085449]
[86.89169312 94.13829041]
[86.44324493 90.11297607]
[87.18176270 85.70682526]
[83.68008423 71.12127686]
[80.17839813 56.53572464]
[69.43329620 44.92308807]
[73.98569489 30.74123573]
[70.48400879 16.15568733]
[59.73890686 4.54305220]
[64.29130554 -9.63880157]
[51.41868591 -19.21352386]
[51.02259064 -35.25168610]
[63.40686417 -45.45018387]
[79.07135010 -41.98559952]
[85.99960327 -27.51566696]
[78.87685394 -13.14048195]
[89.37149048 -2.57110214]
[85.06955719 12.65400696]
[88.57124329 27.23955536]
[99.06587982 37.80893707]
[94.76394653 53.03404617]
[98.26563263 67.61959076]
[101.76731110 82.20513916]
[114.07333374 90.78195953]
[128.96936035 89.01889801]
[143.86538696 87.25583649]
[158.76141357 85.49278259]
[171.55650330 76.18707275]
[185.10498047 82.37480927]
[200.00100708 80.61174774]
[212.79609680 71.30604553]
[226.34457397 77.49378204]
[239.15354919 67.25357056]
[254.32571411 73.47753906]
[256.25323486 89.76301575]
[242.95323181 99.35689545]
[228.10763550 92.38980865]
[216.37800598 101.56941223]
[201.76406860 95.50778198]
[186.86804199 97.27083588]
[175.13841248 106.45043945]
[160.52447510 100.38880920]
[145.62844849 102.15186310]
[130.73242188 103.91492462]
[115.83639526 105.67798615]
[130.61853027 108.22519684]
[143.70896912 115.54915619]
[153.61370850 126.81398773]
[159.20228577 140.73402405]
[159.83691406 155.72059631]
[155.44515991 170.06327820]
[146.52822876 182.12513733]
[134.10382080 190.52955627]
[119.58994293 194.31733704]
[104.64305878 193.05619812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 24]
[7 23]
[8 22]
[10 20]
[11 19]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[34 40]
[48 69]
[49 68]
[50 67]
[51 66]
[53 64]
[54 63]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
