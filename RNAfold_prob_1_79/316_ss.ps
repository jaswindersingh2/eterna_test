%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGGGAGCAGGAAAAACUGCGGCAAAGCCAUCCCGGGCAGGCGAAAAGCCGCUGAAAUCAGCGCCGGGCGUAUUCG\
) } def
/len { sequence length } bind def

/coor [
[-18.96242332 172.41302490]
[-33.39925385 176.48461914]
[-37.26368332 191.28372192]
[-47.94625854 202.09017944]
[-62.50682449 206.07217407]
[-77.00852966 202.25688171]
[-87.58221436 191.76580811]
[-95.34012604 205.27330017]
[-110.03912354 209.19683838]
[-122.86865234 201.71760559]
[-137.30548096 205.78921509]
[-151.74230957 209.86082458]
[-166.17913818 213.93243408]
[-173.68180847 227.84233093]
[-188.84651184 232.29283142]
[-202.67633057 224.64352417]
[-206.96624756 209.43261719]
[-199.17115784 195.68444824]
[-183.91572571 191.55558777]
[-170.25074768 199.49560547]
[-155.81391907 195.42399597]
[-141.37709045 191.35238647]
[-126.94026184 187.28077698]
[-119.90917206 174.20028687]
[-105.32617950 169.86543274]
[-91.65382385 177.32897949]
[-88.11985016 162.85911560]
[-77.74859619 152.02893066]
[-63.25308609 147.81626892]
[-48.49833679 151.44865417]
[-37.47085953 162.04779053]
[-23.03403091 157.97619629]
[-15.04655552 137.07055664]
[5.59939337 127.82421875]
[26.96795082 135.95788574]
[39.75755310 128.12040710]
[52.54715729 120.28293610]
[65.33676147 112.44545746]
[78.12635803 104.60797882]
[76.79598236 92.35069275]
[82.39395142 80.17942810]
[94.31359100 71.98172760]
[109.81668091 70.94550323]
[118.63346100 58.81024933]
[127.45024109 46.67499542]
[126.37082672 30.66829681]
[138.30909729 19.95114899]
[154.10704041 22.74483109]
[161.64581299 36.90626907]
[155.14233398 51.57201767]
[139.58549500 55.49177551]
[130.76872253 67.62702942]
[121.95194244 79.76228333]
[129.02288818 92.99110413]
[144.01132202 92.40220642]
[158.99975586 91.81330872]
[173.98818970 91.22441101]
[187.56112671 82.02074432]
[202.19818115 89.41592407]
[202.84201050 105.80242920]
[188.83029175 114.32322693]
[174.57708740 106.21284485]
[159.58865356 106.80174255]
[144.60021973 107.39064026]
[129.61178589 107.97953796]
[108.19726562 125.21176147]
[85.96383667 117.39757538]
[73.17424011 125.23505402]
[60.38463593 133.07254028]
[47.59503174 140.91001892]
[34.80542755 148.74749756]
[36.03070068 157.34437561]
[34.74714279 165.90492249]
[31.07781219 173.71459961]
[25.34425354 180.12611389]
[18.03834534 184.61302185]
[9.78015327 186.81301880]
[1.26529527 186.55709839]
[-6.79364109 183.88240051]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[7 26]
[10 23]
[11 22]
[12 21]
[13 20]
[35 71]
[36 70]
[37 69]
[38 68]
[39 67]
[43 53]
[44 52]
[45 51]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
