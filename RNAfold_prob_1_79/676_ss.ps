%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGCAUAAUAUAAAAAAAAAAAAUAUAAACAUAAAAAAAAAAAAUAUGAAAUGCAAAAAAAAAAACAUUCAGUUCG\
) } def
/len { sequence length } bind def

/coor [
[112.35967255 221.92755127]
[110.20310974 207.02644348]
[111.19217682 192.00260925]
[115.28363800 177.51283264]
[122.29863739 164.19053650]
[131.93049622 152.61813354]
[122.64409637 140.83837891]
[113.35768127 129.05862427]
[104.07127380 117.27886200]
[86.50125122 111.52902222]
[83.57075500 93.27584076]
[73.38874054 82.26100159]
[63.20672989 71.24616241]
[53.02471924 60.23132706]
[40.29148102 68.24252319]
[26.30290794 73.77735901]
[11.53544617 76.64733124]
[-3.50792837 76.75468445]
[-18.31484413 74.09576416]
[-32.38098526 68.76113129]
[-45.22726059 60.93247604]
[-56.41613388 50.87644577]
[-65.56652069 38.93554306]
[-72.36674500 25.51646996]
[-76.58521271 11.07627583]
[-78.07823944 -3.89321065]
[-76.79496765 -18.88213539]
[-72.77910614 -33.37998199]
[-66.16744232 -46.89295578]
[-57.18515396 -58.96081543]
[-46.13818741 -69.17253113]
[-33.40278625 -77.18029022]
[-19.41272163 -82.71135712]
[-4.64448786 -85.57735443]
[10.39891529 -85.68064880]
[25.20511436 -83.01773834]
[39.26981735 -77.67930603]
[52.11398315 -69.84719086]
[63.30014420 -59.78814697]
[72.44730377 -47.84477615]
[79.24391937 -34.42387390]
[83.45849609 -19.98254204]
[84.94748688 -5.01265430]
[83.66017151 9.97592354]
[79.64040375 24.47268677]
[73.02509308 37.98387909]
[64.03955841 50.04931641]
[74.22157288 61.06415176]
[84.40357971 72.07898712]
[94.58559418 83.09382629]
[104.85464478 82.92466736]
[113.49874878 88.47097778]
[117.62453461 97.87629700]
[115.85102844 107.99245453]
[125.13743591 119.77220917]
[134.42384338 131.55197144]
[143.71025085 143.33171082]
[157.21144104 136.66751099]
[171.80325317 132.95635986]
[186.84780884 132.36051941]
[201.68742371 134.90602112]
[215.67337036 140.48159790]
[228.19424438 148.84350586]
[238.70268250 159.62619019]
[246.73930359 172.35829163]
[251.95278931 186.48320007]
[254.11521912 201.38345337]
[253.13206482 216.40768433]
[249.04629517 230.89906311]
[242.03654480 244.22410583]
[232.40922546 255.80032349]
[220.58522034 265.12161255]
[207.08142090 271.78051758]
[192.48814392 275.48593140]
[177.44335938 276.07583618]
[162.60473633 273.52450562]
[148.62098694 267.94342041]
[136.10340881 259.57659912]
[125.59921265 248.78977966]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 57]
[7 56]
[8 55]
[9 54]
[11 50]
[12 49]
[13 48]
[14 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
