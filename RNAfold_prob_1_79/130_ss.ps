%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAACCACAAGAGAGGAGAGCAAACAGGAAAACCAUGAGCACUACCACAACUUGAAGGAAAAAAGUUUGCGUUCG\
) } def
/len { sequence length } bind def

/coor [
[-26.35399437 270.81060791]
[-32.63389206 284.43273926]
[-26.92930412 299.17156982]
[-33.39381027 313.59329224]
[-48.19213104 319.14172363]
[-62.54468918 312.52511597]
[-67.93636322 297.66894531]
[-61.16836929 283.38714600]
[-46.25603867 278.15283203]
[-39.97614288 264.53070068]
[-45.69054413 258.32467651]
[-49.40070724 250.71752930]
[-50.78176498 242.33940125]
[-49.70252991 233.88932800]
[-46.23775101 226.07696533]
[-40.66318130 219.56291199]
[-33.43368530 214.90292358]
[-25.14614296 212.50047302]
[-16.49019241 212.57188416]
[-8.19083214 215.12692261]
[1.55088818 203.72082520]
[11.29260921 192.31474304]
[13.67482185 177.61187744]
[28.52080536 172.14311218]
[38.26252747 160.73703003]
[48.00424576 149.33093262]
[57.74596786 137.92485046]
[67.48768616 126.51876068]
[77.22940826 115.11267090]
[70.91838074 89.17768860]
[90.65789032 66.54930878]
[84.37799072 52.92716217]
[70.68077087 43.90950012]
[71.91167450 27.55661392]
[86.80444336 20.69095039]
[100.03868866 30.37531662]
[98.00013733 46.64726639]
[104.28003693 60.26941681]
[105.29971313 45.30411530]
[101.31020355 30.84438324]
[105.58480072 16.46635056]
[116.82588959 6.53468418]
[131.62106323 4.06429100]
[145.47901917 9.80509567]
[154.19299316 22.01439095]
[155.11769104 36.98586273]
[147.97242737 50.17469025]
[134.92837524 57.57670593]
[125.06732178 68.87979126]
[139.14019775 63.68803787]
[141.66209412 48.53760529]
[151.43373108 36.68810272]
[165.82658386 31.32698822]
[180.96903992 33.89637375]
[192.78784180 43.70510483]
[198.10382080 58.11468506]
[195.48698425 73.24900818]
[185.64126587 85.03701782]
[171.21508789 90.30780029]
[156.08903503 87.64353943]
[144.33195496 77.76091003]
[130.25907898 82.95265961]
[133.27436829 94.83151245]
[131.93402100 106.63512421]
[126.67403412 116.86557770]
[118.41081238 124.31820679]
[108.39298248 128.22247314]
[98.01733398 128.31735229]
[88.63549805 124.85438538]
[78.89377594 136.26048279]
[69.15205383 147.66656494]
[59.41033554 159.07266235]
[49.66861725 170.47874451]
[39.92689514 181.88484192]
[36.84788895 197.40354919]
[22.69869804 202.05645752]
[12.95697784 213.46255493]
[3.21525693 224.86863708]
[7.90600729 247.24650574]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[20 78]
[21 77]
[22 76]
[24 74]
[25 73]
[26 72]
[27 71]
[28 70]
[29 69]
[31 38]
[32 37]
[49 62]
[50 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
