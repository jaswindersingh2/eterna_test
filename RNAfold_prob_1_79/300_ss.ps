%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAAAGUACAAGAUCUUCGGAUCGGUCUGGACGAGCAGGCUUCGGGCUGAGUCUGGACAAGUACAGGUACUCUUCG\
) } def
/len { sequence length } bind def

/coor [
[76.82280731 284.30065918]
[82.86914062 268.46151733]
[82.86914062 253.46151733]
[82.86914062 238.46151733]
[74.80386353 231.67143250]
[71.88804626 221.30792236]
[75.37053680 210.88551331]
[84.28507233 204.08589172]
[85.46195984 189.13212585]
[86.63884735 174.17835999]
[87.81573486 159.22460938]
[88.99261475 144.27084351]
[79.15419006 133.14695740]
[80.13469696 117.96495056]
[91.86915588 107.72092438]
[92.75222015 92.74694061]
[93.34111786 77.75850677]
[83.02366638 60.65194321]
[93.40637207 44.53157806]
[92.81747437 29.54314232]
[92.22857666 14.55470753]
[91.63967896 -0.43372783]
[91.05078125 -15.42216301]
[90.46188354 -30.41059875]
[89.57882690 -45.38458252]
[88.40193939 -60.33834457]
[87.22505188 -75.29210663]
[86.04816437 -90.24586487]
[84.87127686 -105.19962311]
[83.69438934 -120.15338135]
[82.51750946 -135.10714722]
[81.34062195 -150.06089783]
[80.16373444 -165.01466370]
[78.98684692 -179.96842957]
[77.51658630 -194.89619446]
[64.95160675 -204.48248291]
[62.92818451 -220.15670776]
[72.64677429 -232.61962891]
[88.34151459 -234.47721863]
[100.70099640 -224.62741089]
[102.39255524 -208.91390991]
[92.41262054 -196.65925598]
[96.43273163 -190.21743774]
[93.94060516 -181.14530945]
[95.11749268 -166.19154358]
[96.29438019 -151.23779297]
[97.47126770 -136.28402710]
[98.64815521 -121.33026886]
[99.82504272 -106.37651062]
[101.00192261 -91.42275238]
[102.17881012 -76.46898651]
[103.35569763 -61.51522827]
[104.53258514 -46.56147003]
[108.29669952 -39.96679688]
[105.45032501 -30.99949646]
[106.03922272 -16.01106071]
[106.62812042 -1.02262509]
[107.21701050 13.96581078]
[107.80590820 28.95424652]
[108.39480591 43.94268036]
[116.72044373 50.41089249]
[120.04088593 60.65194321]
[116.97026062 71.20304108]
[108.32955170 78.34740448]
[107.74065399 93.33583832]
[110.65671539 101.10056305]
[106.82292175 108.89781189]
[116.81039429 120.85139465]
[115.40383911 135.99986267]
[103.94638062 145.44772339]
[102.76949310 160.40148926]
[101.59260559 175.35525513]
[100.41571808 190.30900574]
[99.23883057 205.26277161]
[108.87672424 222.76119995]
[97.86914062 238.46151733]
[97.86914062 253.46151733]
[97.86914062 268.46151733]
[103.91548157 284.30065918]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[8 74]
[9 73]
[10 72]
[11 71]
[12 70]
[15 67]
[16 65]
[17 64]
[19 60]
[20 59]
[21 58]
[22 57]
[23 56]
[24 55]
[25 53]
[26 52]
[27 51]
[28 50]
[29 49]
[30 48]
[31 47]
[32 46]
[33 45]
[34 44]
[35 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
