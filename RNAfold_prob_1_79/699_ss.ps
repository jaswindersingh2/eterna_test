%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAUACACCAGAAACAGGAGUAAAGAGACCACAAAAAGAGGACUCAGACAGCACAAAAGAGCAGUCGCGUAGAUUCG\
) } def
/len { sequence length } bind def

/coor [
[97.70594025 232.64739990]
[97.11705017 217.65896606]
[96.52815247 202.67053223]
[85.45043945 192.78012085]
[84.63970184 177.58810425]
[95.08876801 166.03585815]
[94.49987030 151.04740906]
[93.91097260 136.05897522]
[80.28399658 130.79943848]
[69.80251312 120.62615204]
[55.94432068 126.36640167]
[51.41487885 141.33363342]
[38.29616547 149.84442139]
[22.78243256 147.88020325]
[12.19879246 136.36845398]
[11.54251480 120.74464417]
[21.12347412 108.38587189]
[36.41783524 105.12757111]
[50.20406723 112.50820923]
[64.06226349 106.76795959]
[63.43058014 99.93858337]
[64.08519745 93.11137390]
[66.00308990 86.52645874]
[69.11679077 80.41546631]
[73.31678772 74.99334717]
[78.45534515 70.45081329]
[84.35172272 66.94765472]
[80.85003662 52.36210632]
[77.34835815 37.77655411]
[66.60325623 26.16391945]
[71.15564728 11.98206711]
[67.65396881 -2.60348201]
[53.05360794 -7.58675623]
[43.48307800 -19.68669319]
[41.99629593 -35.04224777]
[49.06769562 -48.75351715]
[62.44081116 -56.44528580]
[77.84833527 -55.66313553]
[90.37377930 -46.65665436]
[96.02032471 -32.29977036]
[92.98617554 -17.17371750]
[82.23951721 -6.10516214]
[85.74119568 8.48038673]
[96.23583984 19.04976654]
[91.93390656 34.27487564]
[95.43558502 48.86042404]
[98.93727112 63.44597244]
[120.90998077 69.99835205]
[134.66250610 88.34506989]
[149.55853271 86.58201599]
[164.45455933 84.81895447]
[177.24964905 75.51324463]
[190.79812622 81.70098114]
[205.69415283 79.93792725]
[213.15834045 66.33404541]
[227.20748901 59.74608612]
[242.43939209 62.70725250]
[252.99710083 74.07891083]
[254.82093811 89.48842621]
[247.20960999 103.01052856]
[233.08982849 109.44569397]
[217.89093018 106.31947327]
[207.45721436 94.83395386]
[192.56118774 96.59700775]
[180.83155823 105.77661133]
[166.21762085 99.71498108]
[151.32159424 101.47804260]
[136.42556763 103.24109650]
[132.07833862 117.55867004]
[122.36064911 128.93661499]
[108.89940643 135.47007751]
[109.48830414 150.45851135]
[110.07720184 165.44696045]
[121.40044403 176.14378357]
[121.78414917 191.35256958]
[111.51658630 202.08163452]
[112.10548401 217.07006836]
[112.69438171 232.05850220]
[115.63957977 251.21510315]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 78]
[2 77]
[3 76]
[6 73]
[7 72]
[8 71]
[10 20]
[11 19]
[27 47]
[28 46]
[29 45]
[31 43]
[32 42]
[49 68]
[50 67]
[51 66]
[53 64]
[54 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
