%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGUUCAAGAUUAAAAAAAAAAAGAUUAAGUAUAAAAAAAAAAAGUAUAAGAGCAAAAAAAAAAAGUAGGUUUUCG\
) } def
/len { sequence length } bind def

/coor [
[30.58617210 117.63817596]
[28.43588448 102.82174683]
[29.41289711 87.88200378]
[33.47451782 73.47180939]
[40.44325256 60.22087860]
[50.01457214 48.70826721]
[40.72816467 36.92851257]
[31.44175529 25.14875793]
[22.15534592 13.36900425]
[9.20109749 20.97828865]
[-4.66865206 26.75269890]
[-19.19551849 30.58466148]
[-34.10887146 32.40278625]
[-49.13089371 32.17320633]
[-63.98172379 29.90019417]
[-78.38470459 25.62609863]
[-92.07151794 19.43054390]
[-104.78718567 11.42894554]
[-116.29482269 1.77037132]
[-126.38004303 -9.36524677]
[-134.85498047 -21.77045822]
[-141.56173706 -35.21416092]
[-146.37538147 -49.44590759]
[-149.20622253 -64.20056915]
[-150.00154114 -79.20327759]
[-148.74650574 -94.17453766]
[-145.46450806 -108.83544922]
[-140.21669006 -122.91287994]
[-133.10081482 -136.14459229]
[-124.24943542 -148.28405762]
[-113.82745361 -159.10516357]
[-102.02902985 -168.40628052]
[-89.07395935 -176.01416016]
[-75.20359039 -181.78707886]
[-60.67630768 -185.61746216]
[-45.76275635 -187.43397522]
[-30.74076080 -187.20277405]
[-15.89017677 -184.92814636]
[-1.48765790 -180.65249634]
[12.19848442 -174.45545959]
[24.91328430 -166.45248413]
[36.41987610 -156.79266357]
[46.50389481 -145.65596008]
[54.97748566 -133.24983215]
[61.68278885 -119.80539703]
[66.49488831 -105.57313538]
[69.32413483 -90.81816101]
[70.11782837 -75.81536865]
[68.86118317 -60.84424591]
[65.57759857 -46.18368912]
[60.32825470 -32.10682678]
[53.21094131 -18.87589073]
[44.35824966 -6.73737383]
[33.93510056 4.08259487]
[43.22150803 15.86234856]
[52.50791931 27.64210320]
[61.79432678 39.42185593]
[75.22322845 32.80255508]
[89.73484802 29.11973763]
[104.69505310 28.53433418]
[119.45008850 31.07192993]
[133.35516357 36.62163162]
[145.80265808 44.94092560]
[156.24859619 55.66625977]
[164.23651123 68.32894135]
[169.41734314 82.37563324]
[171.56468201 97.19249725]
[170.58468628 112.13204193]
[166.52020264 126.54142761]
[159.54882812 139.79096985]
[149.97521973 151.30168152]
[138.21772766 160.57054138]
[124.79014587 167.19250488]
[110.27925110 170.87821960]
[95.31916046 171.46659851]
[80.56362152 168.93194580]
[66.65744019 163.38500977]
[54.20830154 155.06819153]
[43.76023102 144.34494019]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 57]
[7 56]
[8 55]
[9 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
