%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:50:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAAGCGAAGUACAGAUCCAGGAAACUGAGAUCAAAAGCUGAGACGAAAGUCCAGCAGUACAACGCGGUGUACUUCG\
) } def
/len { sequence length } bind def

/coor [
[82.02022552 261.03576660]
[73.45546722 273.97503662]
[58.90916443 279.37731934]
[43.97467422 275.16537476]
[34.39460754 262.95870972]
[33.85269928 247.45111084]
[42.55731964 234.60552979]
[57.16136551 229.36134338]
[61.23297119 214.92451477]
[65.30458069 200.48768616]
[69.37619019 186.05085754]
[73.44779205 171.61402893]
[77.51940155 157.17720032]
[81.59100342 142.74037170]
[85.66261292 128.30354309]
[89.73422241 113.86671448]
[83.72298431 100.12389374]
[70.35788727 93.31404114]
[56.99279022 86.50418091]
[43.62769318 79.69432068]
[30.13146973 73.14818573]
[16.50932312 66.86828613]
[2.88717484 60.58839035]
[-13.38477516 62.62693787]
[-23.06914330 49.39270020]
[-16.20347977 34.49992752]
[0.14940754 33.26902771]
[9.16707039 46.96624374]
[22.78921890 53.24613953]
[36.41136551 59.52603531]
[44.00441742 59.46416092]
[50.43755341 66.32922363]
[63.80265045 73.13908386]
[77.16774750 79.94893646]
[90.53284454 86.75879669]
[82.92707062 73.83006287]
[89.06185150 60.14194489]
[103.77362823 57.21555328]
[114.67968750 67.51399231]
[112.60051727 82.36926270]
[122.34223175 70.96317291]
[132.08395386 59.55708694]
[141.82568359 48.15099716]
[145.14196777 39.34664917]
[152.18070984 36.49808121]
[162.36273193 25.48324394]
[172.54473877 14.46840572]
[175.63427734 -1.63708425]
[191.21340942 -6.75785971]
[203.25567627 4.37389374]
[199.37301636 20.30678177]
[183.55957031 24.65041733]
[173.37756348 35.66525269]
[163.19555664 46.68009186]
[153.23176575 57.89271545]
[143.49005127 69.29880524]
[133.74832153 80.70489502]
[124.00660706 92.11098480]
[138.54406738 88.41472626]
[153.34410095 90.85575867]
[165.92459106 99.02468109]
[174.17562866 111.55146790]
[176.71340942 126.33523560]
[173.11230469 140.89656067]
[163.97628784 152.79333496]
[150.83757019 160.03031921]
[135.89967346 161.39378357]
[121.66784668 156.65507507]
[110.52896881 146.60891724]
[104.35114288 132.94018555]
[104.17105103 117.93832397]
[100.09944153 132.37515259]
[96.02783203 146.81198120]
[91.95623016 161.24880981]
[87.88462067 175.68563843]
[83.81301880 190.12246704]
[79.74140930 204.55929565]
[75.66979980 218.99612427]
[71.59819794 233.43295288]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 79]
[9 78]
[10 77]
[11 76]
[12 75]
[13 74]
[14 73]
[15 72]
[16 71]
[17 35]
[18 34]
[19 33]
[20 32]
[21 30]
[22 29]
[23 28]
[40 58]
[41 57]
[42 56]
[43 55]
[45 54]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
