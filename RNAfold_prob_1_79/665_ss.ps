%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun 15 13:51:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAUAUGAAGAUGAAAAAAAAAAACAUCAACAUCAAAAAAAAAAAGAUGAACAUAAAAAAAAAAAACUCCUUAUUCG\
) } def
/len { sequence length } bind def

/coor [
[117.97625732 191.36936951]
[113.90464783 176.93254089]
[109.83304596 162.49571228]
[98.01785278 163.23348999]
[86.27206421 161.75715637]
[75.00695801 158.11842346]
[64.61697388 152.44467163]
[55.46591949 144.93460083]
[47.87421417 135.85115051]
[42.10767746 125.51238251]
[38.36822510 114.28030396]
[36.78679657 102.54820251]
[21.83303452 101.37131500]
[6.87927532 100.19443512]
[-8.07448483 99.01754761]
[-16.17464066 112.00392151]
[-29.38790131 119.72845459]
[-44.67795563 120.41609192]
[-58.53126144 113.90882111]
[-67.76442719 101.70197296]
[-70.25574493 86.60058594]
[-65.43272400 72.07484436]
[-54.40365982 61.46266556]
[-39.70294952 57.20264816]
[-24.70871162 60.27370834]
[-12.86651134 69.97014618]
[-6.89759827 84.06378174]
[8.05616188 85.24066925]
[23.00992203 86.41755676]
[37.96368027 87.59444427]
[50.33059692 60.81642151]
[73.49415588 42.55574036]
[102.41930389 36.78173065]
[104.76581573 21.96640587]
[107.11233521 7.15108061]
[109.45885468 -7.66424465]
[97.14804077 -16.75833130]
[90.48402405 -30.53691864]
[90.99814606 -45.83378983]
[98.57227325 -59.13383484]
[111.46591949 -67.38079834]
[126.71622467 -68.67959595]
[140.81877136 -62.73176575]
[150.53291321 -50.90407944]
[153.62638855 -35.91445160]
[149.38836670 -21.20738792]
[138.79267883 -10.16246605]
[124.27417755 -5.31772757]
[121.92765808 9.49759769]
[119.58114624 24.31292343]
[117.23462677 39.12824631]
[124.98626709 41.87866974]
[132.31556702 45.61151886]
[139.09863281 50.26369858]
[145.22080994 55.75657272]
[150.57862854 61.99729538]
[155.08149719 68.88037872]
[158.65333557 76.28948212]
[161.23374939 84.09936523]
[162.77912903 92.17800903]
[163.26335144 100.38887787]
[162.67822266 108.59317017]
[161.03364563 116.65220642]
[158.35742188 124.42977905]
[154.69477844 131.79440308]
[150.10762024 138.62161255]
[144.67349243 144.79600525]
[138.48425293 150.21319580]
[131.64450073 154.78163147]
[124.26987457 158.42410278]
[128.34147644 172.86093140]
[132.41308594 187.29776001]
[147.01713562 192.54194641]
[155.72175598 205.38752747]
[155.17984009 220.89514160]
[145.59977722 233.10177612]
[130.66528320 237.31373596]
[116.11898804 231.91143799]
[107.55422974 218.97218323]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 70]
[12 30]
[13 29]
[14 28]
[15 27]
[33 51]
[34 50]
[35 49]
[36 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
